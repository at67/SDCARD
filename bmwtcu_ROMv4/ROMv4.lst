* source: Core/ROMv4_bmwtcu.asm.py
                                          84    enableListing()
                                          85    #-----------------------------------------------------------------------
                                          86    #
                                          87    #  Start of core
                                          88    #
                                          89    #-----------------------------------------------------------------------
                                          90
                                          91    # Pre-loading the formal interface as a way to get warnings when
                                          92    # accidentally redefined with a different value
                                          93    loadBindings('interface.json')
                                          94
                                          95    # ROM type (see also Docs/GT1-files.txt)
                                          96    romTypeValue = symbol('romTypeValue_ROMv4')
                                          97
                                          98    # Gigatron clock
                                          99    cpuClock = 6.250e+06
                                          100
                                          101   # Output pin assignment for VGA
                                          102   R, G, B, hSync, vSync = 1, 4, 16, 64, 128
                                          103   syncBits = hSync+vSync # Both pulses negative
                                          104
                                          105   # When the XOUT register is in the circuit, the rising edge triggers its update.
                                          106   # The loop can therefore not be agnostic to the horizontal pulse polarity.
                                          107   assert syncBits & hSync != 0
                                          108
                                          109   # VGA 640x480 defaults (to be adjusted below!)
                                          110   vFront = 10     # Vertical front porch
                                          111   vPulse = 2      # Vertical sync pulse
                                          112   vBack  = 33     # Vertical back porch
                                          113   vgaLines = vFront + vPulse + vBack + 480
                                          114   vgaClock = 25.175e+06
                                          115
                                          116   # Video adjustments for Gigatron
                                          117   # 1. Our clock is (slightly) slower than 1/4th VGA clock. Not all monitors will
                                          118   #    accept the decreased frame rate, so we restore the frame rate to above
                                          119   #    minimum 59.94 Hz by cutting some lines from the vertical front porch.
                                          120   vFrontAdjust = vgaLines - int(4 * cpuClock / vgaClock * vgaLines)
                                          121   vFront -= vFrontAdjust
                                          122   # 2. Extend vertical sync pulse so we can feed the game controller the same
                                          123   #    signal. This is needed for controllers based on the 4021 instead of 74165
                                          124   vPulseExtension = max(0, 8-vPulse)
                                          125   vPulse += vPulseExtension
                                          126   # 3. Borrow these lines from the back porch so the refresh rate remains
                                          127   #    unaffected
                                          128   vBack -= vPulseExtension
                                          129
                                          130   # Start value of vertical blank counter
                                          131   videoYline0 = 1-2*(vFront+vPulse+vBack-2)
                                          132
                                          133   # Mismatch between video lines and sound channels
                                          134   soundDiscontinuity = (vFront+vPulse+vBack) % 4
                                          135
                                          136   # QQVGA resolution
                                          137   qqVgaWidth      = 160
                                          138   qqVgaHeight     = 120
                                          139
                                          140   # Game controller bits (actual controllers in kit have negative output)
                                          141   # +----------------------------------------+
                                          142   # |       Up                        B*     |
                                          143   # |  Left    Right               B     A*  |
                                          144   # |      Down      Select Start     A      |
                                          145   # +----------------------------------------+ *=Auto fire
                                          146   buttonRight     = 1
                                          147   buttonLeft      = 2
                                          148   buttonDown      = 4
                                          149   buttonUp        = 8
                                          150   buttonStart     = 16
                                          151   buttonSelect    = 32
                                          152   buttonB         = 64
                                          153   buttonA         = 128
                                          154
                                          155   #-----------------------------------------------------------------------
                                          156   #
                                          157   #  RAM page 0: zero-page variables
                                          158   #
                                          159   #-----------------------------------------------------------------------
                                          160
                                          161   # Memory size in pages from auto-detect
                                          162   memSize         = zpByte()
                                          163
                                          164   # The current channel number for sound generation. Advanced every scan line
                                          165   # and independent of the vertical refresh to maintain constant oscillation.
                                          166   channel         = zpByte()
                                          167
                                          168   # Next sound sample being synthesized
                                          169   sample          = zpByte()
                                          170   # To save one instruction in the critical inner loop, `sample' is always
                                          171   # reset with its own address instead of, for example, the value 0. Compare:
                                          172   # 1 instruction reset
                                          173   #       st sample,[sample]
                                          174   # 2 instruction reset:
                                          175   #       ld 0
                                          176   #       st [sample]
                                          177   # The difference is not audible. This is fine when the reset/address
                                          178   # value is low and doesn't overflow with 4 channels added to it.
                                          179   # There is an alternative, but it requires pull-down diodes on the data bus:
                                          180   #       st [sample],[sample]
                                          181   assert 4*63 + sample < 256
                                          182   # We pin this reset/address value to 3, so `sample' swings from 3 to 255
                                          183   assert sample == 3
                                          184
                                          185   # Former bootCount and bootCheck (<= ROMv3)
                                          186   zpByte()                   # Recycled and still unused. Candidate future uses:
                                          187                              # - SPI control state (to remember banking state)
                                          188                              # - Video driver high address (for alternative video modes)
                                          189                              # - v6502: ADH offset ("MMU")
                                          190                              # - mapping for for matrix keyboards (C16, C64, VIC20...)
                                          191   vCPUselect      = zpByte() # Active interpreter page
                                          192
                                          193   # Entropy harvested from SRAM startup and controller input
                                          194   entropy         = zpByte(3)
                                          195
                                          196   # Visible video
                                          197   videoY          = zpByte() # Counts up from 0 to 238 in steps of 2
                                          198                              # Counts up (and is odd) during vertical blank
                                          199   frameX          = zpByte() # Starting byte within page
                                          200   frameY          = zpByte() # Page of current pixel row (updated by videoA)
                                          201   nextVideo       = zpByte() # Jump offset to scan line handler (videoA, B, C...)
                                          202   videoModeD      = zpByte() # Handler for every 4th line (pixel burst or vCPU)
                                          203
                                          204   # Vertical blank (reuse some variables used in the visible part)
                                          205   videoSync0      = frameX   # Vertical sync type on current line (0xc0 or 0x40)
                                          206   videoSync1      = frameY   # Same during horizontal pulse
                                          207   videoPulse      = nextVideo # Used for pulse width modulation
                                          208
                                          209   # Frame counter is good enough as system clock
                                          210   frameCount      = zpByte(1)
                                          211
                                          212   # Serial input (game controller)
                                          213   serialRaw       = zpByte() # New raw serial read
                                          214   serialLast      = zpByte() # Previous serial read
                                          215   buttonState     = zpByte() # Clearable button state
                                          216   resetTimer      = zpByte() # After 2 seconds of holding 'Start', do a soft reset
                                          217                              # XXX move to page 1 to free up space
                                          218
                                          219   # Extended output (blinkenlights in bit 0:3 and audio in bit 4:7). This
                                          220   # value must be present in AC during a rising hSync edge. It then gets
                                          221   # copied to the XOUT register by the hardware. The XOUT register is only
                                          222   # accessible in this indirect manner because it isn't part of the core
                                          223   # CPU architecture.
                                          224   xout            = zpByte()
                                          225   xoutMask        = zpByte() # The blinkenlights and sound on/off state
                                          226
                                          227   # vCPU interpreter
                                          228   vTicks          = zpByte()  # Interpreter ticks are units of 2 clocks
                                          229   vPC             = zpByte(2) # Interpreter program counter, points into RAM
                                          230   vAC             = zpByte(2) # Interpreter accumulator, 16-bits
                                          231   vLR             = zpByte(2) # Return address, for returning after CALL
                                          232   vSP             = zpByte(1) # Stack pointer
                                          233   vTmp            = zpByte()
                                          234   vReturn         = zpByte()  # Return into video loop (in page of vBlankStart)
                                          235
                                          236   videoModeB      = zpByte(1) # Pixel burst or vCPU
                                          237   videoModeC      = zpByte(1) # Pixel burst or vCPU
                                          238
                                          239   # Versioning for GT1 compatibility
                                          240   # Please refer to Docs/GT1-files.txt for interpreting this variable
                                          241   romType         = zpByte(1)
                                          242
                                          243   # The low 3 bits are repurposed to select the actively updated sound channels.
                                          244   # Valid bit combinations are:
                                          245   #  xxxxx011     Default after reset: 4 channels (page 1,2,3,4)
                                          246   #  xxxxx001     2 channels at double update rate (page 1,2)
                                          247   #  xxxxx000     1 channel at quadruple update rate (page 1)
                                          248   # The main application for this is to free up the high bytes of page 2,3,4.
                                          249   channelMask = symbol('channelMask_v4')
                                          250   assert romType == channelMask
                                          251
                                          252   # SYS function arguments and results/scratch
                                          253   sysFn           = zpByte(2)
                                          254   sysArgs         = zpByte(8)
                                          255
                                          256   # Play sound if non-zero, count down and stop sound when zero
                                          257   soundTimer      = zpByte()
                                          258
                                          259   # Fow now the LED state machine itself is hard-coded in the program ROM
                                          260   ledTimer        = zpByte() # Number of ticks until next LED change
                                          261   ledState_v2     = zpByte() # Current LED state
                                          262   ledTempo        = zpByte() # Next value for ledTimer after LED state change
                                          263
                                          264   # All bytes above, except 0x80, are free for temporary/scratch/stacks etc
                                          265   userVars        = zpByte(0)
                                          266
                                          267   # TODO: Give this an address < 0x30
                                          268   zpReset(0x81)
                                          269   ctrlBits        = zpByte()
                                          270
                                          271   #-----------------------------------------------------------------------
                                          272   #
                                          273   #  RAM page 1: video line table
                                          274   #
                                          275   #-----------------------------------------------------------------------
                                          276
                                          277   # Byte 0-239 define the video lines
                                          278   videoTable      = 0x0100 # Indirection table: Y[0] dX[0]  ..., Y[119] dX[119]
                                          279
                                          280   vReset          = 0x01f0
                                          281
                                          282   #resetTimer     = 0x01f8 XXX Future. Also change Easter Egg detection in main
                                          283
                                          284   # Highest bytes are for sound channel variables
                                          285   wavA = 250      # Waveform modulation with `adda'
                                          286   wavX = 251      # Waveform modulation with `xora'
                                          287   keyL = 252      # Frequency low 7 bits (bit7 == 0)
                                          288   keyH = 253      # Frequency high 8 bits
                                          289   oscL = 254      # Phase low 7 bits
                                          290   oscH = 255      # Phase high 8 bits
                                          291
                                          292   #-----------------------------------------------------------------------
                                          293   #  Memory layout
                                          294   #-----------------------------------------------------------------------
                                          295
                                          296   userCode = 0x0200       # Application vCPU code
                                          297   soundTable = 0x0700     # Wave form tables (doubles as right-shift-2 table)
                                          298   screenMemory = 0x0800   # Default start of screen memory: 0x0800 to 0x7fff
                                          299
                                          300   #-----------------------------------------------------------------------
                                          301   #  Application definitions
                                          302   #-----------------------------------------------------------------------
                                          303
                                          304   maxTicks = 28/2                 # Duration of vCPU's slowest virtual opcode (ticks)
                                          305   minTicks = 14/2                 # vcPU's fastest instruction
                                          306   v6502_maxTicks = 38/2           # Max duration of v6502 processing phase (ticks)
                                          307
                                          308   runVcpu_overhead = 5            # Caller overhead (cycles)
                                          309   vCPU_overhead = 9               # Callee overhead of jumping in and out (cycles)
                                          310   v6502_overhead = 11             # Callee overhead for v6502 (cycles)
                                          311
                                          312   v6502_adjust = (v6502_maxTicks - maxTicks) + (v6502_overhead - vCPU_overhead)/2
                                          313   assert v6502_adjust >= 0        # v6502's overhead is a bit more than vCPU
                                          314
                                          315   def runVcpu(n, ref=None, returnTo=None):
                                          316     """Macro to run interpreter for exactly n cycles. Returns 0 in AC.
                                          317
                                          318     - `n' is the number of available Gigatron cycles including overhead.
                                          319       This is converted into interpreter ticks and takes into account
                                          320       the vCPU calling overheads. A `nop' is inserted when necessary
                                          321       for alignment between cycles and ticks.
                                          322     - `ref' is emitted as a comment in the disassembly
                                          323     - `returnTo' is where program flow continues after return. If not set
                                          324        explicitely, it will be the first instruction behind the expansion.
                                          325     - If another interpreter than vCPU is active (v6502...), that one
                                          326       must adjust for the timing differences, because runVcpu wouldn't know."""
                                          327
                                          328     if returnTo is None:
                                          329       # Return to next instruction
                                          330       returnTo = pc() + 5
                                          331
                                          332     overhead = runVcpu_overhead + vCPU_overhead
                                          333     if returnTo == 0x100: # Special case for videoZ
                                          334       overhead -= 2
                                          335
                                          336     if n is None:
                                          337       # Set to maximum time slice
                                          338       n = (128 + minTicks-1) * 2 + overhead
                                          339
                                          340     comment = 'Run vCPU for %s cycles gross' % n
                                          341     if ref:
                                          342       comment += ' (%s)' % ref
                                          343
                                          344     if n % 2 != (runVcpu_overhead + vCPU_overhead) % 2:
                                          345       nop()                       # tick alignment
                                          346       comment = C(comment)
                                          347       overhead += 1
                                          348
                                          349     if returnTo != 0x100:
                                          350       ld(returnTo&255)            #0
                                          351       comment = C(comment)
                                          352       st([vReturn])               #1
                                          353
                                          354     n -= overhead
                                          355
                                          356     print('runVcpu at $%04x net cycles %3s info %s' % (pc(), n, ref))
                                          357     n -= 2*maxTicks
                                          358
                                          359     assert n >= 0 and n % 2 == 0
                                          360     n /= 2
                                          361     assert n >= v6502_adjust
                                          362
                                          363     ld([vCPUselect],Y)            #2
                                          364     comment = C(comment)
                                          365     jmp(Y,'ENTER')                #3
                                          366     ld(n)                         #4
                                          367   assert runVcpu_overhead ==       5
                                          368
                                          369   #-----------------------------------------------------------------------
                                          370   #       v6502 definitions
                                          371   #-----------------------------------------------------------------------
                                          372
                                          373   # Registers are zero page variables
                                          374   v6502_PCL       = vLR+0         # Program Counter Low
                                          375   v6502_PCH       = vLR+1         # Program Counter High
                                          376   v6502_S         = vSP           # Stack Pointer (kept as "S+1")
                                          377   v6502_A         = vAC+0         # Accumulator
                                          378   v6502_BI        = vAC+1         # B Input Register (used by SBC)
                                          379   v6502_ADL       = sysArgs+0     # Low Address Register
                                          380   v6502_ADH       = sysArgs+1     # High Address Register
                                          381   v6502_IR        = sysArgs+2     # Instruction Register
                                          382   v6502_P         = sysArgs+3     # Processor Status Register (V flag in bit 7)
                                          383   v6502_Qz        = sysArgs+4     # Quick Status Register for Z flag
                                          384   v6502_Qn        = sysArgs+5     # Quick Status Register for N flag
                                          385   v6502_X         = sysArgs+6     # Index Register X
                                          386   v6502_Y         = sysArgs+7     # Index Register Y
                                          387   v6502_Tmp       = vTmp          # Scratch (may be clobbered outside v6502)
                                          388
                                          389   # MOS 6502 definitions for P register
                                          390   v6502_Cflag = 1                 # Carry Flag (unsigned overflow)
                                          391   v6502_Zflag = 2                 # Zero Flag (all bits zero)
                                          392   v6502_Iflag = 4                 # Interrupt Enable Flag (1=Disable)
                                          393   v6502_Dflag = 8                 # Decimal Enable Flag (aka BCD mode, 1=Enable)
                                          394   v6502_Bflag = 16                # Break (or PHP) Instruction Flag
                                          395   v6502_Uflag = 32                # Unused (always 1)
                                          396   v6502_Vflag = 64                # Overflow Flag (signed overflow)
                                          397   v6502_Nflag = 128               # Negative Flag (bit 7 of result)
                                          398
                                          399   # In emulation it is much faster to keep the V flag in bit 7
                                          400   # This can be corrected when importing/exporting with PHP, PLP, etc
                                          401   v6502_Vemu = 128
                                          402
                                          403   # On overflow:
                                          404   #       """Overflow is set if two inputs with the same sign produce
                                          405   #          a result with a different sign. Otherwise it is clear."""
                                          406   # Formula (without carry/borrow in!):
                                          407   #       (A ^ (A+B)) & (B ^ (A+B)) & 0x80
                                          408   # References:
                                          409   #       http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
                                          410   #       http://6502.org/tutorials/vflag.html
                                          411
                                          412   # Memory layout
                                          413   v6502_Stack     = 0x0000        # 0x0100 is already used in the Gigatron
                                          414   #v6502_NMI      = 0xfffa
                                          415   #v6502_RESET    = 0xfffc
                                          416   #v6502_IRQ      = 0xfffe
                                          417
                                          418   #-----------------------------------------------------------------------
                                          419   #
                                          420   #  $0000 ROM page 0: Boot
                                          421   #
                                          422   #-----------------------------------------------------------------------
                                          423
                                          424   align(0x100, 0x100)
                                          425
                                          426   # Give a first sign of life that can be checked with a voltmeter
              address
              |    encoding
              |    |     instruction
              |    |     |    operands
              |    |     |    |
              V    V     V    V
              0000 0000  ld   $00         427   ld(0b0000)                      # LEDs |OOOO|
              0001 1880  ld   $80,out     428   ld(syncBits^hSync, OUT)         # Prepare XOUT update, hSync goes down, RGB to black
              0002 18c0  ld   $c0,out     429   ld(syncBits, OUT)               # hSync goes up, updating XOUT
                                          430
                                          431   # Setup I/O and RAM expander
              0003 c17c  ctrl $7c         432   ctrl(0b01111100)                # SCLK=0; Disable SPI slaves; Bank=01; Enable RAM
              0004 007c  ld   $7c         433   ld(  0b01111100)                # Keep copy in zero page
              0005 c281  st   [$81]       434   st([ctrlBits])
                                          435
                                          436   # Simple RAM test and size check by writing to [1<<n] and see if [0] changes or not.
              0006 0001  ld   $01         437   ld(1)                           # Quick RAM test and count
                                          438   label('.countMem0')
.countMem0:   0007 d601  st   [$01],y     439   st([memSize],Y)                 # Store in RAM and load AC in Y
              0008 00ff  ld   $ff         440   ld(255)
              0009 6900  xora [y,$00]     441   xora([Y,0])                     # Invert value from memory
              000a ca00  st   [y,$00]     442   st([Y,0])                       # Test RAM by writing the new value
              000b c200  st   [$00]       443   st([0])                         # Copy result in [0]
              000c 6900  xora [y,$00]     444   xora([Y,0])                     # Read back and compare if written ok
              000d ec0d  bne  $000d       445   bne(pc())                       # Loop forever on RAM failure here
              000e 00ff  ld   $ff         446   ld(255)
              000f 6900  xora [y,$00]     447   xora([Y,0])                     # Invert memory value again
              0010 ca00  st   [y,$00]     448   st([Y,0])                       # To restore original value
              0011 6100  xora [$00]       449   xora([0])                       # Compare with inverted copy
              0012 f016  beq  .countMem1  450   beq('.countMem1')               # If equal, we wrapped around
              0013 0101  ld   [$01]       451   ld([memSize])
              0014 fc07  bra  .countMem0  452   bra('.countMem0')               # Loop to test next address line
              0015 8200  adda ac          453   adda(AC)                        # Executes in the branch delay slot!
                                          454   label('.countMem1')
                                          455
                                          456   # Momentarily wait to allow for debouncing of the reset switch by spinning
                                          457   # roughly 2^15 times at 2 clocks per loop: 6.5ms@10MHz to 10ms@6.3MHz
                                          458   # Real-world switches normally bounce shorter than that.
                                          459   # "[...] 16 switches exhibited an average 1557 usec of bouncing, with,
                                          460   #  as I said, a max of 6200 usec" (From: http://www.ganssle.com/debouncing.htm)
                                          461   # Relevant for the breadboard version, as the kit doesn't have a reset switch.
                                          462
.countMem1:   0016 00ff  ld   $ff         463   ld(255)                         # Debounce reset button
                                          464   label('.debounce')
.debounce:    0017 c200  st   [$00]       465   st([0])
              0018 ec18  bne  $0018       466   bne(pc())
              0019 a001  suba $01         467   suba(1)                         # Branch delay slot
              001a 0100  ld   [$00]       468   ld([0])
              001b ec17  bne  .debounce   469   bne('.debounce')
              001c a001  suba $01         470   suba(1)                         # Branch delay slot
                                          471
                                          472   # Update LEDs (memory is present and counted, reset is stable)
              001d 0001  ld   $01         473   ld(0b0001)                      # LEDs |*OOO|
              001e 1880  ld   $80,out     474   ld(syncBits^hSync, OUT)
              001f 18c0  ld   $c0,out     475   ld(syncBits, OUT)
                                          476
                                          477   # Scan the entire RAM space to collect entropy for a random number generator.
                                          478   # The 16-bit address space is scanned, even if less RAM was detected.
              0020 0000  ld   $00         479   ld(0)                           # Collect entropy from RAM
              0021 d218  st   [$18],x     480   st([vAC+0], X)
              0022 d619  st   [$19],y     481   st([vAC+1], Y)
                                          482   label('.initEnt0')
.initEnt0:    0023 0106  ld   [$06]       483   ld([entropy+0])
              0024 f427  bge  .initEnt1   484   bpl('.initEnt1')
              0025 8d00  adda [y,x]       485   adda([Y,X])
              0026 60bf  xora $bf         486   xora(191)
                                          487   label('.initEnt1')
.initEnt1:    0027 c206  st   [$06]       488   st([entropy+0])
              0028 0107  ld   [$07]       489   ld([entropy+1])
              0029 f42c  bge  .initEnt2   490   bpl('.initEnt2')
              002a 8106  adda [$06]       491   adda([entropy+0])
              002b 60c1  xora $c1         492   xora(193)
                                          493   label('.initEnt2')
.initEnt2:    002c c207  st   [$07]       494   st([entropy+1])
              002d 8108  adda [$08]       495   adda([entropy+2])
              002e c208  st   [$08]       496   st([entropy+2])
              002f 0118  ld   [$18]       497   ld([vAC+0])
              0030 8001  adda $01         498   adda(1)
              0031 ec23  bne  .initEnt0   499   bne('.initEnt0')
              0032 d218  st   [$18],x     500   st([vAC+0], X)
              0033 0119  ld   [$19]       501   ld([vAC+1])
              0034 8001  adda $01         502   adda(1)
              0035 ec23  bne  .initEnt0   503   bne('.initEnt0')
              0036 d619  st   [$19],y     504   st([vAC+1], Y)
                                          505
                                          506   # Update LEDs
              0037 0003  ld   $03         507   ld(0b0011)                      # LEDs |**OO|
              0038 1880  ld   $80,out     508   ld(syncBits^hSync, OUT)
              0039 18c0  ld   $c0,out     509   ld(syncBits, OUT)
                                          510
                                          511   # vCPU reset handler
              003a 00ee  ld   $ee         512   ld((vReset&255)-2)              # Setup vCPU reset handler
              003b c216  st   [$16]       513   st([vPC])
              003c 9002  adda $02,x       514   adda(2, X)
              003d 0001  ld   $01         515   ld(vReset>>8)
              003e d617  st   [$17],y     516   st([vPC+1], Y)
              003f dc59  st   $59,[y,x++] 517   st('LDI',             [Y,Xpp])
              0040 dc7e  st   $7e,[y,x++] 518   st('SYS_Reset_38',    [Y,Xpp])
              0041 dc2b  st   $2b,[y,x++] 519   st('STW',             [Y,Xpp])
              0042 dc22  st   $22,[y,x++] 520   st(sysFn,             [Y,Xpp])
              0043 dcb4  st   $b4,[y,x++] 521   st('SYS',             [Y,Xpp])
              0044 dcfb  st   $fb,[y,x++] 522   st(256-38/2+maxTicks, [Y,Xpp])
              0045 dcb4  st   $b4,[y,x++] 523   st('SYS',             [Y,Xpp])  # SYS_Exec_88
              0046 dce2  st   $e2,[y,x++] 524   st(256-88/2+maxTicks, [Y,Xpp])
                                          525
              0047 0002  ld   $02         526   ld(hi('ENTER'))                 # Active interpreter (vCPU,v6502) = vCPU
              0048 c205  st   [$05]       527   st([vCPUselect])
                                          528
              0049 00ff  ld   $ff         529   ld(255)                         # Setup serial input
              004a c20e  st   [$0e]       530   st([frameCount])
              004b c20f  st   [$0f]       531   st([serialRaw])
              004c c210  st   [$10]       532   st([serialLast])
              004d c211  st   [$11]       533   st([buttonState])
              004e c212  st   [$12]       534   st([resetTimer])                # resetTimer<0 when entering Main.gcl
                                          535
              004f 0007  ld   $07         536   ld(0b0111)                      # LEDs |***O|
                                          537
              0050 1880  ld   $80,out     538   ld(syncBits^hSync, OUT)
              0051 18c0  ld   $c0,out     539   ld(syncBits, OUT)
                                          540
              0052 0000  ld   $00         541   ld(0)
              0053 c202  st   [$02]       542   st([channel])
              0054 c200  st   [$00]       543   st([0])                         # Carry lookup ([0x80] in 1st line of vBlank)
                                          544
              0055 000f  ld   $0f         545   ld(0b1111)                      # LEDs |****|
              0056 1880  ld   $80,out     546   ld(syncBits^hSync, OUT)
              0057 18c0  ld   $c0,out     547   ld(syncBits, OUT)
              0058 c213  st   [$13]       548   st([xout])                      # Setup for control by video loop
              0059 c214  st   [$14]       549   st([xoutMask])
                                          550
              005a 1401  ld   $01,y       551   ld(hi('startVideo'),Y)          # Enter video loop at vertical blank
              005b e003  jmp  y,$03       552   jmp(Y,'startVideo')
              005c c22e  st   [$2e]       553   st([ledState_v2])               # Setting to 1..126 means "stopped"
                                          554
                                          555   #-----------------------------------------------------------------------
                                          556
                                          557   # SYS_ResetWaveforms_v4_50 implementation
                                          558   label('sys_ResetWaveforms')
sys_ResetWaveforms:
              005d 0118  ld   [$18]       559   ld([vAC+0])                     #18 X=4i
              005e 8200  adda ac          560   adda(AC)                        #19
              005f 9200  adda ac,x        561   adda(AC,X)                      #20
              0060 0118  ld   [$18]       562   ld([vAC+0])                     #21
              0061 de00  st   [y,x++]     563   st([Y,Xpp])                     #22 Sawtooth: T[4i+0] = i
              0062 2020  anda $20         564   anda(0x20)                      #23 Triangle: T[4i+1] = 2i if i<32 else 127-2i
              0063 ec66  bne  $0066       565   bne(pc()+3)                     #24
              0064 0118  ld   [$18]       566   ld([vAC+0])                     #25
              0065 fc68  bra  $0068       567   bra(pc()+3)                     #26
              0066 8118  adda [$18]       568   adda([vAC+0])                   #26,27
              0067 607f  xora $7f         569   xora(127)                       #27
              0068 de00  st   [y,x++]     570   st([Y,Xpp])                     #28
              0069 0118  ld   [$18]       571   ld([vAC+0])                     #29 Pulse: T[4i+2] = 0 if i<32 else 63
              006a 2020  anda $20         572   anda(0x20)                      #30
              006b ec6e  bne  $006e       573   bne(pc()+3)                     #31
              006c fc6f  bra  $006f       574   bra(pc()+3)                     #32
              006d 0000  ld   $00         575   ld(0)                           #33
              006e 003f  ld   $3f         576   ld(63)                          #33(!)
              006f de00  st   [y,x++]     577   st([Y,Xpp])                     #34
              0070 0118  ld   [$18]       578   ld([vAC+0])                     #35 Sawtooth: T[4i+3] = i
              0071 ce00  st   [y,x]       579   st([Y,X])                       #36
              0072 8001  adda $01         580   adda(1)                         #37 i += 1
              0073 c218  st   [$18]       581   st([vAC+0])                     #38
              0074 6040  xora $40         582   xora(64)                        #39 For 64 iterations
              0075 f078  beq  $0078       583   beq(pc()+3)                     #40
              0076 fc79  bra  $0079       584   bra(pc()+3)                     #41
              0077 00fe  ld   $fe         585   ld(-2)                          #42
              0078 0000  ld   $00         586   ld(0)                           #42(!)
              0079 8116  adda [$16]       587   adda([vPC])                     #43
              007a c216  st   [$16]       588   st([vPC])                       #44
              007b 1403  ld   $03,y       589   ld(hi('REENTER'),Y)             #45
              007c e0cb  jmp  y,$cb       590   jmp(Y,'REENTER')                #46
              007d 00e7  ld   $e7         591   ld(-50/2)                       #47
                                          592
                                          593   #-----------------------------------------------------------------------
                                          594   # Extension SYS_Reset_38: Soft reset
                                          595   #-----------------------------------------------------------------------
                                          596
                                          597   # SYS_Reset_38 initiates an immediate Gigatron reset from within the vCPU.
                                          598   # The reset sequence itself is mostly implemented in GCL by Reset.gcl,
                                          599   # which must first be loaded into RAM. But as that takes more than 1 scanline,
                                          600   # some vCPU bootstrapping code gets loaded with SYS_Exec_88. The caller of
                                          601   # SYS_Reset_38 provides the SYS instruction to execute that.
                                          602   # !!! This function was REMOVED from interface.json
                                          603   # !!! Better use vReset as generic entry point for soft reset
                                          604
                                          605   label('SYS_Reset_38')
                                          606   assert pc()>>8 == 0
                                          607   assert (romTypeValue & 7) == 0
SYS_Reset_38: 007e 0038  ld   $38         608   ld(romTypeValue)                #15 Set ROM type/version and clear channel mask
              007f c221  st   [$21]       609   st([romType])                   #16
              0080 0000  ld   $00         610   ld(0)                           #17
              0081 c21c  st   [$1c]       611   st([vSP])                       #18 Reset stack pointer
                                          612   assert userCode&255 == 0
              0082 c21a  st   [$1a]       613   st([vLR])                       #19
              0083 c22c  st   [$2c]       614   st([soundTimer])                #20
              0084 0002  ld   $02         615   ld(userCode>>8)                 #21
              0085 c21b  st   [$1b]       616   st([vLR+1])                     #22
              0086 00ec  ld   $ec         617   ld('nopixels')                  #23 Do this before first visible pixels
              0087 c21f  st   [$1f]       618   st([videoModeB])                #24
              0088 c220  st   [$20]       619   st([videoModeC])                #25
              0089 c20d  st   [$0d]       620   st([videoModeD])                #26
              008a 00ad  ld   $ad         621   ld('SYS_Exec_88')               #27
              008b c222  st   [$22]       622   st([sysFn])                     #28 High byte (remains) 0
              008c 002a  ld   $2a         623   ld('Reset')                     #29
              008d c224  st   [$24]       624   st([sysArgs+0])                 #30
              008e 0022  ld   $22         625   ld(hi('Reset'))                 #31
              008f c225  st   [$25]       626   st([sysArgs+1])                 #32
                                          627   # Return to interpreter
              0090 1403  ld   $03,y       628   ld(hi('REENTER'), Y)            #33
              0091 e0cb  jmp  y,$cb       629   jmp(Y,'REENTER')                #34
              0092 00ed  ld   $ed         630   ld(-38/2)                       #35
                                          631
                                          632   #-----------------------------------------------------------------------
                                          633
              0093 0200  nop              634   fillers(until=symbol('SYS_Exec_88') & 255)
              0094 0200  nop
              0095 0200  nop
              * 26 times
                                          635
                                          636   #-----------------------------------------------------------------------
                                          637   # Extension SYS_Exec_88: Load code from ROM into memory and execute it
                                          638   #-----------------------------------------------------------------------
                                          639   #
                                          640   # This loads the vCPU code with consideration of the current vSP
                                          641   # Used during reset, but also for switching between applications or for
                                          642   # loading data from ROM from within an application (overlays).
                                          643   #
                                          644   # ROM stream format is [<addrH> <addrL> <n&255> n*<byte>]* 0
                                          645   # on top of lookup tables.
                                          646   #
                                          647   # Variables:
                                          648   #       sysArgs[0:1]    ROM pointer (input set by caller)
                                          649   #       sysArgs[2:3]    RAM pointer (variable)
                                          650   #       sysArgs[4]      State counter (variable)
                                          651   #       vLR             vCPU continues here (input set by caller)
                                          652
                                          653   label('SYS_Exec_88')
                                          654   assert pc()>>8 == 0
SYS_Exec_88:  00ad 0000  ld   $00         655   ld(0)                           #15 Address of loader on zero page
              00ae d617  st   [$17],y     656   st([vPC+1], Y)                  #16
              00af 011c  ld   [$1c]       657   ld([vSP])                       #17 Place ROM loader below current stack pointer
              00b0 a037  suba $37         658   suba(53+2)                      #18 (AC -> *+0) One extra word for PUSH
              00b1 d21d  st   [$1d],x     659   st([vTmp], X)                   #19
              00b2 80fe  adda $fe         660   adda(-2)                        #20 (AC -> *-2)
              00b3 c216  st   [$16]       661   st([vPC])                       #21
                                          662   # Start of manually compiled vCPU section
              00b4 dc75  st   $75,[y,x++] 663   st('PUSH',    [Y,Xpp])          #24 *+0
              00b5 dccf  st   $cf,[y,x++] 664   st('CALL',    [Y,Xpp])          #25 *+26 Fetch first byte
              00b6 8023  adda $23         665   adda(33-(-2))                   #26 (AC -> *+33)
              00b7 de00  st   [y,x++]     666   st(           [Y,Xpp])          #27 *+27
              00b8 dc5e  st   $5e,[y,x++] 667   st('ST',      [Y,Xpp])          #28 *+3 Chunk copy loop
              00b9 dc27  st   $27,[y,x++] 668   st(sysArgs+3, [Y,Xpp])          #29 *+4 High-address comes first
              00ba dccf  st   $cf,[y,x++] 669   st('CALL',    [Y,Xpp])          #30 *+5
              00bb de00  st   [y,x++]     670   st(           [Y,Xpp])          #31 *+6
              00bc dc5e  st   $5e,[y,x++] 671   st('ST',      [Y,Xpp])          #32 *+7
              00bd dc26  st   $26,[y,x++] 672   st(sysArgs+2, [Y,Xpp])          #33 *+8 Then the low address
              00be dccf  st   $cf,[y,x++] 673   st('CALL',    [Y,Xpp])          #34 *+9
              00bf de00  st   [y,x++]     674   st(           [Y,Xpp])          #35 *+10
              00c0 dc5e  st   $5e,[y,x++] 675   st('ST',      [Y,Xpp])          #36 *+11 Byte copy loop
              00c1 dc28  st   $28,[y,x++] 676   st(sysArgs+4, [Y,Xpp])          #37 *+12 Byte count (0 means 256)
              00c2 dccf  st   $cf,[y,x++] 677   st('CALL',    [Y,Xpp])          #38 *+13
              00c3 de00  st   [y,x++]     678   st(           [Y,Xpp])          #39 *+14
              00c4 dcf0  st   $f0,[y,x++] 679   st('POKE',    [Y,Xpp])          #40 *+15
              00c5 dc26  st   $26,[y,x++] 680   st(sysArgs+2, [Y,Xpp])          #41 *+16
              00c6 dc93  st   $93,[y,x++] 681   st('INC',     [Y,Xpp])          #42 *+17
              00c7 dc26  st   $26,[y,x++] 682   st(sysArgs+2, [Y,Xpp])          #43 *+18
              00c8 dc1a  st   $1a,[y,x++] 683   st('LD',      [Y,Xpp])          #44 *+19
              00c9 dc28  st   $28,[y,x++] 684   st(sysArgs+4, [Y,Xpp])          #45 *+20
              00ca dce6  st   $e6,[y,x++] 685   st('SUBI',    [Y,Xpp])          #46 *+21
              00cb dc01  st   $01,[y,x++] 686   st(1,         [Y,Xpp])          #47 *+22
              00cc dc35  st   $35,[y,x++] 687   st('BCC',     [Y,Xpp])          #48 *+23
              00cd dc72  st   $72,[y,x++] 688   st('NE',      [Y,Xpp])          #49 *+24
              00ce 80e8  adda $e8         689   adda(11-2-33)                   #50 (AC -> *+9)
              00cf de00  st   [y,x++]     690   st(           [Y,Xpp])          #51 *+25
              00d0 dccf  st   $cf,[y,x++] 691   st('CALL',    [Y,Xpp])          #52 *+26 Go to next block
              00d1 8018  adda $18         692   adda(33-9)                      #53 (AC -> *+33)
              00d2 de00  st   [y,x++]     693   st(           [Y,Xpp])          #54 *+27
              00d3 dc35  st   $35,[y,x++] 694   st('BCC',     [Y,Xpp])          #55 *+28
              00d4 dc72  st   $72,[y,x++] 695   st('NE',      [Y,Xpp])          #56 *+29
              00d5 80e0  adda $e0         696   adda(3-2-33)                    #57 (AC -> *+1)
              00d6 de00  st   [y,x++]     697   st(           [Y,Xpp])          #58 *+30
              00d7 dc63  st   $63,[y,x++] 698   st('POP',     [Y,Xpp])          #59 *+31 End
              00d8 dcff  st   $ff,[y,x++] 699   st('RET',     [Y,Xpp])          #60 *+32
                                          700   # Pointer constant pointing to the routine below (for use by CALL)
              00d9 8022  adda $22         701   adda(35-1)                      #61 (AC -> *+35)
              00da de00  st   [y,x++]     702   st(           [Y,Xpp])          #62 *+33
              00db dc00  st   $00,[y,x++] 703   st(0,         [Y,Xpp])          #63 *+34
                                          704   # Routine to read next byte from ROM and advance read pointer
              00dc dc1a  st   $1a,[y,x++] 705   st('LD',      [Y,Xpp])          #64 *+35 Test for end of ROM table
              00dd dc24  st   $24,[y,x++] 706   st(sysArgs+0, [Y,Xpp])          #65 *+36
              00de dc8c  st   $8c,[y,x++] 707   st('XORI',    [Y,Xpp])          #66 *+37
              00df dcfb  st   $fb,[y,x++] 708   st(251,       [Y,Xpp])          #67 *+38
              00e0 dc35  st   $35,[y,x++] 709   st('BCC',     [Y,Xpp])          #68 *+39
              00e1 dc72  st   $72,[y,x++] 710   st('NE',      [Y,Xpp])          #69 *+40
              00e2 8009  adda $09         711   adda(46-2-35)                   #70 (AC -> *+44)
              00e3 de00  st   [y,x++]     712   st(           [Y,Xpp])          #71 *+41
              00e4 dc5e  st   $5e,[y,x++] 713   st('ST',      [Y,Xpp])          #72 *+42 Wrap to next ROM page
              00e5 dc24  st   $24,[y,x++] 714   st(sysArgs+0, [Y,Xpp])          #73 *+43
              00e6 dc93  st   $93,[y,x++] 715   st('INC',     [Y,Xpp])          #74 *+44
              00e7 dc25  st   $25,[y,x++] 716   st(sysArgs+1, [Y,Xpp])          #75 *+45
              00e8 dc21  st   $21,[y,x++] 717   st('LDW',     [Y,Xpp])          #76 *+46 Read next byte from ROM table
              00e9 dc24  st   $24,[y,x++] 718   st(sysArgs+0, [Y,Xpp])          #77 *+47
              00ea dc7f  st   $7f,[y,x++] 719   st('LUP',     [Y,Xpp])          #78 *+48
              00eb dc00  st   $00,[y,x++] 720   st(0,         [Y,Xpp])          #79 *+49
              00ec dc93  st   $93,[y,x++] 721   st('INC',     [Y,Xpp])          #80 *+50 Increment read pointer
              00ed dc24  st   $24,[y,x++] 722   st(sysArgs+0, [Y,Xpp])          #81 *+51
              00ee dcff  st   $ff,[y,x++] 723   st('RET',     [Y,Xpp])          #82 *+52 Return
                                          724   # Return to interpreter
              00ef 1403  ld   $03,y       725   ld(hi('REENTER'), Y)            #81
              00f0 e0cb  jmp  y,$cb       726   jmp(Y,'REENTER')                #82
              00f1 00d5  ld   $d5         727   ld(-86/2)                       #83 One tick faster than needed
                                          728
              00f2 0200  nop              729   nop()
              00f3 0200  nop              730   nop()
                                          731
                                          732   #-----------------------------------------------------------------------
                                          733   # Extension SYS_Out_22: Send byte to output port
                                          734   #-----------------------------------------------------------------------
                                          735
                                          736   label('SYS_Out_22')
SYS_Out_22:   00f4 1924  ld   [$24],out   737   ld([sysArgs+0], OUT)            #15
              00f5 0200  nop              738   nop()                           #16
              00f6 1403  ld   $03,y       739   ld(hi('REENTER'), Y)            #17
              00f7 e0cb  jmp  y,$cb       740   jmp(Y,'REENTER')                #18
              00f8 00f5  ld   $f5         741   ld(-22/2)                       #19
                                          742
                                          743   #-----------------------------------------------------------------------
                                          744   # Extension SYS_In_24: Read a byte from the input port
                                          745   #-----------------------------------------------------------------------
                                          746
                                          747   label('SYS_In_24')
SYS_In_24:    00f9 c318  st   in,[$18]    748   st(IN, [vAC])                   #15
              00fa 0000  ld   $00         749   ld(0)                           #16
              00fb c219  st   [$19]       750   st([vAC+1])                     #17
              00fc 0200  nop              751   nop()                           #18
              00fd 1403  ld   $03,y       752   ld(hi('REENTER'), Y)            #19
              00fe e0cb  jmp  y,$cb       753   jmp(Y,'REENTER')                #20
              00ff 00f4  ld   $f4         754   ld(-24/2)                       #21
                                          755
                                          756   assert pc()&255 == 0
                                          757
                                          758   #-----------------------------------------------------------------------
                                          759   #
                                          760   #  $0100 ROM page 1-2: Video loop
                                          761   #
                                          762   #-----------------------------------------------------------------------
                                          763   align(0x100, 0x100)
                                          764
                                          765   # Video off mode (also no sound, serial, timer, blinkenlights, ...).
                                          766   # For benchmarking purposes. This still has the overhead for the vTicks
                                          767   # administration, time slice granularity etc.
                                          768   label('videoZ')
                                          769   videoZ = pc()
                                          770   runVcpu(None, '---- novideo', returnTo=videoZ)
videoZ:       0100 1505  ld   [$05],y     ;Run vCPU for 280.0 cycles gross (---- novideo)
              0101 e0ff  jmp  y,$ff
              0102 0078  ld   $78
                                          771
                                          772   label('startVideo')             # (Re)start of video signal from idle state
startVideo:   0103 00c0  ld   $c0         773   ld(syncBits)
                                          774
                                          775   # Start of vertical blank interval
                                          776   label('vBlankStart')
vBlankStart:  0104 c20a  st   [$0a]       777   st([videoSync0])                #32 Start of vertical blank interval
              0105 0080  ld   $80         778   ld(syncBits^hSync)              #33
              0106 c20b  st   [$0b]       779   st([videoSync1])                #34
                                          780
                                          781   # Reset line counter before vCPU can see it
              0107 00b3  ld   $b3         782   ld(videoYline0)                 #35
              0108 c209  st   [$09]       783   st([videoY])                    #36
                                          784
                                          785   # Update frame count and [0x80] (4 cycles)
              0109 0001  ld   $01         786   ld(1)                           #37 Reinitialize carry lookup, for robustness
              010a c280  st   [$80]       787   st([0x80])                      #38
              010b 810e  adda [$0e]       788   adda([frameCount])              #39 Frame counter
              010c c20e  st   [$0e]       789   st([frameCount])                #40
                                          790
                                          791   # Mix entropy (11 cycles)
              010d 6107  xora [$07]       792   xora([entropy+1])               #41 Mix entropy
              010e 610f  xora [$0f]       793   xora([serialRaw])               #42 Mix in serial input
              010f 8106  adda [$06]       794   adda([entropy+0])               #43
              0110 c206  st   [$06]       795   st([entropy+0])                 #44
              0111 8108  adda [$08]       796   adda([entropy+2])               #45 Some hidden state
              0112 c208  st   [$08]       797   st([entropy+2])                 #46
              0113 e816  blt  $0116       798   bmi(pc()+3)                     #47
              0114 fc17  bra  $0117       799   bra(pc()+3)                     #48
              0115 6053  xora $53         800   xora(64+16+2+1)                 #49
              0116 606c  xora $6c         801   xora(64+32+8+4)                 #49(!)
              0117 8107  adda [$07]       802   adda([entropy+1])               #50
              0118 c207  st   [$07]       803   st([entropy+1])                 #51
                                          804
                                          805   # LED sequencer (18 cycles)
              0119 012d  ld   [$2d]       806   ld([ledTimer])                  #52 Blinkenlight sequencer
              011a f01d  beq  $011d       807   beq(pc()+3)                     #53
              011b fc1e  bra  $011e       808   bra(pc()+3)                     #54
              011c a001  suba $01         809   suba(1)                         #55
              011d 012f  ld   [$2f]       810   ld([ledTempo])                  #55(!)
              011e c22d  st   [$2d]       811   st([ledTimer])                  #56
              011f f022  beq  $0122       812   beq(pc()+3)                     #57
              0120 fc23  bra  $0123       813   bra(pc()+3)                     #58
              0121 0000  ld   $00         814   ld(0)                           #59 Don't advance state
              0122 0001  ld   $01         815   ld(1)                           #59(!) Advance state when timer passes through 0
              0123 812e  adda [$2e]       816   adda([ledState_v2])             #60
              0124 ec27  bne  $0127       817   bne(pc()+3)                     #61
              0125 fc28  bra  $0128       818   bra(pc()+3)                     #62
              0126 00e8  ld   $e8         819   ld(-24)                         #63 State 0 becomes -24, start of sequence
              0127 e42c  bgt  .leds#65    820   bgt('.leds#65')                 #63(!) Catch the stopped state (>0)
              0128 c22e  st   [$2e]       821   st([ledState_v2])               #64
              0129 8048  adda $48         822   adda('.leds#69')                #65
              012a fe00  bra  ac          823   bra(AC)                         #66 Jump to lookup table
              012b fc48  bra  .leds#69    824   bra('.leds#69')                 #67 Single-instruction subroutine
                                          825
                                          826   label('.leds#65')
.leds#65:     012c 000f  ld   $0f         827   ld(0x0f)                        #65 Maintain stopped state
              012d c22e  st   [$2e]       828   st([ledState_v2])               #66
              012e fc48  bra  .leds#69    829   bra('.leds#69')                 #67
              012f 2114  anda [$14]       830   anda([xoutMask])                #68 Always clear sound bits (this is why AC=0x0f)
                                          831
              0130 000f  ld   $0f         832   ld(0b1111)                      #68 LEDs |****| offset -24 Low 4 bits are the LED output
              0131 0007  ld   $07         833   ld(0b0111)                      #68 LEDs |***O|
              0132 0003  ld   $03         834   ld(0b0011)                      #68 LEDs |**OO|
              0133 0001  ld   $01         835   ld(0b0001)                      #68 LEDs |*OOO|
              0134 0002  ld   $02         836   ld(0b0010)                      #68 LEDs |O*OO|
              0135 0004  ld   $04         837   ld(0b0100)                      #68 LEDs |OO*O|
              0136 0008  ld   $08         838   ld(0b1000)                      #68 LEDs |OOO*|
              0137 0004  ld   $04         839   ld(0b0100)                      #68 LEDs |OO*O|
              0138 0002  ld   $02         840   ld(0b0010)                      #68 LEDs |O*OO|
              0139 0001  ld   $01         841   ld(0b0001)                      #68 LEDs |*OOO|
              013a 0003  ld   $03         842   ld(0b0011)                      #68 LEDs |**OO|
              013b 0007  ld   $07         843   ld(0b0111)                      #68 LEDs |***O|
              013c 000f  ld   $0f         844   ld(0b1111)                      #68 LEDs |****|
              013d 000e  ld   $0e         845   ld(0b1110)                      #68 LEDs |O***|
              013e 000c  ld   $0c         846   ld(0b1100)                      #68 LEDs |OO**|
              013f 0008  ld   $08         847   ld(0b1000)                      #68 LEDs |OOO*|
              0140 0004  ld   $04         848   ld(0b0100)                      #68 LEDs |OO*O|
              0141 0002  ld   $02         849   ld(0b0010)                      #68 LEDs |O*OO|
              0142 0001  ld   $01         850   ld(0b0001)                      #68 LEDs |*OOO|
              0143 0002  ld   $02         851   ld(0b0010)                      #68 LEDs |O*OO|
              0144 0004  ld   $04         852   ld(0b0100)                      #68 LEDs |OO*O|
              0145 0008  ld   $08         853   ld(0b1000)                      #68 LEDs |OOO*|
              0146 000c  ld   $0c         854   ld(0b1100)                      #68 LEDs |OO**|
              0147 000e  ld   $0e         855   ld(0b1110)                      #68 LEDs |O***| offset -1
                                          856   label('.leds#69')
.leds#69:     0148 c214  st   [$14]       857   st([xoutMask])                  #69 Sound bits will be re-enabled below
              0149 0010  ld   $10         858   ld(vPulse*2)                    #70 vPulse default length when not modulated
              014a c20c  st   [$0c]       859   st([videoPulse])                #71
                                          860
                                          861   # When the total number of scan lines per frame is not an exact multiple of the
                                          862   # (4) channels, there will be an audible discontinuity if no measure is taken.
                                          863   # This static noise can be suppressed by swallowing the first `lines mod 4'
                                          864   # partial samples after transitioning into vertical blank. This is easiest if
                                          865   # the modulo is 0 (do nothing), 1 (reset sample when entering the last visible
                                          866   # scan line), or 2 (reset sample while in the first blank scan line). For the
                                          867   # last case there is no solution yet: give a warning.
                                          868   extra = 0
                                          869   if soundDiscontinuity == 2:
                                          870     st(sample, [sample])          # Sound continuity
                                          871     extra += 1
                                          872   if soundDiscontinuity > 2:
                                          873     highlight('Warning: sound discontinuity not suppressed')
                                          874
                                          875   runVcpu(186-72-extra, '---D line 0')#72 Application cycles (scan line 0)
              014b 0050  ld   $50         ;Run vCPU for 114 cycles gross (---D line 0)
              014c c21e  st   [$1e]
              014d 1505  ld   [$05],y
              014e e0ff  jmp  y,$ff
              014f 0024  ld   $24
                                          876
                                          877   # Mitigation for rogue channelMask (3 cycles)
              0150 0121  ld   [$21]       878   ld([channelMask])               #186 Normalize channelMask, for robustness
              0151 20fb  anda $fb         879   anda(0b11111011)                #187
              0152 c221  st   [$21]       880   st([channelMask])               #188
                                          881
                                          882   # Sound on/off (6 cycles)
              0153 012c  ld   [$2c]       883   ld([soundTimer])                #189 Sound on/off
              0154 ec57  bne  $0157       884   bne(pc()+3)                     #190
              0155 fc58  bra  $0158       885   bra(pc()+3)                     #191
              0156 0000  ld   $00         886   ld(0)                           #192 Keeps sound unchanged (should be off here)
              0157 00f0  ld   $f0         887   ld(0xf0)                        #192(!) Turns sound back on
              0158 4114  ora  [$14]       888   ora([xoutMask])                 #193
              0159 c214  st   [$14]       889   st([xoutMask])                  #194
                                          890
                                          891   # Sound timer count down (5 cycles)
              015a 012c  ld   [$2c]       892   ld([soundTimer])                #195 Sound timer
              015b f05e  beq  $015e       893   beq(pc()+3)                     #196
              015c fc5f  bra  $015f       894   bra(pc()+3)                     #197
              015d a001  suba $01         895   suba(1)                         #198
              015e 0000  ld   $00         896   ld(0)                           #198
              015f c22c  st   [$2c]       897   st([soundTimer])                #199
                                          898
              0160 190a  ld   [$0a],out   899   ld([videoSync0],OUT)            #0 <New scan line start>
                                          900
                                          901   label('sound1')
sound1:       0161 0102  ld   [$02]       902   ld([channel])                   #1 Advance to next sound channel
              0162 2121  anda [$21]       903   anda([channelMask])             #2
              0163 8001  adda $01         904   adda(1)                         #3
              0164 190b  ld   [$0b],out   905   ld([videoSync1],OUT)            #4 Start horizontal pulse
              0165 d602  st   [$02],y     906   st([channel], Y)                #5
              0166 007f  ld   $7f         907   ld(0x7f)                        #6 Update sound channel
              0167 29fe  anda [y,$fe]     908   anda([Y,oscL])                  #7
              0168 89fc  adda [y,$fc]     909   adda([Y,keyL])                  #8
              0169 cafe  st   [y,$fe]     910   st([Y,oscL])                    #9
              016a 3080  anda $80,x       911   anda(0x80, X)                   #10
              016b 0500  ld   [x]         912   ld([X])                         #11
              016c 89ff  adda [y,$ff]     913   adda([Y,oscH])                  #12
              016d 89fd  adda [y,$fd]     914   adda([Y,keyH])                  #13
              016e caff  st   [y,$ff]     915   st([Y,oscH])                    #14
              016f 20fc  anda $fc         916   anda(0xfc)                      #15
              0170 69fb  xora [y,$fb]     917   xora([Y,wavX])                  #16
              0171 1200  ld   ac,x        918   ld(AC, X)                       #17
              0172 09fa  ld   [y,$fa]     919   ld([Y,wavA])                    #18
              0173 1407  ld   $07,y       920   ld(soundTable>>8, Y)            #19
              0174 8d00  adda [y,x]       921   adda([Y,X])                     #20
              0175 e878  blt  $0178       922   bmi(pc()+3)                     #21
              0176 fc79  bra  $0179       923   bra(pc()+3)                     #22
              0177 203f  anda $3f         924   anda(63)                        #23
              0178 003f  ld   $3f         925   ld(63)                          #23(!)
              0179 8103  adda [$03]       926   adda([sample])                  #24
              017a c203  st   [$03]       927   st([sample])                    #25
                                          928
              017b 0113  ld   [$13]       929   ld([xout])                      #26 Gets copied to XOUT
              017c 1409  ld   $09,y       930   ld(hi('vBlankLast#34'),Y)       #27 Prepare jumping out of page in last line
              017d 190a  ld   [$0a],out   931   ld([videoSync0],OUT)            #28 End horizontal pulse
                                          932
                                          933   # Count through the vertical blank interval until its last scan line
              017e 0109  ld   [$09]       934   ld([videoY])                    #29
                                          935   bpl('.vBlankLast#32')           #30
              017f f4ac  bge  .vBlankLast#32
              0180 8002  adda $02         936   adda(2)                         #31
              0181 c209  st   [$09]       937   st([videoY])                    #32
                                          938
                                          939   # Determine if we're in the vertical sync pulse
              0182 a0bd  suba $bd         940   suba(1-2*(vBack+vPulse-1))      #33 Prepare sync values
              0183 ec88  bne  .prepSync36 941   bne('.prepSync36')              #34 Tests for start of vPulse
              0184 a10c  suba [$0c]       942   suba([videoPulse])              #35
              0185 0040  ld   $40         943   ld(syncBits^vSync)              #36 Entering vertical sync pulse
              0186 fc8d  bra  .prepSync39 944   bra('.prepSync39')              #37
              0187 c20a  st   [$0a]       945   st([videoSync0])                #38
                                          946   label('.prepSync36')
.prepSync36:  0188 ec8c  bne  .prepSync38 947   bne('.prepSync38')              #36 Tests for end of vPulse
              0189 00c0  ld   $c0         948   ld(syncBits)                    #37
              018a fc8e  bra  .prepSync40 949   bra('.prepSync40')              #38 Entering vertical back porch
              018b c20a  st   [$0a]       950   st([videoSync0])                #39
                                          951   label('.prepSync38')
.prepSync38:  018c 010a  ld   [$0a]       952   ld([videoSync0])                #38 Load current value
                                          953   label('.prepSync39')
.prepSync39:  018d 0200  nop              954   nop()                           #39
                                          955   label('.prepSync40')
.prepSync40:  018e 6040  xora $40         956   xora(hSync)                     #40 Precompute, as during the pulse there is no time
              018f c20b  st   [$0b]       957   st([videoSync1])                #41
                                          958
                                          959   # Capture the serial input before the '595 shifts it out
              0190 0109  ld   [$09]       960   ld([videoY])                    #42 Capture serial input
              0191 60cf  xora $cf         961   xora(1-2*(vBack-1-1))           #43 Exactly when the 74HC595 has captured all 8 controller bits
              0192 ec95  bne  $0195       962   bne(pc()+3)                     #44
              0193 fc96  bra  $0196       963   bra(pc()+3)                     #45
              0194 c30f  st   in,[$0f]    964   st(IN, [serialRaw])             #46
              0195 c000  st   $00,[$00]   965   st(0,[0])                       #46(!) Reinitialize carry lookup, for robustness
                                          966
                                          967   # Update [xout] with the next sound sample every 4 scan lines.
                                          968   # Keep doing this on 'videoC equivalent' scan lines in vertical blank.
              0196 0109  ld   [$09]       969   ld([videoY])                    #47
              0197 2006  anda $06         970   anda(6)                         #48
                                          971   beq('vBlankSample')             #49
              0198 f0a1  beq  vBlankSample
              0199 0103  ld   [$03]       972   ld([sample])                    #50
                                          973
                                          974   label('vBlankNormal')
                                          975   runVcpu(199-51, 'AB-D line 1-36')#51 Application cycles (vBlank scan lines without sound sample update)
vBlankNormal: 019a 009f  ld   $9f         ;Run vCPU for 148 cycles gross (AB-D line 1-36)
              019b c21e  st   [$1e]
              019c 1505  ld   [$05],y
              019d e0ff  jmp  y,$ff
              019e 0035  ld   $35
              019f fc61  bra  sound1      976   bra('sound1')                   #199
              01a0 190a  ld   [$0a],out   977   ld([videoSync0],OUT)            #0 <New scan line start>
                                          978
                                          979   label('vBlankSample')
vBlankSample: 01a1 400f  ora  $0f         980   ora(0x0f)                       #51 New sound sample is ready
                                          981
              01a2 2114  anda [$14]       982   anda([xoutMask])                #52
              01a3 c213  st   [$13]       983   st([xout])                      #53
              01a4 c003  st   $03,[$03]   984   st(sample, [sample])            #54 Reset for next sample
                                          985
                                          986   runVcpu(199-55, '--C- line 3-39')#55 Application cycles (vBlank scan lines with sound sample update)
              01a5 00aa  ld   $aa         ;Run vCPU for 144 cycles gross (--C- line 3-39)
              01a6 c21e  st   [$1e]
              01a7 1505  ld   [$05],y
              01a8 e0ff  jmp  y,$ff
              01a9 0033  ld   $33
              01aa fc61  bra  sound1      987   bra('sound1')                   #199
              01ab 190a  ld   [$0a],out   988   ld([videoSync0],OUT)            #0 <New scan line start>
                                          989
                                          990   #-----------------------------------------------------------------------
                                          991
                                          992   label('.vBlankLast#32')
.vBlankLast#32:
              01ac e0de  jmp  y,$de       993   jmp(Y,'vBlankLast#34')          #32 Jump out of page for space reasons
                                          994   #assert hi(controllerType) == hi(pc()) # Assume these share the high address
              01ad 1401  ld   $01,y       995   ld(hi(pc()),Y)                  #33
                                          996
                                          997   label('vBlankLast#52')
                                          998
                                          999   # Respond to reset button (14 cycles)
                                          1000  # - ResetTimer decrements as long as just [Start] is pressed down
                                          1001  # - Reaching 0 (normal) or 128 (extended) triggers the soft reset sequence
                                          1002  # - Initial value is 128 (or 255 at boot), first decrement, then check
                                          1003  # - This starts vReset -> SYS_Reset_38 -> SYS_Exec_88 -> Reset.gcl -> Main.gcl
                                          1004  # - Main.gcl then recognizes extended presses if resetTimer is 0..127 ("paasei")
                                          1005  # - This requires a full cycle (4s) in the warm boot scenario
                                          1006  # - Or a half cycle (2s) when pressing [Select] down during hard reset
                                          1007  # - This furthermore requires >=1 frame (and <=128) to have passed between
                                          1008  #   reaching 128 and getting through Reset and the start of Main, while [Start]
                                          1009  #   was still pressed so the count reaches <128. Two reasonable expectations.
                                          1010  # - The unintended power-up scenarios of ROMv1 (pulling SER_DATA low, or
                                          1011  #   pressing [Select] together with another button) now don't trigger anymore.
                                          1012
vBlankLast#52:
              01ae 0111  ld   [$11]       1013  ld([buttonState])               #52 Check [Start] for soft reset
              01af 60ef  xora $ef         1014  xora(~buttonStart)              #53
              01b0 ecb9  bne  .restart#56 1015  bne('.restart#56')              #54
              01b1 0112  ld   [$12]       1016  ld([resetTimer])                #55 As long as button pressed
              01b2 a001  suba $01         1017  suba(1)                         #56 ... count down the timer
              01b3 c212  st   [$12]       1018  st([resetTimer])                #57
              01b4 207f  anda $7f         1019  anda(127)                       #58
              01b5 f0c1  beq  .restart#61 1020  beq('.restart#61')              #59 Reset at 0 (normal 2s) or 128 (extended 4s)
              01b6 00ee  ld   $ee         1021  ld((vReset&255)-2)              #60 Start force reset when hitting 0
              01b7 fcc0  bra  .restart#63 1022  bra('.restart#63')              #61 ... otherwise do nothing yet
              01b8 fcbf  bra  .restart#64 1023  bra('.restart#64')              #62
                                          1024  label('.restart#56')
.restart#56:  01b9 0001  ld   $01         1025  wait(62-56);                    #56
              01ba ecba  bne  $01ba
              01bb a001  suba $01
              01bc 0200  nop
              01bd 0080  ld   $80         1026  ld(128)                         #62 Not pressed, reset the timer
              01be c212  st   [$12]       1027  st([resetTimer])                #63
                                          1028  label('.restart#64')
.restart#64:  01bf fcc6  bra  .restart#66 1029  bra('.restart#66')              #64
                                          1030  label('.restart#63')
.restart#63:  01c0 0200  nop              1031  nop()                           #63,65
                                          1032  label('.restart#61')
.restart#61:  01c1 c216  st   [$16]       1033  st([vPC])                       #61 Point vPC at vReset
              01c2 0001  ld   $01         1034  ld(vReset>>8)                   #62
              01c3 c217  st   [$17]       1035  st([vPC+1])                     #63
              01c4 0002  ld   $02         1036  ld(hi('ENTER'))                 #64 Set active interpreter to vCPU
                                          1037
              01c5 c205  st   [$05]       1038  st([vCPUselect])                #65
                                          1039  label('.restart#66')
                                          1040
                                          1041  # Switch video mode when (only) select is pressed (16 cycles)
                                          1042  # XXX We could make this a vCPU interrupt
.restart#66:  01c6 0111  ld   [$11]       1043  ld([buttonState])               #66 Check [Select] to switch modes
              01c7 60df  xora $df         1044  xora(~buttonSelect)             #67 Only trigger when just [Select] is pressed
              01c8 ecdd  bne  .select#70  1045  bne('.select#70')               #68
              01c9 0120  ld   [$20]       1046  ld([videoModeC])                #69
              01ca e8d0  blt  .select#72  1047  bmi('.select#72')               #70 Branch when line C is off
              01cb 011f  ld   [$1f]       1048  ld([videoModeB])                #71 Rotate: Off->D->B->C
              01cc c220  st   [$20]       1049  st([videoModeC])                #72
              01cd 010d  ld   [$0d]       1050  ld([videoModeD])                #73
              01ce c21f  st   [$1f]       1051  st([videoModeB])                #74
              01cf fcd5  bra  .select#77  1052  bra('.select#77')               #75
                                          1053  label('.select#72')
.select#72:   01d0 00ec  ld   $ec         1054  ld('nopixels')                  #72,76
              01d1 000a  ld   $0a         1055  ld('pixels')                    #73 Reset: On->D->B->C
              01d2 c220  st   [$20]       1056  st([videoModeC])                #74
              01d3 c21f  st   [$1f]       1057  st([videoModeB])                #75
              01d4 0200  nop              1058  nop()                           #76
                                          1059  label('.select#77')
.select#77:   01d5 c20d  st   [$0d]       1060  st([videoModeD])                #77
              01d6 0037  ld   $37         1061  wait(192-78)                    #78 Don't waste space expanding runVcpu here
              01d7 ecd7  bne  $01d7
              01d8 a001  suba $01
              01d9 0200  nop
                                          1062  # AC==255 now
              01da c211  st   [$11]       1063  st([buttonState])               #192
              01db fce5  bra  vBlankEnd   1064  bra('vBlankEnd')                #193
              01dc 0000  ld   $00         1065  ld(0)                           #194
                                          1066  label('.select#70')
                                          1067
                                          1068  # Mitigation of runaway channel variable
.select#70:   01dd 0102  ld   [$02]       1069  ld([channel])                   #70 Normalize channel, for robustness
              01de 2003  anda $03         1070  anda(0b00000011)                #71
              01df c202  st   [$02]       1071  st([channel])                   #72 Stop wild channel updates
                                          1072
                                          1073  runVcpu(195-73, '---D line 40') #73 Application cycles (scan line 40)
              01e0 00e5  ld   $e5         ;Run vCPU for 122 cycles gross (---D line 40)
              01e1 c21e  st   [$1e]
              01e2 1505  ld   [$05],y
              01e3 e0ff  jmp  y,$ff
              01e4 0028  ld   $28
                                          1074
                                          1075  # AC==0 now
                                          1076  label('vBlankEnd')
vBlankEnd:    01e5 c209  st   [$09]       1077  st([videoY])                    #195
              01e6 c20a  st   [$0a]       1078  st([frameX])                    #196
              01e7 0001  ld   $01         1079  ld('videoA')                    #197
              01e8 c20c  st   [$0c]       1080  st([nextVideo])                 #198
              01e9 0102  ld   [$02]       1081  ld([channel])                   #199 Advance to next sound channel
              01ea 2121  anda [$21]       1082  anda([channelMask])             #0 <New scan line start>
                                          1083
              01eb 8001  adda $01         1084  adda(1)                         #1
              01ec 1402  ld   $02,y       1085  ld(hi('sound2'), Y)             #2
              01ed e0b1  jmp  y,$b1       1086  jmp(Y,'sound2')                 #3
              01ee 1880  ld   $80,out     1087  ld(syncBits^hSync, OUT)         #4 Start horizontal pulse
                                          1088
              01ef 0200  nop              1089  fillers(until=0xff)
              01f0 0200  nop
              01f1 0200  nop
              * 16 times
                                          1090  assert pc() == 0x1ff            # Enables runVcpu() to re-enter into the next page
              01ff fcae  bra  sound3      1091  bra('sound3')                   #200,0 <New scan line start>
                                          1092
                                          1093  # --- Page boundary ---
                                          1094  align(0x100, 0x100)
              0200 0102  ld   [$02]       1095  ld([channel])                   #1 Advance to next sound channel
                                          1096
                                          1097  # Back porch A: first of 4 repeated scan lines
                                          1098  # - Fetch next Yi and store it for retrieval in the next scan lines
                                          1099  # - Calculate Xi from dXi, but there is no cycle time left to store it as well
                                          1100  label('videoA')
videoA:       0201 00ca  ld   $ca         1101  ld('videoB')                    #29
              0202 c20c  st   [$0c]       1102  st([nextVideo])                 #30
              0203 1401  ld   $01,y       1103  ld(videoTable>>8, Y)            #31
              0204 1109  ld   [$09],x     1104  ld([videoY], X)                 #32
              0205 0d00  ld   [y,x]       1105  ld([Y,X])                       #33
              0206 de00  st   [y,x++]     1106  st([Y,Xpp])                     #34 Just to increment X
              0207 c20b  st   [$0b]       1107  st([frameY])                    #35
              0208 0d00  ld   [y,x]       1108  ld([Y,X])                       #36
              0209 910a  adda [$0a],x     1109  adda([frameX], X)               #37
                                          1110  label('pixels')
pixels:       020a 150b  ld   [$0b],y     1111  ld([frameY], Y)                 #38
              020b 00c0  ld   $c0         1112  ld(syncBits)                    #39
                                          1113
                                          1114  # Stream 160 pixels from memory location <Yi,Xi> onwards
                                          1115  # Superimpose the sync signal bits to be robust against misprogramming
                                          1116  for i in range(160):
              020c 5d00  ora  [y,x++],out 1117    ora([Y,Xpp],OUT)              #40-199 Pixel burst
              020d 5d00  ora  [y,x++],out
              020e 5d00  ora  [y,x++],out
              * 160 times
              02ac 18c0  ld   $c0,out     1118  ld(syncBits,OUT)                #0 <New scan line start> Back to black
                                          1119
                                          1120  # Front porch
              02ad 0102  ld   [$02]       1121  ld([channel])                   #1 Advance to next sound channel
                                          1122  label('sound3')                 # Return from vCPU interpreter
sound3:       02ae 2121  anda [$21]       1123  anda([channelMask])             #2
              02af 8001  adda $01         1124  adda(1)                         #3
              02b0 1880  ld   $80,out     1125  ld(syncBits^hSync,OUT)          #4 Start horizontal pulse
                                          1126
                                          1127  # Horizontal sync and sound channel update for scanlines outside vBlank
                                          1128  label('sound2')
sound2:       02b1 d602  st   [$02],y     1129  st([channel], Y)                #5
              02b2 007f  ld   $7f         1130  ld(0x7f)                        #6
              02b3 29fe  anda [y,$fe]     1131  anda([Y,oscL])                  #7
              02b4 89fc  adda [y,$fc]     1132  adda([Y,keyL])                  #8
              02b5 cafe  st   [y,$fe]     1133  st([Y,oscL])                    #9
              02b6 3080  anda $80,x       1134  anda(0x80, X)                   #10
              02b7 0500  ld   [x]         1135  ld([X])                         #11
              02b8 89ff  adda [y,$ff]     1136  adda([Y,oscH])                  #12
              02b9 89fd  adda [y,$fd]     1137  adda([Y,keyH])                  #13
              02ba caff  st   [y,$ff]     1138  st([Y,oscH] )                   #14
              02bb 20fc  anda $fc         1139  anda(0xfc)                      #15
              02bc 69fb  xora [y,$fb]     1140  xora([Y,wavX])                  #16
              02bd 1200  ld   ac,x        1141  ld(AC, X)                       #17
              02be 09fa  ld   [y,$fa]     1142  ld([Y,wavA])                    #18
              02bf 1407  ld   $07,y       1143  ld(soundTable>>8, Y)            #19
              02c0 8d00  adda [y,x]       1144  adda([Y,X])                     #20
              02c1 e8c4  blt  $02c4       1145  bmi(pc()+3)                     #21
              02c2 fcc5  bra  $02c5       1146  bra(pc()+3)                     #22
              02c3 203f  anda $3f         1147  anda(63)                        #23
              02c4 003f  ld   $3f         1148  ld(63)                          #23(!)
              02c5 8103  adda [$03]       1149  adda([sample])                  #24
              02c6 c203  st   [$03]       1150  st([sample])                    #25
                                          1151
              02c7 0113  ld   [$13]       1152  ld([xout])                      #26 Gets copied to XOUT
              02c8 fd0c  bra  [$0c]       1153  bra([nextVideo])                #27
              02c9 18c0  ld   $c0,out     1154  ld(syncBits,OUT)                #28 End horizontal pulse
                                          1155
                                          1156  # Back porch B: second of 4 repeated scan lines
                                          1157  # - Recompute Xi from dXi and store for retrieval in the next scan lines
                                          1158  label('videoB')
videoB:       02ca 00d3  ld   $d3         1159  ld('videoC')                    #29
              02cb c20c  st   [$0c]       1160  st([nextVideo])                 #30
              02cc 1401  ld   $01,y       1161  ld(videoTable>>8, Y)            #31
              02cd 0109  ld   [$09]       1162  ld([videoY])                    #32
              02ce 9001  adda $01,x       1163  adda(1, X)                      #33
              02cf 010a  ld   [$0a]       1164  ld([frameX])                    #34
              02d0 8d00  adda [y,x]       1165  adda([Y,X])                     #35
              02d1 fd1f  bra  [$1f]       1166  bra([videoModeB])               #36
              02d2 d20a  st   [$0a],x     1167  st([frameX], X)                 #37 Store in RAM and X
                                          1168
                                          1169  # Back porch C: third of 4 repeated scan lines
                                          1170  # - Nothing new to for video do as Yi and Xi are known,
                                          1171  # - This is the time to emit and reset the next sound sample
                                          1172  label('videoC')
videoC:       02d3 00dc  ld   $dc         1173  ld('videoD')                    #29
              02d4 c20c  st   [$0c]       1174  st([nextVideo])                 #30
              02d5 0103  ld   [$03]       1175  ld([sample])                    #31 New sound sample is ready (didn't fit in the audio loop)
                                          1176
              02d6 400f  ora  $0f         1177  ora(0x0f)                       #32
              02d7 2114  anda [$14]       1178  anda([xoutMask])                #33
              02d8 c213  st   [$13]       1179  st([xout])                      #34 Update [xout] with new sample (4 channels just updated)
              02d9 c003  st   $03,[$03]   1180  st(sample, [sample])            #35 Reset for next sample
              02da fd20  bra  [$20]       1181  bra([videoModeC])               #36
              02db 110a  ld   [$0a],x     1182  ld([frameX], X)                 #37
                                          1183
                                          1184  # Back porch D: last of 4 repeated scan lines
                                          1185  # - Calculate the next frame index
                                          1186  # - Decide if this is the last line or not
                                          1187  label('videoD')                 # Default video mode
videoD:       02dc 110a  ld   [$0a],x     1188  ld([frameX], X)                 #29
              02dd 0109  ld   [$09]       1189  ld([videoY])                    #30
              02de a0ee  suba $ee         1190  suba((120-1)*2)                 #31
                                          1191  beq('.lastpixels34')            #32
              02df f0e5  beq  .lastpixels34
              02e0 80f0  adda $f0         1192  adda(120*2)                     #33 More pixel rows to go
              02e1 c209  st   [$09]       1193  st([videoY])                    #34
              02e2 0001  ld   $01         1194  ld('videoA')                    #35
              02e3 fd0d  bra  [$0d]       1195  bra([videoModeD])               #36
              02e4 c20c  st   [$0c]       1196  st([nextVideo])                 #37
                                          1197
                                          1198  label('.lastpixels34')
                                          1199  if soundDiscontinuity == 1:
.lastpixels34:
              02e5 c003  st   $03,[$03]   1200    st(sample, [sample])          #34 Sound continuity
                                          1201  else:
                                          1202    nop()                         #34
              02e6 00e9  ld   $e9         1203  ld('videoE')                    #35 No more pixel lines to go
              02e7 fd0d  bra  [$0d]       1204  bra([videoModeD])               #36
              02e8 c20c  st   [$0c]       1205  st([nextVideo])                 #37
                                          1206
                                          1207  # Back porch "E": after the last line
                                          1208  # - Go back and and enter vertical blank (program page 2)
                                          1209  label('videoE') # Exit visible area
videoE:       02e9 1401  ld   $01,y       1210  ld(hi('vBlankStart'),Y)         #29 Return to vertical blank interval
              02ea e004  jmp  y,$04       1211  jmp(Y,'vBlankStart')            #30
              02eb 00c0  ld   $c0         1212  ld(syncBits)                    #31
                                          1213
                                          1214  # Alternative for pixel burst: faster application mode
                                          1215  label('nopixels')
                                          1216  runVcpu(200-38, '-BCD line 41-520',
nopixels:     02ec 00ff  ld   $ff         ;Run vCPU for 162 cycles gross (-BCD line 41-520)
              02ed c21e  st   [$1e]
              02ee 1505  ld   [$05],y
              02ef e0ff  jmp  y,$ff
              02f0 003c  ld   $3c
                                          1217    returnTo=0x1ff)               #38 Application interpreter (black scanlines)
                                          1218
                                          1219  #-----------------------------------------------------------------------
                                          1220  #
                                          1221  #  $0300 ROM page 3: Application interpreter primary page
                                          1222  #
                                          1223  #-----------------------------------------------------------------------
                                          1224
                                          1225  # Enter the timing-aware application interpreter (aka virtual CPU, vCPU)
                                          1226  #
                                          1227  # This routine will execute as many as possible instructions in the
                                          1228  # allotted time. When time runs out, it synchronizes such that the total
                                          1229  # duration matches the caller's request. Durations are counted in `ticks',
                                          1230  # which are multiples of 2 clock cycles.
                                          1231  #
                                          1232  # Synopsis: Use the runVcpu() macro as entry point
                                          1233
                                          1234  # We let 'ENTER' begin one word before the page boundary, for a bit extra
                                          1235  # precious space in the packed interpreter code page. Although ENTER's
                                          1236  # first instruction is bra() which normally doesn't cross page boundaries,
                                          1237  # in this case it will still jump into the right space, because branches
                                          1238  # from $xxFF land in the next page anyway.
                                          1239  while pc()&255 < 255:
              02f1 0200  nop              1240    nop()
              02f2 0200  nop
              02f3 0200  nop
              * 14 times
                                          1241  label('ENTER')
ENTER:        02ff fc03  bra  .next2      1242  bra('.next2')                   #0 Enter at '.next2' (so no startup overhead)
                                          1243  # --- Page boundary ---
                                          1244  align(0x100,0x100)
              0300 1517  ld   [$17],y     1245  ld([vPC+1], Y)                  #1
                                          1246
                                          1247  # Fetch next instruction and execute it, but only if there are sufficient
                                          1248  # ticks left for the slowest instruction.
                                          1249  label('NEXT')
NEXT:         0301 8115  adda [$15]       1250  adda([vTicks])                  #0 Track elapsed ticks (actually counting down: AC<0)
              0302 e80b  blt  EXIT        1251  blt('EXIT')                     #1 Escape near time out
                                          1252  label('.next2')
.next2:       0303 c215  st   [$15]       1253  st([vTicks])                    #2
              0304 0116  ld   [$16]       1254  ld([vPC])                       #3 Advance vPC
              0305 8002  adda $02         1255  adda(2)                         #4
              0306 d216  st   [$16],x     1256  st([vPC],X)                     #5
              0307 0d00  ld   [y,x]       1257  ld([Y,X])                       #6 Fetch opcode (actually a branch target)
              0308 de00  st   [y,x++]     1258  st([Y,Xpp])                     #7 Just X++
              0309 fe00  bra  ac          1259  bra(AC)                         #8 Dispatch
              030a 0d00  ld   [y,x]       1260  ld([Y,X])                       #9 Prefetch operand
                                          1261
                                          1262  # Resync with video driver and transfer control
                                          1263  label('EXIT')
EXIT:         030b 800e  adda $0e         1264  adda(maxTicks)                  #3
              030c e40c  bgt  $030c       1265  bgt(pc()&255)                   #4 Resync
              030d a001  suba $01         1266  suba(1)                         #5
              030e 1401  ld   $01,y       1267  ld(hi('vBlankStart'), Y)        #6
              030f e11e  jmp  y,[$1e]     1268  jmp(Y,[vReturn])                #7 To video driver
              0310 0000  ld   $00         1269  ld(0)                           #8 AC should be 0 already. Still..
                                          1270  assert vCPU_overhead ==          9
                                          1271
                                          1272  # Instruction LDWI: Load immediate word constant (vAC=D), 20 cycles
                                          1273  label('LDWI')
LDWI:         0311 c218  st   [$18]       1274  st([vAC])                       #10
              0312 de00  st   [y,x++]     1275  st([Y,Xpp])                     #11 Just to increment X
              0313 0d00  ld   [y,x]       1276  ld([Y,X])                       #12 Fetch second operand
              0314 c219  st   [$19]       1277  st([vAC+1])                     #13
              0315 0116  ld   [$16]       1278  ld([vPC])                       #14 Advance vPC one more
              0316 8001  adda $01         1279  adda(1)                         #15
              0317 c216  st   [$16]       1280  st([vPC])                       #16
              0318 00f6  ld   $f6         1281  ld(-20/2)                       #17
              0319 fc01  bra  NEXT        1282  bra('NEXT')                     #18
                                          1283  #nop()                          #19 Overlap
                                          1284  #
                                          1285  # Instruction LD: Load byte from zero page (vAC=[D]), 18 cycles
                                          1286  label('LD')
LD:           031a 1200  ld   ac,x        1287  ld(AC, X)                       #10,19
              031b 0500  ld   [x]         1288  ld([X])                         #11
              031c c218  st   [$18]       1289  st([vAC])                       #12
              031d 0000  ld   $00         1290  ld(0)                           #13
              031e c219  st   [$19]       1291  st([vAC+1])                     #14
              031f 00f7  ld   $f7         1292  ld(-18/2)                       #15
              0320 fc01  bra  NEXT        1293  bra('NEXT')                     #16
                                          1294  #nop()                          #17 Overlap
                                          1295  #
                                          1296  # Instruction LDW: Load word from zero page (vAC=[D]+256*[D+1]), 20 cycles
                                          1297  label('LDW')
LDW:          0321 1200  ld   ac,x        1298  ld(AC, X)                       #10,17
              0322 8001  adda $01         1299  adda(1)                         #11
              0323 c21d  st   [$1d]       1300  st([vTmp])                      #12 Address of high byte
              0324 0500  ld   [x]         1301  ld([X])                         #13
              0325 c218  st   [$18]       1302  st([vAC])                       #14
              0326 111d  ld   [$1d],x     1303  ld([vTmp], X)                   #15
              0327 0500  ld   [x]         1304  ld([X])                         #16
              0328 c219  st   [$19]       1305  st([vAC+1])                     #17
              0329 fc01  bra  NEXT        1306  bra('NEXT')                     #18
              032a 00f6  ld   $f6         1307  ld(-20/2)                       #19
                                          1308
                                          1309  # Instruction STW: Store word in zero page ([D],[D+1]=vAC&255,vAC>>8), 20 cycles
                                          1310  label('STW')
STW:          032b 1200  ld   ac,x        1311  ld(AC, X)                       #10,20
              032c 8001  adda $01         1312  adda(1)                         #11
              032d c21d  st   [$1d]       1313  st([vTmp])                      #12 Address of high byte
              032e 0118  ld   [$18]       1314  ld([vAC])                       #13
              032f c600  st   [x]         1315  st([X])                         #14
              0330 111d  ld   [$1d],x     1316  ld([vTmp], X)                   #15
              0331 0119  ld   [$19]       1317  ld([vAC+1])                     #16
              0332 c600  st   [x]         1318  st([X])                         #17
              0333 fc01  bra  NEXT        1319  bra('NEXT')                     #18
              0334 00f6  ld   $f6         1320  ld(-20/2)                       #19
                                          1321
                                          1322  # Instruction BCC: Test AC sign and branch conditionally, 28 cycles
                                          1323  label('BCC')
BCC:          0335 0119  ld   [$19]       1324  ld([vAC+1])                     #10 First inspect high byte of vAC
              0336 ec40  bne  .cond2      1325  bne('.cond2')                   #11
              0337 c21d  st   [$1d]       1326  st([vTmp])                      #12
              0338 0118  ld   [$18]       1327  ld([vAC])                       #13 Additionally inspect low byte of vAC
              0339 f043  beq  .cond3      1328  beq('.cond3')                   #14
              033a 0001  ld   $01         1329  ld(1)                           #15
              033b c21d  st   [$1d]       1330  st([vTmp])                      #16
              033c 0d00  ld   [y,x]       1331  ld([Y,X])                       #17 Operand is the conditional
                                          1332  label('.cond1')
.cond1:       033d fe00  bra  ac          1333  bra(AC)                         #18
              033e 011d  ld   [$1d]       1334  ld([vTmp])                      #19
                                          1335
                                          1336  # Conditional EQ: Branch if zero (if(vACL==0)vPCL=D)
                                          1337  label('EQ')
EQ:           033f ec45  bne  .cond4      1338  bne('.cond4')                   #20
                                          1339  label('.cond2')
.cond2:       0340 f048  beq  .cond5      1340  beq('.cond5')                   #21,13 AC=0 in EQ, AC!=0 from BCC... Overlap with BCC
              0341 0d00  ld   [y,x]       1341  ld([Y,X])                       #22,14 Overlap with BCC
                                          1342  #
                                          1343  # (continue BCC)
                                          1344  #label('.cond2')
                                          1345  #nop()                          #13
                                          1346  #nop()                          #14
              0342 0200  nop              1347  nop()                           #15
                                          1348  label('.cond3')
.cond3:       0343 fc3d  bra  .cond1      1349  bra('.cond1')                   #16
              0344 0d00  ld   [y,x]       1350  ld([Y,X])                       #17 Operand is the conditional
                                          1351  label('.cond4')
.cond4:       0345 0116  ld   [$16]       1352  ld([vPC])                       #22 False condition
              0346 fc4a  bra  .cond6      1353  bra('.cond6')                   #23
              0347 8001  adda $01         1354  adda(1)                         #24
                                          1355  label('.cond5')
.cond5:       0348 de00  st   [y,x++]     1356  st([Y,Xpp])                     #23 Just X++ True condition
              0349 0d00  ld   [y,x]       1357  ld([Y,X])                       #24
                                          1358  label('.cond6')
.cond6:       034a c216  st   [$16]       1359  st([vPC])                       #25
              034b fc01  bra  NEXT        1360  bra('NEXT')                     #26
              034c 00f2  ld   $f2         1361  ld(-28/2)                       #27
                                          1362
                                          1363  # Conditional GT: Branch if positive (if(vACL>0)vPCL=D)
                                          1364  label('GT')
GT:           034d f845  ble  .cond4      1365  ble('.cond4')                   #20
              034e e448  bgt  .cond5      1366  bgt('.cond5')                   #21
              034f 0d00  ld   [y,x]       1367  ld([Y,X])                       #22
                                          1368
                                          1369  # Conditional LT: Branch if negative (if(vACL<0)vPCL=D)
                                          1370  label('LT')
LT:           0350 f445  bge  .cond4      1371  bge('.cond4')                   #20
              0351 e848  blt  .cond5      1372  blt('.cond5')                   #21
              0352 0d00  ld   [y,x]       1373  ld([Y,X])                       #22
                                          1374
                                          1375  # Conditional GE: Branch if positive or zero (if(vACL>=0)vPCL=D)
                                          1376  label('GE')
GE:           0353 e845  blt  .cond4      1377  blt('.cond4')                   #20
              0354 f448  bge  .cond5      1378  bge('.cond5')                   #21
              0355 0d00  ld   [y,x]       1379  ld([Y,X])                       #22
                                          1380
                                          1381  # Conditional LE: Branch if negative or zero (if(vACL<=0)vPCL=D)
                                          1382  label('LE')
LE:           0356 e445  bgt  .cond4      1383  bgt('.cond4')                   #20
              0357 f848  ble  .cond5      1384  ble('.cond5')                   #21
              0358 0d00  ld   [y,x]       1385  ld([Y,X])                       #22
                                          1386
                                          1387  # Instruction LDI: Load immediate small positive constant (vAC=D), 16 cycles
                                          1388  label('LDI')
LDI:          0359 c218  st   [$18]       1389  st([vAC])                       #10
              035a 0000  ld   $00         1390  ld(0)                           #11
              035b c219  st   [$19]       1391  st([vAC+1])                     #12
              035c 00f8  ld   $f8         1392  ld(-16/2)                       #13
              035d fc01  bra  NEXT        1393  bra('NEXT')                     #14
                                          1394  #nop()                          #15 Overlap
                                          1395  #
                                          1396  # Instruction ST: Store byte in zero page ([D]=vAC&255), 16 cycles
                                          1397  label('ST')
ST:           035e 1200  ld   ac,x        1398  ld(AC, X)                       #10,15
              035f 0118  ld   [$18]       1399  ld([vAC])                       #11
              0360 c600  st   [x]         1400  st([X])                         #12
              0361 00f8  ld   $f8         1401  ld(-16/2)                       #13
              0362 fc01  bra  NEXT        1402  bra('NEXT')                     #14
                                          1403  #nop()                          #15 Overlap
                                          1404  #
                                          1405  # Instruction POP: Pop address from stack (vLR,vSP==[vSP]+256*[vSP+1],vSP+2), 26 cycles
                                          1406  label('POP')
POP:          0363 111c  ld   [$1c],x     1407  ld([vSP], X)                    #10,15
              0364 0500  ld   [x]         1408  ld([X])                         #11
              0365 c21a  st   [$1a]       1409  st([vLR])                       #12
              0366 011c  ld   [$1c]       1410  ld([vSP])                       #13
              0367 9001  adda $01,x       1411  adda(1, X)                      #14
              0368 0500  ld   [x]         1412  ld([X])                         #15
              0369 c21b  st   [$1b]       1413  st([vLR+1])                     #16
              036a 011c  ld   [$1c]       1414  ld([vSP])                       #17
              036b 8002  adda $02         1415  adda(2)                         #18
              036c c21c  st   [$1c]       1416  st([vSP])                       #19
                                          1417  label('next1')
next1:        036d 0116  ld   [$16]       1418  ld([vPC])                       #20
              036e a001  suba $01         1419  suba(1)                         #21
              036f c216  st   [$16]       1420  st([vPC])                       #22
              0370 00f3  ld   $f3         1421  ld(-26/2)                       #23
              0371 fc01  bra  NEXT        1422  bra('NEXT')                     #24
                                          1423  #nop()                          #25 Overlap
                                          1424  #
                                          1425  # Conditional NE: Branch if not zero (if(vACL!=0)vPCL=D)
                                          1426  label('NE')
NE:           0372 f045  beq  .cond4      1427  beq('.cond4')                   #20,25
              0373 ec48  bne  .cond5      1428  bne('.cond5')                   #21
              0374 0d00  ld   [y,x]       1429  ld([Y,X])                       #22
                                          1430
                                          1431  # Instruction PUSH: Push vLR on stack ([vSP-2],v[vSP-1],vSP=vLR&255,vLR>>8,vLR-2), 26 cycles
                                          1432  label('PUSH')
PUSH:         0375 011c  ld   [$1c]       1433  ld([vSP])                       #10
              0376 b001  suba $01,x       1434  suba(1, X)                      #11
              0377 011b  ld   [$1b]       1435  ld([vLR+1])                     #12
              0378 c600  st   [x]         1436  st([X])                         #13
              0379 011c  ld   [$1c]       1437  ld([vSP])                       #14
              037a a002  suba $02         1438  suba(2)                         #15
              037b d21c  st   [$1c],x     1439  st([vSP], X)                    #16
              037c 011a  ld   [$1a]       1440  ld([vLR])                       #17
              037d fc6d  bra  next1       1441  bra('next1')                    #18
              037e c600  st   [x]         1442  st([X])                         #19
                                          1443
                                          1444  # Instruction LUP: ROM lookup (vAC=ROM[vAC+D]), 26 cycles
                                          1445  label('LUP')
LUP:          037f 1519  ld   [$19],y     1446  ld([vAC+1], Y)                  #10
              0380 e0fb  jmp  y,$fb       1447  jmp(Y,251)                      #11 Trampoline offset
              0381 8118  adda [$18]       1448  adda([vAC])                     #12
                                          1449
                                          1450  # Instruction ANDI: Logical-AND with small constant (vAC&=D), 16 cycles
                                          1451  label('ANDI')
ANDI:         0382 2118  anda [$18]       1452  anda([vAC])                     #10
              0383 c218  st   [$18]       1453  st([vAC])                       #11
              0384 0000  ld   $00         1454  ld(0)                           #12 Clear high byte
              0385 c219  st   [$19]       1455  st([vAC+1])                     #13
              0386 fc01  bra  NEXT        1456  bra('NEXT')                     #14
              0387 00f8  ld   $f8         1457  ld(-16/2)                       #15
                                          1458
                                          1459  # Instruction ORI: Logical-OR with small constant (vAC|=D), 14 cycles
                                          1460  label('ORI')
ORI:          0388 4118  ora  [$18]       1461  ora([vAC])                      #10
              0389 c218  st   [$18]       1462  st([vAC])                       #11
              038a fc01  bra  NEXT        1463  bra('NEXT')                     #12
              038b 00f9  ld   $f9         1464  ld(-14/2)                       #13
                                          1465
                                          1466  # Instruction XORI: Logical-XOR with small constant (vAC^=D), 14 cycles
                                          1467  label('XORI')
XORI:         038c 6118  xora [$18]       1468  xora([vAC])                     #10
              038d c218  st   [$18]       1469  st([vAC])                       #11
              038e fc01  bra  NEXT        1470  bra('NEXT')                     #12
              038f 00f9  ld   $f9         1471  ld(-14/2)                       #13
                                          1472
                                          1473  # Instruction BRA: Branch unconditionally (vPC=(vPC&0xff00)+D), 14 cycles
                                          1474  label('BRA')
BRA:          0390 c216  st   [$16]       1475  st([vPC])                       #10
              0391 00f9  ld   $f9         1476  ld(-14/2)                       #11
              0392 fc01  bra  NEXT        1477  bra('NEXT')                     #12
                                          1478  #nop()                          #13 Overlap
                                          1479  #
                                          1480  # Instruction INC: Increment zero page byte ([D]++), 16 cycles
                                          1481  label('INC')
INC:          0393 1200  ld   ac,x        1482  ld(AC, X)                       #10,13
              0394 0500  ld   [x]         1483  ld([X])                         #11
              0395 8001  adda $01         1484  adda(1)                         #12
              0396 c600  st   [x]         1485  st([X])                         #13
              0397 fc01  bra  NEXT        1486  bra('NEXT')                     #14
              0398 00f8  ld   $f8         1487  ld(-16/2)                       #15
                                          1488
                                          1489  # Instruction ADDW: Word addition with zero page (vAC+=[D]+256*[D+1]), 28 cycles
                                          1490  label('ADDW')
                                          1491  # The non-carry paths could be 26 cycles at the expense of (much) more code.
                                          1492  # But a smaller size is better so more instructions fit in this code page.
                                          1493  # 28 cycles is still 4.5 usec. The 6502 equivalent takes 20 cycles or 20 usec.
ADDW:         0399 1200  ld   ac,x        1494  ld(AC, X)                       #10 Address of low byte to be added
              039a 8001  adda $01         1495  adda(1)                         #11
              039b c21d  st   [$1d]       1496  st([vTmp])                      #12 Address of high byte to be added
              039c 0118  ld   [$18]       1497  ld([vAC])                       #13 Add the low bytes
              039d 8500  adda [x]         1498  adda([X])                       #14
              039e c218  st   [$18]       1499  st([vAC])                       #15 Store low result
              039f e8a3  blt  .addw0      1500  bmi('.addw0')                   #16 Now figure out if there was a carry
              03a0 a500  suba [x]         1501  suba([X])                       #17 Gets back the initial value of vAC
              03a1 fca5  bra  .addw1      1502  bra('.addw1')                   #18
              03a2 4500  ora  [x]         1503  ora([X])                        #19 Carry in bit 7
                                          1504  label('.addw0')
.addw0:       03a3 2500  anda [x]         1505  anda([X])                       #18 Carry in bit 7
              03a4 0200  nop              1506  nop()                           #19
                                          1507  label('.addw1')
.addw1:       03a5 3080  anda $80,x       1508  anda(0x80, X)                   #20 Move carry to bit 0
              03a6 0500  ld   [x]         1509  ld([X])                         #21
              03a7 8119  adda [$19]       1510  adda([vAC+1])                   #22 Add the high bytes with carry
              03a8 111d  ld   [$1d],x     1511  ld([vTmp], X)                   #23
              03a9 8500  adda [x]         1512  adda([X])                       #24
              03aa c219  st   [$19]       1513  st([vAC+1])                     #25 Store high result
              03ab fc01  bra  NEXT        1514  bra('NEXT')                     #26
              03ac 00f2  ld   $f2         1515  ld(-28/2)                       #27
                                          1516
                                          1517  # Instruction PEEK: Read byte from memory (vAC=[vAC]), 26 cycles
                                          1518  label('PEEK')
PEEK:         03ad 1404  ld   $04,y       1519  ld(hi('peek'), Y)               #10
              03ae e05f  jmp  y,$5f       1520  jmp(Y,'peek')                   #11
                                          1521  #ld([vPC])                      #12 Overlap
                                          1522  #
                                          1523  # Instruction SYS: Native call, <=256 cycles (<=128 ticks, in reality less)
                                          1524  #
                                          1525  # The 'SYS' vCPU instruction first checks the number of desired ticks given by
                                          1526  # the operand. As long as there are insufficient ticks available in the current
                                          1527  # time slice, the instruction will be retried. This will effectively wait for
                                          1528  # the next scan line if the current slice is almost out of time. Then a jump to
                                          1529  # native code is made. This code can do whatever it wants, but it must return
                                          1530  # to the 'REENTER' label when done. When returning, AC must hold (the negative
                                          1531  # of) the actual consumed number of whole ticks for the entire virtual
                                          1532  # instruction cycle (from NEXT to NEXT). This duration may not exceed the prior
                                          1533  # declared duration in the operand + 28 (or maxTicks). The operand specifies the
                                          1534  # (negative) of the maximum number of *extra* ticks that the native call will
                                          1535  # need. The GCL compiler automatically makes this calculation from gross number
                                          1536  # of cycles to excess number of ticks.
                                          1537  # SYS functions can modify vPC to implement repetition. For example to split
                                          1538  # up work into multiple chucks.
                                          1539  label('retry')
retry:        03af 0116  ld   [$16]       1540  ld([vPC])                       #13,12 Retry until sufficient time
              03b0 a002  suba $02         1541  suba(2)                         #14
              03b1 c216  st   [$16]       1542  st([vPC])                       #15
              03b2 fccb  bra  REENTER     1543  bra('REENTER')                  #16
              03b3 00f6  ld   $f6         1544  ld(-20/2)                       #17
                                          1545  label('SYS')
SYS:          03b4 8115  adda [$15]       1546  adda([vTicks])                  #10
              03b5 e8af  blt  retry       1547  blt('retry')                    #11
              03b6 1523  ld   [$23],y     1548  ld([sysFn+1], Y)                #12
              03b7 e122  jmp  y,[$22]     1549  jmp(Y,[sysFn])                  #13
                                          1550  #nop()                          #14 Overlap
                                          1551  #
                                          1552  # Instruction SUBW: Word subtract with zero page (AC-=[D]+256*[D+1]), 28 cycles
                                          1553  # All cases can be done in 26 cycles, but the code will become much larger
                                          1554  label('SUBW')
SUBW:         03b8 1200  ld   ac,x        1555  ld(AC, X)                       #10,14 Address of low byte to be subtracted
              03b9 8001  adda $01         1556  adda(1)                         #11
              03ba c21d  st   [$1d]       1557  st([vTmp])                      #12 Address of high byte to be subtracted
              03bb 0118  ld   [$18]       1558  ld([vAC])                       #13
              03bc e8c1  blt  .subw0      1559  bmi('.subw0')                   #14
              03bd a500  suba [x]         1560  suba([X])                       #15
              03be c218  st   [$18]       1561  st([vAC])                       #16 Store low result
              03bf fcc4  bra  .subw1      1562  bra('.subw1')                   #17
              03c0 4500  ora  [x]         1563  ora([X])                        #18 Carry in bit 7
                                          1564  label('.subw0')
.subw0:       03c1 c218  st   [$18]       1565  st([vAC])                       #16 Store low result
              03c2 2500  anda [x]         1566  anda([X])                       #17 Carry in bit 7
              03c3 0200  nop              1567  nop()                           #18
                                          1568  label('.subw1')
.subw1:       03c4 3080  anda $80,x       1569  anda(0x80, X)                   #19 Move carry to bit 0
              03c5 0119  ld   [$19]       1570  ld([vAC+1])                     #20
              03c6 a500  suba [x]         1571  suba([X])                       #21
              03c7 111d  ld   [$1d],x     1572  ld([vTmp], X)                   #22
              03c8 a500  suba [x]         1573  suba([X])                       #23
              03c9 c219  st   [$19]       1574  st([vAC+1])                     #24
              03ca 00f2  ld   $f2         1575  ld(-28/2)                       #25
                                          1576  label('REENTER')
REENTER:      03cb fc01  bra  NEXT        1577  bra('NEXT')                     #26 Return from SYS calls
              03cc 1517  ld   [$17],y     1578  ld([vPC+1], Y)                  #27
                                          1579
                                          1580  # Instruction DEF: Define data or code (vAC,vPC=vPC+2,(vPC&0xff00)+D), 18 cycles
                                          1581  label('DEF')
DEF:          03cd 1404  ld   $04,y       1582  ld(hi('def'), Y)                #10
              03ce e007  jmp  y,$07       1583  jmp(Y,'def')                    #11
                                          1584  #st([vTmp])                     #12 Overlap
                                          1585  #
                                          1586  # Instruction CALL: Goto address but remember vPC (vLR,vPC=vPC+2,[D]+256*[D+1]-2), 26 cycles
                                          1587  label('CALL')
CALL:         03cf c21d  st   [$1d]       1588  st([vTmp])                      #10,12
              03d0 0116  ld   [$16]       1589  ld([vPC])                       #11
              03d1 8002  adda $02         1590  adda(2)                         #12 Point to instruction after CALL
              03d2 c21a  st   [$1a]       1591  st([vLR])                       #13
              03d3 0117  ld   [$17]       1592  ld([vPC+1])                     #14
              03d4 c21b  st   [$1b]       1593  st([vLR+1])                     #15
              03d5 111d  ld   [$1d],x     1594  ld([vTmp], X)                   #16
              03d6 0500  ld   [x]         1595  ld([X])                         #17
              03d7 a002  suba $02         1596  suba(2)                         #18 Because NEXT will add 2
              03d8 c216  st   [$16]       1597  st([vPC])                       #19
              03d9 011d  ld   [$1d]       1598  ld([vTmp])                      #20
              03da 9001  adda $01,x       1599  adda(1, X)                      #21
              03db 0500  ld   [x]         1600  ld([X])                         #22
              03dc d617  st   [$17],y     1601  st([vPC+1], Y)                  #23
              03dd fc01  bra  NEXT        1602  bra('NEXT')                     #24
              03de 00f3  ld   $f3         1603  ld(-26/2)                       #25
                                          1604
                                          1605  # Instruction ALLOC: Create or destroy stack frame (vSP+=D), 14 cycles
                                          1606  label('ALLOC')
ALLOC:        03df 811c  adda [$1c]       1607  adda([vSP])                     #10
              03e0 c21c  st   [$1c]       1608  st([vSP])                       #11
              03e1 fc01  bra  NEXT        1609  bra('NEXT')                     #12
              03e2 00f9  ld   $f9         1610  ld(-14/2)                       #13
                                          1611
                                          1612  # The instructions below are all implemented in the second code page. Jumping
                                          1613  # back and forth makes each 6 cycles slower, but it also saves space in the
                                          1614  # primary page for the instructions above. Most of them are in fact not very
                                          1615  # critical, as evidenced by the fact that they weren't needed for the first
                                          1616  # Gigatron applications (Snake, Racer, Mandelbrot, Loader). By providing them
                                          1617  # in this way, at least they don't need to be implemented as a SYS extension.
                                          1618
                                          1619  # Instruction ADDI: Add small positive constant (vAC+=D), 28 cycles
                                          1620  label('ADDI')
ADDI:         03e3 1404  ld   $04,y       1621  ld(hi('addi'), Y)               #10
              03e4 e012  jmp  y,$12       1622  jmp(Y,'addi')                   #11
              03e5 c21d  st   [$1d]       1623  st([vTmp])                      #12
                                          1624
                                          1625  # Instruction SUBI: Subtract small positive constant (vAC+=D), 28 cycles
                                          1626  label('SUBI')
SUBI:         03e6 1404  ld   $04,y       1627  ld(hi('subi'), Y)               #10
              03e7 e021  jmp  y,$21       1628  jmp(Y,'subi')                   #11
              03e8 c21d  st   [$1d]       1629  st([vTmp])                      #12
                                          1630
                                          1631  # Instruction LSLW: Logical shift left (vAC<<=1), 28 cycles
                                          1632  # Useful, because ADDW can't add vAC to itself. Also more compact.
                                          1633  label('LSLW')
LSLW:         03e9 1404  ld   $04,y       1634  ld(hi('lslw'), Y)               #10
              03ea e031  jmp  y,$31       1635  jmp(Y,'lslw')                   #11
              03eb 0118  ld   [$18]       1636  ld([vAC])                       #12
                                          1637
                                          1638  # Instruction STLW: Store word in stack frame ([vSP+D],[vSP+D+1]=vAC&255,vAC>>8), 26 cycles
                                          1639  label('STLW')
STLW:         03ec 1404  ld   $04,y       1640  ld(hi('stlw'), Y)               #10
              03ed e03e  jmp  y,$3e       1641  jmp(Y,'stlw')                   #11
                                          1642  #nop()                          #12 Overlap
                                          1643  #
                                          1644  # Instruction LDLW: Load word from stack frame (vAC=[vSP+D]+256*[vSP+D+1]), 26 cycles
                                          1645  label('LDLW')
LDLW:         03ee 1404  ld   $04,y       1646  ld(hi('ldlw'), Y)               #10,12
              03ef e049  jmp  y,$49       1647  jmp(Y,'ldlw')                   #11
                                          1648  #nop()                          #12 Overlap
                                          1649  #
                                          1650  # Instruction POKE: Write byte in memory ([[D+1],[D]]=vAC&255), 28 cycles
                                          1651  label('POKE')
POKE:         03f0 1404  ld   $04,y       1652  ld(hi('poke'), Y)               #10,12
              03f1 e054  jmp  y,$54       1653  jmp(Y,'poke')                   #11
              03f2 c21d  st   [$1d]       1654  st([vTmp])                      #12
                                          1655
                                          1656  # Instruction DOKE: Write word in memory ([[D+1],[D]],[[D+1],[D]+1]=vAC&255,vAC>>8), 28 cycles
                                          1657  label('DOKE')
DOKE:         03f3 1404  ld   $04,y       1658  ld(hi('doke'), Y)               #10
              03f4 e06a  jmp  y,$6a       1659  jmp(Y,'doke')                   #11
              03f5 c21d  st   [$1d]       1660  st([vTmp])                      #12
                                          1661
                                          1662  # Instruction DEEK: Read word from memory (vAC=[vAC]+256*[vAC+1]), 28 cycles
                                          1663  label('DEEK')
DEEK:         03f6 1404  ld   $04,y       1664  ld(hi('deek'), Y)               #10
              03f7 e077  jmp  y,$77       1665  jmp(Y,'deek')                   #11
                                          1666  #nop()                          #12 Overlap
                                          1667  #
                                          1668  # Instruction ANDW: Word logical-AND with zero page (vAC&=[D]+256*[D+1]), 28 cycles
                                          1669  label('ANDW')
ANDW:         03f8 1404  ld   $04,y       1670  ld(hi('andw'), Y)               #10,12
              03f9 e084  jmp  y,$84       1671  jmp(Y,'andw')                   #11
                                          1672  #nop()                          #12 Overlap
                                          1673  #
                                          1674  # Instruction ORW: Word logical-OR with zero page (vAC|=[D]+256*[D+1]), 28 cycles
                                          1675  label('ORW')
ORW:          03fa 1404  ld   $04,y       1676  ld(hi('orw'), Y)                #10,12
              03fb e090  jmp  y,$90       1677  jmp(Y,'orw')                    #11
                                          1678  #nop()                          #12 Overlap
                                          1679  #
                                          1680  # Instruction XORW: Word logical-XOR with zero page (vAC^=[D]+256*[D+1]), 26 cycles
                                          1681  label('XORW')
XORW:         03fc 1404  ld   $04,y       1682  ld(hi('xorw'), Y)               #10,12
              03fd e09c  jmp  y,$9c       1683  jmp(Y,'xorw')                   #11
              03fe c21d  st   [$1d]       1684  st([vTmp])                      #12
                                          1685  # We keep XORW 2 cycles faster than ANDW/ORW, because that
                                          1686  # can be useful for comparing numbers for equality a tiny
                                          1687  # bit faster than with SUBW
                                          1688
                                          1689  # Instruction RET: Function return (vPC=vLR-2), 16 cycles
                                          1690  label('RET')
RET:          03ff 011a  ld   [$1a]       1691  ld([vLR])                       #10
                                          1692  assert pc()&255 == 0
                                          1693
                                          1694  #-----------------------------------------------------------------------
                                          1695  #
                                          1696  #  $0400 ROM page 4: Application interpreter extension
                                          1697  #
                                          1698  #-----------------------------------------------------------------------
                                          1699  align(0x100, 0x100)
                                          1700
                                          1701  # (Continue RET)
              0400 a002  suba $02         1702  suba(2)                         #11
              0401 c216  st   [$16]       1703  st([vPC])                       #12
              0402 011b  ld   [$1b]       1704  ld([vLR+1])                     #13
              0403 c217  st   [$17]       1705  st([vPC+1])                     #14
              0404 1403  ld   $03,y       1706  ld(hi('REENTER'), Y)            #15
              0405 e0cb  jmp  y,$cb       1707  jmp(Y,'REENTER')                #16
              0406 00f6  ld   $f6         1708  ld(-20/2)                       #17
                                          1709
                                          1710  # DEF implementation
                                          1711  label('def')
def:          0407 0116  ld   [$16]       1712  ld([vPC])                       #13
              0408 8002  adda $02         1713  adda(2)                         #14
              0409 c218  st   [$18]       1714  st([vAC])                       #15
              040a 0117  ld   [$17]       1715  ld([vPC+1])                     #16
              040b c219  st   [$19]       1716  st([vAC+1])                     #17
              040c 011d  ld   [$1d]       1717  ld([vTmp])                      #18
              040d c216  st   [$16]       1718  st([vPC])                       #19
              040e 1403  ld   $03,y       1719  ld(hi('REENTER'), Y)            #20
              040f 00f3  ld   $f3         1720  ld(-26/2)                       #21
              0410 e0cb  jmp  y,$cb       1721  jmp(Y,'REENTER')                #22
              0411 0200  nop              1722  nop()                           #23
                                          1723
                                          1724  # ADDI implementation
                                          1725  label('addi')
addi:         0412 8118  adda [$18]       1726  adda([vAC])                     #13
              0413 c218  st   [$18]       1727  st([vAC])                       #14 Store low result
              0414 e818  blt  .addi0      1728  bmi('.addi0')                   #15 Now figure out if there was a carry
              0415 a11d  suba [$1d]       1729  suba([vTmp])                    #16 Gets back the initial value of vAC
              0416 fc1a  bra  .addi1      1730  bra('.addi1')                   #17
              0417 411d  ora  [$1d]       1731  ora([vTmp])                     #18 Carry in bit 7
                                          1732  label('.addi0')
.addi0:       0418 211d  anda [$1d]       1733  anda([vTmp])                    #17 Carry in bit 7
              0419 0200  nop              1734  nop()                           #18
                                          1735  label('.addi1')
.addi1:       041a 3080  anda $80,x       1736  anda(0x80, X)                   #19 Move carry to bit 0
              041b 0500  ld   [x]         1737  ld([X])                         #20
              041c 8119  adda [$19]       1738  adda([vAC+1])                   #21 Add the high bytes with carry
              041d c219  st   [$19]       1739  st([vAC+1])                     #22 Store high result
              041e 1403  ld   $03,y       1740  ld(hi('REENTER'), Y)            #23
              041f e0cb  jmp  y,$cb       1741  jmp(Y,'REENTER')                #24
              0420 00f2  ld   $f2         1742  ld(-28/2)                       #25
                                          1743
                                          1744  # SUBI implementation
                                          1745  label('subi')
subi:         0421 0118  ld   [$18]       1746  ld([vAC])                       #13
              0422 e827  blt  .subi0      1747  bmi('.subi0')                   #14
              0423 a11d  suba [$1d]       1748  suba([vTmp])                    #15
              0424 c218  st   [$18]       1749  st([vAC])                       #16 Store low result
              0425 fc2a  bra  .subi1      1750  bra('.subi1')                   #17
              0426 411d  ora  [$1d]       1751  ora([vTmp])                     #18 Carry in bit 7
                                          1752  label('.subi0')
.subi0:       0427 c218  st   [$18]       1753  st([vAC])                       #16 Store low result
              0428 211d  anda [$1d]       1754  anda([vTmp])                    #17 Carry in bit 7
              0429 0200  nop              1755  nop()                           #18
                                          1756  label('.subi1')
.subi1:       042a 3080  anda $80,x       1757  anda(0x80, X)                   #19 Move carry to bit 0
              042b 0119  ld   [$19]       1758  ld([vAC+1])                     #20
              042c a500  suba [x]         1759  suba([X])                       #21
              042d c219  st   [$19]       1760  st([vAC+1])                     #22
              042e 1403  ld   $03,y       1761  ld(hi('REENTER'), Y)            #23
              042f e0cb  jmp  y,$cb       1762  jmp(Y,'REENTER')                #24
              0430 00f2  ld   $f2         1763  ld(-28/2)                       #25
                                          1764
                                          1765  # LSLW implementation
                                          1766  label('lslw')
lslw:         0431 3080  anda $80,x       1767  anda(128, X)                    #13
              0432 8118  adda [$18]       1768  adda([vAC])                     #14
              0433 c218  st   [$18]       1769  st([vAC])                       #15
              0434 0500  ld   [x]         1770  ld([X])                         #16
              0435 8119  adda [$19]       1771  adda([vAC+1])                   #17
              0436 8119  adda [$19]       1772  adda([vAC+1])                   #18
              0437 c219  st   [$19]       1773  st([vAC+1])                     #19
              0438 0116  ld   [$16]       1774  ld([vPC])                       #20
              0439 a001  suba $01         1775  suba(1)                         #21
              043a c216  st   [$16]       1776  st([vPC])                       #22
              043b 1403  ld   $03,y       1777  ld(hi('REENTER'), Y)            #23
              043c e0cb  jmp  y,$cb       1778  jmp(Y,'REENTER')                #24
              043d 00f2  ld   $f2         1779  ld(-28/2)                       #25
                                          1780
                                          1781  # STLW implementation
                                          1782  label('stlw')
stlw:         043e 811c  adda [$1c]       1783  adda([vSP])                     #13
              043f c21d  st   [$1d]       1784  st([vTmp])                      #14
              0440 9001  adda $01,x       1785  adda(1, X)                      #15
              0441 0119  ld   [$19]       1786  ld([vAC+1])                     #16
              0442 c600  st   [x]         1787  st([X])                         #17
              0443 111d  ld   [$1d],x     1788  ld([vTmp], X)                   #18
              0444 0118  ld   [$18]       1789  ld([vAC])                       #19
              0445 c600  st   [x]         1790  st([X])                         #20
              0446 1403  ld   $03,y       1791  ld(hi('REENTER'), Y)            #21
              0447 e0cb  jmp  y,$cb       1792  jmp(Y,'REENTER')                #22
              0448 00f3  ld   $f3         1793  ld(-26/2)                       #23
                                          1794
                                          1795  # LDLW implementation
                                          1796  label('ldlw')
ldlw:         0449 811c  adda [$1c]       1797  adda([vSP])                     #13
              044a c21d  st   [$1d]       1798  st([vTmp])                      #14
              044b 9001  adda $01,x       1799  adda(1, X)                      #15
              044c 0500  ld   [x]         1800  ld([X])                         #16
              044d c219  st   [$19]       1801  st([vAC+1])                     #17
              044e 111d  ld   [$1d],x     1802  ld([vTmp], X)                   #18
              044f 0500  ld   [x]         1803  ld([X])                         #19
              0450 c218  st   [$18]       1804  st([vAC])                       #20
              0451 1403  ld   $03,y       1805  ld(hi('REENTER'), Y)            #21
              0452 e0cb  jmp  y,$cb       1806  jmp(Y,'REENTER')                #22
              0453 00f3  ld   $f3         1807  ld(-26/2)                       #23
                                          1808
                                          1809  # POKE implementation
                                          1810  label('poke')
poke:         0454 9001  adda $01,x       1811  adda(1, X)                      #13
              0455 0500  ld   [x]         1812  ld([X])                         #14
              0456 1600  ld   ac,y        1813  ld(AC, Y)                       #15
              0457 111d  ld   [$1d],x     1814  ld([vTmp], X)                   #16
              0458 0500  ld   [x]         1815  ld([X])                         #17
              0459 1200  ld   ac,x        1816  ld(AC, X)                       #18
              045a 0118  ld   [$18]       1817  ld([vAC])                       #19
              045b ce00  st   [y,x]       1818  st([Y,X])                       #20
              045c 1403  ld   $03,y       1819  ld(hi('REENTER'), Y)            #21
              045d e0cb  jmp  y,$cb       1820  jmp(Y,'REENTER')                #22
              045e 00f3  ld   $f3         1821  ld(-26/2)                       #23
                                          1822
                                          1823  # PEEK implementation
                                          1824  label('peek')
peek:         045f a001  suba $01         1825  suba(1)                         #13
              0460 c216  st   [$16]       1826  st([vPC])                       #14
              0461 1118  ld   [$18],x     1827  ld([vAC], X)                    #15
              0462 1519  ld   [$19],y     1828  ld([vAC+1], Y)                  #16
              0463 0d00  ld   [y,x]       1829  ld([Y,X])                       #17
              0464 c218  st   [$18]       1830  st([vAC])                       #18
                                          1831  label('lupReturn#19')           #Nice coincidence that lupReturn can be here
lupReturn#19: 0465 0000  ld   $00         1832  ld(0)                           #19
              0466 c219  st   [$19]       1833  st([vAC+1])                     #20
              0467 1403  ld   $03,y       1834  ld(hi('REENTER'), Y)            #21
              0468 e0cb  jmp  y,$cb       1835  jmp(Y,'REENTER')                #22
              0469 00f3  ld   $f3         1836  ld(-26/2)                       #23
                                          1837  #
                                          1838  # DOKE implementation
                                          1839  label('doke')
doke:         046a 9001  adda $01,x       1840  adda(1, X)                      #13
              046b 0500  ld   [x]         1841  ld([X])                         #14
              046c 1600  ld   ac,y        1842  ld(AC, Y)                       #15
              046d 111d  ld   [$1d],x     1843  ld([vTmp], X)                   #16
              046e 0500  ld   [x]         1844  ld([X])                         #17
              046f 1200  ld   ac,x        1845  ld(AC, X)                       #18
              0470 0118  ld   [$18]       1846  ld([vAC])                       #19
              0471 de00  st   [y,x++]     1847  st([Y,Xpp])                     #20
              0472 0119  ld   [$19]       1848  ld([vAC+1])                     #21
              0473 ce00  st   [y,x]       1849  st([Y,X])                       #22
              0474 1403  ld   $03,y       1850  ld(hi('REENTER'), Y)            #23
              0475 e0cb  jmp  y,$cb       1851  jmp(Y,'REENTER')                #24
              0476 00f2  ld   $f2         1852  ld(-28/2)                       #25
                                          1853
                                          1854  # DEEK implementation
                                          1855  label('deek')
deek:         0477 0116  ld   [$16]       1856  ld([vPC])                       #13
              0478 a001  suba $01         1857  suba(1)                         #14
              0479 c216  st   [$16]       1858  st([vPC])                       #15
              047a 1118  ld   [$18],x     1859  ld([vAC], X)                    #16
              047b 1519  ld   [$19],y     1860  ld([vAC+1], Y)                  #17
              047c 0d00  ld   [y,x]       1861  ld([Y,X])                       #18
              047d de00  st   [y,x++]     1862  st([Y,Xpp])                     #19
              047e c218  st   [$18]       1863  st([vAC])                       #20
              047f 0d00  ld   [y,x]       1864  ld([Y,X])                       #21
              0480 c219  st   [$19]       1865  st([vAC+1])                     #22
              0481 1403  ld   $03,y       1866  ld(hi('REENTER'), Y)            #23
              0482 e0cb  jmp  y,$cb       1867  jmp(Y,'REENTER')                #24
              0483 00f2  ld   $f2         1868  ld(-28/2)                       #25
                                          1869
                                          1870  # ANDW implementation
                                          1871  label('andw')
andw:         0484 c21d  st   [$1d]       1872  st([vTmp])                      #13
              0485 9001  adda $01,x       1873  adda(1,X)                       #14
              0486 0500  ld   [x]         1874  ld([X])                         #15
              0487 2119  anda [$19]       1875  anda([vAC+1])                   #16
              0488 c219  st   [$19]       1876  st([vAC+1])                     #17
              0489 111d  ld   [$1d],x     1877  ld([vTmp], X)                   #18
              048a 0500  ld   [x]         1878  ld([X])                         #19
              048b 2118  anda [$18]       1879  anda([vAC])                     #20
              048c c218  st   [$18]       1880  st([vAC])                       #21
              048d 00f2  ld   $f2         1881  ld(-28/2)                       #22
              048e 1403  ld   $03,y       1882  ld(hi('REENTER'), Y)            #23
              048f e0cb  jmp  y,$cb       1883  jmp(Y,'REENTER')                #24
                                          1884  #nop()                          #25 Overlap
                                          1885  #
                                          1886  # ORW implementation
                                          1887  label('orw')
orw:          0490 c21d  st   [$1d]       1888  st([vTmp])                      #13,25
              0491 9001  adda $01,x       1889  adda(1, X)                      #14
              0492 0500  ld   [x]         1890  ld([X])                         #15
              0493 4119  ora  [$19]       1891  ora([vAC+1])                    #16
              0494 c219  st   [$19]       1892  st([vAC+1])                     #17
              0495 111d  ld   [$1d],x     1893  ld([vTmp], X)                   #18
              0496 0500  ld   [x]         1894  ld([X])                         #19
              0497 4118  ora  [$18]       1895  ora([vAC])                      #20
              0498 c218  st   [$18]       1896  st([vAC])                       #21
              0499 00f2  ld   $f2         1897  ld(-28/2)                       #22
              049a 1403  ld   $03,y       1898  ld(hi('REENTER'), Y)            #23
              049b e0cb  jmp  y,$cb       1899  jmp(Y,'REENTER')                #24
                                          1900  #nop()                          #25 Overlap
                                          1901  #
                                          1902  # XORW implementation
                                          1903  label('xorw')
xorw:         049c 9001  adda $01,x       1904  adda(1, X)                      #13,25
              049d 0500  ld   [x]         1905  ld([X])                         #14
              049e 6119  xora [$19]       1906  xora([vAC+1])                   #15
              049f c219  st   [$19]       1907  st([vAC+1])                     #16
              04a0 111d  ld   [$1d],x     1908  ld([vTmp], X)                   #17
              04a1 0500  ld   [x]         1909  ld([X])                         #18
              04a2 6118  xora [$18]       1910  xora([vAC])                     #19
              04a3 c218  st   [$18]       1911  st([vAC])                       #20
              04a4 1403  ld   $03,y       1912  ld(hi('REENTER'), Y)            #21
              04a5 e0cb  jmp  y,$cb       1913  jmp(Y,'REENTER')                #22
              04a6 00f3  ld   $f3         1914  ld(-26/2)                       #23
                                          1915
                                          1916  #-----------------------------------------------------------------------
                                          1917  #
                                          1918  #  vCPU extension functions (for acceleration and compaction) follow below.
                                          1919  #
                                          1920  #  The naming convention is: SYS_<CamelCase>[_v<V>]_<N>
                                          1921  #
                                          1922  #  With <N> the maximum number of cycles the function will run
                                          1923  #  (counted from NEXT to NEXT). This is the same number that must
                                          1924  #  be passed to the 'SYS' vCPU instruction as operand, and it will
                                          1925  #  appear in the GCL code upon use.
                                          1926  #
                                          1927  #  If a SYS extension got introduced after ROM v1, the version number of
                                          1928  #  introduction is included in the name. This helps the programmer to be
                                          1929  #  reminded to verify the acutal ROM version and fail gracefully on older
                                          1930  #  ROMs than required. See also Docs/GT1-files.txt on using [romType].
                                          1931  #
                                          1932  #-----------------------------------------------------------------------
                                          1933
                                          1934  #-----------------------------------------------------------------------
                                          1935  # Extension SYS_Random_34: Update entropy and copy to vAC
                                          1936  #-----------------------------------------------------------------------
                                          1937
                                          1938  # This same algorithm runs automatically once per vertical blank.
                                          1939  # Use this function to get numbers at a higher rate.
                                          1940  label('SYS_Random_34')
SYS_Random_34:
              04a7 010e  ld   [$0e]       1941  ld([frameCount])                #15
              04a8 6107  xora [$07]       1942  xora([entropy+1])               #16
              04a9 610f  xora [$0f]       1943  xora([serialRaw])               #17
              04aa 8106  adda [$06]       1944  adda([entropy+0])               #18
              04ab c206  st   [$06]       1945  st([entropy+0])                 #19
              04ac c218  st   [$18]       1946  st([vAC+0])                     #20
              04ad 8108  adda [$08]       1947  adda([entropy+2])               #21
              04ae c208  st   [$08]       1948  st([entropy+2])                 #22
              04af e8b2  blt  .sysRnd0    1949  bmi('.sysRnd0')                 #23
              04b0 fcb3  bra  .sysRnd1    1950  bra('.sysRnd1')                 #24
              04b1 6053  xora $53         1951  xora(64+16+2+1)                 #25
                                          1952  label('.sysRnd0')
.sysRnd0:     04b2 606c  xora $6c         1953  xora(64+32+8+4)                 #25
                                          1954  label('.sysRnd1')
.sysRnd1:     04b3 8107  adda [$07]       1955  adda([entropy+1])               #26
              04b4 c207  st   [$07]       1956  st([entropy+1])                 #27
              04b5 c219  st   [$19]       1957  st([vAC+1])                     #28
              04b6 1403  ld   $03,y       1958  ld(hi('REENTER'), Y)            #29
              04b7 e0cb  jmp  y,$cb       1959  jmp(Y,'REENTER')                #30
              04b8 00ef  ld   $ef         1960  ld(-34/2)                       #31
                                          1961
                                          1962  label('SYS_LSRW7_30')
SYS_LSRW7_30: 04b9 0118  ld   [$18]       1963  ld([vAC])                       #15
              04ba 3080  anda $80,x       1964  anda(128, X)                    #16
              04bb 0119  ld   [$19]       1965  ld([vAC+1])                     #17
              04bc 8200  adda ac          1966  adda(AC)                        #18
              04bd 4500  ora  [x]         1967  ora([X])                        #19
              04be c218  st   [$18]       1968  st([vAC])                       #20
              04bf 0119  ld   [$19]       1969  ld([vAC+1])                     #21
              04c0 3080  anda $80,x       1970  anda(128, X)                    #22
              04c1 0500  ld   [x]         1971  ld([X])                         #23
              04c2 c219  st   [$19]       1972  st([vAC+1])                     #24
              04c3 1403  ld   $03,y       1973  ld(hi('REENTER'), Y)            #25
              04c4 e0cb  jmp  y,$cb       1974  jmp(Y,'REENTER')                #26
              04c5 00f1  ld   $f1         1975  ld(-30/2)                       #27
                                          1976
                                          1977  label('SYS_LSRW8_24')
SYS_LSRW8_24: 04c6 0119  ld   [$19]       1978  ld([vAC+1])                     #15
              04c7 c218  st   [$18]       1979  st([vAC])                       #16
              04c8 0000  ld   $00         1980  ld(0)                           #17
              04c9 c219  st   [$19]       1981  st([vAC+1])                     #18
              04ca 1403  ld   $03,y       1982  ld(hi('REENTER'), Y)            #19
              04cb e0cb  jmp  y,$cb       1983  jmp(Y,'REENTER')                #20
              04cc 00f4  ld   $f4         1984  ld(-24/2)                       #21
                                          1985
                                          1986  label('SYS_LSLW8_24')
SYS_LSLW8_24: 04cd 0118  ld   [$18]       1987  ld([vAC])                       #15
              04ce c219  st   [$19]       1988  st([vAC+1])                     #16
              04cf 0000  ld   $00         1989  ld(0)                           #17
              04d0 c218  st   [$18]       1990  st([vAC])                       #18
              04d1 1403  ld   $03,y       1991  ld(hi('REENTER'), Y)            #19
              04d2 e0cb  jmp  y,$cb       1992  jmp(Y,'REENTER')                #20
              04d3 00f4  ld   $f4         1993  ld(-24/2)                       #21
                                          1994
                                          1995  #-----------------------------------------------------------------------
                                          1996  # Extension SYS_Draw4_30:
                                          1997  #-----------------------------------------------------------------------
                                          1998
                                          1999  # sysArgs[0:3]  Pixels
                                          2000  # sysArgs[4:5]  Position on screen
                                          2001
                                          2002  label('SYS_Draw4_30')
SYS_Draw4_30: 04d4 1128  ld   [$28],x     2003  ld([sysArgs+4], X)              #15
              04d5 1529  ld   [$29],y     2004  ld([sysArgs+5], Y)              #16
              04d6 0124  ld   [$24]       2005  ld([sysArgs+0])                 #17
              04d7 de00  st   [y,x++]     2006  st([Y,Xpp])                     #18
              04d8 0125  ld   [$25]       2007  ld([sysArgs+1])                 #19
              04d9 de00  st   [y,x++]     2008  st([Y,Xpp])                     #20
              04da 0126  ld   [$26]       2009  ld([sysArgs+2])                 #21
              04db de00  st   [y,x++]     2010  st([Y,Xpp])                     #22
              04dc 0127  ld   [$27]       2011  ld([sysArgs+3])                 #23
              04dd de00  st   [y,x++]     2012  st([Y,Xpp])                     #24
              04de 1403  ld   $03,y       2013  ld(hi('REENTER'), Y)            #25
              04df e0cb  jmp  y,$cb       2014  jmp(Y,'REENTER')                #26
              04e0 00f1  ld   $f1         2015  ld(-30/2)                       #27
                                          2016
                                          2017  #-----------------------------------------------------------------------
                                          2018  # Extension SYS_VDrawBits_134:
                                          2019  #-----------------------------------------------------------------------
                                          2020
                                          2021  # Draw slice of a character
                                          2022  # sysArgs[0]    Color 0 (background)
                                          2023  # sysArgs[1]    Color 1 (pen)
                                          2024  # sysArgs[2]    8 bits, highest bit first (destructive)
                                          2025  # sysArgs[4:5]  Position on screen
                                          2026
                                          2027  label('SYS_VDrawBits_134')
SYS_VDrawBits_134:
              04e1 1128  ld   [$28],x     2028  ld([sysArgs+4], X)              #15
              04e2 0000  ld   $00         2029  ld(0)                           #16
                                          2030  label('.vdb0')
.vdb0:        04e3 c21d  st   [$1d]       2031  st([vTmp])                      #17+i*14
              04e4 9529  adda [$29],y     2032  adda([sysArgs+5], Y)            #18+i*14 Y=[sysPos+1]+vTmp
              04e5 0126  ld   [$26]       2033  ld([sysArgs+2])                 #19+i*14 Select color
              04e6 e8e9  blt  .vdb1       2034  bmi('.vdb1')                    #20+i*14
              04e7 fcea  bra  .vdb2       2035  bra('.vdb2')                    #21+i*14
              04e8 0124  ld   [$24]       2036  ld([sysArgs+0])                 #22+i*14
                                          2037  label('.vdb1')
.vdb1:        04e9 0125  ld   [$25]       2038  ld([sysArgs+1])                 #22+i*14
                                          2039  label('.vdb2')
.vdb2:        04ea ce00  st   [y,x]       2040  st([Y,X])                       #23+i*14 Draw pixel
              04eb 0126  ld   [$26]       2041  ld([sysArgs+2])                 #24+i*14 Shift byte left
              04ec 8200  adda ac          2042  adda(AC)                        #25+i*14
              04ed c226  st   [$26]       2043  st([sysArgs+2])                 #26+i*14
              04ee 011d  ld   [$1d]       2044  ld([vTmp])                      #27+i*14 Loop counter
              04ef a007  suba $07         2045  suba(7)                         #28+i*14
              04f0 ece3  bne  .vdb0       2046  bne('.vdb0')                    #29+i*14
              04f1 8008  adda $08         2047  adda(8)                         #30+i*14
              04f2 1403  ld   $03,y       2048  ld(hi('REENTER'), Y)            #129
              04f3 e0cb  jmp  y,$cb       2049  jmp(Y,'REENTER')                #130
              04f4 00bd  ld   $bd         2050  ld(-134/2)                      #131
                                          2051
                                          2052  #-----------------------------------------------------------------------
                                          2053  #       Reserved
                                          2054  #-----------------------------------------------------------------------
                                          2055
                                          2056  #  11 words. Keep space reserved for possible use future LSRW
                                          2057
                                          2058  #.lsrw??:
                                          2059  #       ld   lo('.lsrw??')
                                          2060  #       st   [vTmp]
                                          2061  #       ld   [vAC+0]
                                          2062  #       ora  1
                                          2063  #       bra  [ac]
                                          2064
                                          2065  #-----------------------------------------------------------------------
                                          2066  #
                                          2067  #  $0500 ROM page 5-6: Shift table and code
                                          2068  #
                                          2069  #-----------------------------------------------------------------------
                                          2070
              04f5 0200  nop              2071  align(0x100, 0x200)
              04f6 0200  nop
              04f7 0200  nop
              * 11 times
                                          2072
                                          2073  # Lookup table for i>>n, with n in 1..6
                                          2074  # Indexing ix = i & ~b | (b-1), where b = 1<<(n-1)
                                          2075  #       ...
                                          2076  #       ld   <.ret
                                          2077  #       st   [vTmp]
                                          2078  #       ld   >shiftTable,y
                                          2079  #       <calculate ix>
                                          2080  #       jmp  y,ac
                                          2081  #       bra  $ff
                                          2082  # .ret: ...
                                          2083  #
                                          2084  # i >> 7 can be always be done with RAM: [i&128]
                                          2085  #       ...
                                          2086  #       anda $80,x
                                          2087  #       ld   [x]
                                          2088  #       ...
                                          2089
                                          2090  label('shiftTable')
                                          2091  shiftTable = pc()
                                          2092
                                          2093  for ix in range(255):
                                          2094    for n in range(1,7): # Find first zero
                                          2095      if ~ix & (1 << (n-1)):
                                          2096        break
                                          2097    pattern = ['x' if i<n else '1' if ix&(1<<i) else '0' for i in range(8)]
                                          2098    ld(ix>>n); C('0b%s >> %d' % (''.join(reversed(pattern)), n))
shiftTable:   0500 0000  ld   $00         ;0b0000000x >> 1
              0501 0000  ld   $00         ;0b000000xx >> 2
              0502 0001  ld   $01         ;0b0000001x >> 1
              0503 0000  ld   $00         ;0b00000xxx >> 3
              0504 0002  ld   $02         ;0b0000010x >> 1
              0505 0001  ld   $01         ;0b000001xx >> 2
              0506 0003  ld   $03         ;0b0000011x >> 1
              0507 0000  ld   $00         ;0b0000xxxx >> 4
              0508 0004  ld   $04         ;0b0000100x >> 1
              0509 0002  ld   $02         ;0b000010xx >> 2
              050a 0005  ld   $05         ;0b0000101x >> 1
              050b 0001  ld   $01         ;0b00001xxx >> 3
              050c 0006  ld   $06         ;0b0000110x >> 1
              050d 0003  ld   $03         ;0b000011xx >> 2
              050e 0007  ld   $07         ;0b0000111x >> 1
              050f 0000  ld   $00         ;0b000xxxxx >> 5
              0510 0008  ld   $08         ;0b0001000x >> 1
              0511 0004  ld   $04         ;0b000100xx >> 2
              0512 0009  ld   $09         ;0b0001001x >> 1
              0513 0002  ld   $02         ;0b00010xxx >> 3
              0514 000a  ld   $0a         ;0b0001010x >> 1
              0515 0005  ld   $05         ;0b000101xx >> 2
              0516 000b  ld   $0b         ;0b0001011x >> 1
              0517 0001  ld   $01         ;0b0001xxxx >> 4
              0518 000c  ld   $0c         ;0b0001100x >> 1
              0519 0006  ld   $06         ;0b000110xx >> 2
              051a 000d  ld   $0d         ;0b0001101x >> 1
              051b 0003  ld   $03         ;0b00011xxx >> 3
              051c 000e  ld   $0e         ;0b0001110x >> 1
              051d 0007  ld   $07         ;0b000111xx >> 2
              051e 000f  ld   $0f         ;0b0001111x >> 1
              051f 0000  ld   $00         ;0b00xxxxxx >> 6
              0520 0010  ld   $10         ;0b0010000x >> 1
              0521 0008  ld   $08         ;0b001000xx >> 2
              0522 0011  ld   $11         ;0b0010001x >> 1
              0523 0004  ld   $04         ;0b00100xxx >> 3
              0524 0012  ld   $12         ;0b0010010x >> 1
              0525 0009  ld   $09         ;0b001001xx >> 2
              0526 0013  ld   $13         ;0b0010011x >> 1
              0527 0002  ld   $02         ;0b0010xxxx >> 4
              0528 0014  ld   $14         ;0b0010100x >> 1
              0529 000a  ld   $0a         ;0b001010xx >> 2
              052a 0015  ld   $15         ;0b0010101x >> 1
              052b 0005  ld   $05         ;0b00101xxx >> 3
              052c 0016  ld   $16         ;0b0010110x >> 1
              052d 000b  ld   $0b         ;0b001011xx >> 2
              052e 0017  ld   $17         ;0b0010111x >> 1
              052f 0001  ld   $01         ;0b001xxxxx >> 5
              0530 0018  ld   $18         ;0b0011000x >> 1
              0531 000c  ld   $0c         ;0b001100xx >> 2
              0532 0019  ld   $19         ;0b0011001x >> 1
              0533 0006  ld   $06         ;0b00110xxx >> 3
              0534 001a  ld   $1a         ;0b0011010x >> 1
              0535 000d  ld   $0d         ;0b001101xx >> 2
              0536 001b  ld   $1b         ;0b0011011x >> 1
              0537 0003  ld   $03         ;0b0011xxxx >> 4
              0538 001c  ld   $1c         ;0b0011100x >> 1
              0539 000e  ld   $0e         ;0b001110xx >> 2
              053a 001d  ld   $1d         ;0b0011101x >> 1
              053b 0007  ld   $07         ;0b00111xxx >> 3
              053c 001e  ld   $1e         ;0b0011110x >> 1
              053d 000f  ld   $0f         ;0b001111xx >> 2
              053e 001f  ld   $1f         ;0b0011111x >> 1
              053f 0000  ld   $00         ;0b00xxxxxx >> 6
              0540 0020  ld   $20         ;0b0100000x >> 1
              0541 0010  ld   $10         ;0b010000xx >> 2
              0542 0021  ld   $21         ;0b0100001x >> 1
              0543 0008  ld   $08         ;0b01000xxx >> 3
              0544 0022  ld   $22         ;0b0100010x >> 1
              0545 0011  ld   $11         ;0b010001xx >> 2
              0546 0023  ld   $23         ;0b0100011x >> 1
              0547 0004  ld   $04         ;0b0100xxxx >> 4
              0548 0024  ld   $24         ;0b0100100x >> 1
              0549 0012  ld   $12         ;0b010010xx >> 2
              054a 0025  ld   $25         ;0b0100101x >> 1
              054b 0009  ld   $09         ;0b01001xxx >> 3
              054c 0026  ld   $26         ;0b0100110x >> 1
              054d 0013  ld   $13         ;0b010011xx >> 2
              054e 0027  ld   $27         ;0b0100111x >> 1
              054f 0002  ld   $02         ;0b010xxxxx >> 5
              0550 0028  ld   $28         ;0b0101000x >> 1
              0551 0014  ld   $14         ;0b010100xx >> 2
              0552 0029  ld   $29         ;0b0101001x >> 1
              0553 000a  ld   $0a         ;0b01010xxx >> 3
              0554 002a  ld   $2a         ;0b0101010x >> 1
              0555 0015  ld   $15         ;0b010101xx >> 2
              0556 002b  ld   $2b         ;0b0101011x >> 1
              0557 0005  ld   $05         ;0b0101xxxx >> 4
              0558 002c  ld   $2c         ;0b0101100x >> 1
              0559 0016  ld   $16         ;0b010110xx >> 2
              055a 002d  ld   $2d         ;0b0101101x >> 1
              055b 000b  ld   $0b         ;0b01011xxx >> 3
              055c 002e  ld   $2e         ;0b0101110x >> 1
              055d 0017  ld   $17         ;0b010111xx >> 2
              055e 002f  ld   $2f         ;0b0101111x >> 1
              055f 0001  ld   $01         ;0b01xxxxxx >> 6
              0560 0030  ld   $30         ;0b0110000x >> 1
              0561 0018  ld   $18         ;0b011000xx >> 2
              0562 0031  ld   $31         ;0b0110001x >> 1
              0563 000c  ld   $0c         ;0b01100xxx >> 3
              0564 0032  ld   $32         ;0b0110010x >> 1
              0565 0019  ld   $19         ;0b011001xx >> 2
              0566 0033  ld   $33         ;0b0110011x >> 1
              0567 0006  ld   $06         ;0b0110xxxx >> 4
              0568 0034  ld   $34         ;0b0110100x >> 1
              0569 001a  ld   $1a         ;0b011010xx >> 2
              056a 0035  ld   $35         ;0b0110101x >> 1
              056b 000d  ld   $0d         ;0b01101xxx >> 3
              056c 0036  ld   $36         ;0b0110110x >> 1
              056d 001b  ld   $1b         ;0b011011xx >> 2
              056e 0037  ld   $37         ;0b0110111x >> 1
              056f 0003  ld   $03         ;0b011xxxxx >> 5
              0570 0038  ld   $38         ;0b0111000x >> 1
              0571 001c  ld   $1c         ;0b011100xx >> 2
              0572 0039  ld   $39         ;0b0111001x >> 1
              0573 000e  ld   $0e         ;0b01110xxx >> 3
              0574 003a  ld   $3a         ;0b0111010x >> 1
              0575 001d  ld   $1d         ;0b011101xx >> 2
              0576 003b  ld   $3b         ;0b0111011x >> 1
              0577 0007  ld   $07         ;0b0111xxxx >> 4
              0578 003c  ld   $3c         ;0b0111100x >> 1
              0579 001e  ld   $1e         ;0b011110xx >> 2
              057a 003d  ld   $3d         ;0b0111101x >> 1
              057b 000f  ld   $0f         ;0b01111xxx >> 3
              057c 003e  ld   $3e         ;0b0111110x >> 1
              057d 001f  ld   $1f         ;0b011111xx >> 2
              057e 003f  ld   $3f         ;0b0111111x >> 1
              057f 0001  ld   $01         ;0b01xxxxxx >> 6
              0580 0040  ld   $40         ;0b1000000x >> 1
              0581 0020  ld   $20         ;0b100000xx >> 2
              0582 0041  ld   $41         ;0b1000001x >> 1
              0583 0010  ld   $10         ;0b10000xxx >> 3
              0584 0042  ld   $42         ;0b1000010x >> 1
              0585 0021  ld   $21         ;0b100001xx >> 2
              0586 0043  ld   $43         ;0b1000011x >> 1
              0587 0008  ld   $08         ;0b1000xxxx >> 4
              0588 0044  ld   $44         ;0b1000100x >> 1
              0589 0022  ld   $22         ;0b100010xx >> 2
              058a 0045  ld   $45         ;0b1000101x >> 1
              058b 0011  ld   $11         ;0b10001xxx >> 3
              058c 0046  ld   $46         ;0b1000110x >> 1
              058d 0023  ld   $23         ;0b100011xx >> 2
              058e 0047  ld   $47         ;0b1000111x >> 1
              058f 0004  ld   $04         ;0b100xxxxx >> 5
              0590 0048  ld   $48         ;0b1001000x >> 1
              0591 0024  ld   $24         ;0b100100xx >> 2
              0592 0049  ld   $49         ;0b1001001x >> 1
              0593 0012  ld   $12         ;0b10010xxx >> 3
              0594 004a  ld   $4a         ;0b1001010x >> 1
              0595 0025  ld   $25         ;0b100101xx >> 2
              0596 004b  ld   $4b         ;0b1001011x >> 1
              0597 0009  ld   $09         ;0b1001xxxx >> 4
              0598 004c  ld   $4c         ;0b1001100x >> 1
              0599 0026  ld   $26         ;0b100110xx >> 2
              059a 004d  ld   $4d         ;0b1001101x >> 1
              059b 0013  ld   $13         ;0b10011xxx >> 3
              059c 004e  ld   $4e         ;0b1001110x >> 1
              059d 0027  ld   $27         ;0b100111xx >> 2
              059e 004f  ld   $4f         ;0b1001111x >> 1
              059f 0002  ld   $02         ;0b10xxxxxx >> 6
              05a0 0050  ld   $50         ;0b1010000x >> 1
              05a1 0028  ld   $28         ;0b101000xx >> 2
              05a2 0051  ld   $51         ;0b1010001x >> 1
              05a3 0014  ld   $14         ;0b10100xxx >> 3
              05a4 0052  ld   $52         ;0b1010010x >> 1
              05a5 0029  ld   $29         ;0b101001xx >> 2
              05a6 0053  ld   $53         ;0b1010011x >> 1
              05a7 000a  ld   $0a         ;0b1010xxxx >> 4
              05a8 0054  ld   $54         ;0b1010100x >> 1
              05a9 002a  ld   $2a         ;0b101010xx >> 2
              05aa 0055  ld   $55         ;0b1010101x >> 1
              05ab 0015  ld   $15         ;0b10101xxx >> 3
              05ac 0056  ld   $56         ;0b1010110x >> 1
              05ad 002b  ld   $2b         ;0b101011xx >> 2
              05ae 0057  ld   $57         ;0b1010111x >> 1
              05af 0005  ld   $05         ;0b101xxxxx >> 5
              05b0 0058  ld   $58         ;0b1011000x >> 1
              05b1 002c  ld   $2c         ;0b101100xx >> 2
              05b2 0059  ld   $59         ;0b1011001x >> 1
              05b3 0016  ld   $16         ;0b10110xxx >> 3
              05b4 005a  ld   $5a         ;0b1011010x >> 1
              05b5 002d  ld   $2d         ;0b101101xx >> 2
              05b6 005b  ld   $5b         ;0b1011011x >> 1
              05b7 000b  ld   $0b         ;0b1011xxxx >> 4
              05b8 005c  ld   $5c         ;0b1011100x >> 1
              05b9 002e  ld   $2e         ;0b101110xx >> 2
              05ba 005d  ld   $5d         ;0b1011101x >> 1
              05bb 0017  ld   $17         ;0b10111xxx >> 3
              05bc 005e  ld   $5e         ;0b1011110x >> 1
              05bd 002f  ld   $2f         ;0b101111xx >> 2
              05be 005f  ld   $5f         ;0b1011111x >> 1
              05bf 0002  ld   $02         ;0b10xxxxxx >> 6
              05c0 0060  ld   $60         ;0b1100000x >> 1
              05c1 0030  ld   $30         ;0b110000xx >> 2
              05c2 0061  ld   $61         ;0b1100001x >> 1
              05c3 0018  ld   $18         ;0b11000xxx >> 3
              05c4 0062  ld   $62         ;0b1100010x >> 1
              05c5 0031  ld   $31         ;0b110001xx >> 2
              05c6 0063  ld   $63         ;0b1100011x >> 1
              05c7 000c  ld   $0c         ;0b1100xxxx >> 4
              05c8 0064  ld   $64         ;0b1100100x >> 1
              05c9 0032  ld   $32         ;0b110010xx >> 2
              05ca 0065  ld   $65         ;0b1100101x >> 1
              05cb 0019  ld   $19         ;0b11001xxx >> 3
              05cc 0066  ld   $66         ;0b1100110x >> 1
              05cd 0033  ld   $33         ;0b110011xx >> 2
              05ce 0067  ld   $67         ;0b1100111x >> 1
              05cf 0006  ld   $06         ;0b110xxxxx >> 5
              05d0 0068  ld   $68         ;0b1101000x >> 1
              05d1 0034  ld   $34         ;0b110100xx >> 2
              05d2 0069  ld   $69         ;0b1101001x >> 1
              05d3 001a  ld   $1a         ;0b11010xxx >> 3
              05d4 006a  ld   $6a         ;0b1101010x >> 1
              05d5 0035  ld   $35         ;0b110101xx >> 2
              05d6 006b  ld   $6b         ;0b1101011x >> 1
              05d7 000d  ld   $0d         ;0b1101xxxx >> 4
              05d8 006c  ld   $6c         ;0b1101100x >> 1
              05d9 0036  ld   $36         ;0b110110xx >> 2
              05da 006d  ld   $6d         ;0b1101101x >> 1
              05db 001b  ld   $1b         ;0b11011xxx >> 3
              05dc 006e  ld   $6e         ;0b1101110x >> 1
              05dd 0037  ld   $37         ;0b110111xx >> 2
              05de 006f  ld   $6f         ;0b1101111x >> 1
              05df 0003  ld   $03         ;0b11xxxxxx >> 6
              05e0 0070  ld   $70         ;0b1110000x >> 1
              05e1 0038  ld   $38         ;0b111000xx >> 2
              05e2 0071  ld   $71         ;0b1110001x >> 1
              05e3 001c  ld   $1c         ;0b11100xxx >> 3
              05e4 0072  ld   $72         ;0b1110010x >> 1
              05e5 0039  ld   $39         ;0b111001xx >> 2
              05e6 0073  ld   $73         ;0b1110011x >> 1
              05e7 000e  ld   $0e         ;0b1110xxxx >> 4
              05e8 0074  ld   $74         ;0b1110100x >> 1
              05e9 003a  ld   $3a         ;0b111010xx >> 2
              05ea 0075  ld   $75         ;0b1110101x >> 1
              05eb 001d  ld   $1d         ;0b11101xxx >> 3
              05ec 0076  ld   $76         ;0b1110110x >> 1
              05ed 003b  ld   $3b         ;0b111011xx >> 2
              05ee 0077  ld   $77         ;0b1110111x >> 1
              05ef 0007  ld   $07         ;0b111xxxxx >> 5
              05f0 0078  ld   $78         ;0b1111000x >> 1
              05f1 003c  ld   $3c         ;0b111100xx >> 2
              05f2 0079  ld   $79         ;0b1111001x >> 1
              05f3 001e  ld   $1e         ;0b11110xxx >> 3
              05f4 007a  ld   $7a         ;0b1111010x >> 1
              05f5 003d  ld   $3d         ;0b111101xx >> 2
              05f6 007b  ld   $7b         ;0b1111011x >> 1
              05f7 000f  ld   $0f         ;0b1111xxxx >> 4
              05f8 007c  ld   $7c         ;0b1111100x >> 1
              05f9 003e  ld   $3e         ;0b111110xx >> 2
              05fa 007d  ld   $7d         ;0b1111101x >> 1
              05fb 001f  ld   $1f         ;0b11111xxx >> 3
              05fc 007e  ld   $7e         ;0b1111110x >> 1
              05fd 003f  ld   $3f         ;0b111111xx >> 2
              05fe 007f  ld   $7f         ;0b1111111x >> 1
                                          2099
                                          2100  assert pc()&255 == 255
              05ff fd1d  bra  [$1d]       2101  bra([vTmp])                     # Jumps back into next page
                                          2102
                                          2103  label('SYS_LSRW1_48')
                                          2104  assert pc()&255 == 0            # First instruction on this page *must* be a nop
SYS_LSRW1_48: 0600 0200  nop              2105  nop()                           #15
              0601 1405  ld   $05,y       2106  ld(hi('shiftTable'),Y)          #16 Logical shift right 1 bit (X >> 1)
              0602 0008  ld   $08         2107  ld('.sysLsrw1a')                #17 Shift low byte
              0603 c21d  st   [$1d]       2108  st([vTmp])                      #18
              0604 0118  ld   [$18]       2109  ld([vAC])                       #19
              0605 20fe  anda $fe         2110  anda(0b11111110)                #20
              0606 e200  jmp  y,ac        2111  jmp(Y,AC)                       #21
              0607 fcff  bra  $ff         2112  bra(255)                        #22 bra shiftTable+255
                                          2113  label('.sysLsrw1a')
.sysLsrw1a:   0608 c218  st   [$18]       2114  st([vAC])                       #26
              0609 0119  ld   [$19]       2115  ld([vAC+1])                     #27 Transfer bit 8
              060a 2001  anda $01         2116  anda(1)                         #28
              060b 807f  adda $7f         2117  adda(127)                       #29
              060c 2080  anda $80         2118  anda(128)                       #30
              060d 4118  ora  [$18]       2119  ora([vAC])                      #31
              060e c218  st   [$18]       2120  st([vAC])                       #32
              060f 0015  ld   $15         2121  ld('.sysLsrw1b')                #33 Shift high byte
              0610 c21d  st   [$1d]       2122  st([vTmp])                      #34
              0611 0119  ld   [$19]       2123  ld([vAC+1])                     #35
              0612 20fe  anda $fe         2124  anda(0b11111110)                #36
              0613 e200  jmp  y,ac        2125  jmp(Y,AC)                       #37
              0614 fcff  bra  $ff         2126  bra(255)                        #38 bra shiftTable+255
                                          2127  label('.sysLsrw1b')
.sysLsrw1b:   0615 c219  st   [$19]       2128  st([vAC+1])                     #42
              0616 1403  ld   $03,y       2129  ld(hi('REENTER'), Y)            #43
              0617 e0cb  jmp  y,$cb       2130  jmp(Y,'REENTER')                #44
              0618 00e8  ld   $e8         2131  ld(-48/2)                       #45
                                          2132
                                          2133  label('SYS_LSRW2_52')
SYS_LSRW2_52: 0619 1405  ld   $05,y       2134  ld(hi('shiftTable'),Y)          #15 Logical shift right 2 bit (X >> 2)
              061a 0021  ld   $21         2135  ld('.sysLsrw2a')                #16 Shift low byte
              061b c21d  st   [$1d]       2136  st([vTmp])                      #17
              061c 0118  ld   [$18]       2137  ld([vAC])                       #18
              061d 20fc  anda $fc         2138  anda(0b11111100)                #19
              061e 4001  ora  $01         2139  ora( 0b00000001)                #20
              061f e200  jmp  y,ac        2140  jmp(Y,AC)                       #21
              0620 fcff  bra  $ff         2141  bra(255)                        #22 bra shiftTable+255
                                          2142  label('.sysLsrw2a')
.sysLsrw2a:   0621 c218  st   [$18]       2143  st([vAC])                       #26
              0622 0119  ld   [$19]       2144  ld([vAC+1])                     #27 Transfer bit 8:9
              0623 8200  adda ac          2145  adda(AC)                        #28
              0624 8200  adda ac          2146  adda(AC)                        #29
              0625 8200  adda ac          2147  adda(AC)                        #30
              0626 8200  adda ac          2148  adda(AC)                        #31
              0627 8200  adda ac          2149  adda(AC)                        #32
              0628 8200  adda ac          2150  adda(AC)                        #33
              0629 4118  ora  [$18]       2151  ora([vAC])                      #34
              062a c218  st   [$18]       2152  st([vAC])                       #35
              062b 0032  ld   $32         2153  ld('.sysLsrw2b')                #36 Shift high byte
              062c c21d  st   [$1d]       2154  st([vTmp])                      #37
              062d 0119  ld   [$19]       2155  ld([vAC+1])                     #38
              062e 20fc  anda $fc         2156  anda(0b11111100)                #39
              062f 4001  ora  $01         2157  ora( 0b00000001)                #40
              0630 e200  jmp  y,ac        2158  jmp(Y,AC)                       #41
              0631 fcff  bra  $ff         2159  bra(255)                        #42 bra shiftTable+255
                                          2160  label('.sysLsrw2b')
.sysLsrw2b:   0632 c219  st   [$19]       2161  st([vAC+1])                     #46
              0633 1403  ld   $03,y       2162  ld(hi('REENTER'), Y)            #47
              0634 e0cb  jmp  y,$cb       2163  jmp(Y,'REENTER')                #48
              0635 00e6  ld   $e6         2164  ld(-52/2)                       #49
                                          2165
                                          2166  label('SYS_LSRW3_52')
SYS_LSRW3_52: 0636 1405  ld   $05,y       2167  ld(hi('shiftTable'),Y)          #15 Logical shift right 3 bit (X >> 3)
              0637 003e  ld   $3e         2168  ld('.sysLsrw3a')                #16 Shift low byte
              0638 c21d  st   [$1d]       2169  st([vTmp])                      #17
              0639 0118  ld   [$18]       2170  ld([vAC])                       #18
              063a 20f8  anda $f8         2171  anda(0b11111000)                #19
              063b 4003  ora  $03         2172  ora( 0b00000011)                #20
              063c e200  jmp  y,ac        2173  jmp(Y,AC)                       #21
              063d fcff  bra  $ff         2174  bra(255)                        #22 bra shiftTable+255
                                          2175  label('.sysLsrw3a')
.sysLsrw3a:   063e c218  st   [$18]       2176  st([vAC])                       #26
              063f 0119  ld   [$19]       2177  ld([vAC+1])                     #27 Transfer bit 8:10
              0640 8200  adda ac          2178  adda(AC)                        #28
              0641 8200  adda ac          2179  adda(AC)                        #29
              0642 8200  adda ac          2180  adda(AC)                        #30
              0643 8200  adda ac          2181  adda(AC)                        #31
              0644 8200  adda ac          2182  adda(AC)                        #32
              0645 4118  ora  [$18]       2183  ora([vAC])                      #33
              0646 c218  st   [$18]       2184  st([vAC])                       #34
              0647 004e  ld   $4e         2185  ld('.sysLsrw3b')                #35 Shift high byte
              0648 c21d  st   [$1d]       2186  st([vTmp])                      #36
              0649 0119  ld   [$19]       2187  ld([vAC+1])                     #37
              064a 20f8  anda $f8         2188  anda(0b11111000)                #38
              064b 4003  ora  $03         2189  ora( 0b00000011)                #39
              064c e200  jmp  y,ac        2190  jmp(Y,AC)                       #40
              064d fcff  bra  $ff         2191  bra(255)                        #41 bra shiftTable+255
                                          2192  label('.sysLsrw3b')
.sysLsrw3b:   064e c219  st   [$19]       2193  st([vAC+1])                     #45
              064f 00e6  ld   $e6         2194  ld(-52/2)                       #46
              0650 1403  ld   $03,y       2195  ld(hi('REENTER'), Y)            #47
              0651 e0cb  jmp  y,$cb       2196  jmp(Y,'REENTER')                #48
                                          2197  #nop()                          #49
                                          2198
                                          2199  label('SYS_LSRW4_50')
SYS_LSRW4_50: 0652 1405  ld   $05,y       2200  ld(hi('shiftTable'),Y)          #15,49 Logical shift right 4 bit (X >> 4)
              0653 005a  ld   $5a         2201  ld('.sysLsrw4a')                #16 Shift low byte
              0654 c21d  st   [$1d]       2202  st([vTmp])                      #17
              0655 0118  ld   [$18]       2203  ld([vAC])                       #18
              0656 20f0  anda $f0         2204  anda(0b11110000)                #19
              0657 4007  ora  $07         2205  ora( 0b00000111)                #20
              0658 e200  jmp  y,ac        2206  jmp(Y,AC)                       #21
              0659 fcff  bra  $ff         2207  bra(255)                        #22 bra shiftTable+255
                                          2208  label('.sysLsrw4a')
.sysLsrw4a:   065a c218  st   [$18]       2209  st([vAC])                       #26
              065b 0119  ld   [$19]       2210  ld([vAC+1])                     #27 Transfer bit 8:11
              065c 8200  adda ac          2211  adda(AC)                        #28
              065d 8200  adda ac          2212  adda(AC)                        #29
              065e 8200  adda ac          2213  adda(AC)                        #30
              065f 8200  adda ac          2214  adda(AC)                        #31
              0660 4118  ora  [$18]       2215  ora([vAC])                      #32
              0661 c218  st   [$18]       2216  st([vAC])                       #33
              0662 0069  ld   $69         2217  ld('.sysLsrw4b')                #34 Shift high byte'
              0663 c21d  st   [$1d]       2218  st([vTmp])                      #35
              0664 0119  ld   [$19]       2219  ld([vAC+1])                     #36
              0665 20f0  anda $f0         2220  anda(0b11110000)                #37
              0666 4007  ora  $07         2221  ora( 0b00000111)                #38
              0667 e200  jmp  y,ac        2222  jmp(Y,AC)                       #39
              0668 fcff  bra  $ff         2223  bra(255)                        #40 bra shiftTable+255
                                          2224  label('.sysLsrw4b')
.sysLsrw4b:   0669 c219  st   [$19]       2225  st([vAC+1])                     #44
              066a 1403  ld   $03,y       2226  ld(hi('REENTER'), Y)            #45
              066b e0cb  jmp  y,$cb       2227  jmp(Y,'REENTER')                #46
              066c 00e7  ld   $e7         2228  ld(-50/2)                       #47
                                          2229
                                          2230  label('SYS_LSRW5_50')
SYS_LSRW5_50: 066d 1405  ld   $05,y       2231  ld(hi('shiftTable'),Y)          #15 Logical shift right 5 bit (X >> 5)
              066e 0075  ld   $75         2232  ld('.sysLsrw5a')                #16 Shift low byte
              066f c21d  st   [$1d]       2233  st([vTmp])                      #17
              0670 0118  ld   [$18]       2234  ld([vAC])                       #18
              0671 20e0  anda $e0         2235  anda(0b11100000)                #19
              0672 400f  ora  $0f         2236  ora( 0b00001111)                #20
              0673 e200  jmp  y,ac        2237  jmp(Y,AC)                       #21
              0674 fcff  bra  $ff         2238  bra(255)                        #22 bra shiftTable+255
                                          2239  label('.sysLsrw5a')
.sysLsrw5a:   0675 c218  st   [$18]       2240  st([vAC])                       #26
              0676 0119  ld   [$19]       2241  ld([vAC+1])                     #27 Transfer bit 8:13
              0677 8200  adda ac          2242  adda(AC)                        #28
              0678 8200  adda ac          2243  adda(AC)                        #29
              0679 8200  adda ac          2244  adda(AC)                        #30
              067a 4118  ora  [$18]       2245  ora([vAC])                      #31
              067b c218  st   [$18]       2246  st([vAC])                       #32
              067c 0083  ld   $83         2247  ld('.sysLsrw5b')                #33 Shift high byte
              067d c21d  st   [$1d]       2248  st([vTmp])                      #34
              067e 0119  ld   [$19]       2249  ld([vAC+1])                     #35
              067f 20e0  anda $e0         2250  anda(0b11100000)                #36
              0680 400f  ora  $0f         2251  ora( 0b00001111)                #37
              0681 e200  jmp  y,ac        2252  jmp(Y,AC)                       #38
              0682 fcff  bra  $ff         2253  bra(255)                        #39 bra shiftTable+255
                                          2254  label('.sysLsrw5b')
.sysLsrw5b:   0683 c219  st   [$19]       2255  st([vAC+1])                     #44
              0684 00e7  ld   $e7         2256  ld(-50/2)                       #45
              0685 1403  ld   $03,y       2257  ld(hi('REENTER'), Y)            #46
              0686 e0cb  jmp  y,$cb       2258  jmp(Y,'REENTER')                #47
                                          2259  #nop()                          #48
                                          2260
                                          2261  label('SYS_LSRW6_48')
SYS_LSRW6_48: 0687 1405  ld   $05,y       2262  ld(hi('shiftTable'),Y)          #15,44 Logical shift right 6 bit (X >> 6)
              0688 008f  ld   $8f         2263  ld('.sysLsrw6a')                #16 Shift low byte
              0689 c21d  st   [$1d]       2264  st([vTmp])                      #17
              068a 0118  ld   [$18]       2265  ld([vAC])                       #18
              068b 20c0  anda $c0         2266  anda(0b11000000)                #19
              068c 401f  ora  $1f         2267  ora( 0b00011111)                #20
              068d e200  jmp  y,ac        2268  jmp(Y,AC)                       #21
              068e fcff  bra  $ff         2269  bra(255)                        #22 bra shiftTable+255
                                          2270  label('.sysLsrw6a')
.sysLsrw6a:   068f c218  st   [$18]       2271  st([vAC])                       #26
              0690 0119  ld   [$19]       2272  ld([vAC+1])                     #27 Transfer bit 8:13
              0691 8200  adda ac          2273  adda(AC)                        #28
              0692 8200  adda ac          2274  adda(AC)                        #29
              0693 4118  ora  [$18]       2275  ora([vAC])                      #30
              0694 c218  st   [$18]       2276  st([vAC])                       #31
              0695 009c  ld   $9c         2277  ld('.sysLsrw6b')                #32 Shift high byte
              0696 c21d  st   [$1d]       2278  st([vTmp])                      #33
              0697 0119  ld   [$19]       2279  ld([vAC+1])                     #34
              0698 20c0  anda $c0         2280  anda(0b11000000)                #35
              0699 401f  ora  $1f         2281  ora( 0b00011111)                #36
              069a e200  jmp  y,ac        2282  jmp(Y,AC)                       #37
              069b fcff  bra  $ff         2283  bra(255)                        #38 bra shiftTable+255
                                          2284  label('.sysLsrw6b')
.sysLsrw6b:   069c c219  st   [$19]       2285  st([vAC+1])                     #42
              069d 1403  ld   $03,y       2286  ld(hi('REENTER'), Y)            #43
              069e e0cb  jmp  y,$cb       2287  jmp(Y,'REENTER')                #44
              069f 00e8  ld   $e8         2288  ld(-48/2)                       #45
                                          2289
                                          2290  label('SYS_LSLW4_46')
SYS_LSLW4_46: 06a0 1405  ld   $05,y       2291  ld(hi('shiftTable'),Y)          #15 Logical shift left 4 bit (X << 4)
              06a1 00ae  ld   $ae         2292  ld('.sysLsrl4')                 #16
              06a2 c21d  st   [$1d]       2293  st([vTmp])                      #17
              06a3 0119  ld   [$19]       2294  ld([vAC+1])                     #18
              06a4 8200  adda ac          2295  adda(AC)                        #19
              06a5 8200  adda ac          2296  adda(AC)                        #20
              06a6 8200  adda ac          2297  adda(AC)                        #21
              06a7 8200  adda ac          2298  adda(AC)                        #22
              06a8 c219  st   [$19]       2299  st([vAC+1])                     #23
              06a9 0118  ld   [$18]       2300  ld([vAC])                       #24
              06aa 20f0  anda $f0         2301  anda(0b11110000)                #25
              06ab 4007  ora  $07         2302  ora( 0b00000111)                #26
              06ac e200  jmp  y,ac        2303  jmp(Y,AC)                       #27
              06ad fcff  bra  $ff         2304  bra(255)                        #28 bra shiftTable+255
                                          2305  label('.sysLsrl4')
.sysLsrl4:    06ae 4119  ora  [$19]       2306  ora([vAC+1])                    #32
              06af c219  st   [$19]       2307  st([vAC+1])                     #33
              06b0 0118  ld   [$18]       2308  ld([vAC])                       #34
              06b1 8200  adda ac          2309  adda(AC)                        #35
              06b2 8200  adda ac          2310  adda(AC)                        #36
              06b3 8200  adda ac          2311  adda(AC)                        #37
              06b4 8200  adda ac          2312  adda(AC)                        #38
              06b5 c218  st   [$18]       2313  st([vAC])                       #39
              06b6 00e9  ld   $e9         2314  ld(-46/2)                       #40
              06b7 1403  ld   $03,y       2315  ld(hi('REENTER'), Y)            #41
              06b8 e0cb  jmp  y,$cb       2316  jmp(Y,'REENTER')                #42
                                          2317  #nop()                          #43
                                          2318
                                          2319  #-----------------------------------------------------------------------
                                          2320  # Extension SYS_Read3_40: Read 3 consecutive bytes from ROM
                                          2321  #-----------------------------------------------------------------------
                                          2322
                                          2323  # sysArgs[0:2]  Bytes (output)
                                          2324  # sysArgs[6:7]  ROM pointer (input)
                                          2325
                                          2326  label('SYS_Read3_40')
SYS_Read3_40: 06b9 152b  ld   [$2b],y     2327  ld([sysArgs+7], Y)              #15,32
              06ba e079  jmp  y,$79       2328  jmp(Y,128-7)                    #16 trampoline3a
              06bb 012a  ld   [$2a]       2329  ld([sysArgs+6])                 #17
                                          2330  label('txReturn')
txReturn:     06bc c226  st   [$26]       2331  st([sysArgs+2])                 #34
              06bd 1403  ld   $03,y       2332  ld(hi('REENTER'), Y)            #35
              06be e0cb  jmp  y,$cb       2333  jmp(Y,'REENTER')                #36
              06bf 00ec  ld   $ec         2334  ld(-40/2)                       #37
                                          2335
                                          2336  def trampoline3a():
                                          2337    """Read 3 bytes from ROM page"""
                                          2338    while pc()&255 < 128-7:
                                          2339      nop()
                                          2340    bra(AC)                       #18
                                          2341    C('Trampoline for page $%02x00 reading (entry)' % (pc()>>8))
                                          2342    bra(123)                      #19
                                          2343    st([sysArgs+0])               #21
                                          2344    ld([sysArgs+6])               #22
                                          2345    adda(1)                       #23
                                          2346    bra(AC)                       #24
                                          2347    bra(250)                      #25 trampoline3b
                                          2348    align(1, 0x80)
                                          2349
                                          2350  def trampoline3b():
                                          2351    """Read 3 bytes from ROM page (continue)"""
                                          2352    while pc()&255 < 256-6:
                                          2353      nop()
                                          2354    st([sysArgs+1])               #27
                                          2355    C('Trampoline for page $%02x00 reading (continue)' % (pc()>>8))
                                          2356    ld([sysArgs+6])               #28
                                          2357    adda(2)                       #29
                                          2358    ld(hi('txReturn'), Y)         #30
                                          2359    bra(AC)                       #31
                                          2360    jmp(Y,'txReturn')             #32
                                          2361    align(1, 0x100)
                                          2362
                                          2363  #-----------------------------------------------------------------------
                                          2364  # Extension SYS_Unpack_56: Unpack 3 bytes into 4 pixels
                                          2365  #-----------------------------------------------------------------------
                                          2366
                                          2367  # sysArgs[0:2]  Packed bytes (input)
                                          2368  # sysArgs[0:3]  Pixels (output)
                                          2369
                                          2370  label('SYS_Unpack_56')
SYS_Unpack_56:
              06c0 1407  ld   $07,y       2371  ld(soundTable>>8, Y)            #15
              06c1 0126  ld   [$26]       2372  ld([sysArgs+2])                 #16 a[2]>>2
              06c2 5003  ora  $03,x       2373  ora(0x03, X)                    #17
              06c3 0d00  ld   [y,x]       2374  ld([Y,X])                       #18
              06c4 c227  st   [$27]       2375  st([sysArgs+3])                 #19 -> Pixel 3
                                          2376
              06c5 0126  ld   [$26]       2377  ld([sysArgs+2])                 #20 (a[2]&3)<<4
              06c6 2003  anda $03         2378  anda(0x03)                      #21
              06c7 8200  adda ac          2379  adda(AC)                        #22
              06c8 8200  adda ac          2380  adda(AC)                        #23
              06c9 8200  adda ac          2381  adda(AC)                        #24
              06ca 8200  adda ac          2382  adda(AC)                        #25
              06cb c226  st   [$26]       2383  st([sysArgs+2])                 #26
              06cc 0125  ld   [$25]       2384  ld([sysArgs+1])                 #27 | a[1]>>4
              06cd 5003  ora  $03,x       2385  ora(0x03, X)                    #28
              06ce 0d00  ld   [y,x]       2386  ld([Y,X])                       #29
              06cf 5003  ora  $03,x       2387  ora(0x03, X)                    #30
              06d0 0d00  ld   [y,x]       2388  ld([Y,X])                       #31
              06d1 4126  ora  [$26]       2389  ora([sysArgs+2])                #32
              06d2 c226  st   [$26]       2390  st([sysArgs+2])                 #33 -> Pixel 2
                                          2391
              06d3 0125  ld   [$25]       2392  ld([sysArgs+1])                 #34 (a[1]&15)<<2
              06d4 200f  anda $0f         2393  anda(0x0f)                      #35
              06d5 8200  adda ac          2394  adda(AC)                        #36
              06d6 8200  adda ac          2395  adda(AC)                        #37
              06d7 c225  st   [$25]       2396  st([sysArgs+1])                 #38
                                          2397
              06d8 0124  ld   [$24]       2398  ld([sysArgs+0])                 #39 | a[0]>>6
              06d9 5003  ora  $03,x       2399  ora(0x03, X)                    #40
              06da 0d00  ld   [y,x]       2400  ld([Y,X])                       #41
              06db 5003  ora  $03,x       2401  ora(0x03, X)                    #42
              06dc 0d00  ld   [y,x]       2402  ld([Y,X])                       #43
              06dd 5003  ora  $03,x       2403  ora(0x03, X)                    #44
              06de 0d00  ld   [y,x]       2404  ld([Y,X])                       #45
              06df 4125  ora  [$25]       2405  ora([sysArgs+1])                #46
              06e0 c225  st   [$25]       2406  st([sysArgs+1])                 #47 -> Pixel 1
                                          2407
              06e1 0124  ld   [$24]       2408  ld([sysArgs+0])                 #48 a[1]&63
              06e2 203f  anda $3f         2409  anda(0x3f)                      #49
              06e3 c224  st   [$24]       2410  st([sysArgs+0])                 #50 -> Pixel 0
                                          2411
              06e4 1403  ld   $03,y       2412  ld(hi('REENTER'), Y)            #51
              06e5 e0cb  jmp  y,$cb       2413  jmp(Y,'REENTER')                #52
              06e6 00e4  ld   $e4         2414  ld(-56/2)                       #53
                                          2415
                                          2416  #-----------------------------------------------------------------------
                                          2417  #       v6502 right shift instruction
                                          2418  #-----------------------------------------------------------------------
                                          2419
                                          2420  label('v6502_lsr30')
v6502_lsr30:  06e7 1525  ld   [$25],y     2421  ld([v6502_ADH],Y)               #30 Result
              06e8 ce00  st   [y,x]       2422  st([Y,X])                       #31
              06e9 c228  st   [$28]       2423  st([v6502_Qz])                  #32 Z flag
              06ea c229  st   [$29]       2424  st([v6502_Qn])                  #33 N flag
              06eb 140e  ld   $0e,y       2425  ld(hi('v6502_next'),Y)          #34
              06ec 00ed  ld   $ed         2426  ld(-38/2)                       #35
              06ed e020  jmp  y,$20       2427  jmp(Y,'v6502_next')             #36
                                          2428  #nop()                          #37 Overlap
                                          2429  #
                                          2430  label('v6502_ror38')
v6502_ror38:  06ee 1525  ld   [$25],y     2431  ld([v6502_ADH],Y)               #38,38 Result
              06ef 4119  ora  [$19]       2432  ora([v6502_BI])                 #39 Transfer bit 8
              06f0 ce00  st   [y,x]       2433  st([Y,X])                       #40
              06f1 c228  st   [$28]       2434  st([v6502_Qz])                  #41 Z flag
              06f2 c229  st   [$29]       2435  st([v6502_Qn])                  #42 N flag
              06f3 140e  ld   $0e,y       2436  ld(hi('v6502_next'),Y)          #43
              06f4 e020  jmp  y,$20       2437  jmp(Y,'v6502_next')             #44
              06f5 00e9  ld   $e9         2438  ld(-46/2)                       #45
                                          2439
                                          2440  #-----------------------------------------------------------------------
                                          2441  #       Reserved
                                          2442  #-----------------------------------------------------------------------
                                          2443
                                          2444  # XXX Reserve space for LSRW
                                          2445
                                          2446  #-----------------------------------------------------------------------
                                          2447  #
                                          2448  #  $0700 ROM page 7-8: Gigatron font data
                                          2449  #
                                          2450  #-----------------------------------------------------------------------
                                          2451
              06f6 0200  nop              2452  align(0x100, 0x100)
              06f7 0200  nop
              06f8 0200  nop
              * 10 times
                                          2453
                                          2454  label('font32up')
                                          2455  for ch in range(32, 32+50):
                                          2456    comment = 'Char %s' % repr(chr(ch))
                                          2457    for byte in font.font[ch-32]:
                                          2458      ld(byte)
font32up:     0700 0000  ld   $00         ;Char ' '
              0701 0000  ld   $00
              0702 0000  ld   $00
              * 5 times
              0705 0000  ld   $00         ;Char '!'
              0706 0000  ld   $00
              0707 00fa  ld   $fa
              0708 0000  ld   $00
              0709 0000  ld   $00
              070a 00a0  ld   $a0         ;Char '"'
              070b 00c0  ld   $c0
              070c 0000  ld   $00
              070d 00a0  ld   $a0
              070e 00c0  ld   $c0
              070f 0028  ld   $28         ;Char '#'
              0710 00fe  ld   $fe
              0711 0028  ld   $28
              0712 00fe  ld   $fe
              0713 0028  ld   $28
              0714 0024  ld   $24         ;Char '$'
              0715 0054  ld   $54
              0716 00fe  ld   $fe
              0717 0054  ld   $54
              0718 0048  ld   $48
              0719 00c4  ld   $c4         ;Char '%'
              071a 00c8  ld   $c8
              071b 0010  ld   $10
              071c 0026  ld   $26
              071d 0046  ld   $46
              071e 006c  ld   $6c         ;Char '&'
              071f 0092  ld   $92
              0720 006a  ld   $6a
              0721 0004  ld   $04
              0722 000a  ld   $0a
              0723 0000  ld   $00         ;Char "'"
              0724 00a0  ld   $a0
              0725 00c0  ld   $c0
              0726 0000  ld   $00
              0727 0000  ld   $00
              0728 0000  ld   $00         ;Char '('
              0729 0038  ld   $38
              072a 0044  ld   $44
              072b 0082  ld   $82
              072c 0000  ld   $00
              072d 0000  ld   $00         ;Char ')'
              072e 0082  ld   $82
              072f 0044  ld   $44
              0730 0038  ld   $38
              0731 0000  ld   $00
              0732 0028  ld   $28         ;Char '*'
              0733 0010  ld   $10
              0734 007c  ld   $7c
              0735 0010  ld   $10
              0736 0028  ld   $28
              0737 0010  ld   $10         ;Char '+'
              0738 0010  ld   $10
              0739 007c  ld   $7c
              073a 0010  ld   $10
              073b 0010  ld   $10
              073c 0000  ld   $00         ;Char ','
              073d 0005  ld   $05
              073e 0006  ld   $06
              073f 0000  ld   $00
              0740 0000  ld   $00
              0741 0010  ld   $10         ;Char '-'
              0742 0010  ld   $10
              0743 0010  ld   $10
              * 5 times
              0746 0000  ld   $00         ;Char '.'
              0747 0002  ld   $02
              0748 0002  ld   $02
              0749 0000  ld   $00
              074a 0000  ld   $00
              074b 0000  ld   $00         ;Char '/'
              074c 0006  ld   $06
              074d 0018  ld   $18
              074e 0060  ld   $60
              074f 0000  ld   $00
              0750 007c  ld   $7c         ;Char '0'
              0751 008a  ld   $8a
              0752 0092  ld   $92
              0753 00a2  ld   $a2
              0754 007c  ld   $7c
              0755 0022  ld   $22         ;Char '1'
              0756 0042  ld   $42
              0757 00fe  ld   $fe
              0758 0002  ld   $02
              0759 0002  ld   $02
              075a 0046  ld   $46         ;Char '2'
              075b 008a  ld   $8a
              075c 0092  ld   $92
              075d 0092  ld   $92
              075e 0062  ld   $62
              075f 0044  ld   $44         ;Char '3'
              0760 0082  ld   $82
              0761 0092  ld   $92
              0762 0092  ld   $92
              0763 006c  ld   $6c
              0764 0018  ld   $18         ;Char '4'
              0765 0028  ld   $28
              0766 0048  ld   $48
              0767 00fe  ld   $fe
              0768 0008  ld   $08
              0769 00e4  ld   $e4         ;Char '5'
              076a 00a2  ld   $a2
              076b 00a2  ld   $a2
              076c 00a2  ld   $a2
              076d 009c  ld   $9c
              076e 003c  ld   $3c         ;Char '6'
              076f 0052  ld   $52
              0770 0092  ld   $92
              0771 0092  ld   $92
              0772 000c  ld   $0c
              0773 0080  ld   $80         ;Char '7'
              0774 008e  ld   $8e
              0775 0090  ld   $90
              0776 00a0  ld   $a0
              0777 00c0  ld   $c0
              0778 006c  ld   $6c         ;Char '8'
              0779 0092  ld   $92
              077a 0092  ld   $92
              077b 0092  ld   $92
              077c 006c  ld   $6c
              077d 0060  ld   $60         ;Char '9'
              077e 0092  ld   $92
              077f 0092  ld   $92
              0780 0094  ld   $94
              0781 0078  ld   $78
              0782 0000  ld   $00         ;Char ':'
              0783 0024  ld   $24
              0784 0024  ld   $24
              0785 0000  ld   $00
              0786 0000  ld   $00
              0787 0000  ld   $00         ;Char ';'
              0788 0025  ld   $25
              0789 0026  ld   $26
              078a 0000  ld   $00
              078b 0000  ld   $00
              078c 0010  ld   $10         ;Char '<'
              078d 0028  ld   $28
              078e 0044  ld   $44
              078f 0082  ld   $82
              0790 0000  ld   $00
              0791 0028  ld   $28         ;Char '='
              0792 0028  ld   $28
              0793 0028  ld   $28
              * 5 times
              0796 0000  ld   $00         ;Char '>'
              0797 0082  ld   $82
              0798 0044  ld   $44
              0799 0028  ld   $28
              079a 0010  ld   $10
              079b 0040  ld   $40         ;Char '?'
              079c 0080  ld   $80
              079d 008a  ld   $8a
              079e 0090  ld   $90
              079f 0060  ld   $60
              07a0 007c  ld   $7c         ;Char '@'
              07a1 0082  ld   $82
              07a2 00ba  ld   $ba
              07a3 00aa  ld   $aa
              07a4 0078  ld   $78
              07a5 003e  ld   $3e         ;Char 'A'
              07a6 0048  ld   $48
              07a7 0088  ld   $88
              07a8 0048  ld   $48
              07a9 003e  ld   $3e
              07aa 00fe  ld   $fe         ;Char 'B'
              07ab 0092  ld   $92
              07ac 0092  ld   $92
              07ad 0092  ld   $92
              07ae 006c  ld   $6c
              07af 007c  ld   $7c         ;Char 'C'
              07b0 0082  ld   $82
              07b1 0082  ld   $82
              07b2 0082  ld   $82
              07b3 0044  ld   $44
              07b4 00fe  ld   $fe         ;Char 'D'
              07b5 0082  ld   $82
              07b6 0082  ld   $82
              07b7 0044  ld   $44
              07b8 0038  ld   $38
              07b9 00fe  ld   $fe         ;Char 'E'
              07ba 0092  ld   $92
              07bb 0092  ld   $92
              07bc 0092  ld   $92
              07bd 0082  ld   $82
              07be 00fe  ld   $fe         ;Char 'F'
              07bf 0090  ld   $90
              07c0 0090  ld   $90
              07c1 0090  ld   $90
              07c2 0080  ld   $80
              07c3 007c  ld   $7c         ;Char 'G'
              07c4 0082  ld   $82
              07c5 0082  ld   $82
              07c6 0092  ld   $92
              07c7 005c  ld   $5c
              07c8 00fe  ld   $fe         ;Char 'H'
              07c9 0010  ld   $10
              07ca 0010  ld   $10
              07cb 0010  ld   $10
              07cc 00fe  ld   $fe
              07cd 0000  ld   $00         ;Char 'I'
              07ce 0082  ld   $82
              07cf 00fe  ld   $fe
              07d0 0082  ld   $82
              07d1 0000  ld   $00
              07d2 0004  ld   $04         ;Char 'J'
              07d3 0002  ld   $02
              07d4 0082  ld   $82
              07d5 00fc  ld   $fc
              07d6 0080  ld   $80
              07d7 00fe  ld   $fe         ;Char 'K'
              07d8 0010  ld   $10
              07d9 0028  ld   $28
              07da 0044  ld   $44
              07db 0082  ld   $82
              07dc 00fe  ld   $fe         ;Char 'L'
              07dd 0002  ld   $02
              07de 0002  ld   $02
              07df 0002  ld   $02
              07e0 0002  ld   $02
              07e1 00fe  ld   $fe         ;Char 'M'
              07e2 0040  ld   $40
              07e3 0020  ld   $20
              07e4 0040  ld   $40
              07e5 00fe  ld   $fe
              07e6 00fe  ld   $fe         ;Char 'N'
              07e7 0020  ld   $20
              07e8 0010  ld   $10
              07e9 0008  ld   $08
              07ea 00fe  ld   $fe
              07eb 007c  ld   $7c         ;Char 'O'
              07ec 0082  ld   $82
              07ed 0082  ld   $82
              07ee 0082  ld   $82
              07ef 007c  ld   $7c
              07f0 00fe  ld   $fe         ;Char 'P'
              07f1 0090  ld   $90
              07f2 0090  ld   $90
              07f3 0090  ld   $90
              07f4 0060  ld   $60
              07f5 007c  ld   $7c         ;Char 'Q'
              07f6 0082  ld   $82
              07f7 008a  ld   $8a
              07f8 0084  ld   $84
              07f9 007a  ld   $7a
                                          2459      comment = C(comment)
                                          2460
              07fa 0200  nop              2461  trampoline()
              07fb fe00  bra  ac          ;+-----------------------------------+
              07fc fcfd  bra  $07fd       ;|                                   |
              07fd 1404  ld   $04,y       ;| Trampoline for page $0700 lookups |
              07fe e065  jmp  y,$65       ;|                                   |
              07ff c218  st   [$18]       ;+-----------------------------------+
                                          2462
                                          2463  #-----------------------------------------------------------------------
                                          2464
                                          2465  align(0x100, 0x100)
                                          2466
                                          2467  label('font82up')
                                          2468  for ch in range(32+50, 132):
                                          2469    comment = 'Char %s' % repr(chr(ch))
                                          2470    for byte in font.font[ch-32]:
                                          2471      ld(byte)
font82up:     0800 00fe  ld   $fe         ;Char 'R'
              0801 0090  ld   $90
              0802 0098  ld   $98
              0803 0094  ld   $94
              0804 0062  ld   $62
              0805 0062  ld   $62         ;Char 'S'
              0806 0092  ld   $92
              0807 0092  ld   $92
              0808 0092  ld   $92
              0809 000c  ld   $0c
              080a 0080  ld   $80         ;Char 'T'
              080b 0080  ld   $80
              080c 00fe  ld   $fe
              080d 0080  ld   $80
              080e 0080  ld   $80
              080f 00fc  ld   $fc         ;Char 'U'
              0810 0002  ld   $02
              0811 0002  ld   $02
              0812 0002  ld   $02
              0813 00fc  ld   $fc
              0814 00f0  ld   $f0         ;Char 'V'
              0815 000c  ld   $0c
              0816 0002  ld   $02
              0817 000c  ld   $0c
              0818 00f0  ld   $f0
              0819 00fe  ld   $fe         ;Char 'W'
              081a 0004  ld   $04
              081b 0008  ld   $08
              081c 0004  ld   $04
              081d 00fe  ld   $fe
              081e 00c6  ld   $c6         ;Char 'X'
              081f 0028  ld   $28
              0820 0010  ld   $10
              0821 0028  ld   $28
              0822 00c6  ld   $c6
              0823 00e0  ld   $e0         ;Char 'Y'
              0824 0010  ld   $10
              0825 000e  ld   $0e
              0826 0010  ld   $10
              0827 00e0  ld   $e0
              0828 0086  ld   $86         ;Char 'Z'
              0829 008a  ld   $8a
              082a 0092  ld   $92
              082b 00a2  ld   $a2
              082c 00c2  ld   $c2
              082d 0000  ld   $00         ;Char '['
              082e 00fe  ld   $fe
              082f 0082  ld   $82
              0830 0082  ld   $82
              0831 0000  ld   $00
              0832 0000  ld   $00         ;Char '\\'
              0833 0060  ld   $60
              0834 0018  ld   $18
              0835 0006  ld   $06
              0836 0000  ld   $00
              0837 0000  ld   $00         ;Char ']'
              0838 0082  ld   $82
              0839 0082  ld   $82
              083a 00fe  ld   $fe
              083b 0000  ld   $00
              083c 0020  ld   $20         ;Char '^'
              083d 0040  ld   $40
              083e 0080  ld   $80
              083f 0040  ld   $40
              0840 0020  ld   $20
              0841 0002  ld   $02         ;Char '_'
              0842 0002  ld   $02
              0843 0002  ld   $02
              * 5 times
              0846 0000  ld   $00         ;Char '`'
              0847 0000  ld   $00
              0848 00c0  ld   $c0
              0849 00a0  ld   $a0
              084a 0000  ld   $00
              084b 0004  ld   $04         ;Char 'a'
              084c 002a  ld   $2a
              084d 002a  ld   $2a
              084e 002a  ld   $2a
              084f 001e  ld   $1e
              0850 00fe  ld   $fe         ;Char 'b'
              0851 0022  ld   $22
              0852 0022  ld   $22
              0853 0022  ld   $22
              0854 001c  ld   $1c
              0855 001c  ld   $1c         ;Char 'c'
              0856 0022  ld   $22
              0857 0022  ld   $22
              0858 0022  ld   $22
              0859 0002  ld   $02
              085a 001c  ld   $1c         ;Char 'd'
              085b 0022  ld   $22
              085c 0022  ld   $22
              085d 0022  ld   $22
              085e 00fe  ld   $fe
              085f 001c  ld   $1c         ;Char 'e'
              0860 002a  ld   $2a
              0861 002a  ld   $2a
              0862 002a  ld   $2a
              0863 0018  ld   $18
              0864 0010  ld   $10         ;Char 'f'
              0865 007e  ld   $7e
              0866 0090  ld   $90
              0867 0080  ld   $80
              0868 0040  ld   $40
              0869 0018  ld   $18         ;Char 'g'
              086a 0025  ld   $25
              086b 0025  ld   $25
              086c 0025  ld   $25
              086d 001e  ld   $1e
              086e 00fe  ld   $fe         ;Char 'h'
              086f 0020  ld   $20
              0870 0020  ld   $20
              0871 0020  ld   $20
              0872 001e  ld   $1e
              0873 0000  ld   $00         ;Char 'i'
              0874 0022  ld   $22
              0875 00be  ld   $be
              0876 0002  ld   $02
              0877 0000  ld   $00
              0878 0002  ld   $02         ;Char 'j'
              0879 0001  ld   $01
              087a 0021  ld   $21
              087b 00be  ld   $be
              087c 0000  ld   $00
              087d 00fe  ld   $fe         ;Char 'k'
              087e 0008  ld   $08
              087f 0018  ld   $18
              0880 0024  ld   $24
              0881 0002  ld   $02
              0882 0000  ld   $00         ;Char 'l'
              0883 0082  ld   $82
              0884 00fe  ld   $fe
              0885 0002  ld   $02
              0886 0000  ld   $00
              0887 003e  ld   $3e         ;Char 'm'
              0888 0020  ld   $20
              0889 001c  ld   $1c
              088a 0020  ld   $20
              088b 001e  ld   $1e
              088c 003e  ld   $3e         ;Char 'n'
              088d 0010  ld   $10
              088e 0020  ld   $20
              088f 0020  ld   $20
              0890 001e  ld   $1e
              0891 001c  ld   $1c         ;Char 'o'
              0892 0022  ld   $22
              0893 0022  ld   $22
              0894 0022  ld   $22
              0895 001c  ld   $1c
              0896 003f  ld   $3f         ;Char 'p'
              0897 0024  ld   $24
              0898 0024  ld   $24
              0899 0024  ld   $24
              089a 0018  ld   $18
              089b 0018  ld   $18         ;Char 'q'
              089c 0024  ld   $24
              089d 0024  ld   $24
              089e 0024  ld   $24
              089f 003f  ld   $3f
              08a0 003e  ld   $3e         ;Char 'r'
              08a1 0010  ld   $10
              08a2 0020  ld   $20
              08a3 0020  ld   $20
              08a4 0010  ld   $10
              08a5 0012  ld   $12         ;Char 's'
              08a6 002a  ld   $2a
              08a7 002a  ld   $2a
              08a8 002a  ld   $2a
              08a9 0004  ld   $04
              08aa 0020  ld   $20         ;Char 't'
              08ab 00fc  ld   $fc
              08ac 0022  ld   $22
              08ad 0002  ld   $02
              08ae 0004  ld   $04
              08af 003c  ld   $3c         ;Char 'u'
              08b0 0002  ld   $02
              08b1 0002  ld   $02
              08b2 0004  ld   $04
              08b3 003e  ld   $3e
              08b4 0038  ld   $38         ;Char 'v'
              08b5 0004  ld   $04
              08b6 0002  ld   $02
              08b7 0004  ld   $04
              08b8 0038  ld   $38
              08b9 003c  ld   $3c         ;Char 'w'
              08ba 0002  ld   $02
              08bb 000c  ld   $0c
              08bc 0002  ld   $02
              08bd 003c  ld   $3c
              08be 0022  ld   $22         ;Char 'x'
              08bf 0014  ld   $14
              08c0 0008  ld   $08
              08c1 0014  ld   $14
              08c2 0022  ld   $22
              08c3 0038  ld   $38         ;Char 'y'
              08c4 0005  ld   $05
              08c5 0005  ld   $05
              08c6 0005  ld   $05
              08c7 003e  ld   $3e
              08c8 0022  ld   $22         ;Char 'z'
              08c9 0026  ld   $26
              08ca 002a  ld   $2a
              08cb 0032  ld   $32
              08cc 0022  ld   $22
              08cd 0010  ld   $10         ;Char '{'
              08ce 006c  ld   $6c
              08cf 0082  ld   $82
              08d0 0082  ld   $82
              08d1 0000  ld   $00
              08d2 0000  ld   $00         ;Char '|'
              08d3 0000  ld   $00
              08d4 00fe  ld   $fe
              08d5 0000  ld   $00
              08d6 0000  ld   $00
              08d7 0000  ld   $00         ;Char '}'
              08d8 0082  ld   $82
              08d9 0082  ld   $82
              08da 006c  ld   $6c
              08db 0010  ld   $10
              08dc 0040  ld   $40         ;Char '~'
              08dd 0080  ld   $80
              08de 0040  ld   $40
              08df 0020  ld   $20
              08e0 0040  ld   $40
              08e1 00fe  ld   $fe         ;Char '\x7f'
              08e2 00fe  ld   $fe
              08e3 00fe  ld   $fe
              * 5 times
              08e6 0010  ld   $10         ;Char '\x80'
              08e7 0038  ld   $38
              08e8 0054  ld   $54
              08e9 0010  ld   $10
              08ea 0010  ld   $10
              08eb 0010  ld   $10         ;Char '\x81'
              08ec 0020  ld   $20
              08ed 007c  ld   $7c
              08ee 0020  ld   $20
              08ef 0010  ld   $10
              08f0 0010  ld   $10         ;Char '\x82'
              08f1 0010  ld   $10
              08f2 0054  ld   $54
              08f3 0038  ld   $38
              08f4 0010  ld   $10
              08f5 0010  ld   $10         ;Char '\x83'
              08f6 0008  ld   $08
              08f7 007c  ld   $7c
              08f8 0008  ld   $08
              08f9 0010  ld   $10
                                          2472      comment = C(comment)
                                          2473
              08fa 0200  nop              2474  trampoline()
              08fb fe00  bra  ac          ;+-----------------------------------+
              08fc fcfd  bra  $08fd       ;|                                   |
              08fd 1404  ld   $04,y       ;| Trampoline for page $0800 lookups |
              08fe e065  jmp  y,$65       ;|                                   |
              08ff c218  st   [$18]       ;+-----------------------------------+
                                          2475
                                          2476  #-----------------------------------------------------------------------
                                          2477  #
                                          2478  #  $0900 ROM page 9: Key table for music
                                          2479  #
                                          2480  #-----------------------------------------------------------------------
                                          2481
                                          2482  align(0x100, 0x100)
                                          2483  notes = 'CCDDEFFGGAAB'
                                          2484  sampleRate = cpuClock / 200.0 / 4
                                          2485  label('notesTable')
notesTable:   0900 0000  ld   $00         2486  ld(0)
              0901 0000  ld   $00         2487  ld(0)
                                          2488  for i in range(0, 250, 2):
                                          2489    j = i//2-1
                                          2490    freq = 440.0*2.0**((j-57)/12.0)
                                          2491    if j>=0 and freq <= sampleRate/2.0:
                                          2492      key = int(round(32768 * freq / sampleRate))
                                          2493      octave, note = j//12, notes[j%12]
                                          2494      sharp = '-' if notes[j%12-1] != note else '#'
                                          2495      comment = '%s%s%s (%0.1f Hz)' % (note, sharp, octave, freq)
                                          2496      ld(key&127); C(comment); ld(key>>7)
              0902 0045  ld   $45         ;C-0 (16.4 Hz)
              0903 0000  ld   $00
              0904 0049  ld   $49         ;C#0 (17.3 Hz)
              0905 0000  ld   $00
              0906 004d  ld   $4d         ;D-0 (18.4 Hz)
              0907 0000  ld   $00
              0908 0052  ld   $52         ;D#0 (19.4 Hz)
              0909 0000  ld   $00
              090a 0056  ld   $56         ;E-0 (20.6 Hz)
              090b 0000  ld   $00
              090c 005c  ld   $5c         ;F-0 (21.8 Hz)
              090d 0000  ld   $00
              090e 0061  ld   $61         ;F#0 (23.1 Hz)
              090f 0000  ld   $00
              0910 0067  ld   $67         ;G-0 (24.5 Hz)
              0911 0000  ld   $00
              0912 006d  ld   $6d         ;G#0 (26.0 Hz)
              0913 0000  ld   $00
              0914 0073  ld   $73         ;A-0 (27.5 Hz)
              0915 0000  ld   $00
              0916 007a  ld   $7a         ;A#0 (29.1 Hz)
              0917 0000  ld   $00
              0918 0001  ld   $01         ;B-0 (30.9 Hz)
              0919 0001  ld   $01
              091a 0009  ld   $09         ;C-1 (32.7 Hz)
              091b 0001  ld   $01
              091c 0011  ld   $11         ;C#1 (34.6 Hz)
              091d 0001  ld   $01
              091e 001a  ld   $1a         ;D-1 (36.7 Hz)
              091f 0001  ld   $01
              0920 0023  ld   $23         ;D#1 (38.9 Hz)
              0921 0001  ld   $01
              0922 002d  ld   $2d         ;E-1 (41.2 Hz)
              0923 0001  ld   $01
              0924 0037  ld   $37         ;F-1 (43.7 Hz)
              0925 0001  ld   $01
              0926 0042  ld   $42         ;F#1 (46.2 Hz)
              0927 0001  ld   $01
              0928 004e  ld   $4e         ;G-1 (49.0 Hz)
              0929 0001  ld   $01
              092a 005a  ld   $5a         ;G#1 (51.9 Hz)
              092b 0001  ld   $01
              092c 0067  ld   $67         ;A-1 (55.0 Hz)
              092d 0001  ld   $01
              092e 0074  ld   $74         ;A#1 (58.3 Hz)
              092f 0001  ld   $01
              0930 0003  ld   $03         ;B-1 (61.7 Hz)
              0931 0002  ld   $02
              0932 0012  ld   $12         ;C-2 (65.4 Hz)
              0933 0002  ld   $02
              0934 0023  ld   $23         ;C#2 (69.3 Hz)
              0935 0002  ld   $02
              0936 0034  ld   $34         ;D-2 (73.4 Hz)
              0937 0002  ld   $02
              0938 0046  ld   $46         ;D#2 (77.8 Hz)
              0939 0002  ld   $02
              093a 005a  ld   $5a         ;E-2 (82.4 Hz)
              093b 0002  ld   $02
              093c 006e  ld   $6e         ;F-2 (87.3 Hz)
              093d 0002  ld   $02
              093e 0004  ld   $04         ;F#2 (92.5 Hz)
              093f 0003  ld   $03
              0940 001b  ld   $1b         ;G-2 (98.0 Hz)
              0941 0003  ld   $03
              0942 0033  ld   $33         ;G#2 (103.8 Hz)
              0943 0003  ld   $03
              0944 004d  ld   $4d         ;A-2 (110.0 Hz)
              0945 0003  ld   $03
              0946 0069  ld   $69         ;A#2 (116.5 Hz)
              0947 0003  ld   $03
              0948 0006  ld   $06         ;B-2 (123.5 Hz)
              0949 0004  ld   $04
              094a 0025  ld   $25         ;C-3 (130.8 Hz)
              094b 0004  ld   $04
              094c 0045  ld   $45         ;C#3 (138.6 Hz)
              094d 0004  ld   $04
              094e 0068  ld   $68         ;D-3 (146.8 Hz)
              094f 0004  ld   $04
              0950 000c  ld   $0c         ;D#3 (155.6 Hz)
              0951 0005  ld   $05
              0952 0033  ld   $33         ;E-3 (164.8 Hz)
              0953 0005  ld   $05
              0954 005c  ld   $5c         ;F-3 (174.6 Hz)
              0955 0005  ld   $05
              0956 0008  ld   $08         ;F#3 (185.0 Hz)
              0957 0006  ld   $06
              0958 0036  ld   $36         ;G-3 (196.0 Hz)
              0959 0006  ld   $06
              095a 0067  ld   $67         ;G#3 (207.7 Hz)
              095b 0006  ld   $06
              095c 001b  ld   $1b         ;A-3 (220.0 Hz)
              095d 0007  ld   $07
              095e 0052  ld   $52         ;A#3 (233.1 Hz)
              095f 0007  ld   $07
              0960 000c  ld   $0c         ;B-3 (246.9 Hz)
              0961 0008  ld   $08
              0962 0049  ld   $49         ;C-4 (261.6 Hz)
              0963 0008  ld   $08
              0964 000b  ld   $0b         ;C#4 (277.2 Hz)
              0965 0009  ld   $09
              0966 0050  ld   $50         ;D-4 (293.7 Hz)
              0967 0009  ld   $09
              0968 0019  ld   $19         ;D#4 (311.1 Hz)
              0969 000a  ld   $0a
              096a 0067  ld   $67         ;E-4 (329.6 Hz)
              096b 000a  ld   $0a
              096c 0039  ld   $39         ;F-4 (349.2 Hz)
              096d 000b  ld   $0b
              096e 0010  ld   $10         ;F#4 (370.0 Hz)
              096f 000c  ld   $0c
              0970 006c  ld   $6c         ;G-4 (392.0 Hz)
              0971 000c  ld   $0c
              0972 004e  ld   $4e         ;G#4 (415.3 Hz)
              0973 000d  ld   $0d
              0974 0035  ld   $35         ;A-4 (440.0 Hz)
              0975 000e  ld   $0e
              0976 0023  ld   $23         ;A#4 (466.2 Hz)
              0977 000f  ld   $0f
              0978 0017  ld   $17         ;B-4 (493.9 Hz)
              0979 0010  ld   $10
              097a 0013  ld   $13         ;C-5 (523.3 Hz)
              097b 0011  ld   $11
              097c 0015  ld   $15         ;C#5 (554.4 Hz)
              097d 0012  ld   $12
              097e 001f  ld   $1f         ;D-5 (587.3 Hz)
              097f 0013  ld   $13
              0980 0032  ld   $32         ;D#5 (622.3 Hz)
              0981 0014  ld   $14
              0982 004d  ld   $4d         ;E-5 (659.3 Hz)
              0983 0015  ld   $15
              0984 0072  ld   $72         ;F-5 (698.5 Hz)
              0985 0016  ld   $16
              0986 0020  ld   $20         ;F#5 (740.0 Hz)
              0987 0018  ld   $18
              0988 0058  ld   $58         ;G-5 (784.0 Hz)
              0989 0019  ld   $19
              098a 001c  ld   $1c         ;G#5 (830.6 Hz)
              098b 001b  ld   $1b
              098c 006b  ld   $6b         ;A-5 (880.0 Hz)
              098d 001c  ld   $1c
              098e 0046  ld   $46         ;A#5 (932.3 Hz)
              098f 001e  ld   $1e
              0990 002f  ld   $2f         ;B-5 (987.8 Hz)
              0991 0020  ld   $20
              0992 0025  ld   $25         ;C-6 (1046.5 Hz)
              0993 0022  ld   $22
              0994 002a  ld   $2a         ;C#6 (1108.7 Hz)
              0995 0024  ld   $24
              0996 003f  ld   $3f         ;D-6 (1174.7 Hz)
              0997 0026  ld   $26
              0998 0064  ld   $64         ;D#6 (1244.5 Hz)
              0999 0028  ld   $28
              099a 001a  ld   $1a         ;E-6 (1318.5 Hz)
              099b 002b  ld   $2b
              099c 0063  ld   $63         ;F-6 (1396.9 Hz)
              099d 002d  ld   $2d
              099e 003f  ld   $3f         ;F#6 (1480.0 Hz)
              099f 0030  ld   $30
              09a0 0031  ld   $31         ;G-6 (1568.0 Hz)
              09a1 0033  ld   $33
              09a2 0038  ld   $38         ;G#6 (1661.2 Hz)
              09a3 0036  ld   $36
              09a4 0056  ld   $56         ;A-6 (1760.0 Hz)
              09a5 0039  ld   $39
              09a6 000d  ld   $0d         ;A#6 (1864.7 Hz)
              09a7 003d  ld   $3d
              09a8 005e  ld   $5e         ;B-6 (1975.5 Hz)
              09a9 0040  ld   $40
              09aa 004b  ld   $4b         ;C-7 (2093.0 Hz)
              09ab 0044  ld   $44
              09ac 0055  ld   $55         ;C#7 (2217.5 Hz)
              09ad 0048  ld   $48
              09ae 007e  ld   $7e         ;D-7 (2349.3 Hz)
              09af 004c  ld   $4c
              09b0 0048  ld   $48         ;D#7 (2489.0 Hz)
              09b1 0051  ld   $51
              09b2 0034  ld   $34         ;E-7 (2637.0 Hz)
              09b3 0056  ld   $56
              09b4 0046  ld   $46         ;F-7 (2793.8 Hz)
              09b5 005b  ld   $5b
              09b6 007f  ld   $7f         ;F#7 (2960.0 Hz)
              09b7 0060  ld   $60
              09b8 0061  ld   $61         ;G-7 (3136.0 Hz)
              09b9 0066  ld   $66
              09ba 006f  ld   $6f         ;G#7 (3322.4 Hz)
              09bb 006c  ld   $6c
              09bc 002c  ld   $2c         ;A-7 (3520.0 Hz)
              09bd 0073  ld   $73
              09be 001a  ld   $1a         ;A#7 (3729.3 Hz)
              09bf 007a  ld   $7a
                                          2497
                                          2498  #-----------------------------------------------------------------------
                                          2499
              09c0 0000  ld   $00         2500  fillers(until=0xde, instruction=ld)
              09c1 0000  ld   $00
              09c2 0000  ld   $00
              * 30 times
                                          2501
                                          2502  # Use remaining space for overflow of video loop
                                          2503
                                          2504  # Entered last line of vertical blank (line 40)
                                          2505  label('vBlankLast#34')
                                          2506
                                          2507  # Game controller types
                                          2508  # TypeA: Based on 74LS165 shift register (not supported)
                                          2509  # TypeB: Based on CD4021B shift register (standard)
                                          2510  # TypeC: Based on priority encoder
                                          2511  #
                                          2512  # Notes:
                                          2513  # - TypeA was only used during development and first beta test, before ROM v1
                                          2514  # - TypeB appears as type A with negative logic levels
                                          2515  # - TypeB is the game controller type that comes with the original kit and ROM v1
                                          2516  # - TypeB is mimicked by BabelFish / Pluggy McPlugface
                                          2517  # - TypeB requires a prolonged /SER_LATCH, therefore vPulse is 8 scanlines, not 2
                                          2518  # - TypeB and TypeC can be sampled in the same scanline
                                          2519  # - TypeA is 1 scanline shifted as it looks at a different edge (XXX up or down?)
                                          2520  # - TypeC gives incomplete information: lower buttons overshadow higher ones
                                          2521  #
                                          2522  #       TypeC    Alias    Button TypeB
                                          2523  #       00000000  ^@   -> Right  11111110
                                          2524  #       00000001  ^A   -> Left   11111101
                                          2525  #       00000011  ^C   -> Down   11111011
                                          2526  #       00000111  ^G   -> Up     11110111
                                          2527  #       00001111  ^O   -> Start  11101111
                                          2528  #       00011111  ^_   -> Select 11011111
                                          2529  #       00111111  ?    -> B      10111111
                                          2530  #       01111111  DEL  -> A      01111111
                                          2531  #       11111111       -> (None) 11111111
                                          2532  #
                                          2533  #       Conversion formula:
                                          2534  #               f(x) := 254 - x
                                          2535
                                          2536  # Detect controller TypeC codes
vBlankLast#34:
              09de 010f  ld   [$0f]       2537  ld([serialRaw])                 #34 if serialRaw in [0,1,3,7,15,31,63,127,255]
              09df 8001  adda $01         2538  adda(1)                         #35
              09e0 210f  anda [$0f]       2539  anda([serialRaw])               #36
              09e1 ecf2  bne  .buttons#39 2540  bne('.buttons#39')              #37
                                          2541
                                          2542  # TypeC
              09e2 010f  ld   [$0f]       2543  ld([serialRaw])                 #38 [TypeC] if serialRaw < serialLast
              09e3 8001  adda $01         2544  adda(1)                         #39
              09e4 2110  anda [$10]       2545  anda([serialLast])              #40
              09e5 ece9  bne  .buttons#43 2546  bne('.buttons#43')              #41
              09e6 00fe  ld   $fe         2547  ld(254)                         #42 then clear the selected bit
              09e7 0200  nop              2548  nop()                           #43
              09e8 fcec  bra  .buttons#46 2549  bra('.buttons#46')              #44
                                          2550  label('.buttons#43')
.buttons#43:  09e9 a10f  suba [$0f]       2551  suba([serialRaw])               #43,45
              09ea 2111  anda [$11]       2552  anda([buttonState])             #44
              09eb c211  st   [$11]       2553  st([buttonState])               #45
                                          2554  label('.buttons#46')
.buttons#46:  09ec 010f  ld   [$0f]       2555  ld([serialRaw])                 #46 Set the lower bits
                                          2556
              09ed 4111  ora  [$11]       2557  ora([buttonState])              #47
                                          2558  label('.buttons#48')
.buttons#48:  09ee c211  st   [$11]       2559  st([buttonState])               #48
              09ef 010f  ld   [$0f]       2560  ld([serialRaw])                 #49 Update serialLast for next pass
              09f0 e0ae  jmp  y,$ae       2561  jmp(Y,'vBlankLast#52')          #50
              09f1 c210  st   [$10]       2562  st([serialLast])                #51
                                          2563
                                          2564  # TypeB
                                          2565  # pChange = pNew & ~pOld
                                          2566  # nChange = nNew | ~nOld {DeMorgan}
                                          2567  label('.buttons#39')
.buttons#39:  09f2 00ff  ld   $ff         2568  ld(255)                         #39 [TypeB] Bitwise edge-filter to detect button presses
              09f3 6110  xora [$10]       2569  xora([serialLast])              #40
              09f4 410f  ora  [$0f]       2570  ora([serialRaw])                #41 Catch button-press events
              09f5 2111  anda [$11]       2571  anda([buttonState])             #42 Keep active button presses
              09f6 410f  ora  [$0f]       2572  ora([serialRaw])                #43
              09f7 0200  nop              2573  nop()                           #44
              09f8 0200  nop              2574  nop()                           #45
              09f9 fcee  bra  .buttons#48 2575  bra('.buttons#48')              #46
              09fa 0200  nop              2576  nop()                           #47
                                          2577
                                          2578  trampoline()
              09fb fe00  bra  ac          ;+-----------------------------------+
              09fc fcfd  bra  $09fd       ;|                                   |
              09fd 1404  ld   $04,y       ;| Trampoline for page $0900 lookups |
              09fe e065  jmp  y,$65       ;|                                   |
              09ff c218  st   [$18]       ;+-----------------------------------+
                                          2579
                                          2580  #-----------------------------------------------------------------------
                                          2581  #
                                          2582  #  $0a00 ROM page 10: Inversion table
                                          2583  #
                                          2584  #-----------------------------------------------------------------------
                                          2585
                                          2586  align(0x100, 0x100)
                                          2587  label('invTable')
                                          2588
                                          2589  # Unit 64, table offset 16 (=1/4), value offset 1: (x+16)*(y+1) == 64*64 - e
                                          2590  for i in range(251):
invTable:     0a00 00ff  ld   $ff         2591    ld(4096//(i+16)-1)
              0a01 00ef  ld   $ef
              0a02 00e2  ld   $e2
              0a03 00d6  ld   $d6
              0a04 00cb  ld   $cb
              0a05 00c2  ld   $c2
              0a06 00b9  ld   $b9
              0a07 00b1  ld   $b1
              0a08 00a9  ld   $a9
              0a09 00a2  ld   $a2
              0a0a 009c  ld   $9c
              0a0b 0096  ld   $96
              0a0c 0091  ld   $91
              0a0d 008c  ld   $8c
              0a0e 0087  ld   $87
              0a0f 0083  ld   $83
              0a10 007f  ld   $7f
              0a11 007b  ld   $7b
              0a12 0077  ld   $77
              0a13 0074  ld   $74
              0a14 0070  ld   $70
              0a15 006d  ld   $6d
              0a16 006a  ld   $6a
              0a17 0068  ld   $68
              0a18 0065  ld   $65
              0a19 0062  ld   $62
              0a1a 0060  ld   $60
              0a1b 005e  ld   $5e
              0a1c 005c  ld   $5c
              0a1d 005a  ld   $5a
              0a1e 0058  ld   $58
              0a1f 0056  ld   $56
              0a20 0054  ld   $54
              0a21 0052  ld   $52
              0a22 0050  ld   $50
              0a23 004f  ld   $4f
              0a24 004d  ld   $4d
              0a25 004c  ld   $4c
              0a26 004a  ld   $4a
              0a27 0049  ld   $49
              0a28 0048  ld   $48
              0a29 0046  ld   $46
              0a2a 0045  ld   $45
              0a2b 0044  ld   $44
              0a2c 0043  ld   $43
              0a2d 0042  ld   $42
              0a2e 0041  ld   $41
              0a2f 0040  ld   $40
              0a30 003f  ld   $3f
              0a31 003e  ld   $3e
              0a32 003d  ld   $3d
              0a33 003c  ld   $3c
              0a34 003b  ld   $3b
              0a35 003a  ld   $3a
              0a36 0039  ld   $39
              0a37 0038  ld   $38
              0a38 0037  ld   $37
              0a39 0037  ld   $37
              0a3a 0036  ld   $36
              0a3b 0035  ld   $35
              0a3c 0034  ld   $34
              0a3d 0034  ld   $34
              0a3e 0033  ld   $33
              0a3f 0032  ld   $32
              0a40 0032  ld   $32
              0a41 0031  ld   $31
              0a42 0030  ld   $30
              0a43 0030  ld   $30
              0a44 002f  ld   $2f
              0a45 002f  ld   $2f
              0a46 002e  ld   $2e
              0a47 002e  ld   $2e
              0a48 002d  ld   $2d
              0a49 002d  ld   $2d
              0a4a 002c  ld   $2c
              0a4b 002c  ld   $2c
              0a4c 002b  ld   $2b
              0a4d 002b  ld   $2b
              0a4e 002a  ld   $2a
              0a4f 002a  ld   $2a
              0a50 0029  ld   $29
              0a51 0029  ld   $29
              0a52 0028  ld   $28
              0a53 0028  ld   $28
              0a54 0027  ld   $27
              0a55 0027  ld   $27
              0a56 0027  ld   $27
              0a57 0026  ld   $26
              0a58 0026  ld   $26
              0a59 0026  ld   $26
              0a5a 0025  ld   $25
              0a5b 0025  ld   $25
              0a5c 0024  ld   $24
              0a5d 0024  ld   $24
              0a5e 0024  ld   $24
              0a5f 0023  ld   $23
              0a60 0023  ld   $23
              0a61 0023  ld   $23
              0a62 0022  ld   $22
              0a63 0022  ld   $22
              0a64 0022  ld   $22
              0a65 0022  ld   $22
              0a66 0021  ld   $21
              0a67 0021  ld   $21
              0a68 0021  ld   $21
              0a69 0020  ld   $20
              0a6a 0020  ld   $20
              0a6b 0020  ld   $20
              0a6c 0020  ld   $20
              0a6d 001f  ld   $1f
              0a6e 001f  ld   $1f
              0a6f 001f  ld   $1f
              0a70 001f  ld   $1f
              0a71 001e  ld   $1e
              0a72 001e  ld   $1e
              0a73 001e  ld   $1e
              0a74 001e  ld   $1e
              0a75 001d  ld   $1d
              0a76 001d  ld   $1d
              0a77 001d  ld   $1d
              0a78 001d  ld   $1d
              0a79 001c  ld   $1c
              0a7a 001c  ld   $1c
              0a7b 001c  ld   $1c
              * 5 times
              0a7e 001b  ld   $1b
              0a7f 001b  ld   $1b
              0a80 001b  ld   $1b
              * 5 times
              0a83 001a  ld   $1a
              0a84 001a  ld   $1a
              0a85 001a  ld   $1a
              * 5 times
              0a88 0019  ld   $19
              0a89 0019  ld   $19
              0a8a 0019  ld   $19
              * 6 times
              0a8e 0018  ld   $18
              0a8f 0018  ld   $18
              0a90 0018  ld   $18
              * 6 times
              0a94 0017  ld   $17
              0a95 0017  ld   $17
              0a96 0017  ld   $17
              * 7 times
              0a9b 0016  ld   $16
              0a9c 0016  ld   $16
              0a9d 0016  ld   $16
              * 8 times
              0aa3 0015  ld   $15
              0aa4 0015  ld   $15
              0aa5 0015  ld   $15
              * 8 times
              0aab 0014  ld   $14
              0aac 0014  ld   $14
              0aad 0014  ld   $14
              * 9 times
              0ab4 0013  ld   $13
              0ab5 0013  ld   $13
              0ab6 0013  ld   $13
              * 9 times
              0abd 0012  ld   $12
              0abe 0012  ld   $12
              0abf 0012  ld   $12
              * 11 times
              0ac8 0011  ld   $11
              0ac9 0011  ld   $11
              0aca 0011  ld   $11
              * 12 times
              0ad4 0010  ld   $10
              0ad5 0010  ld   $10
              0ad6 0010  ld   $10
              * 13 times
              0ae1 000f  ld   $0f
              0ae2 000f  ld   $0f
              0ae3 000f  ld   $0f
              * 16 times
              0af1 000e  ld   $0e
              0af2 000e  ld   $0e
              0af3 000e  ld   $0e
              * 10 times
                                          2592
                                          2593  trampoline()
              0afb fe00  bra  ac          ;+-----------------------------------+
              0afc fcfd  bra  $0afd       ;|                                   |
              0afd 1404  ld   $04,y       ;| Trampoline for page $0a00 lookups |
              0afe e065  jmp  y,$65       ;|                                   |
              0aff c218  st   [$18]       ;+-----------------------------------+
                                          2594
                                          2595  #-----------------------------------------------------------------------
                                          2596  #
                                          2597  #  $0d00 ROM page 11: More SYS functions
                                          2598  #
                                          2599  #-----------------------------------------------------------------------
                                          2600
                                          2601  align(0x100, 0x100)
                                          2602
                                          2603  #-----------------------------------------------------------------------
                                          2604  # Extension SYS_SetMode_80
                                          2605  #-----------------------------------------------------------------------
                                          2606
                                          2607  # vAC bit 0:1                   Mode:
                                          2608  #                               0       "ABCD" -> Full mode (slowest)
                                          2609  #                               1       "ABC-" -> Default mode after reset
                                          2610  #                               2       "A-C-" -> at67's mode
                                          2611  #                               3       "A---" -> HGM's mode
                                          2612  # vAC bit 2:15                  Ignored bits and should be 0
                                          2613  #
                                          2614  # vAC = 1975                    Zombie mode (no video signals, no input, no blinkenlights)
                                          2615
                                          2616  # Actual duration is <80 cycles, but keep some room for future extensions
                                          2617  label('SYS_SetMode_v2_80')
SYS_SetMode_v2_80:
              0b00 140b  ld   $0b,y       2618  ld(hi('sys_SetMode'), Y)        #15
              0b01 e05f  jmp  y,$5f       2619  jmp(Y,'sys_SetMode')            #16
              0b02 011e  ld   [$1e]       2620  ld([vReturn])                   #17
                                          2621
                                          2622  #-----------------------------------------------------------------------
                                          2623  # Extension SYS_SetMemory_v2_54
                                          2624  #-----------------------------------------------------------------------
                                          2625
                                          2626  # SYS function for setting 1..256 bytes
                                          2627  #
                                          2628  # sysArgs[0]   Copy count (destructive)
                                          2629  # sysArgs[1]   Copy value
                                          2630  # sysArgs[2:3] Destination address (destructive)
                                          2631  #
                                          2632  # Sets up to 4 bytes per invocation before restarting itself through vCPU.
                                          2633  # Doesn't wrap around page boundary.
                                          2634
                                          2635  label('SYS_SetMemory_v2_54')
SYS_SetMemory_v2_54:                      2636  bra('sys_SetMemory')            #15
              0b03 fc30  bra  sys_SetMemory
              0b04 0124  ld   [$24]       2637  ld([sysArgs+0])                 #16
              0b05 0200  nop              2638  nop()                           #filler
                                          2639
                                          2640  #-----------------------------------------------------------------------
                                          2641  # Extension SYS_SendSerial1_v3_80
                                          2642  #-----------------------------------------------------------------------
                                          2643
                                          2644  # SYS functions for sending data over serial controller port using
                                          2645  # pulse width modulation of the vertical sync signal.
                                          2646  #
                                          2647  # SYS_SendSerial1_vX_80 sends 1 bit per frame
                                          2648  # SYS_SendSerial2_vX_110 sends 3 bits per frame
                                          2649  # SYS_SendSerial2_vX_130 sends 4 bits per frame
                                          2650  #
                                          2651  # sysArgs[0:1] Source address               (destructive)
                                          2652  # sysArgs[2]   Start bit mask (typically 1) (destructive)
                                          2653  # sysArgs[3]   Number of send frames X      (destructive)
                                          2654  # sysArgs[4]   Scanline offset (SYS_SendSerial2_vX_110 only)
                                          2655  #
                                          2656  # The sending will abort if input data is detected on the serial port.
                                          2657  # Returns 0 in case of all bits sent, or <>0 in case of abort
                                          2658  #
                                          2659  # This modulates the next upcoming X vertical pulses with the supplied
                                          2660  # data. After that, the vPulse width falls back to 8 lines (idle).
                                          2661
                                          2662  label('SYS_SendSerial1_v3_80')
SYS_SendSerial1_v3_80:
              0b06 0109  ld   [$09]       2663  ld([videoY])                    #15
                                          2664  bra('sys_SendSerial1')          #16
              0b07 fc8e  bra  sys_SendSerial1
              0b08 60b3  xora $b3         2665  xora(videoYline0)               #17 First line of vertical blank
                                          2666
                                          2667  #-----------------------------------------------------------------------
                                          2668  # Extension SYS_ExpanderControl_v4_40
                                          2669  #-----------------------------------------------------------------------
                                          2670
                                          2671  # Sets the I/O and RAM expander's control register
                                          2672  # Intended for prototyping, and probably too low-level for most applications
                                          2673  # Still there's a safeguard: it's not possible to disable RAM using this
                                          2674
                                          2675  label('SYS_ExpanderControl_v4_40')
SYS_ExpanderControl_v4_40:
              0b09 140c  ld   $0c,y       2676  ld(hi('sys_ExpanderControl'),Y) #15
              0b0a e0fb  jmp  y,$fb       2677  jmp(Y,'sys_ExpanderControl')    #16
              0b0b 0118  ld   [$18]       2678  ld([vAC])                       #17
                                          2679
                                          2680  #-----------------------------------------------------------------------
                                          2681  # Extension SYS_Run6502_v4_80
                                          2682  #-----------------------------------------------------------------------
                                          2683
                                          2684  # Immediately transfer control to v6502, without waiting for the current
                                          2685  # time slice to end or first returning to vCPU.
                                          2686  #
                                          2687  # Calling 6502 code from vCPU goes (only) through this SYS function.
                                          2688  # Directly modifying the vCPUselect variable is unreliable.
                                          2689  # vCPU code and v6502 code can interoperate without much hassle:
                                          2690  # - The v6502 program counter is vLR, and v6502 doesn't touch vPC
                                          2691  # - Returning to vCPU is with the BRK instruction
                                          2692  # - BRK doesn't dump process state on the stack
                                          2693  # - vCPU can save/restore the vLR with PUSH/POP
                                          2694  # - Stacks are shared, vAC is shared
                                          2695  # - vAC can indicate what the v6502 code wants. vAC+1 will be cleared
                                          2696  # - Alternative is to leave a word in sysArgs[6:7] (v6502 X and Y registers)
                                          2697  # - Another way is to set vPC before BRK, and vCPU will continue there(+2)
                                          2698
                                          2699  # Calling v6502 code from vCPU looks like this:
                                          2700  #       LDWI  SYS_Run6502_v4_80
                                          2701  #       STW   sysFn
                                          2702  #       LDWI  $6502_start_address
                                          2703  #       STW   vLR
                                          2704  #       SYS   80
                                          2705
                                          2706  #  The time to reserve for this transition is the maximum time
                                          2707  #  between NEXT and v6502_check. This is
                                          2708  #       SYS call duration + 2*v6502_maxTicks + (v6502_overhead - vCPU_overhead)
                                          2709  #     = 22 + 28 + (11 - 9) = 62 cycles.
                                          2710  #  So reserving 80 cycles is future proof. This isn't overhead, as it includes
                                          2711  #  the fetching of the first 6502 opcode and its operands..
                                          2712  #
                                          2713  #                      0            10                 28=0         9
                                          2714  #    ---+----+---------+------------+------------------+-----------+---
                                          2715  # video | nop| runVcpu |   ENTER    | At least one ins |   EXIT    | video
                                          2716  #    ---+----+---------+------------+------------------+-----------+---
                                          2717  #        sync  prelude  ENTER-to-ins    ins-to-NEXT     NEXT-to-video
                                          2718  #       |<-->|
                                          2719  #        0/1 |<------->|
                                          2720  #                 5    |<----------------------------->|
                                          2721  #          runVCpu_overhead           28               |<--------->|
                                          2722  #                                 2*maxTicks                 9
                                          2723  #                                                      vCPU_overhead
                                          2724  #
                                          2725  #                      0                21                    38=0       11
                                          2726  #    ---+----+---------+----------------+--------------------+-----------+---
                                          2727  # video | nop| runVcpu |   v6502_ENTER  | At least one fetch |v6502_exitB| video
                                          2728  #    ---+----+---------+----------------+--------------------+-----------+---
                                          2729  #        sync  prelude   enter-to-fetch     fetch-to-check    check-to-video
                                          2730  #       |<-->|
                                          2731  #        0/1 |<------->|
                                          2732  #                 5    |<----------------------------------->|
                                          2733  #          runVcpu_overhead           38                     |<--------->|
                                          2734  #                              2*v6520_maxTicks                    11
                                          2735  #                                                            v6502_overhead
                                          2736
                                          2737  label('SYS_Run6502_v4_80')
SYS_Run6502_v4_80:
              0b0c 140d  ld   $0d,y       2738  ld(hi('sys_v6502'),Y)           #15
              0b0d e07c  jmp  y,$7c       2739  jmp(Y,'sys_v6502')              #16
              0b0e 000d  ld   $0d         2740  ld(hi('v6502_ENTER'))           #17 Activate v6502
                                          2741
                                          2742  #-----------------------------------------------------------------------
                                          2743  # Extension SYS_ResetWaveforms_v4_50
                                          2744  #-----------------------------------------------------------------------
                                          2745
                                          2746  # soundTable[4x+0] = sawtooth, to be modified into metallic/noise
                                          2747  # soundTable[4x+1] = pulse
                                          2748  # soundTable[4x+2] = triangle
                                          2749  # soundTable[4x+3] = sawtooth, also useful to right shift 2 bits
                                          2750
                                          2751  label('SYS_ResetWaveforms_v4_50')
SYS_ResetWaveforms_v4_50:
              0b0f 1400  ld   $00,y       2752  ld(hi('sys_ResetWaveforms'),Y)  #15 Initial setup of waveforms. [vAC+0]=i
              0b10 e05d  jmp  y,$5d       2753  jmp(Y,'sys_ResetWaveforms')     #16
              0b11 1407  ld   $07,y       2754  ld(soundTable>>8,Y);            #17
                                          2755
                                          2756  #-----------------------------------------------------------------------
                                          2757  # Extension SYS_ShuffleNoise_v4_46
                                          2758  #-----------------------------------------------------------------------
                                          2759
                                          2760  # Use simple 6-bits variation of RC4 to permutate waveform 0 in soundTable
                                          2761
                                          2762  label('SYS_ShuffleNoise_v4_46')
SYS_ShuffleNoise_v4_46:
              0b12 140b  ld   $0b,y       2763  ld(hi('sys_ShuffleNoise'),Y)    #15 Shuffle soundTable[4i+0]. [vAC+0]=4j, [vAC+1]=4i
              0b13 e0bc  jmp  y,$bc       2764  jmp(Y,'sys_ShuffleNoise')       #16
              0b14 1407  ld   $07,y       2765  ld(soundTable>>8,Y);            #17
                                          2766
                                          2767  #-----------------------------------------------------------------------
                                          2768  # Extension SYS_SpiExchangeBytes_v4_134
                                          2769  #-----------------------------------------------------------------------
                                          2770
                                          2771  # Send AND receive 1..256 bytes over SPI interface
                                          2772
                                          2773  # Variables:
                                          2774  #       sysArgs[0]      Page index start, for both send/receive (input, modified)
                                          2775  #       sysArgs[1]      Memory page for send data (input)
                                          2776  #       sysArgs[2]      Page index stop (input)
                                          2777  #       sysArgs[3]      Memory page for receive data (input)
                                          2778
                                          2779  label('SYS_SpiExchangeBytes_v4_134')
SYS_SpiExchangeBytes_v4_134:
              0b15 140d  ld   $0d,y       2780  ld(hi('sys_SpiExchangeBytes'),Y)#15
              0b16 e009  jmp  y,$09       2781  jmp(Y,'sys_SpiExchangeBytes')   #16
              0b17 1124  ld   [$24],x     2782  ld([sysArgs+0],X)               #17 Fetch byte to send
                                          2783
                                          2784  #-----------------------------------------------------------------------
                                          2785  # Some placeholders for future SYS functions. They work as a kind of jump
                                          2786  # table. This allows implementations to be moved around between ROM
                                          2787  # versions, at the expense of 2 (or 1) clock cycles. When the function is
                                          2788  # not present it just acts as a NOP. Of course, when a SYS function must
                                          2789  # be patched or extended it needs to have room for that in its declared
                                          2790  # maximum cycle count. The same goal can be achieved by prepending 2 NOPs
                                          2791  # before a function, or by overdeclaring them in the first place. This
                                          2792  # last method doesn't even cost space (initially).
                                          2793  #-----------------------------------------------------------------------
                                          2794
              0b18 1403  ld   $03,y       2795  ld(hi('REENTER'), Y)            #15 slot 0xb18
              0b19 e0cb  jmp  y,$cb       2796  jmp(Y,'REENTER')                #16
              0b1a 00f6  ld   $f6         2797  ld(-20/2)                       #17
                                          2798
              0b1b 1403  ld   $03,y       2799  ld(hi('REENTER'), Y)            #15 slot 0xb1b
              0b1c e0cb  jmp  y,$cb       2800  jmp(Y,'REENTER')                #16
              0b1d 00f6  ld   $f6         2801  ld(-20/2)                       #17
                                          2802
              0b1e 1403  ld   $03,y       2803  ld(hi('REENTER'), Y)            #15 slot 0xb1e
              0b1f e0cb  jmp  y,$cb       2804  jmp(Y,'REENTER')                #16
              0b20 00f6  ld   $f6         2805  ld(-20/2)                       #17
                                          2806
              0b21 1403  ld   $03,y       2807  ld(hi('REENTER'), Y)            #15 slot 0xb21
              0b22 e0cb  jmp  y,$cb       2808  jmp(Y,'REENTER')                #16
              0b23 00f6  ld   $f6         2809  ld(-20/2)                       #17
                                          2810
              0b24 1403  ld   $03,y       2811  ld(hi('REENTER'), Y)            #15 slot 0xb24
              0b25 e0cb  jmp  y,$cb       2812  jmp(Y,'REENTER')                #16
              0b26 00f6  ld   $f6         2813  ld(-20/2)                       #17
                                          2814
              0b27 1403  ld   $03,y       2815  ld(hi('REENTER'), Y)            #15 slot 0xb27
              0b28 e0cb  jmp  y,$cb       2816  jmp(Y,'REENTER')                #16
              0b29 00f6  ld   $f6         2817  ld(-20/2)                       #17
                                          2818
              0b2a 1403  ld   $03,y       2819  ld(hi('REENTER'), Y)            #15 slot 0xb2a
              0b2b e0cb  jmp  y,$cb       2820  jmp(Y,'REENTER')                #16
              0b2c 00f6  ld   $f6         2821  ld(-20/2)                       #17
                                          2822
              0b2d 1403  ld   $03,y       2823  ld(hi('REENTER'), Y)            #15 slot 0xb2d
              0b2e e0cb  jmp  y,$cb       2824  jmp(Y,'REENTER')                #16
              0b2f 00f6  ld   $f6         2825  ld(-20/2)                       #17
                                          2826
                                          2827  #-----------------------------------------------------------------------
                                          2828  #  Implementations
                                          2829  #-----------------------------------------------------------------------
                                          2830
                                          2831  # SYS_SetMemory_54 implementation
                                          2832  label('sys_SetMemory')
sys_SetMemory:
              0b30 a001  suba $01         2833  suba(1)                         #17
              0b31 c224  st   [$24]       2834  st([sysArgs+0])                 #18
              0b32 1126  ld   [$26],x     2835  ld([sysArgs+2], X)              #19
              0b33 1527  ld   [$27],y     2836  ld([sysArgs+3], Y)              #20
              0b34 0125  ld   [$25]       2837  ld([sysArgs+1])                 #21
              0b35 de00  st   [y,x++]     2838  st([Y,Xpp]);                    #22 Copy byte 1
              0b36 0124  ld   [$24]       2839  ld([sysArgs+0])                 #23
              0b37 f052  beq  .sysSb1     2840  beq('.sysSb1')                  #24
              0b38 a001  suba $01         2841  suba(1)                         #25
              0b39 c224  st   [$24]       2842  st([sysArgs+0])                 #26
              0b3a 0125  ld   [$25]       2843  ld([sysArgs+1])                 #27
              0b3b de00  st   [y,x++]     2844  st([Y,Xpp]);                    #28 Copy byte 2
              0b3c 0124  ld   [$24]       2845  ld([sysArgs+0])                 #29
              0b3d f055  beq  .sysSb2     2846  beq('.sysSb2')                  #30
              0b3e a001  suba $01         2847  suba(1)                         #31
              0b3f c224  st   [$24]       2848  st([sysArgs+0])                 #32
              0b40 0125  ld   [$25]       2849  ld([sysArgs+1])                 #33
              0b41 de00  st   [y,x++]     2850  st([Y,Xpp]);                    #34 Copy byte 3
              0b42 0124  ld   [$24]       2851  ld([sysArgs+0])                 #35
              0b43 f058  beq  .sysSb3     2852  beq('.sysSb3')                  #36
              0b44 a001  suba $01         2853  suba(1)                         #37
              0b45 c224  st   [$24]       2854  st([sysArgs+0])                 #38
              0b46 0125  ld   [$25]       2855  ld([sysArgs+1])                 #39
              0b47 de00  st   [y,x++]     2856  st([Y,Xpp]);                    #40 Copy byte 4
              0b48 0124  ld   [$24]       2857  ld([sysArgs+0])                 #41
              0b49 f05b  beq  .sysSb4     2858  beq('.sysSb4')                  #42
              0b4a 0116  ld   [$16]       2859  ld([vPC])                       #43 Self-restarting SYS call
              0b4b a002  suba $02         2860  suba(2)                         #44
              0b4c c216  st   [$16]       2861  st([vPC])                       #45
              0b4d 0126  ld   [$26]       2862  ld([sysArgs+2])                 #46
              0b4e 8004  adda $04         2863  adda(4)                         #47
              0b4f c226  st   [$26]       2864  st([sysArgs+2])                 #48
              0b50 1403  ld   $03,y       2865  ld(hi('REENTER'), Y)            #49 Return fragments
              0b51 e0cb  jmp  y,$cb       2866  jmp(Y,'REENTER')                #50
                                          2867  label('.sysSb1')
.sysSb1:      0b52 00e5  ld   $e5         2868  ld(-54/2)                       #51,26
              0b53 1403  ld   $03,y       2869  ld(hi('REENTER'), Y)            #27
              0b54 e0cb  jmp  y,$cb       2870  jmp(Y,'REENTER')                #28
                                          2871  label('.sysSb2')
.sysSb2:      0b55 00f0  ld   $f0         2872  ld(-32/2)                       #29,32
              0b56 1403  ld   $03,y       2873  ld(hi('REENTER'), Y)            #33
              0b57 e0cb  jmp  y,$cb       2874  jmp(Y,'REENTER')                #34
                                          2875  label('.sysSb3')
.sysSb3:      0b58 00ed  ld   $ed         2876  ld(-38/2)                       #35,38
              0b59 1403  ld   $03,y       2877  ld(hi('REENTER'), Y)            #39
              0b5a e0cb  jmp  y,$cb       2878  jmp(Y,'REENTER')                #40
                                          2879  label('.sysSb4')
.sysSb4:      0b5b 00ea  ld   $ea         2880  ld(-44/2)                       #41,44
              0b5c 1403  ld   $03,y       2881  ld(hi('REENTER'), Y)            #45
              0b5d e0cb  jmp  y,$cb       2882  jmp(Y,'REENTER')                #46
              0b5e 00e7  ld   $e7         2883  ld(-50/2)                       #47
                                          2884
                                          2885  # SYS_SetMode_80 implementation
                                          2886  label('sys_SetMode')
sys_SetMode:  0b5f ec62  bne  $0b62       2887  bne(pc()+3)                     #18
              0b60 fc62  bra  $0b62       2888  bra(pc()+2)                     #19
              0b61 0003  ld   $03         2889  ld('startVideo')                #20 First enable video if disabled
              0b62 c21e  st   [$1e]       2890  st([vReturn])                   #20,21
              0b63 0119  ld   [$19]       2891  ld([vAC+1])                     #22
              0b64 f06e  beq  .sysSm#25   2892  beq('.sysSm#25')                #23
              0b65 1403  ld   $03,y       2893  ld(hi('REENTER'),Y)             #24
              0b66 6118  xora [$18]       2894  xora([vAC])                     #25
              0b67 60b0  xora $b0         2895  xora((1975>>8)^(1975&255))      #26 Poor man\'s 1975 detection
              0b68 ec6b  bne  $0b6b       2896  bne(pc()+3)                     #27
              0b69 fc6c  bra  $0b6c       2897  bra(pc()+3)                     #28
                                          2898  assert videoZ == 0x0100
              0b6a c21e  st   [$1e]       2899  st([vReturn])                   #29 DISABLE video/audio/serial/etc
              0b6b 0200  nop              2900  nop()                           #29(!) Ignore and return
              0b6c e0cb  jmp  y,$cb       2901  jmp(Y,'REENTER')                #30
              0b6d 00ef  ld   $ef         2902  ld(-34//2)                      #31
                                          2903  label('.sysSm#25')
.sysSm#25:    0b6e 0118  ld   [$18]       2904  ld([vAC])                       #25 Mode 0,1,2,3
              0b6f 2003  anda $03         2905  anda(3)                         #26
              0b70 8073  adda $73         2906  adda('.sysSm#30')               #27
              0b71 fe00  bra  ac          2907  bra(AC)                         #28
              0b72 fc77  bra  .sysSm#31   2908  bra('.sysSm#31')                #29
                                          2909  label('.sysSm#30')
.sysSm#30:    0b73 000a  ld   $0a         2910  ld('pixels')                    #30 videoB lines
              0b74 000a  ld   $0a         2911  ld('pixels')                    #30
              0b75 00ec  ld   $ec         2912  ld('nopixels')                  #30
              0b76 00ec  ld   $ec         2913  ld('nopixels')                  #30
                                          2914  label('.sysSm#31')
.sysSm#31:    0b77 c21f  st   [$1f]       2915  st([videoModeB])                #31
              0b78 0118  ld   [$18]       2916  ld([vAC])                       #32
              0b79 2003  anda $03         2917  anda(3)                         #33
              0b7a 807d  adda $7d         2918  adda('.sysSm#37')               #34
              0b7b fe00  bra  ac          2919  bra(AC)                         #35
              0b7c fc81  bra  .sysSm#38   2920  bra('.sysSm#38')                #36
                                          2921  label('.sysSm#37')
.sysSm#37:    0b7d 000a  ld   $0a         2922  ld('pixels')                    #37 videoC lines
              0b7e 000a  ld   $0a         2923  ld('pixels')                    #37
              0b7f 000a  ld   $0a         2924  ld('pixels')                    #37
              0b80 00ec  ld   $ec         2925  ld('nopixels')                  #37
                                          2926  label('.sysSm#38')
.sysSm#38:    0b81 c220  st   [$20]       2927  st([videoModeC])                #38
              0b82 0118  ld   [$18]       2928  ld([vAC])                       #39
              0b83 2003  anda $03         2929  anda(3)                         #40
              0b84 8087  adda $87         2930  adda('.sysSm#44')               #41
              0b85 fe00  bra  ac          2931  bra(AC)                         #42
              0b86 fc8b  bra  .sysSm#45   2932  bra('.sysSm#45')                #43
                                          2933  label('.sysSm#44')
.sysSm#44:    0b87 000a  ld   $0a         2934  ld('pixels')                    #44 videoD lines
              0b88 00ec  ld   $ec         2935  ld('nopixels')                  #44
              0b89 00ec  ld   $ec         2936  ld('nopixels')                  #44
              0b8a 00ec  ld   $ec         2937  ld('nopixels')                  #44
                                          2938  label('.sysSm#45')
.sysSm#45:    0b8b c20d  st   [$0d]       2939  st([videoModeD])                #45
              0b8c e0cb  jmp  y,$cb       2940  jmp(Y,'REENTER')                #46
              0b8d 00e7  ld   $e7         2941  ld(-50//2)                      #47
                                          2942
                                          2943  # SYS_SendSerial1_v3_80 implementation
                                          2944  label('sys_SendSerial1')
sys_SendSerial1:
              0b8e f096  beq  .sysSs0     2945  beq('.sysSs0')                  #18
              0b8f 1124  ld   [$24],x     2946  ld([sysArgs+0],X)               #19
              0b90 0116  ld   [$16]       2947  ld([vPC])                       #20 Wait for vBlank
              0b91 a002  suba $02         2948  suba(2)                         #21
              0b92 c216  st   [$16]       2949  st([vPC])                       #22
              0b93 1403  ld   $03,y       2950  ld(hi('REENTER'),Y)             #23
              0b94 e0cb  jmp  y,$cb       2951  jmp(Y,'REENTER')                #24
              0b95 00f2  ld   $f2         2952  ld(-28/2)                       #25
                                          2953  label('.sysSs0')
.sysSs0:      0b96 1525  ld   [$25],y     2954  ld([sysArgs+1],Y)               #20 Synchronized with vBlank
              0b97 0d00  ld   [y,x]       2955  ld([Y,X])                       #21 Copy next bit
              0b98 2126  anda [$26]       2956  anda([sysArgs+2])               #22
              0b99 ec9c  bne  .sysSs1     2957  bne('.sysSs1')                  #23
              0b9a fc9d  bra  .sysSs2     2958  bra('.sysSs2')                  #24
              0b9b 000e  ld   $0e         2959  ld(7*2)                         #25
                                          2960  label('.sysSs1')
.sysSs1:      0b9c 0012  ld   $12         2961  ld(9*2)                         #25
                                          2962  label('.sysSs2')
.sysSs2:      0b9d c20c  st   [$0c]       2963  st([videoPulse])                #26
              0b9e 0126  ld   [$26]       2964  ld([sysArgs+2])                 #27 Rotate input bit
              0b9f 8200  adda ac          2965  adda(AC)                        #28
              0ba0 eca3  bne  .sysSs3     2966  bne('.sysSs3')                  #29
              0ba1 fca3  bra  .sysSs3     2967  bra('.sysSs3')                  #30
              0ba2 0001  ld   $01         2968  ld(1)                           #31
                                          2969  label('.sysSs3')
.sysSs3:      0ba3 c226  st   [$26]       2970  st([sysArgs+2])                 #31,32 (must be idempotent)
              0ba4 2001  anda $01         2971  anda(1)                         #33 Optionally increment pointer
              0ba5 8124  adda [$24]       2972  adda([sysArgs+0])               #34
              0ba6 d224  st   [$24],x     2973  st([sysArgs+0],X)               #35
              0ba7 0127  ld   [$27]       2974  ld([sysArgs+3])                 #36 Frame counter
              0ba8 a001  suba $01         2975  suba(1)                         #37
              0ba9 f0b8  beq  .sysSs5     2976  beq('.sysSs5')                  #38
              0baa 1403  ld   $03,y       2977  ld(hi('REENTER'),Y)             #39
              0bab c227  st   [$27]       2978  st([sysArgs+3])                 #40
              0bac 010f  ld   [$0f]       2979  ld([serialRaw])                 #41 Test for anything being sent back
              0bad 60ff  xora $ff         2980  xora(255)                       #42
              0bae f0b3  beq  .sysSs4     2981  beq('.sysSs4')                  #43
              0baf c218  st   [$18]       2982  st([vAC])                       #44 Abort after key press with non-zero error
              0bb0 c219  st   [$19]       2983  st([vAC+1])                     #45
              0bb1 e0cb  jmp  y,$cb       2984  jmp(Y,'REENTER')                #46
              0bb2 00e7  ld   $e7         2985  ld(-50/2)                       #47
                                          2986  label('.sysSs4')
.sysSs4:      0bb3 0116  ld   [$16]       2987  ld([vPC])                       #45 Continue sending bits
              0bb4 a002  suba $02         2988  suba(2)                         #46
              0bb5 c216  st   [$16]       2989  st([vPC])                       #47
              0bb6 e0cb  jmp  y,$cb       2990  jmp(Y,'REENTER')                #48
              0bb7 00e6  ld   $e6         2991  ld(-52/2)                       #49
                                          2992  label('.sysSs5')
.sysSs5:      0bb8 c218  st   [$18]       2993  st([vAC])                       #40 Stop sending bits, no error
              0bb9 c219  st   [$19]       2994  st([vAC+1])                     #41
              0bba e0cb  jmp  y,$cb       2995  jmp(Y,'REENTER')                #42
              0bbb 00e9  ld   $e9         2996  ld(-46/2)                       #43
                                          2997
                                          2998  #-----------------------------------------------------------------------
                                          2999
                                          3000  label('sys_ShuffleNoise')
sys_ShuffleNoise:
              0bbc 1118  ld   [$18],x     3001  ld([vAC+0],X)                   #18 tmp = T[4j]
              0bbd 0d00  ld   [y,x]       3002  ld([Y,X])                       #19
              0bbe c21d  st   [$1d]       3003  st([vTmp])                      #20
              0bbf 1119  ld   [$19],x     3004  ld([vAC+1],X)                   #21 T[4j] = T[4i]
              0bc0 0d00  ld   [y,x]       3005  ld([Y,X])                       #22
              0bc1 1118  ld   [$18],x     3006  ld([vAC+0],X)                   #23
              0bc2 ce00  st   [y,x]       3007  st([Y,X])                       #24
              0bc3 8200  adda ac          3008  adda(AC)                        #25 j += T[4i]
              0bc4 8200  adda ac          3009  adda(AC,)                       #26
              0bc5 8118  adda [$18]       3010  adda([vAC+0])                   #27
              0bc6 c218  st   [$18]       3011  st([vAC+0])                     #28
              0bc7 1119  ld   [$19],x     3012  ld([vAC+1],X)                   #29 T[4i] = tmp
              0bc8 011d  ld   [$1d]       3013  ld([vTmp])                      #30
              0bc9 ce00  st   [y,x]       3014  st([Y,X])                       #31
              0bca 0119  ld   [$19]       3015  ld([vAC+1])                     #32 i += 1
              0bcb 8004  adda $04         3016  adda(4)                         #33
              0bcc c219  st   [$19]       3017  st([vAC+1])                     #34
              0bcd f0d0  beq  $0bd0       3018  beq(pc()+3)                     #35 For 64 iterations
              0bce fcd1  bra  $0bd1       3019  bra(pc()+3)                     #36
              0bcf 00fe  ld   $fe         3020  ld(-2)                          #37
              0bd0 0000  ld   $00         3021  ld(0)                           #37(!)
              0bd1 8116  adda [$16]       3022  adda([vPC])                     #38
              0bd2 c216  st   [$16]       3023  st([vPC])                       #39
              0bd3 0200  nop              3024  nop()                           #40
              0bd4 1403  ld   $03,y       3025  ld(hi('REENTER'),Y)             #41
              0bd5 e0cb  jmp  y,$cb       3026  jmp(Y,'REENTER')                #42
              0bd6 00e9  ld   $e9         3027  ld(-46/2)                       #43
                                          3028
                                          3029  # XXX Lots of space here
                                          3030
                                          3031  #-----------------------------------------------------------------------
                                          3032  #
                                          3033  #  $0c00 ROM page 12: More SYS functions (sprites)
                                          3034  #
                                          3035  #       Page 1: vertical blank interval
                                          3036  #       Page 2: visible scanlines
                                          3037  #
                                          3038  #-----------------------------------------------------------------------
                                          3039
              0bd7 0200  nop              3040  align(0x100, 0x100)
              0bd8 0200  nop
              0bd9 0200  nop
              * 41 times
                                          3041
                                          3042  #-----------------------------------------------------------------------
                                          3043  # Extension SYS_Sprite6_v3_64
                                          3044  # Extension SYS_Sprite6x_v3_64
                                          3045  # Extension SYS_Sprite6y_v3_64
                                          3046  # Extension SYS_Sprite6xy_v3_64
                                          3047  #-----------------------------------------------------------------------
                                          3048
                                          3049  # vAC          Destination address in screen
                                          3050  # sysArgs[0:1] Source address of 6xY pixels (colors 0..63) terminated by
                                          3051  #              negative byte value N (typically N = -Y)
                                          3052  # sysArgs[2:7] Scratch (user as copy buffer)
                                          3053
                                          3054  # This SYS function draws a sprite of 6 pixels wide and Y pixels high.
                                          3055  # The pixel data is read sequentually from RAM, in horizontal chunks
                                          3056  # of 6 pixels at a time, and then written to the screen through the
                                          3057  # destination pointer (each chunk underneath the previous), thus
                                          3058  # drawing a 6xY stripe. Pixel values should be non-negative. The first
                                          3059  # negative byte N after a chunk signals the end of the sprite data.
                                          3060  # So the sprite's height Y is determined by the source data and is
                                          3061  # therefore flexible. This negative byte value, typically N == -Y,
                                          3062  # is then used to adjust the destination pointer's high byte, to make
                                          3063  # it easier to draw sprites wider than 6 pixels: just repeat the SYS
                                          3064  # call for as many 6-pixel wide stripes you need. All arguments are
                                          3065  # already left in place to facilitate this. After one call, the source
                                          3066  # pointer will point past that source data, effectively:
                                          3067  #       src += Y * 6 + 1
                                          3068  # The destination pointer will have been adjusted as:
                                          3069  #       dst += (Y + N) * 256 + 6
                                          3070  # (With arithmetic wrapping around on the same memory page)
                                          3071  #
                                          3072  # Y is only limited by source memory, not by CPU cycles. The
                                          3073  # implementation is such that the SYS function self-repeats, each
                                          3074  # time drawing the next 6-pixel chunk. It can typically draw 12
                                          3075  # pixels per scanline this way.
                                          3076
                                          3077  label('SYS_Sprite6_v3_64')
                                          3078
SYS_Sprite6_v3_64:
              0c00 1124  ld   [$24],x     3079  ld([sysArgs+0],X)               #15 Pixel data source address
              0c01 1525  ld   [$25],y     3080  ld([sysArgs+1],Y)               #16
              0c02 0d00  ld   [y,x]       3081  ld([Y,X])                       #17 Next pixel or stop
              0c03 f411  bge  .sysDpx0    3082  bpl('.sysDpx0')                 #18
              0c04 de00  st   [y,x++]     3083  st([Y,Xpp])                     #19 Just X++
                                          3084
              0c05 8119  adda [$19]       3085  adda([vAC+1])                   #20 Adjust dst for convenience
              0c06 c219  st   [$19]       3086  st([vAC+1])                     #21
              0c07 0118  ld   [$18]       3087  ld([vAC])                       #22
              0c08 8006  adda $06         3088  adda(6)                         #23
              0c09 c218  st   [$18]       3089  st([vAC])                       #24
              0c0a 0124  ld   [$24]       3090  ld([sysArgs+0])                 #25 Adjust src for convenience
              0c0b 8001  adda $01         3091  adda(1)                         #26
              0c0c c224  st   [$24]       3092  st([sysArgs+0])                 #27
              0c0d 0200  nop              3093  nop()                           #28
              0c0e 1403  ld   $03,y       3094  ld(hi('REENTER'),Y)             #29 Normal exit (no self-repeat)
              0c0f e0cb  jmp  y,$cb       3095  jmp(Y,'REENTER')                #30
              0c10 00ef  ld   $ef         3096  ld(-34//2)                      #31
                                          3097
                                          3098  label('.sysDpx0')
.sysDpx0:     0c11 c226  st   [$26]       3099  st([sysArgs+2])                 #20 Gobble 6 pixels into buffer
              0c12 0d00  ld   [y,x]       3100  ld([Y,X])                       #21
              0c13 de00  st   [y,x++]     3101  st([Y,Xpp])                     #22
              0c14 c227  st   [$27]       3102  st([sysArgs+3])                 #23
              0c15 0d00  ld   [y,x]       3103  ld([Y,X])                       #24
              0c16 de00  st   [y,x++]     3104  st([Y,Xpp])                     #25
              0c17 c228  st   [$28]       3105  st([sysArgs+4])                 #26
              0c18 0d00  ld   [y,x]       3106  ld([Y,X])                       #27
              0c19 de00  st   [y,x++]     3107  st([Y,Xpp])                     #28
              0c1a c229  st   [$29]       3108  st([sysArgs+5])                 #29
              0c1b 0d00  ld   [y,x]       3109  ld([Y,X])                       #30
              0c1c de00  st   [y,x++]     3110  st([Y,Xpp])                     #31
              0c1d c22a  st   [$2a]       3111  st([sysArgs+6])                 #32
              0c1e 0d00  ld   [y,x]       3112  ld([Y,X])                       #33
              0c1f de00  st   [y,x++]     3113  st([Y,Xpp])                     #34
              0c20 c22b  st   [$2b]       3114  st([sysArgs+7])                 #35
                                          3115
              0c21 1118  ld   [$18],x     3116  ld([vAC],X)                     #36 Screen memory destination address
              0c22 1519  ld   [$19],y     3117  ld([vAC+1], Y)                  #37
              0c23 0126  ld   [$26]       3118  ld([sysArgs+2])                 #38 Write 6 pixels
              0c24 de00  st   [y,x++]     3119  st([Y,Xpp])                     #39
              0c25 0127  ld   [$27]       3120  ld([sysArgs+3])                 #40
              0c26 de00  st   [y,x++]     3121  st([Y,Xpp])                     #41
              0c27 0128  ld   [$28]       3122  ld([sysArgs+4])                 #42
              0c28 de00  st   [y,x++]     3123  st([Y,Xpp])                     #43
              0c29 0129  ld   [$29]       3124  ld([sysArgs+5])                 #44
              0c2a de00  st   [y,x++]     3125  st([Y,Xpp])                     #45
              0c2b 012a  ld   [$2a]       3126  ld([sysArgs+6])                 #46
              0c2c de00  st   [y,x++]     3127  st([Y,Xpp])                     #47
              0c2d 012b  ld   [$2b]       3128  ld([sysArgs+7])                 #48
              0c2e de00  st   [y,x++]     3129  st([Y,Xpp])                     #49
                                          3130
              0c2f 0124  ld   [$24]       3131  ld([sysArgs+0])                 #50 src += 6
              0c30 8006  adda $06         3132  adda(6)                         #51
              0c31 c224  st   [$24]       3133  st([sysArgs+0])                 #52
              0c32 0119  ld   [$19]       3134  ld([vAC+1])                     #53 dst += 256
              0c33 8001  adda $01         3135  adda(1)                         #54
              0c34 c219  st   [$19]       3136  st([vAC+1])                     #55
                                          3137
              0c35 0116  ld   [$16]       3138  ld([vPC])                       #56 Self-repeating SYS call
              0c36 a002  suba $02         3139  suba(2)                         #57
              0c37 c216  st   [$16]       3140  st([vPC])                       #58
              0c38 1403  ld   $03,y       3141  ld(hi('REENTER'), Y)            #59
              0c39 e0cb  jmp  y,$cb       3142  jmp(Y,'REENTER')                #60
              0c3a 00e0  ld   $e0         3143  ld(-64/2)                       #61
                                          3144
              0c3b 0200  nop              3145  align(64)
              0c3c 0200  nop
              0c3d 0200  nop
              * 5 times
                                          3146  label('SYS_Sprite6x_v3_64')
                                          3147
SYS_Sprite6x_v3_64:
              0c40 1124  ld   [$24],x     3148  ld([sysArgs+0],X)               #15 Pixel data source address
              0c41 1525  ld   [$25],y     3149  ld([sysArgs+1],Y)               #16
              0c42 0d00  ld   [y,x]       3150  ld([Y,X])                       #17 Next pixel or stop
              0c43 f451  bge  .sysDpx1    3151  bpl('.sysDpx1')                 #18
              0c44 de00  st   [y,x++]     3152  st([Y,Xpp])                     #19 Just X++
                                          3153
              0c45 8119  adda [$19]       3154  adda([vAC+1])                   #20 Adjust dst for convenience
              0c46 c219  st   [$19]       3155  st([vAC+1])                     #21
              0c47 0118  ld   [$18]       3156  ld([vAC])                       #22
              0c48 a006  suba $06         3157  suba(6)                         #23
              0c49 c218  st   [$18]       3158  st([vAC])                       #24
              0c4a 0124  ld   [$24]       3159  ld([sysArgs+0])                 #25 Adjust src for convenience
              0c4b 8001  adda $01         3160  adda(1)                         #26
              0c4c c224  st   [$24]       3161  st([sysArgs+0])                 #27
              0c4d 0200  nop              3162  nop()                           #28
              0c4e 1403  ld   $03,y       3163  ld(hi('REENTER'),Y)             #29 Normal exit (no self-repeat)
              0c4f e0cb  jmp  y,$cb       3164  jmp(Y,'REENTER')                #30
              0c50 00ef  ld   $ef         3165  ld(-34//2)                      #31
                                          3166
                                          3167  label('.sysDpx1')
.sysDpx1:     0c51 c22b  st   [$2b]       3168  st([sysArgs+7])                 #20 Gobble 6 pixels into buffer (backwards)
              0c52 0d00  ld   [y,x]       3169  ld([Y,X])                       #21
              0c53 de00  st   [y,x++]     3170  st([Y,Xpp])                     #22
              0c54 c22a  st   [$2a]       3171  st([sysArgs+6])                 #23
              0c55 0d00  ld   [y,x]       3172  ld([Y,X])                       #24
              0c56 de00  st   [y,x++]     3173  st([Y,Xpp])                     #25
              0c57 c229  st   [$29]       3174  st([sysArgs+5])                 #26
              0c58 0d00  ld   [y,x]       3175  ld([Y,X])                       #27
              0c59 de00  st   [y,x++]     3176  st([Y,Xpp])                     #28
              0c5a c228  st   [$28]       3177  st([sysArgs+4])                 #29
              0c5b 0d00  ld   [y,x]       3178  ld([Y,X])                       #30
              0c5c de00  st   [y,x++]     3179  st([Y,Xpp])                     #31
              0c5d c227  st   [$27]       3180  st([sysArgs+3])                 #32
              0c5e 0d00  ld   [y,x]       3181  ld([Y,X])                       #33
              0c5f de00  st   [y,x++]     3182  st([Y,Xpp])                     #34
                                          3183
              0c60 1118  ld   [$18],x     3184  ld([vAC],X)                     #35 Screen memory destination address
              0c61 1519  ld   [$19],y     3185  ld([vAC+1],Y)                   #36
              0c62 de00  st   [y,x++]     3186  st([Y,Xpp])                     #37 Write 6 pixels
              0c63 0127  ld   [$27]       3187  ld([sysArgs+3])                 #38
              0c64 de00  st   [y,x++]     3188  st([Y,Xpp])                     #39
              0c65 0128  ld   [$28]       3189  ld([sysArgs+4])                 #40
              0c66 de00  st   [y,x++]     3190  st([Y,Xpp])                     #41
              0c67 0129  ld   [$29]       3191  ld([sysArgs+5])                 #42
              0c68 de00  st   [y,x++]     3192  st([Y,Xpp])                     #43
              0c69 012a  ld   [$2a]       3193  ld([sysArgs+6])                 #44
              0c6a de00  st   [y,x++]     3194  st([Y,Xpp])                     #45
              0c6b 012b  ld   [$2b]       3195  ld([sysArgs+7])                 #46
              0c6c de00  st   [y,x++]     3196  st([Y,Xpp])                     #47
                                          3197
              0c6d 0124  ld   [$24]       3198  ld([sysArgs+0])                 #48 src += 6
              0c6e 8006  adda $06         3199  adda(6)                         #49
              0c6f c224  st   [$24]       3200  st([sysArgs+0])                 #50
              0c70 0119  ld   [$19]       3201  ld([vAC+1])                     #51 dst += 256
              0c71 8001  adda $01         3202  adda(1)                         #52
              0c72 c219  st   [$19]       3203  st([vAC+1])                     #53
                                          3204
              0c73 0116  ld   [$16]       3205  ld([vPC])                       #54 Self-repeating SYS call
              0c74 a002  suba $02         3206  suba(2)                         #55
              0c75 c216  st   [$16]       3207  st([vPC])                       #56
              0c76 1403  ld   $03,y       3208  ld(hi('REENTER'), Y)            #57
              0c77 e0cb  jmp  y,$cb       3209  jmp(Y,'REENTER')                #58
              0c78 00e1  ld   $e1         3210  ld(-62/2)                       #59
                                          3211
              0c79 0200  nop              3212  align(64)
              0c7a 0200  nop
              0c7b 0200  nop
              * 7 times
                                          3213  label('SYS_Sprite6y_v3_64')
                                          3214
SYS_Sprite6y_v3_64:
              0c80 1124  ld   [$24],x     3215  ld([sysArgs+0],X)               #15 Pixel data source address
              0c81 1525  ld   [$25],y     3216  ld([sysArgs+1],Y)               #16
              0c82 0d00  ld   [y,x]       3217  ld([Y,X])                       #17 Next pixel or stop
              0c83 f493  bge  .sysDpx2    3218  bpl('.sysDpx2')                 #18
              0c84 de00  st   [y,x++]     3219  st([Y,Xpp])                     #19 Just X++
                                          3220
              0c85 60ff  xora $ff         3221  xora(255)                       #20 Adjust dst for convenience
              0c86 8001  adda $01         3222  adda(1)                         #21
              0c87 8119  adda [$19]       3223  adda([vAC+1])                   #22
              0c88 c219  st   [$19]       3224  st([vAC+1])                     #23
              0c89 0118  ld   [$18]       3225  ld([vAC])                       #24
              0c8a 8006  adda $06         3226  adda(6)                         #25
              0c8b c218  st   [$18]       3227  st([vAC])                       #26
              0c8c 0124  ld   [$24]       3228  ld([sysArgs+0])                 #27 Adjust src for convenience
              0c8d 8001  adda $01         3229  adda(1)                         #28
              0c8e c224  st   [$24]       3230  st([sysArgs+0])                 #29
              0c8f 0200  nop              3231  nop()                           #30
              0c90 1403  ld   $03,y       3232  ld(hi('REENTER'),Y)             #31 Normal exit (no self-repeat)
              0c91 e0cb  jmp  y,$cb       3233  jmp(Y,'REENTER')                #32
              0c92 00ee  ld   $ee         3234  ld(-36//2)                      #33
                                          3235
                                          3236  label('.sysDpx2')
.sysDpx2:     0c93 c226  st   [$26]       3237  st([sysArgs+2])                 #20 Gobble 6 pixels into buffer
              0c94 0d00  ld   [y,x]       3238  ld([Y,X])                       #21
              0c95 de00  st   [y,x++]     3239  st([Y,Xpp])                     #22
              0c96 c227  st   [$27]       3240  st([sysArgs+3])                 #23
              0c97 0d00  ld   [y,x]       3241  ld([Y,X])                       #24
              0c98 de00  st   [y,x++]     3242  st([Y,Xpp])                     #25
              0c99 c228  st   [$28]       3243  st([sysArgs+4])                 #26
              0c9a 0d00  ld   [y,x]       3244  ld([Y,X])                       #27
              0c9b de00  st   [y,x++]     3245  st([Y,Xpp])                     #28
              0c9c c229  st   [$29]       3246  st([sysArgs+5])                 #29
              0c9d 0d00  ld   [y,x]       3247  ld([Y,X])                       #30
              0c9e de00  st   [y,x++]     3248  st([Y,Xpp])                     #31
              0c9f c22a  st   [$2a]       3249  st([sysArgs+6])                 #32
              0ca0 0d00  ld   [y,x]       3250  ld([Y,X])                       #33
              0ca1 de00  st   [y,x++]     3251  st([Y,Xpp])                     #34
              0ca2 c22b  st   [$2b]       3252  st([sysArgs+7])                 #35
                                          3253
              0ca3 1118  ld   [$18],x     3254  ld([vAC],X)                     #36 Screen memory destination address
              0ca4 1519  ld   [$19],y     3255  ld([vAC+1],Y)                   #37
              0ca5 0126  ld   [$26]       3256  ld([sysArgs+2])                 #38 Write 6 pixels
              0ca6 de00  st   [y,x++]     3257  st([Y,Xpp])                     #39
              0ca7 0127  ld   [$27]       3258  ld([sysArgs+3])                 #40
              0ca8 de00  st   [y,x++]     3259  st([Y,Xpp])                     #41
              0ca9 0128  ld   [$28]       3260  ld([sysArgs+4])                 #42
              0caa de00  st   [y,x++]     3261  st([Y,Xpp])                     #43
              0cab 0129  ld   [$29]       3262  ld([sysArgs+5])                 #44
              0cac de00  st   [y,x++]     3263  st([Y,Xpp])                     #45
              0cad 012a  ld   [$2a]       3264  ld([sysArgs+6])                 #46
              0cae de00  st   [y,x++]     3265  st([Y,Xpp])                     #47
              0caf 012b  ld   [$2b]       3266  ld([sysArgs+7])                 #48
              0cb0 de00  st   [y,x++]     3267  st([Y,Xpp])                     #49
                                          3268
              0cb1 0124  ld   [$24]       3269  ld([sysArgs+0])                 #50 src += 6
              0cb2 8006  adda $06         3270  adda(6)                         #51
              0cb3 c224  st   [$24]       3271  st([sysArgs+0])                 #52
              0cb4 0119  ld   [$19]       3272  ld([vAC+1])                     #53 dst -= 256
              0cb5 a001  suba $01         3273  suba(1)                         #54
              0cb6 c219  st   [$19]       3274  st([vAC+1])                     #55
                                          3275
              0cb7 0116  ld   [$16]       3276  ld([vPC])                       #56 Self-repeating SYS call
              0cb8 a002  suba $02         3277  suba(2)                         #57
              0cb9 c216  st   [$16]       3278  st([vPC])                       #58
              0cba 1403  ld   $03,y       3279  ld(hi('REENTER'), Y)            #59
              0cbb e0cb  jmp  y,$cb       3280  jmp(Y,'REENTER')                #60
              0cbc 00e0  ld   $e0         3281  ld(-64/2)                       #61
                                          3282
              0cbd 0200  nop              3283  align(64)
              0cbe 0200  nop
              0cbf 0200  nop
                                          3284  label('SYS_Sprite6xy_v3_64')
                                          3285
SYS_Sprite6xy_v3_64:
              0cc0 1124  ld   [$24],x     3286  ld([sysArgs+0],X)               #15 Pixel data source address
              0cc1 1525  ld   [$25],y     3287  ld([sysArgs+1],Y)               #16
              0cc2 0d00  ld   [y,x]       3288  ld([Y,X])                       #17 Next pixel or stop
              0cc3 f4d3  bge  .sysDpx3    3289  bpl('.sysDpx3')                 #18
              0cc4 de00  st   [y,x++]     3290  st([Y,Xpp])                     #19
                                          3291
              0cc5 60ff  xora $ff         3292  xora(255)                       #20 Adjust dst for convenience
              0cc6 8001  adda $01         3293  adda(1)                         #21
              0cc7 8119  adda [$19]       3294  adda([vAC+1])                   #22
              0cc8 c219  st   [$19]       3295  st([vAC+1])                     #23
              0cc9 0118  ld   [$18]       3296  ld([vAC])                       #24
              0cca a006  suba $06         3297  suba(6)                         #25
              0ccb c218  st   [$18]       3298  st([vAC])                       #26
              0ccc 0124  ld   [$24]       3299  ld([sysArgs+0])                 #27 Adjust src for convenience
              0ccd 8001  adda $01         3300  adda(1)                         #28
              0cce c224  st   [$24]       3301  st([sysArgs+0])                 #29
              0ccf 0200  nop              3302  nop()                           #30
              0cd0 1403  ld   $03,y       3303  ld(hi('REENTER'),Y)             #31 Normal exit (no self-repeat)
              0cd1 e0cb  jmp  y,$cb       3304  jmp(Y,'REENTER')                #32
              0cd2 00ee  ld   $ee         3305  ld(-36/2)                       #33
                                          3306
                                          3307  label('.sysDpx3')
.sysDpx3:     0cd3 c22b  st   [$2b]       3308  st([sysArgs+7])                 #20 Gobble 6 pixels into buffer (backwards)
              0cd4 0d00  ld   [y,x]       3309  ld([Y,X])                       #21
              0cd5 de00  st   [y,x++]     3310  st([Y,Xpp])                     #22
              0cd6 c22a  st   [$2a]       3311  st([sysArgs+6])                 #23
              0cd7 0d00  ld   [y,x]       3312  ld([Y,X])                       #24
              0cd8 de00  st   [y,x++]     3313  st([Y,Xpp])                     #25
              0cd9 c229  st   [$29]       3314  st([sysArgs+5])                 #26
              0cda 0d00  ld   [y,x]       3315  ld([Y,X])                       #27
              0cdb de00  st   [y,x++]     3316  st([Y,Xpp])                     #28
              0cdc c228  st   [$28]       3317  st([sysArgs+4])                 #29
              0cdd 0d00  ld   [y,x]       3318  ld([Y,X])                       #30
              0cde de00  st   [y,x++]     3319  st([Y,Xpp])                     #31
              0cdf c227  st   [$27]       3320  st([sysArgs+3])                 #32
              0ce0 0d00  ld   [y,x]       3321  ld([Y,X])                       #33
              0ce1 de00  st   [y,x++]     3322  st([Y,Xpp])                     #34
                                          3323
              0ce2 1118  ld   [$18],x     3324  ld([vAC],X)                     #35 Screen memory destination address
              0ce3 1519  ld   [$19],y     3325  ld([vAC+1],Y)                   #36
              0ce4 de00  st   [y,x++]     3326  st([Y,Xpp])                     #37 Write 6 pixels
              0ce5 0127  ld   [$27]       3327  ld([sysArgs+3])                 #38
              0ce6 de00  st   [y,x++]     3328  st([Y,Xpp])                     #39
              0ce7 0128  ld   [$28]       3329  ld([sysArgs+4])                 #40
              0ce8 de00  st   [y,x++]     3330  st([Y,Xpp])                     #41
              0ce9 0129  ld   [$29]       3331  ld([sysArgs+5])                 #42
              0cea de00  st   [y,x++]     3332  st([Y,Xpp])                     #43
              0ceb 012a  ld   [$2a]       3333  ld([sysArgs+6])                 #44
              0cec de00  st   [y,x++]     3334  st([Y,Xpp])                     #45
              0ced 012b  ld   [$2b]       3335  ld([sysArgs+7])                 #46
              0cee de00  st   [y,x++]     3336  st([Y,Xpp])                     #47
                                          3337
              0cef 0124  ld   [$24]       3338  ld([sysArgs+0])                 #48 src += 6
              0cf0 8006  adda $06         3339  adda(6)                         #49
              0cf1 c224  st   [$24]       3340  st([sysArgs+0])                 #50
              0cf2 0119  ld   [$19]       3341  ld([vAC+1])                     #51 dst -= 256
              0cf3 a001  suba $01         3342  suba(1)                         #52
              0cf4 c219  st   [$19]       3343  st([vAC+1])                     #53
                                          3344
              0cf5 0116  ld   [$16]       3345  ld([vPC])                       #54 Self-repeating SYS call
              0cf6 a002  suba $02         3346  suba(2)                         #55
              0cf7 c216  st   [$16]       3347  st([vPC])                       #56
              0cf8 1403  ld   $03,y       3348  ld(hi('REENTER'), Y)            #57
              0cf9 e0cb  jmp  y,$cb       3349  jmp(Y,'REENTER')                #58
              0cfa 00e1  ld   $e1         3350  ld(-62/2)                       #59
                                          3351
                                          3352  #-----------------------------------------------------------------------
                                          3353
                                          3354  label('sys_ExpanderControl')
                                          3355
sys_ExpanderControl:
              0cfb 0118  ld   [$18]       3356  ld([vAC])                       #18
              0cfc 20fc  anda $fc         3357  anda(0b11111100)                #19 Safety (SCLK=0)
                                          3358  #      ^^^^^^^^
                                          3359  #      |||||||`-- SCLK
                                          3360  #      ||||||`--- Not connected
                                          3361  #      |||||`---- /SS0
                                          3362  #      ||||`----- /SS1
                                          3363  #      |||`------ /SS2
                                          3364  #      ||`------- /SS3
                                          3365  #      |`-------- B0
                                          3366  #      `--------- B1
              0cfd d281  st   [$81],x     3367  st([ctrlBits],X)                #20 Set control register
              0cfe 1519  ld   [$19],y     3368  ld([vAC+1], Y)                  #21 For MOSI (A15)
              0cff cd00  ctrl y,x         3369  ctrl(Y, X);                     #22
                                          3370
              0d00 0127  ld   [$27]       3371  ld([sysArgs+3])                 #23 Prepare SYS_SpiExchangeBytes
                                          3372  assert pc()&255 < 255-3         # Beware of page crossing: asm.py won't warn
              0d01 ec04  bne  $0d04       3373  bne(pc()+3)                     #24
              0d02 fc04  bra  $0d04       3374  bra(pc()+2)                     #25
              0d03 0125  ld   [$25]       3375  ld([sysArgs+1])                 #26
              0d04 c227  st   [$27]       3376  st([sysArgs+3])                 #26,27 (must be idempotent)
                                          3377
              0d05 0200  nop              3378  nop()                           #28
              0d06 1403  ld   $03,y       3379  ld(hi('REENTER'), Y)            #29
              0d07 e0cb  jmp  y,$cb       3380  jmp(Y,'REENTER')                #30
              0d08 00ef  ld   $ef         3381  ld(-34/2)                       #31
                                          3382
                                          3383  #-----------------------------------------------------------------------
                                          3384
                                          3385  label('sys_SpiExchangeBytes')
                                          3386
sys_SpiExchangeBytes:
              0d09 1525  ld   [$25],y     3387  ld([sysArgs+1],Y)               #18
              0d0a 0d00  ld   [y,x]       3388  ld([Y,X])                       #19
                                          3389
                                          3390  for i in range(8):
                                          3391    st([vTmp],Y);C('Bit %d'%(7-i))#20+i*12
              0d0b d61d  st   [$1d],y     ;Bit 7
              0d0c 1181  ld   [$81],x     3392    ld([ctrlBits],X)              #21+i*12
              0d0d dd00  ctrl y,x++       3393    ctrl(Y,Xpp)                   #22+i*12 Set MOSI
              0d0e dd00  ctrl y,x++       3394    ctrl(Y,Xpp)                   #23+i*12 Raise SCLK
              0d0f 0100  ld   [$00]       3395    ld([0])                       #24+i*12 Get MISO
              0d10 200f  anda $0f         3396    anda(0b00001111)              #25+i*12
              0d11 f014  beq  $0d14       3397    beq(pc()+3)                   #26+i*12
              0d12 fc14  bra  $0d14       3398    bra(pc()+2)                   #27+i*12
              0d13 0001  ld   $01         3399    ld(1)                         #28+i*12
              0d14 cd00  ctrl y,x         3400    ctrl(Y,X)                     #28+i*12,29+i*12 (Must be idempotent) Lower SCLK
              0d15 811d  adda [$1d]       3401    adda([vTmp])                  #30+i*12 Shift
              0d16 811d  adda [$1d]       3402    adda([vTmp])                  #31+i*12
              0d17 d61d  st   [$1d],y     ;Bit 6
              0d18 1181  ld   [$81],x
              0d19 dd00  ctrl y,x++
              0d1a dd00  ctrl y,x++
              0d1b 0100  ld   [$00]
              0d1c 200f  anda $0f
              0d1d f020  beq  $0d20
              0d1e fc20  bra  $0d20
              0d1f 0001  ld   $01
              0d20 cd00  ctrl y,x
              0d21 811d  adda [$1d]
              0d22 811d  adda [$1d]
              0d23 d61d  st   [$1d],y     ;Bit 5
              0d24 1181  ld   [$81],x
              0d25 dd00  ctrl y,x++
              0d26 dd00  ctrl y,x++
              0d27 0100  ld   [$00]
              0d28 200f  anda $0f
              0d29 f02c  beq  $0d2c
              0d2a fc2c  bra  $0d2c
              0d2b 0001  ld   $01
              0d2c cd00  ctrl y,x
              0d2d 811d  adda [$1d]
              0d2e 811d  adda [$1d]
              0d2f d61d  st   [$1d],y     ;Bit 4
              0d30 1181  ld   [$81],x
              0d31 dd00  ctrl y,x++
              0d32 dd00  ctrl y,x++
              0d33 0100  ld   [$00]
              0d34 200f  anda $0f
              0d35 f038  beq  $0d38
              0d36 fc38  bra  $0d38
              0d37 0001  ld   $01
              0d38 cd00  ctrl y,x
              0d39 811d  adda [$1d]
              0d3a 811d  adda [$1d]
              0d3b d61d  st   [$1d],y     ;Bit 3
              0d3c 1181  ld   [$81],x
              0d3d dd00  ctrl y,x++
              0d3e dd00  ctrl y,x++
              0d3f 0100  ld   [$00]
              0d40 200f  anda $0f
              0d41 f044  beq  $0d44
              0d42 fc44  bra  $0d44
              0d43 0001  ld   $01
              0d44 cd00  ctrl y,x
              0d45 811d  adda [$1d]
              0d46 811d  adda [$1d]
              0d47 d61d  st   [$1d],y     ;Bit 2
              0d48 1181  ld   [$81],x
              0d49 dd00  ctrl y,x++
              0d4a dd00  ctrl y,x++
              0d4b 0100  ld   [$00]
              0d4c 200f  anda $0f
              0d4d f050  beq  $0d50
              0d4e fc50  bra  $0d50
              0d4f 0001  ld   $01
              0d50 cd00  ctrl y,x
              0d51 811d  adda [$1d]
              0d52 811d  adda [$1d]
              0d53 d61d  st   [$1d],y     ;Bit 1
              0d54 1181  ld   [$81],x
              0d55 dd00  ctrl y,x++
              0d56 dd00  ctrl y,x++
              0d57 0100  ld   [$00]
              0d58 200f  anda $0f
              0d59 f05c  beq  $0d5c
              0d5a fc5c  bra  $0d5c
              0d5b 0001  ld   $01
              0d5c cd00  ctrl y,x
              0d5d 811d  adda [$1d]
              0d5e 811d  adda [$1d]
              0d5f d61d  st   [$1d],y     ;Bit 0
              0d60 1181  ld   [$81],x
              0d61 dd00  ctrl y,x++
              0d62 dd00  ctrl y,x++
              0d63 0100  ld   [$00]
              0d64 200f  anda $0f
              0d65 f068  beq  $0d68
              0d66 fc68  bra  $0d68
              0d67 0001  ld   $01
              0d68 cd00  ctrl y,x
              0d69 811d  adda [$1d]
              0d6a 811d  adda [$1d]
                                          3403
              0d6b 1124  ld   [$24],x     3404  ld([sysArgs+0],X)               #116 Store received byte
              0d6c 1527  ld   [$27],y     3405  ld([sysArgs+3], Y)              #117
              0d6d ce00  st   [y,x]       3406  st([Y,X])                       #118
                                          3407
              0d6e 0124  ld   [$24]       3408  ld([sysArgs+0])                 #119 Advance pointer
              0d6f 8001  adda $01         3409  adda(1)                         #120
              0d70 c224  st   [$24]       3410  st([sysArgs+0])                 #121
                                          3411
              0d71 6126  xora [$26]       3412  xora([sysArgs+2])               #122 Reached end?
              0d72 f079  beq  .sysSpi#125 3413  beq('.sysSpi#125')              #123
                                          3414
              0d73 0116  ld   [$16]       3415  ld([vPC])                       #124 Self-repeating SYS call
              0d74 a002  suba $02         3416  suba(2)                         #125
              0d75 c216  st   [$16]       3417  st([vPC])                       #126
              0d76 1403  ld   $03,y       3418  ld(hi('REENTER'), Y)            #127
              0d77 e0cb  jmp  y,$cb       3419  jmp(Y,'REENTER')                #128
              0d78 00be  ld   $be         3420  ld(-132/2)                      #129
                                          3421
                                          3422  label('.sysSpi#125')
.sysSpi#125:  0d79 1403  ld   $03,y       3423  ld(hi('REENTER'),Y)             #125 Continue program
              0d7a e0cb  jmp  y,$cb       3424  jmp(Y,'REENTER')                #126
              0d7b 00bf  ld   $bf         3425  ld(-130/2)                      #127
                                          3426
                                          3427  #-----------------------------------------------------------------------
                                          3428
                                          3429  label('sys_v6502')
                                          3430
sys_v6502:    0d7c d605  st   [$05],y     3431  st([vCPUselect],Y)              #18 Activate v6502
              0d7d 00f5  ld   $f5         3432  ld(-22/2)                       #19
              0d7e e0ff  jmp  y,$ff       3433  jmp(Y,'v6502_ENTER')            #20 Transfer control in the same time slice
              0d7f 8115  adda [$15]       3434  adda([vTicks])                  #21
                                          3435  assert (38 - 22)/2 >= v6502_adjust
                                          3436
                                          3437  #-----------------------------------------------------------------------
                                          3438  #       MOS 6502 emulator
                                          3439  #-----------------------------------------------------------------------
                                          3440
                                          3441  # Some quirks:
                                          3442  # - Stack in zero page instead of page 1
                                          3443  # - No interrupts
                                          3444  # - No decimal mode (may never be added). D flag is emulated but ignored.
                                          3445  # - BRK switches back to running 16-bits vCPU
                                          3446  # - Illegal opcodes map to BRK, but can read ghost operands before trapping
                                          3447  # - Illegal opcode $ff won't be trapped and cause havoc instead
                                          3448
                                          3449  # Big things TODO:
                                          3450  # XXX Tuning, put most frequent instructions in the primary page
                                          3451
                                          3452  label('v6502_ror')
                                          3453  assert v6502_Cflag == 1
v6502_ror:    0d80 1525  ld   [$25],y     3454  ld([v6502_ADH],Y)               #12
              0d81 00fc  ld   $fc         3455  ld(-46//2+v6502_maxTicks)       #13 Is there enough time for the excess ticks?
              0d82 8115  adda [$15]       3456  adda([vTicks])                  #14
              0d83 e897  blt  .recheck17  3457  blt('.recheck17')               #15
              0d84 0127  ld   [$27]       3458  ld([v6502_P])                   #16 Transfer C to "bit 8"
              0d85 2001  anda $01         3459  anda(1)                         #17
              0d86 807f  adda $7f         3460  adda(127)                       #18
              0d87 2080  anda $80         3461  anda(128)                       #19
              0d88 c219  st   [$19]       3462  st([v6502_BI])                  #20 The real 6502 wouldn't use BI for this
              0d89 0127  ld   [$27]       3463  ld([v6502_P])                   #21 Transfer bit 0 to C
              0d8a 20fe  anda $fe         3464  anda(~1)                        #22
              0d8b c227  st   [$27]       3465  st([v6502_P])                   #23
              0d8c 0d00  ld   [y,x]       3466  ld([Y,X])                       #24
              0d8d 2001  anda $01         3467  anda(1)                         #25
              0d8e 4127  ora  [$27]       3468  ora([v6502_P])                  #26
              0d8f c227  st   [$27]       3469  st([v6502_P])                   #27
              0d90 00ee  ld   $ee         3470  ld('v6502_ror38')               #28 Shift table lookup
              0d91 c21d  st   [$1d]       3471  st([vTmp])                      #29
              0d92 0d00  ld   [y,x]       3472  ld([Y,X])                       #30
              0d93 20fe  anda $fe         3473  anda(~1)                        #31
              0d94 1405  ld   $05,y       3474  ld(hi('shiftTable'),Y)          #32
              0d95 e200  jmp  y,ac        3475  jmp(Y,AC)                       #33
              0d96 fcff  bra  $ff         3476  bra(255)                        #34 bra shiftTable+255
                                          3477  label('.recheck17')
.recheck17:   0d97 140e  ld   $0e,y       3478  ld(hi('v6502_check'),Y)         #17 Go back to time check before dispatch
              0d98 e0f2  jmp  y,$f2       3479  jmp(Y,'v6502_check')            #18
              0d99 00f6  ld   $f6         3480  ld(-20/2)                       #19
                                          3481
                                          3482  label('v6502_lsr')
                                          3483  assert v6502_Cflag == 1
v6502_lsr:    0d9a 1525  ld   [$25],y     3484  ld([v6502_ADH],Y)               #12
              0d9b 0127  ld   [$27]       3485  ld([v6502_P])                   #13 Transfer bit 0 to C
              0d9c 20fe  anda $fe         3486  anda(~1)                        #14
              0d9d c227  st   [$27]       3487  st([v6502_P])                   #15
              0d9e 0d00  ld   [y,x]       3488  ld([Y,X])                       #16
              0d9f 2001  anda $01         3489  anda(1)                         #17
              0da0 4127  ora  [$27]       3490  ora([v6502_P])                  #18
              0da1 c227  st   [$27]       3491  st([v6502_P])                   #19
              0da2 00e7  ld   $e7         3492  ld('v6502_lsr30')               #20 Shift table lookup
              0da3 c21d  st   [$1d]       3493  st([vTmp])                      #21
              0da4 0d00  ld   [y,x]       3494  ld([Y,X]);                      #22
              0da5 20fe  anda $fe         3495  anda(~1)                        #23
              0da6 1405  ld   $05,y       3496  ld(hi('shiftTable'),Y);         #24
              0da7 e200  jmp  y,ac        3497  jmp(Y,AC)                       #25
              0da8 fcff  bra  $ff         3498  bra(255)                        #26 bra shiftTable+255
                                          3499
                                          3500  label('v6502_rol')
                                          3501  assert v6502_Cflag == 1
v6502_rol:    0da9 1525  ld   [$25],y     3502  ld([v6502_ADH],Y)               #12
              0daa 0d00  ld   [y,x]       3503  ld([Y,X])                       #13
              0dab 2080  anda $80         3504  anda(0x80)                      #14
              0dac c21d  st   [$1d]       3505  st([v6502_Tmp])                 #15
              0dad 0127  ld   [$27]       3506  ld([v6502_P])                   #16
              0dae 2001  anda $01         3507  anda(1)                         #17
                                          3508  label('.rol18')
.rol18:       0daf 8d00  adda [y,x]       3509  adda([Y,X])                     #18
              0db0 8d00  adda [y,x]       3510  adda([Y,X])                     #19
              0db1 ce00  st   [y,x]       3511  st([Y,X])                       #20
              0db2 c228  st   [$28]       3512  st([v6502_Qz])                  #21 Z flag
              0db3 c229  st   [$29]       3513  st([v6502_Qn])                  #22 N flag
              0db4 0127  ld   [$27]       3514  ld([v6502_P])                   #23 C Flag
              0db5 20fe  anda $fe         3515  anda(~1)                        #24
              0db6 111d  ld   [$1d],x     3516  ld([v6502_Tmp],X)               #25
              0db7 4500  ora  [x]         3517  ora([X])                        #26
              0db8 c227  st   [$27]       3518  st([v6502_P])                   #27
              0db9 140e  ld   $0e,y       3519  ld(hi('v6502_next'),Y)          #28
              0dba 00f0  ld   $f0         3520  ld(-32/2)                       #29
              0dbb e020  jmp  y,$20       3521  jmp(Y,'v6502_next')             #30
                                          3522  #nop()                          #31 Overlap
                                          3523  #
                                          3524  label('v6502_asl')
v6502_asl:    0dbc 1525  ld   [$25],y     3525  ld([v6502_ADH],Y)               #12,32
              0dbd 0d00  ld   [y,x]       3526  ld([Y,X])                       #13
              0dbe 2080  anda $80         3527  anda(0x80)                      #14
              0dbf c21d  st   [$1d]       3528  st([v6502_Tmp])                 #15
              0dc0 fcaf  bra  .rol18      3529  bra('.rol18')                   #16
              0dc1 0000  ld   $00         3530  ld(0)                           #17
                                          3531
                                          3532  label('v6502_jmp1')
v6502_jmp1:   0dc2 0200  nop              3533  nop()                           #12
              0dc3 0124  ld   [$24]       3534  ld([v6502_ADL])                 #13
              0dc4 c21a  st   [$1a]       3535  st([v6502_PCL])                 #14
              0dc5 0125  ld   [$25]       3536  ld([v6502_ADH])                 #15
              0dc6 c21b  st   [$1b]       3537  st([v6502_PCH])                 #16
              0dc7 140e  ld   $0e,y       3538  ld(hi('v6502_next'),Y)          #17
              0dc8 e020  jmp  y,$20       3539  jmp(Y,'v6502_next')             #18
              0dc9 00f6  ld   $f6         3540  ld(-20/2)                       #19
                                          3541
                                          3542  label('v6502_jmp2')
v6502_jmp2:   0dca 0200  nop              3543  nop()                           #12
              0dcb 1525  ld   [$25],y     3544  ld([v6502_ADH],Y)               #13
              0dcc 0d00  ld   [y,x]       3545  ld([Y,X])                       #14
              0dcd de00  st   [y,x++]     3546  st([Y,Xpp])                     #15 (Just X++) Wrap around: bug compatible with NMOS
              0dce c21a  st   [$1a]       3547  st([v6502_PCL])                 #16
              0dcf 0d00  ld   [y,x]       3548  ld([Y,X])                       #17
              0dd0 c21b  st   [$1b]       3549  st([v6502_PCH])                 #18
              0dd1 140e  ld   $0e,y       3550  ld(hi('v6502_next'),Y)          #19
              0dd2 e020  jmp  y,$20       3551  jmp(Y,'v6502_next')             #20
              0dd3 00f5  ld   $f5         3552  ld(-22/2)                       #21
                                          3553
                                          3554  label('v6502_pla')
v6502_pla:    0dd4 011c  ld   [$1c]       3555  ld([v6502_S])                   #12
              0dd5 1200  ld   ac,x        3556  ld(AC,X)                        #13
              0dd6 8001  adda $01         3557  adda(1)                         #14
              0dd7 c21c  st   [$1c]       3558  st([v6502_S])                   #15
              0dd8 0500  ld   [x]         3559  ld([X])                         #16
              0dd9 c218  st   [$18]       3560  st([v6502_A])                   #17
              0dda c228  st   [$28]       3561  st([v6502_Qz])                  #18 Z flag
              0ddb c229  st   [$29]       3562  st([v6502_Qn])                  #19 N flag
              0ddc 140e  ld   $0e,y       3563  ld(hi('v6502_next'),Y)          #20
              0ddd 00f4  ld   $f4         3564  ld(-24/2)                       #21
              0dde e020  jmp  y,$20       3565  jmp(Y,'v6502_next')             #22
                                          3566  #nop()                          #23 Overlap
                                          3567  #
                                          3568  label('v6502_pha')
v6502_pha:    0ddf 140e  ld   $0e,y       3569  ld(hi('v6502_next'),Y)          #12,24
              0de0 011c  ld   [$1c]       3570  ld([v6502_S])                   #13
              0de1 a001  suba $01         3571  suba(1)                         #14
              0de2 d21c  st   [$1c],x     3572  st([v6502_S],X)                 #15
              0de3 0118  ld   [$18]       3573  ld([v6502_A])                   #16
              0de4 c600  st   [x]         3574  st([X])                         #17
              0de5 e020  jmp  y,$20       3575  jmp(Y,'v6502_next')             #18
              0de6 00f6  ld   $f6         3576  ld(-20/2)                       #19
                                          3577
                                          3578  label('v6502_brk')
v6502_brk:    0de7 0002  ld   $02         3579  ld(hi('ENTER'))                 #12 Switch to vCPU
              0de8 c205  st   [$05]       3580  st([vCPUselect])                #13
                                          3581  assert v6502_A == vAC
              0de9 0000  ld   $00         3582  ld(0)                           #14
              0dea c219  st   [$19]       3583  st([vAC+1])                     #15
              0deb 1403  ld   $03,y       3584  ld(hi('REENTER'),Y)             #16 Switch in the current time slice
              0dec 00fb  ld   $fb         3585  ld(-22/2+v6502_adjust)          #17
              0ded e0cb  jmp  y,$cb       3586  jmp(Y,'REENTER');               #18
              0dee 0200  nop              3587  nop()                           #19
                                          3588
                                          3589  # All interpreter entry points must share the same page offset, because
                                          3590  # this offset is hard-coded as immediate operand in the video driver.
                                          3591  # The Gigatron's original vCPU's 'ENTER' label is already at $2ff, so we
                                          3592  # just use $dff for 'v6502_ENTER'. v6502 actually has two entry points.
                                          3593  # The other is 'v6502_RESUME' at $10ff. It is used for instructions
                                          3594  # that were fetched but not yet executed. Allowing the split gives finer
                                          3595  # granulariy, and hopefully more throughput for the simpler instructions.
                                          3596  # (There is no "overhead" for allowing instruction splitting, because
                                          3597  #  both emulation phases must administer [vTicks] anyway.)
                                          3598  while pc()&255 < 255:
              0def 0200  nop              3599    nop()
              0df0 0200  nop
              0df1 0200  nop
              * 16 times
                                          3600  label('v6502_ENTER')
v6502_ENTER:  0dff fc22  bra  v6502_next2 3601  bra('v6502_next2')              #0 v6502 primary entry point
                                          3602
                                          3603  # --- Page boundary ---
              0e00 a006  suba $06         3604  suba(v6502_adjust)              #1,19 Adjust for vCPU/v6520 timing differences
                                          3605
                                          3606  #19 Addressing modes
                                          3607  (   'v6502_mode0'  ); bra('v6502_modeIZX'); bra('v6502_modeIMM'); bra('v6502_modeILL') # $00 xxx000xx
              0e01 fce0  bra  v6502_modeIZX
              0e02 fc42  bra  v6502_modeIMM
              0e03 fc58  bra  v6502_modeIMP
                                          3608  bra('v6502_modeZP');  bra('v6502_modeZP');  bra('v6502_modeZP');  bra('v6502_modeILL') # $04 xxx001xx
              0e04 fc5d  bra  v6502_modeZP
              0e05 fc5d  bra  v6502_modeZP
              0e06 fc5d  bra  v6502_modeZP
              0e07 fc58  bra  v6502_modeIMP
                                          3609  bra('v6502_modeIMP'); bra('v6502_modeIMM'); bra('v6502_modeACC'); bra('v6502_modeILL') # $08 xxx010xx
              0e08 fc58  bra  v6502_modeIMP
              0e09 fc42  bra  v6502_modeIMM
              0e0a fc52  bra  v6502_modeACC
              0e0b fc58  bra  v6502_modeIMP
                                          3610  bra('v6502_modeABS'); bra('v6502_modeABS'); bra('v6502_modeABS'); bra('v6502_modeILL') # $0c xxx011xx
              0e0c fc78  bra  v6502_modeABS
              0e0d fc78  bra  v6502_modeABS
              0e0e fc78  bra  v6502_modeABS
              0e0f fc58  bra  v6502_modeIMP
                                          3611  bra('v6502_modeREL'); bra('v6502_modeIZY'); bra('v6502_modeIMM'); bra('v6502_modeILL') # $10 xxx100xx
              0e10 fccf  bra  v6502_modeREL
              0e11 fcab  bra  v6502_modeIZY
              0e12 fc42  bra  v6502_modeIMM
              0e13 fc58  bra  v6502_modeIMP
                                          3612  bra('v6502_modeZPX'); bra('v6502_modeZPX'); bra('v6502_modeZPX'); bra('v6502_modeILL') # $14 xxx101xx
              0e14 fc5b  bra  v6502_modeZPX
              0e15 fc5b  bra  v6502_modeZPX
              0e16 fc5b  bra  v6502_modeZPX
              0e17 fc58  bra  v6502_modeIMP
                                          3613  bra('v6502_modeIMP'); bra('v6502_modeABY'); bra('v6502_modeIMP'); bra('v6502_modeILL') # $18 xxx110xx
              0e18 fc58  bra  v6502_modeIMP
              0e19 fc7b  bra  v6502_modeABY
              0e1a fc58  bra  v6502_modeIMP
              0e1b fc58  bra  v6502_modeIMP
                                          3614  bra('v6502_modeABX'); bra('v6502_modeABX'); bra('v6502_modeABX'); bra('v6502_modeILL') # $1c xxx111xx
              0e1c fc7a  bra  v6502_modeABX
              0e1d fc7a  bra  v6502_modeABX
              0e1e fc7a  bra  v6502_modeABX
              0e1f fc58  bra  v6502_modeIMP
                                          3615
                                          3616  # Special encoding cases for emulator:
                                          3617  #     $00 BRK -         but gets mapped to #$DD      handled in v6502_mode0
                                          3618  #     $20 JSR $DDDD     but gets mapped to #$DD      handled in v6502_mode0 and v6502_JSR
                                          3619  #     $40 RTI -         but gets mapped to #$DD      handled in v6502_mode0
                                          3620  #     $60 RTS -         but gets mapped to #$DD      handled in v6502_mode0
                                          3621  #     $6C JMP ($DDDD)   but gets mapped to $DDDD     handled in v6502_JMP2
                                          3622  #     $96 STX $DD,Y     but gets mapped to $DD,X     handled in v6502_STX2
                                          3623  #     $B6 LDX $DD,Y     but gets mapped to $DD,X     handled in v6502_LDX2
                                          3624  #     $BE LDX $DDDD,Y   but gets mapped to $DDDD,X   handled in v6502_modeABX
                                          3625
                                          3626  label('v6502_next')
v6502_next:   0e20 8115  adda [$15]       3627  adda([vTicks])                  #0
                                          3628  blt('v6502_exitBefore')         #1 No more ticks
              0e21 e83a  blt  v6502_exitBefore
                                          3629  label('v6502_next2')
v6502_next2:  0e22 c215  st   [$15]       3630  st([vTicks])                    #2
                                          3631  #
                                          3632  # Fetch opcode
              0e23 111a  ld   [$1a],x     3633  ld([v6502_PCL],X)               #3
              0e24 151b  ld   [$1b],y     3634  ld([v6502_PCH],Y)               #4
              0e25 0d00  ld   [y,x]       3635  ld([Y,X])                       #5 Fetch IR
              0e26 c226  st   [$26]       3636  st([v6502_IR])                  #6
              0e27 011a  ld   [$1a]       3637  ld([v6502_PCL])                 #7 PC++
              0e28 8001  adda $01         3638  adda(1)                         #8
              0e29 d21a  st   [$1a],x     3639  st([v6502_PCL],X)               #9
              0e2a f02d  beq  $0e2d       3640  beq(pc()+3)                     #10
              0e2b fc2e  bra  $0e2e       3641  bra(pc()+3)                     #11
              0e2c 0000  ld   $00         3642  ld(0)                           #12
              0e2d 0001  ld   $01         3643  ld(1)                           #12(!)
              0e2e 811b  adda [$1b]       3644  adda([v6502_PCH])               #13
              0e2f d61b  st   [$1b],y     3645  st([v6502_PCH],Y)               #14
                                          3646  #
                                          3647  # Get addressing mode and fetch operands
              0e30 0126  ld   [$26]       3648  ld([v6502_IR])                  #15 Get addressing mode
              0e31 201f  anda $1f         3649  anda(31)                        #16
              0e32 fe00  bra  ac          3650  bra(AC)                         #17
              0e33 fc34  bra  .next20     3651  bra('.next20')                  #18
                                          3652  # (jump table)                  #19
                                          3653  label('.next20')
.next20:      0e34 0d00  ld   [y,x]       3654  ld([Y,X])                       #20 Fetch L
                                          3655  # Most opcodes branch away at this point, but IR & 31 == 0 falls through
                                          3656  #
                                          3657  # Implicit Mode for  BRK JSR RTI RTS (<  0x80) -- 26 cycles
                                          3658  # Immediate Mode for LDY CPY CPX     (>= 0x80) -- 36 cycles
                                          3659  label('v6502_mode0')
v6502_mode0:  0e35 0126  ld   [$26]       3660  ld([v6502_IR])                  #21 'xxx0000'
              0e36 e845  blt  .imm24      3661  bmi('.imm24')                   #22
              0e37 011b  ld   [$1b]       3662  ld([v6502_PCH])                 #23
              0e38 fcf2  bra  v6502_check 3663  bra('v6502_check');             #24
              0e39 00f3  ld   $f3         3664  ld(-26/2)                       #25
                                          3665
                                          3666  # Resync with video driver. At this point we're returning BEFORE
                                          3667  # fetching and executing the next instruction.
                                          3668  label('v6502_exitBefore')
v6502_exitBefore:
              0e3a 8013  adda $13         3669  adda(v6502_maxTicks)            #3 Exit BEFORE fetch
              0e3b e43b  bgt  $0e3b       3670  bgt(pc()&255)                   #4 Resync
              0e3c a001  suba $01         3671  suba(1)                         #5
              0e3d 000d  ld   $0d         3672  ld(hi('v6502_ENTER'))           #6 Set entry point to before 'fetch'
              0e3e c205  st   [$05]       3673  st([vCPUselect])                #7
              0e3f 1401  ld   $01,y       3674  ld(hi('vBlankStart'),Y)         #8
              0e40 e11e  jmp  y,[$1e]     3675  jmp(Y,[vReturn])                #9 To video driver
              0e41 0000  ld   $00         3676  ld(0)                           #10
                                          3677  assert v6502_overhead ==         11
                                          3678
                                          3679  # Immediate Mode: #$FF -- 36 cycles
                                          3680  label('v6502_modeIMM')
v6502_modeIMM:
              0e42 0200  nop              3681  nop()                           #21 Wait for v6502_mode0 to join
              0e43 0200  nop              3682  nop()                           #22
              0e44 011b  ld   [$1b]       3683  ld([v6502_PCH])                 #23 Copy PC
                                          3684  label('.imm24')
.imm24:       0e45 c225  st   [$25]       3685  st([v6502_ADH])                 #24
              0e46 011a  ld   [$1a]       3686  ld([v6502_PCL])                 #25
              0e47 d224  st   [$24],x     3687  st([v6502_ADL],X)               #26
              0e48 8001  adda $01         3688  adda(1)                         #27 PC++
              0e49 c21a  st   [$1a]       3689  st([v6502_PCL])                 #28
              0e4a f04d  beq  $0e4d       3690  beq(pc()+3)                     #29
              0e4b fc4e  bra  $0e4e       3691  bra(pc()+3)                     #30
              0e4c 0000  ld   $00         3692  ld(0)                           #31
              0e4d 0001  ld   $01         3693  ld(1)                           #31(!)
              0e4e 811b  adda [$1b]       3694  adda([v6502_PCH])               #32
              0e4f c21b  st   [$1b]       3695  st([v6502_PCH])                 #33
              0e50 fcf2  bra  v6502_check 3696  bra('v6502_check')              #34
              0e51 00ee  ld   $ee         3697  ld(-36/2)                       #35
                                          3698
                                          3699  # Accumulator Mode: ROL ROR LSL ASR -- 28 cycles
                                          3700  label('v6502_modeACC')
v6502_modeACC:
              0e52 0018  ld   $18         3701  ld(v6502_A&255)                 #21 Address of AC
              0e53 d224  st   [$24],x     3702  st([v6502_ADL],X)               #22
              0e54 0000  ld   $00         3703  ld(v6502_A>>8)                  #23
              0e55 c225  st   [$25]       3704  st([v6502_ADH])                 #24
              0e56 00f2  ld   $f2         3705  ld(-28/2)                       #25
              0e57 fcf2  bra  v6502_check 3706  bra('v6502_check')              #26
                                          3707  #nop()                          #27 Overlap
                                          3708  #
                                          3709  # Implied Mode: no operand -- 24 cycles
                                          3710  label('v6502_modeILL')
                                          3711  label('v6502_modeIMP')
v6502_modeILL:
v6502_modeIMP:
              0e58 0200  nop              3712  nop()                           #21,27
              0e59 fcf2  bra  v6502_check 3713  bra('v6502_check')              #22
              0e5a 00f4  ld   $f4         3714  ld(-24/2)                       #23
                                          3715
                                          3716  # Zero Page Modes: $DD $DD,X $DD,Y -- 36 cycles
                                          3717  label('v6502_modeZPX')
v6502_modeZPX:
              0e5b fc5f  bra  .zp23       3718  bra('.zp23')                    #21
              0e5c 812a  adda [$2a]       3719  adda([v6502_X])                 #22
                                          3720  label('v6502_modeZP')
v6502_modeZP: 0e5d fc5f  bra  .zp23       3721  bra('.zp23')                    #21
              0e5e 0200  nop              3722  nop()                           #22
                                          3723  label('.zp23')
.zp23:        0e5f d224  st   [$24],x     3724  st([v6502_ADL],X)               #23
              0e60 0000  ld   $00         3725  ld(0)                           #24 H=0
              0e61 c225  st   [$25]       3726  st([v6502_ADH])                 #25
              0e62 0001  ld   $01         3727  ld(1)                           #26 PC++
              0e63 811a  adda [$1a]       3728  adda([v6502_PCL])               #27
              0e64 c21a  st   [$1a]       3729  st([v6502_PCL])                 #28
              0e65 f068  beq  $0e68       3730  beq(pc()+3)                     #29
              0e66 fc69  bra  $0e69       3731  bra(pc()+3)                     #30
              0e67 0000  ld   $00         3732  ld(0)                           #31
              0e68 0001  ld   $01         3733  ld(1)                           #31(!)
              0e69 811b  adda [$1b]       3734  adda([v6502_PCH])               #32
              0e6a c21b  st   [$1b]       3735  st([v6502_PCH])                 #33
              0e6b fcf2  bra  v6502_check 3736  bra('v6502_check')              #34
              0e6c 00ee  ld   $ee         3737  ld(-36/2)                       #35
                                          3738
                                          3739  # Possible retry loop for modeABS and modeIZY. Because these need
                                          3740  # more time than the v6502_maxTicks of 38 Gigatron cycles, we may
                                          3741  # have to restart them after the next horizontal pulse.
                                          3742  label('.retry28')
.retry28:     0e6d f070  beq  $0e70       3743  beq(pc()+3)                     #28,37 PC--
              0e6e fc71  bra  $0e71       3744  bra(pc()+3)                     #29
              0e6f 0000  ld   $00         3745  ld(0)                           #30
              0e70 00ff  ld   $ff         3746  ld(-1)                          #30(!)
              0e71 811b  adda [$1b]       3747  adda([v6502_PCH])               #31
              0e72 c21b  st   [$1b]       3748  st([v6502_PCH])                 #32
              0e73 011a  ld   [$1a]       3749  ld([v6502_PCL])                 #33
              0e74 a001  suba $01         3750  suba(1)                         #34
              0e75 c21a  st   [$1a]       3751  st([v6502_PCL])                 #35
              0e76 fc20  bra  v6502_next  3752  bra('v6502_next')               #36 Retry until sufficient time
              0e77 00ed  ld   $ed         3753  ld(-38/2)                       #37
                                          3754
                                          3755  # Absolute Modes: $DDDD $DDDD,X $DDDD,Y -- 64 cycles
                                          3756  label('v6502_modeABS')
v6502_modeABS:
              0e78 fc7d  bra  .abs23      3757  bra('.abs23')                   #21
              0e79 0000  ld   $00         3758  ld(0)                           #22
                                          3759  label('v6502_modeABX')
v6502_modeABX:
              0e7a fc7d  bra  .abs23      3760  bra('.abs23')                   #21
                                          3761  label('v6502_modeABY')
v6502_modeABY:
              0e7b 012a  ld   [$2a]       3762  ld([v6502_X])                   #21,22
              0e7c 012b  ld   [$2b]       3763  ld([v6502_Y])                   #22
                                          3764  label('.abs23')
.abs23:       0e7d c224  st   [$24]       3765  st([v6502_ADL])                 #23
              0e7e 00f3  ld   $f3         3766  ld(-64/2+v6502_maxTicks)        #24 Is there enough time for the excess ticks?
              0e7f 8115  adda [$15]       3767  adda([vTicks])                  #25
              0e80 e86d  blt  .retry28    3768  blt('.retry28')                 #26
              0e81 011a  ld   [$1a]       3769  ld([v6502_PCL])                 #27
              0e82 0126  ld   [$26]       3770  ld([v6502_IR])                  #28 Special case $BE: LDX $DDDD,Y (we got X in ADL)
              0e83 60be  xora $be         3771  xora(0xbe)                      #29
              0e84 f087  beq  $0e87       3772  beq(pc()+3)                     #30
              0e85 fc88  bra  $0e88       3773  bra(pc()+3)                     #31
              0e86 0124  ld   [$24]       3774  ld([v6502_ADL])                 #32
              0e87 012b  ld   [$2b]       3775  ld([v6502_Y])                   #32(!)
              0e88 8d00  adda [y,x]       3776  adda([Y,X])                     #33 Fetch and add L
              0e89 c224  st   [$24]       3777  st([v6502_ADL])                 #34
              0e8a e88e  blt  .abs37      3778  bmi('.abs37')                   #35 Carry?
              0e8b ad00  suba [y,x]       3779  suba([Y,X]);                    #36 Gets back original operand
              0e8c fc90  bra  .abs39      3780  bra('.abs39')                   #37
              0e8d 4d00  ora  [y,x]       3781  ora([Y,X])                      #38 Carry in bit 7
                                          3782  label('.abs37')
.abs37:       0e8e 2d00  anda [y,x]       3783  anda([Y,X])                     #37 Carry in bit 7
              0e8f 0200  nop              3784  nop()                           #38
                                          3785  label('.abs39')
.abs39:       0e90 3080  anda $80,x       3786  anda(0x80,X)                    #39 Move carry to bit 0
              0e91 0500  ld   [x]         3787  ld([X])                         #40
              0e92 c225  st   [$25]       3788  st([v6502_ADH])                 #41
              0e93 011a  ld   [$1a]       3789  ld([v6502_PCL])                 #42 PC++
              0e94 8001  adda $01         3790  adda(1)                         #43
              0e95 d21a  st   [$1a],x     3791  st([v6502_PCL],X)               #44
              0e96 f099  beq  $0e99       3792  beq(pc()+3)                     #45
              0e97 fc9a  bra  $0e9a       3793  bra(pc()+3)                     #46
              0e98 0000  ld   $00         3794  ld(0)                           #47
              0e99 0001  ld   $01         3795  ld(1)                           #47(!)
              0e9a 811b  adda [$1b]       3796  adda([v6502_PCH])               #48
              0e9b d61b  st   [$1b],y     3797  st([v6502_PCH],Y)               #49
              0e9c 0d00  ld   [y,x]       3798  ld([Y,X])                       #50 Fetch H
              0e9d 8125  adda [$25]       3799  adda([v6502_ADH])               #51
              0e9e c225  st   [$25]       3800  st([v6502_ADH])                 #52
              0e9f 011a  ld   [$1a]       3801  ld([v6502_PCL])                 #53 PC++
              0ea0 8001  adda $01         3802  adda(1)                         #54
              0ea1 c21a  st   [$1a]       3803  st([v6502_PCL])                 #55
              0ea2 f0a5  beq  $0ea5       3804  beq(pc()+3)                     #56
              0ea3 fca6  bra  $0ea6       3805  bra(pc()+3)                     #57
              0ea4 0000  ld   $00         3806  ld(0)                           #58
              0ea5 0001  ld   $01         3807  ld(1)                           #58(!)
              0ea6 811b  adda [$1b]       3808  adda([v6502_PCH])               #59
              0ea7 c21b  st   [$1b]       3809  st([v6502_PCH])                 #60
              0ea8 1124  ld   [$24],x     3810  ld([v6502_ADL],X)               #61
              0ea9 fcf2  bra  v6502_check 3811  bra('v6502_check')              #62
              0eaa 00e0  ld   $e0         3812  ld(-64/2)                       #63
                                          3813
                                          3814  # Indirect Indexed Mode: ($DD),Y -- 54 cycles
                                          3815  label('v6502_modeIZY')
v6502_modeIZY:
              0eab 1200  ld   ac,x        3816  ld(AC,X)                        #21 $DD
              0eac 1400  ld   $00,y       3817  ld(0,Y)                         #22 $00DD
              0ead 00f8  ld   $f8         3818  ld(-54/2+v6502_maxTicks)        #23 Is there enough time for the excess ticks?
              0eae 8115  adda [$15]       3819  adda([vTicks])                  #24
              0eaf 0200  nop              3820  nop()                           #25
              0eb0 e86d  blt  .retry28    3821  blt('.retry28')                 #26
              0eb1 011a  ld   [$1a]       3822  ld([v6502_PCL])                 #27
              0eb2 8001  adda $01         3823  adda(1)                         #28 PC++
              0eb3 c21a  st   [$1a]       3824  st([v6502_PCL])                 #29
              0eb4 f0b7  beq  $0eb7       3825  beq(pc()+3)                     #30
              0eb5 fcb8  bra  $0eb8       3826  bra(pc()+3)                     #31
              0eb6 0000  ld   $00         3827  ld(0)                           #32
              0eb7 0001  ld   $01         3828  ld(1)                           #32(!)
              0eb8 811b  adda [$1b]       3829  adda([v6502_PCH])               #33
              0eb9 c21b  st   [$1b]       3830  st([v6502_PCH])                 #34
              0eba 0d00  ld   [y,x]       3831  ld([Y,X])                       #35 Read word from zero-page
              0ebb de00  st   [y,x++]     3832  st([Y,Xpp])                     #36 Wrap-around is correct
              0ebc c224  st   [$24]       3833  st([v6502_ADL])                 #37
              0ebd 0d00  ld   [y,x]       3834  ld([Y,X])                       #38
              0ebe c225  st   [$25]       3835  st([v6502_ADH])                 #39
              0ebf 012b  ld   [$2b]       3836  ld([v6502_Y])                   #40 Add Y
              0ec0 8124  adda [$24]       3837  adda([v6502_ADL])               #41
              0ec1 c224  st   [$24]       3838  st([v6502_ADL])                 #42
              0ec2 e8c6  blt  .izy45      3839  bmi('.izy45')                   #43 Carry?
              0ec3 a12b  suba [$2b]       3840  suba([v6502_Y])                 #44 Gets back original operand
              0ec4 fcc8  bra  .izy47      3841  bra('.izy47')                   #45
              0ec5 412b  ora  [$2b]       3842  ora([v6502_Y])                  #46 Carry in bit 7
                                          3843  label('.izy45')
.izy45:       0ec6 212b  anda [$2b]       3844  anda([v6502_Y])                 #45 Carry in bit 7
              0ec7 0200  nop              3845  nop()                           #46
                                          3846  label('.izy47')
.izy47:       0ec8 3080  anda $80,x       3847  anda(0x80,X)                    #47 Move carry to bit 0
              0ec9 0500  ld   [x]         3848  ld([X])                         #48
              0eca 8125  adda [$25]       3849  adda([v6502_ADH])               #49
              0ecb c225  st   [$25]       3850  st([v6502_ADH])                 #50
              0ecc 1124  ld   [$24],x     3851  ld([v6502_ADL],X)               #51
              0ecd fcf2  bra  v6502_check 3852  bra('v6502_check')              #52
              0ece 00e5  ld   $e5         3853  ld(-54/2)                       #53
                                          3854
                                          3855  # Relative Mode: BEQ BNE BPL BMI BCC BCS BVC BVS -- 36 cycles
                                          3856  label('v6502_modeREL')
v6502_modeREL:
              0ecf d224  st   [$24],x     3857  st([v6502_ADL],X)               #21 Offset (Only needed for branch)
              0ed0 e8d3  blt  $0ed3       3858  bmi(pc()+3)                     #22 Sign extend
              0ed1 fcd4  bra  $0ed4       3859  bra(pc()+3)                     #23
              0ed2 0000  ld   $00         3860  ld(0)                           #24
              0ed3 00ff  ld   $ff         3861  ld(255)                         #24(!)
              0ed4 c225  st   [$25]       3862  st([v6502_ADH])                 #25
              0ed5 011a  ld   [$1a]       3863  ld([v6502_PCL])                 #26 PC++ (Needed for both cases)
              0ed6 8001  adda $01         3864  adda(1)                         #27
              0ed7 c21a  st   [$1a]       3865  st([v6502_PCL])                 #28
              0ed8 f0db  beq  $0edb       3866  beq(pc()+3)                     #29
              0ed9 fcdc  bra  $0edc       3867  bra(pc()+3)                     #30
              0eda 0000  ld   $00         3868  ld(0)                           #31
              0edb 0001  ld   $01         3869  ld(1)                           #31(!)
              0edc 811b  adda [$1b]       3870  adda([v6502_PCH])               #32
              0edd c21b  st   [$1b]       3871  st([v6502_PCH])                 #33
              0ede fcf2  bra  v6502_check 3872  bra('v6502_check')              #34
              0edf 00ee  ld   $ee         3873  ld(-36/2)                       #53
                                          3874
                                          3875  # Indexed Indirect Mode: ($DD,X) -- 38 cycles
                                          3876  label('v6502_modeIZX')
v6502_modeIZX:
              0ee0 812a  adda [$2a]       3877  adda([v6502_X])                 #21 Add X
              0ee1 c21d  st   [$1d]       3878  st([v6502_Tmp])                 #22
              0ee2 9001  adda $01,x       3879  adda(1,X)                       #23 Read word from zero-page
              0ee3 0500  ld   [x]         3880  ld([X]);                        #24
              0ee4 c225  st   [$25]       3881  st([v6502_ADH])                 #25
              0ee5 111d  ld   [$1d],x     3882  ld([v6502_Tmp],X)               #26
              0ee6 0500  ld   [x]         3883  ld([X])                         #27
              0ee7 d224  st   [$24],x     3884  st([v6502_ADL],X)               #28
              0ee8 011a  ld   [$1a]       3885  ld([v6502_PCL])                 #29 PC++
              0ee9 8001  adda $01         3886  adda(1)                         #30
              0eea c21a  st   [$1a]       3887  st([v6502_PCL])                 #31
              0eeb f0ee  beq  $0eee       3888  beq(pc()+3)                     #32
              0eec fcef  bra  $0eef       3889  bra(pc()+3)                     #33
              0eed 0000  ld   $00         3890  ld(0)                           #34
              0eee 0001  ld   $01         3891  ld(1)                           #34(!)
              0eef 811b  adda [$1b]       3892  adda([v6502_PCH])               #35
              0ef0 c21b  st   [$1b]       3893  st([v6502_PCH])                 #36
              0ef1 00ed  ld   $ed         3894  ld(-38/2)                       #37 !!! Fall through to v6502_check !!!
                                          3895  #
                                          3896  # Update elapsed time for the addressing mode processing.
                                          3897  # Then check if we can immediately execute this instruction.
                                          3898  # Otherwise transfer control to the video driver.
                                          3899  label('v6502_check')
v6502_check:  0ef2 8115  adda [$15]       3900  adda([vTicks])                  #0
                                          3901  blt('v6502_exitAfter')          #1 No more ticks
              0ef3 e8f8  blt  v6502_exitAfter
              0ef4 c215  st   [$15]       3902  st([vTicks])                    #2
              0ef5 140f  ld   $0f,y       3903  ld(hi('v6502_execute'),Y)       #3
              0ef6 e126  jmp  y,[$26]     3904  jmp(Y,[v6502_IR])               #4
              0ef7 fcff  bra  $ff         3905  bra(255)                        #5
                                          3906
                                          3907  # Otherwise resync with video driver. At this point we're returning AFTER
                                          3908  # addressing mode decoding, but before executing the instruction.
                                          3909  label('v6502_exitAfter')
v6502_exitAfter:
              0ef8 8013  adda $13         3910  adda(v6502_maxTicks)            #3 Exit AFTER fetch
              0ef9 e4f9  bgt  $0ef9       3911  bgt(pc()&255)                   #4 Resync
              0efa a001  suba $01         3912  suba(1)                         #5
              0efb 0010  ld   $10         3913  ld(hi('v6502_RESUME'))          #6 Set entry point to before 'execute'
              0efc c205  st   [$05]       3914  st([vCPUselect])                #7
              0efd 1401  ld   $01,y       3915  ld(hi('vBlankStart'),Y)         #8
              0efe e11e  jmp  y,[$1e]     3916  jmp(Y,[vReturn])                #9 To video driver
              0eff 0000  ld   $00         3917  ld(0)                           #10
                                          3918  assert v6502_overhead ==         11
                                          3919
                                          3920  align(0x100,0x100)
                                          3921  label('v6502_execute')
                                          3922  # This page works as a 255-entry (0..254) jump table for 6502 opcodes.
                                          3923  # Jumping into this page must have 'bra 255' in the branch delay slot
                                          3924  # in order to get out again and dispatch to the right continuation.
                                          3925  # X must hold [v6502_ADL],
                                          3926  # Y will hold hi('v6502_execute'),
                                          3927  # A will be loaded with the code offset (this is skipped at offset $ff)
v6502_execute:
              0f00 00fd  ld   $fd         3928  ld('v6502_BRK'); ld('v6502_ORA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $00
              0f01 0089  ld   $89
              0f02 00fd  ld   $fd
              0f03 00fd  ld   $fd
              0f04 00fd  ld   $fd         3929  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f05 0089  ld   $89
              0f06 00f1  ld   $f1
              0f07 00fd  ld   $fd
              0f08 00f3  ld   $f3         3930  ld('v6502_PHP'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f09 0089  ld   $89
              0f0a 00f1  ld   $f1
              0f0b 00fd  ld   $fd
              0f0c 00fd  ld   $fd         3931  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f0d 0089  ld   $89
              0f0e 00f1  ld   $f1
              0f0f 00fd  ld   $fd
              0f10 003f  ld   $3f         3932  ld('v6502_BPL'); ld('v6502_ORA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $10
              0f11 0089  ld   $89
              0f12 00fd  ld   $fd
              0f13 00fd  ld   $fd
              0f14 00fd  ld   $fd         3933  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f15 0089  ld   $89
              0f16 00f1  ld   $f1
              0f17 00fd  ld   $fd
              0f18 0036  ld   $36         3934  ld('v6502_CLC'); ld('v6502_ORA'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f19 0089  ld   $89
              0f1a 00fd  ld   $fd
              0f1b 00fd  ld   $fd
              0f1c 00fd  ld   $fd         3935  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f1d 0089  ld   $89
              0f1e 00f1  ld   $f1
              0f1f 00fd  ld   $fd
              0f20 009a  ld   $9a         3936  ld('v6502_JSR'); ld('v6502_AND'); ld('v6502_ILL'); ld('v6502_ILL') #6 $20
              0f21 0085  ld   $85
              0f22 00fd  ld   $fd
              0f23 00fd  ld   $fd
              0f24 00f5  ld   $f5         3937  ld('v6502_BIT'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f25 0085  ld   $85
              0f26 00f7  ld   $f7
              0f27 00fd  ld   $fd
              0f28 00f9  ld   $f9         3938  ld('v6502_PLP'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f29 0085  ld   $85
              0f2a 00f7  ld   $f7
              0f2b 00fd  ld   $fd
              0f2c 00f5  ld   $f5         3939  ld('v6502_BIT'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f2d 0085  ld   $85
              0f2e 00f7  ld   $f7
              0f2f 00fd  ld   $fd
              0f30 0042  ld   $42         3940  ld('v6502_BMI'); ld('v6502_AND'); ld('v6502_ILL'); ld('v6502_ILL') #6 $30
              0f31 0085  ld   $85
              0f32 00fd  ld   $fd
              0f33 00fd  ld   $fd
              0f34 00fd  ld   $fd         3941  ld('v6502_ILL'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f35 0085  ld   $85
              0f36 00f7  ld   $f7
              0f37 00fd  ld   $fd
              0f38 0038  ld   $38         3942  ld('v6502_SEC'); ld('v6502_AND'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f39 0085  ld   $85
              0f3a 00fd  ld   $fd
              0f3b 00fd  ld   $fd
              0f3c 00fd  ld   $fd         3943  ld('v6502_ILL'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f3d 0085  ld   $85
              0f3e 00f7  ld   $f7
              0f3f 00fd  ld   $fd
              0f40 00d3  ld   $d3         3944  ld('v6502_RTI'); ld('v6502_EOR'); ld('v6502_ILL'); ld('v6502_ILL') #6 $40
              0f41 008c  ld   $8c
              0f42 00fd  ld   $fd
              0f43 00fd  ld   $fd
              0f44 00fd  ld   $fd         3945  ld('v6502_ILL'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f45 008c  ld   $8c
              0f46 00d7  ld   $d7
              0f47 00fd  ld   $fd
              0f48 00d9  ld   $d9         3946  ld('v6502_PHA'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f49 008c  ld   $8c
              0f4a 00d7  ld   $d7
              0f4b 00fd  ld   $fd
              0f4c 0096  ld   $96         3947  ld('v6502_JMP1');ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f4d 008c  ld   $8c
              0f4e 00d7  ld   $d7
              0f4f 00fd  ld   $fd
              0f50 0045  ld   $45         3948  ld('v6502_BVC'); ld('v6502_EOR'); ld('v6502_ILL'); ld('v6502_ILL') #6 $50
              0f51 008c  ld   $8c
              0f52 00fd  ld   $fd
              0f53 00fd  ld   $fd
              0f54 00fd  ld   $fd         3949  ld('v6502_ILL'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f55 008c  ld   $8c
              0f56 00d7  ld   $d7
              0f57 00fd  ld   $fd
              0f58 00db  ld   $db         3950  ld('v6502_CLI'); ld('v6502_EOR'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f59 008c  ld   $8c
              0f5a 00fd  ld   $fd
              0f5b 00fd  ld   $fd
              0f5c 00fd  ld   $fd         3951  ld('v6502_ILL'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f5d 008c  ld   $8c
              0f5e 00d7  ld   $d7
              0f5f 00fd  ld   $fd
              0f60 00dd  ld   $dd         3952  ld('v6502_RTS'); ld('v6502_ADC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $60
              0f61 0001  ld   $01
              0f62 00fd  ld   $fd
              0f63 00fd  ld   $fd
              0f64 00fd  ld   $fd         3953  ld('v6502_ILL'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f65 0001  ld   $01
              0f66 00d5  ld   $d5
              0f67 00fd  ld   $fd
              0f68 00df  ld   $df         3954  ld('v6502_PLA'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f69 0001  ld   $01
              0f6a 00d5  ld   $d5
              0f6b 00fd  ld   $fd
              0f6c 0098  ld   $98         3955  ld('v6502_JMP2');ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f6d 0001  ld   $01
              0f6e 00d5  ld   $d5
              0f6f 00fd  ld   $fd
              0f70 0049  ld   $49         3956  ld('v6502_BVS'); ld('v6502_ADC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $70
              0f71 0001  ld   $01
              0f72 00fd  ld   $fd
              0f73 00fd  ld   $fd
              0f74 00fd  ld   $fd         3957  ld('v6502_ILL'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f75 0001  ld   $01
              0f76 00d5  ld   $d5
              0f77 00fd  ld   $fd
              0f78 00e1  ld   $e1         3958  ld('v6502_SEI'); ld('v6502_ADC'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f79 0001  ld   $01
              0f7a 00fd  ld   $fd
              0f7b 00fd  ld   $fd
              0f7c 00fd  ld   $fd         3959  ld('v6502_ILL'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f7d 0001  ld   $01
              0f7e 00d5  ld   $d5
              0f7f 00fd  ld   $fd
              0f80 00fd  ld   $fd         3960  ld('v6502_ILL'); ld('v6502_STA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $80
              0f81 00c1  ld   $c1
              0f82 00fd  ld   $fd
              0f83 00fd  ld   $fd
              0f84 00c7  ld   $c7         3961  ld('v6502_STY'); ld('v6502_STA'); ld('v6502_STX'); ld('v6502_ILL') #6
              0f85 00c1  ld   $c1
              0f86 00c3  ld   $c3
              0f87 00fd  ld   $fd
              0f88 007f  ld   $7f         3962  ld('v6502_DEY'); ld('v6502_ILL'); ld('v6502_TXA'); ld('v6502_ILL') #6
              0f89 00fd  ld   $fd
              0f8a 00cd  ld   $cd
              0f8b 00fd  ld   $fd
              0f8c 00c7  ld   $c7         3963  ld('v6502_STY'); ld('v6502_STA'); ld('v6502_STX'); ld('v6502_ILL') #6
              0f8d 00c1  ld   $c1
              0f8e 00c3  ld   $c3
              0f8f 00fd  ld   $fd
              0f90 004d  ld   $4d         3964  ld('v6502_BCC'); ld('v6502_STA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $90
              0f91 00c1  ld   $c1
              0f92 00fd  ld   $fd
              0f93 00fd  ld   $fd
              0f94 00c7  ld   $c7         3965  ld('v6502_STY'); ld('v6502_STA'); ld('v6502_STX2');ld('v6502_ILL') #6
              0f95 00c1  ld   $c1
              0f96 00c5  ld   $c5
              0f97 00fd  ld   $fd
              0f98 00cf  ld   $cf         3966  ld('v6502_TYA'); ld('v6502_STA'); ld('v6502_TXS'); ld('v6502_ILL') #6
              0f99 00c1  ld   $c1
              0f9a 00e3  ld   $e3
              0f9b 00fd  ld   $fd
              0f9c 00fd  ld   $fd         3967  ld('v6502_ILL'); ld('v6502_STA'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f9d 00c1  ld   $c1
              0f9e 00fd  ld   $fd
              0f9f 00fd  ld   $fd
              0fa0 00bf  ld   $bf         3968  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6 $A0
              0fa1 00b9  ld   $b9
              0fa2 00bb  ld   $bb
              0fa3 00fd  ld   $fd
              0fa4 00bf  ld   $bf         3969  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6
              0fa5 00b9  ld   $b9
              0fa6 00bb  ld   $bb
              0fa7 00fd  ld   $fd
              0fa8 00cb  ld   $cb         3970  ld('v6502_TAY'); ld('v6502_LDA'); ld('v6502_TAX'); ld('v6502_ILL') #6
              0fa9 00b9  ld   $b9
              0faa 00c9  ld   $c9
              0fab 00fd  ld   $fd
              0fac 00bf  ld   $bf         3971  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6
              0fad 00b9  ld   $b9
              0fae 00bb  ld   $bb
              0faf 00fd  ld   $fd
              0fb0 0051  ld   $51         3972  ld('v6502_BCS'); ld('v6502_LDA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $B0
              0fb1 00b9  ld   $b9
              0fb2 00fd  ld   $fd
              0fb3 00fd  ld   $fd
              0fb4 00bf  ld   $bf         3973  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX2');ld('v6502_ILL') #6
              0fb5 00b9  ld   $b9
              0fb6 00bd  ld   $bd
              0fb7 00fd  ld   $fd
              0fb8 00d1  ld   $d1         3974  ld('v6502_CLV'); ld('v6502_LDA'); ld('v6502_TSX'); ld('v6502_ILL') #6
              0fb9 00b9  ld   $b9
              0fba 00e5  ld   $e5
              0fbb 00fd  ld   $fd
              0fbc 00bf  ld   $bf         3975  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6
              0fbd 00b9  ld   $b9
              0fbe 00bb  ld   $bb
              0fbf 00fd  ld   $fd
              0fc0 00e7  ld   $e7         3976  ld('v6502_CPY'); ld('v6502_CMP'); ld('v6502_ILL'); ld('v6502_ILL') #6 $C0
              0fc1 00e9  ld   $e9
              0fc2 00fd  ld   $fd
              0fc3 00fd  ld   $fd
              0fc4 00e7  ld   $e7         3977  ld('v6502_CPY'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fc5 00e9  ld   $e9
              0fc6 00eb  ld   $eb
              0fc7 00fd  ld   $fd
              0fc8 007b  ld   $7b         3978  ld('v6502_INY'); ld('v6502_CMP'); ld('v6502_DEX'); ld('v6502_ILL') #6
              0fc9 00e9  ld   $e9
              0fca 0077  ld   $77
              0fcb 00fd  ld   $fd
              0fcc 00e7  ld   $e7         3979  ld('v6502_CPY'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fcd 00e9  ld   $e9
              0fce 00eb  ld   $eb
              0fcf 00fd  ld   $fd
              0fd0 0055  ld   $55         3980  ld('v6502_BNE'); ld('v6502_CMP'); ld('v6502_ILL'); ld('v6502_ILL') #6 $D0
              0fd1 00e9  ld   $e9
              0fd2 00fd  ld   $fd
              0fd3 00fd  ld   $fd
              0fd4 00fd  ld   $fd         3981  ld('v6502_ILL'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fd5 00e9  ld   $e9
              0fd6 00eb  ld   $eb
              0fd7 00fd  ld   $fd
              0fd8 00ed  ld   $ed         3982  ld('v6502_CLD'); ld('v6502_CMP'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0fd9 00e9  ld   $e9
              0fda 00fd  ld   $fd
              0fdb 00fd  ld   $fd
              0fdc 00fd  ld   $fd         3983  ld('v6502_ILL'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fdd 00e9  ld   $e9
              0fde 00eb  ld   $eb
              0fdf 00fd  ld   $fd
              0fe0 00ef  ld   $ef         3984  ld('v6502_CPX'); ld('v6502_SBC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $E0
              0fe1 0029  ld   $29
              0fe2 00fd  ld   $fd
              0fe3 00fd  ld   $fd
              0fe4 00ef  ld   $ef         3985  ld('v6502_CPX'); ld('v6502_SBC'); ld('v6502_INC'); ld('v6502_ILL') #6
              0fe5 0029  ld   $29
              0fe6 00b7  ld   $b7
              0fe7 00fd  ld   $fd
              0fe8 006c  ld   $6c         3986  ld('v6502_INX'); ld('v6502_SBC'); ld('v6502_NOP'); ld('v6502_ILL') #6
              0fe9 0029  ld   $29
              0fea 0083  ld   $83
              0feb 00fd  ld   $fd
              0fec 00ef  ld   $ef         3987  ld('v6502_CPX'); ld('v6502_SBC'); ld('v6502_INC'); ld('v6502_ILL') #6
              0fed 0029  ld   $29
              0fee 00b7  ld   $b7
              0fef 00fd  ld   $fd
              0ff0 0058  ld   $58         3988  ld('v6502_BEQ'); ld('v6502_SBC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $F0
              0ff1 0029  ld   $29
              0ff2 00fd  ld   $fd
              0ff3 00fd  ld   $fd
              0ff4 00fd  ld   $fd         3989  ld('v6502_ILL'); ld('v6502_SBC'); ld('v6502_INC'); ld('v6502_ILL') #6
              0ff5 0029  ld   $29
              0ff6 00b7  ld   $b7
              0ff7 00fd  ld   $fd
              0ff8 00fb  ld   $fb         3990  ld('v6502_SED'); ld('v6502_SBC'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0ff9 0029  ld   $29
              0ffa 00fd  ld   $fd
              0ffb 00fd  ld   $fd
              0ffc 00fd  ld   $fd         3991  ld('v6502_ILL'); ld('v6502_SBC'); ld('v6502_INC')                  #6
              0ffd 0029  ld   $29
              0ffe 00b7  ld   $b7
              0fff fe00  bra  ac          3992  bra(AC)                         #6,7 Dispatch into next page
                                          3993  # --- Page boundary ---
                                          3994  align(0x100,0x100)
              1000 140e  ld   $0e,y       3995  ld(hi('v6502_next'),Y)          #8 Handy for instructions that don't clobber Y
                                          3996
                                          3997  label('v6502_ADC')
                                          3998  assert pc()&255 == 1
                                          3999  assert v6502_Cflag == 1
                                          4000  assert v6502_Vemu == 128
v6502_ADC:    1001 1525  ld   [$25],y     4001  ld([v6502_ADH],Y)               #9 Must be at page offset 1, so A=1
              1002 2127  anda [$27]       4002  anda([v6502_P])                 #10 Carry in (AC=1 because lo('v6502_ADC')=1)
              1003 8118  adda [$18]       4003  adda([v6502_A])                 #11 Sum
              1004 f020  beq  .adc14      4004  beq('.adc14')                   #12 Danger zone for dropping a carry
              1005 8d00  adda [y,x]       4005  adda([Y,X])                     #13
              1006 c228  st   [$28]       4006  st([v6502_Qz])                  #14 Z flag, don't overwrite left-hand side (A) yet
              1007 c229  st   [$29]       4007  st([v6502_Qn])                  #15 N flag
              1008 6118  xora [$18]       4008  xora([v6502_A])                 #16 V flag, (Q^A) & (B^Q) & 0x80
              1009 c218  st   [$18]       4009  st([v6502_A])                   #17
              100a 0d00  ld   [y,x]       4010  ld([Y,X])                       #18
              100b 6128  xora [$28]       4011  xora([v6502_Qz])                #19
              100c 2118  anda [$18]       4012  anda([v6502_A])                 #20
              100d 2080  anda $80         4013  anda(0x80)                      #21
              100e c21d  st   [$1d]       4014  st([v6502_Tmp])                 #22
              100f 0128  ld   [$28]       4015  ld([v6502_Qz])                  #23 Update A
              1010 c218  st   [$18]       4016  st([v6502_A])                   #24
              1011 e815  blt  .adc27      4017  bmi('.adc27')                   #25 C flag
              1012 ad00  suba [y,x]       4018  suba([Y,X])                     #26
              1013 fc17  bra  .adc29      4019  bra('.adc29')                   #27
              1014 4d00  ora  [y,x]       4020  ora([Y,X])                      #28
                                          4021  label('.adc27')
.adc27:       1015 2d00  anda [y,x]       4022  anda([Y,X])                     #27
              1016 0200  nop              4023  nop()                           #28
                                          4024  label('.adc29')
.adc29:       1017 3080  anda $80,x       4025  anda(0x80,X)                    #29
              1018 0127  ld   [$27]       4026  ld([v6502_P])                   #30 Update P
              1019 207e  anda $7e         4027  anda(~v6502_Vemu&~v6502_Cflag)  #31
              101a 4500  ora  [x]         4028  ora([X])                        #32
              101b 411d  ora  [$1d]       4029  ora([v6502_Tmp])                #33
              101c c227  st   [$27]       4030  st([v6502_P])                   #34
              101d 140e  ld   $0e,y       4031  ld(hi('v6502_next'),Y)          #35
              101e e020  jmp  y,$20       4032  jmp(Y,'v6502_next')             #36
              101f 00ed  ld   $ed         4033  ld(-38/2)                       #37
                                          4034  # Cin=1, A=$FF, B=$DD --> Result=$DD, Cout=1, V=0
                                          4035  # Cin=0, A=$00, B=$DD --> Result=$DD, Cout=0, V=0
                                          4036  label('.adc14')
.adc14:       1020 c218  st   [$18]       4037  st([v6502_A])                   #14 Special case
              1021 c228  st   [$28]       4038  st([v6502_Qz])                  #15 Z flag
              1022 c229  st   [$29]       4039  st([v6502_Qn])                  #16 N flag
              1023 0127  ld   [$27]       4040  ld([v6502_P])                   #17
              1024 207f  anda $7f         4041  anda(0x7f)                      #18 V=0, keep C
              1025 c227  st   [$27]       4042  st([v6502_P])                   #19
              1026 140e  ld   $0e,y       4043  ld(hi('v6502_next'),Y)          #20
              1027 00f4  ld   $f4         4044  ld(-24/2)                       #21
              1028 e020  jmp  y,$20       4045  jmp(Y,'v6502_next')             #22
                                          4046  #nop()                          #23 Overlap
                                          4047  #
                                          4048  label('v6502_SBC')
                                          4049  # No matter how hard we try, v6502_SBC always comes out a lot clumsier
                                          4050  # than v6502_ADC. And that one already barely fits in 38 cycles and is
                                          4051  # hard to follow. So we use a hack: transmorph our SBC into an ADC with
                                          4052  # inverted operand, and then dispatch again. Simple and effective.
v6502_SBC:    1029 1525  ld   [$25],y     4053  ld([v6502_ADH],Y)               #9,24
              102a 0d00  ld   [y,x]       4054  ld([Y,X])                       #10
              102b 60ff  xora $ff         4055  xora(255)                       #11 Invert right-hand side operand
              102c c219  st   [$19]       4056  st([v6502_BI])                  #12 Park modified operand for v6502_ADC
              102d 0019  ld   $19         4057  ld(v6502_BI&255)                #13 Address of BI
              102e d224  st   [$24],x     4058  st([v6502_ADL],X)               #14
              102f 0000  ld   $00         4059  ld(v6502_BI>>8)                 #15
              1030 c225  st   [$25]       4060  st([v6502_ADH])                 #16
              1031 0069  ld   $69         4061  ld(0x69)                        #17 ADC #$xx (Any ADC opcode will do)
              1032 c226  st   [$26]       4062  st([v6502_IR])                  #18
              1033 140e  ld   $0e,y       4063  ld(hi('v6502_check'),Y)         #20 Go back to time check before dispatch
              1034 e0f2  jmp  y,$f2       4064  jmp(Y,'v6502_check')            #20
              1035 00f5  ld   $f5         4065  ld(-22/2)                       #21
                                          4066
                                          4067  # Carry calculation table
                                          4068  #   L7 R7 C7   RX UC SC
                                          4069  #   -- -- -- | -- -- --
                                          4070  #    0  0  0 |  0  0  0
                                          4071  #    0  0  1 |  0  0  0
                                          4072  #    1  0  0 |  0  1 +1
                                          4073  #    1  0  1 |  0  0  0
                                          4074  #    0  1  0 | -1  1  0
                                          4075  #    0  1  1 | -1  0 -1
                                          4076  #    1  1  0 | -1  1  0
                                          4077  #    1  1  1 | -1  1  0
                                          4078  #   -- -- -- | -- -- --
                                          4079  #    ^  ^  ^    ^  ^  ^
                                          4080  #    |  |  |    |  |  `--- Carry of unsigned L + signed R: SC = RX + UC
                                          4081  #    |  |  |    |  `----- Carry of unsigned L + unsigned R: UC = C7 ? L7&R7 : L7|R7
                                          4082  #    |  |  |    `------- Sign extension of signed R
                                          4083  #    |  |  `--------- MSB of unextended L + R
                                          4084  #    |  `----------- MSB of right operand R
                                          4085  #    `------------- MSB of left operand L
                                          4086
                                          4087  label('v6502_CLC')
v6502_CLC:    1036 0127  ld   [$27]       4088  ld([v6502_P])                   #9
              1037 fc3b  bra  .sec12      4089  bra('.sec12')                   #10
                                          4090  label('v6502_SEC')
v6502_SEC:    1038 20fe  anda $fe         4091  anda(~v6502_Cflag)              #9,11 Overlap
              1039 0127  ld   [$27]       4092  ld([v6502_P])                   #10
              103a 4001  ora  $01         4093  ora(v6502_Cflag)                #11
                                          4094  label('.sec12')
.sec12:       103b c227  st   [$27]       4095  st([v6502_P])                   #12
              103c 0200  nop              4096  nop()                           #13
                                          4097  label('.next14')
.next14:      103d e020  jmp  y,$20       4098  jmp(Y,'v6502_next')             #14
              103e 00f8  ld   $f8         4099  ld(-16/2)                       #15
                                          4100
                                          4101  label('v6502_BPL')
v6502_BPL:    103f 0129  ld   [$29]       4102  ld([v6502_Qn])                   #9
              1040 e875  blt  .next12     4103  bmi('.next12')                  #10
              1041 f45b  bge  .branch13   4104  bpl('.branch13')                #11
                                          4105  #nop()                          #12 Overlap
                                          4106  label('v6502_BMI')
v6502_BMI:    1042 0129  ld   [$29]       4107  ld([v6502_Qn])                   #9,12
              1043 f475  bge  .next12     4108  bpl('.next12')                  #10
              1044 e85b  blt  .branch13   4109  bmi('.branch13')                #11
                                          4110  #nop()                          #12 Overlap
                                          4111  label('v6502_BVC')
v6502_BVC:    1045 0127  ld   [$27]       4112  ld([v6502_P])                   #9,12
              1046 2080  anda $80         4113  anda(v6502_Vemu)                #10
              1047 f05b  beq  .branch13   4114  beq('.branch13')                #11
              1048 ec3d  bne  .next14     4115  bne('.next14')                  #12
                                          4116  #nop()                          #13 Overlap
                                          4117  label('v6502_BVS')
v6502_BVS:    1049 0127  ld   [$27]       4118  ld([v6502_P])                   #9,13
              104a 2080  anda $80         4119  anda(v6502_Vemu)                #10
              104b ec5b  bne  .branch13   4120  bne('.branch13')                #11
              104c f03d  beq  .next14     4121  beq('.next14')                  #12
                                          4122  #nop()                          #13 Overlap
                                          4123  label('v6502_BCC')
v6502_BCC:    104d 0127  ld   [$27]       4124  ld([v6502_P])                   #9,13
              104e 2001  anda $01         4125  anda(v6502_Cflag)               #10
              104f f05b  beq  .branch13   4126  beq('.branch13')                #11
              1050 ec3d  bne  .next14     4127  bne('.next14')                  #12
                                          4128  #nop()                          #13 Overlap
                                          4129  label('v6502_BCS')
v6502_BCS:    1051 0127  ld   [$27]       4130  ld([v6502_P])                   #9,13
              1052 2001  anda $01         4131  anda(v6502_Cflag)               #10
              1053 ec5b  bne  .branch13   4132  bne('.branch13')                #11
              1054 f03d  beq  .next14     4133  beq('.next14')                  #12
                                          4134  #nop()                          #13 Overlap
                                          4135  label('v6502_BNE')
v6502_BNE:    1055 0128  ld   [$28]       4136  ld([v6502_Qz])                  #9,13
              1056 f075  beq  .next12     4137  beq('.next12')                  #10
              1057 ec5b  bne  .branch13   4138  bne('.branch13')                #11
                                          4139  #nop()                          #12 Overlap
                                          4140  label('v6502_BEQ')
v6502_BEQ:    1058 0128  ld   [$28]       4141  ld([v6502_Qz])                  #9,12
              1059 ec75  bne  .next12     4142  bne('.next12')                  #10
              105a f05b  beq  .branch13   4143  beq('.branch13')                #11
                                          4144  #nop()                          #12 Overlap
                                          4145  label('.branch13')
.branch13:    105b 0124  ld   [$24]       4146  ld([v6502_ADL])                 #13,12 PC + offset
              105c 811a  adda [$1a]       4147  adda([v6502_PCL])               #14
              105d c21a  st   [$1a]       4148  st([v6502_PCL])                 #15
              105e e862  blt  .bra0       4149  bmi('.bra0')                    #16 Carry
              105f a124  suba [$24]       4150  suba([v6502_ADL])               #17
              1060 fc64  bra  .bra1       4151  bra('.bra1')                    #18
              1061 4124  ora  [$24]       4152  ora([v6502_ADL])                #19
                                          4153  label('.bra0')
.bra0:        1062 2124  anda [$24]       4154  anda([v6502_ADL])               #18
              1063 0200  nop              4155  nop()                           #19
                                          4156  label('.bra1')
.bra1:        1064 3080  anda $80,x       4157  anda(0x80,X)                    #20
              1065 0500  ld   [x]         4158  ld([X])                         #21
              1066 8125  adda [$25]       4159  adda([v6502_ADH])               #22
              1067 811b  adda [$1b]       4160  adda([v6502_PCH])               #23
              1068 c21b  st   [$1b]       4161  st([v6502_PCH])                 #24
              1069 0200  nop              4162  nop()                           #25
              106a e020  jmp  y,$20       4163  jmp(Y,'v6502_next')             #26
              106b 00f2  ld   $f2         4164  ld(-28/2)                       #27
                                          4165
                                          4166  label('v6502_INX')
v6502_INX:    106c 0200  nop              4167  nop()                           #9
              106d 012a  ld   [$2a]       4168  ld([v6502_X])                   #10
              106e 8001  adda $01         4169  adda(1)                         #11
              106f c22a  st   [$2a]       4170  st([v6502_X])                   #12
                                          4171  label('.inx13')
.inx13:       1070 c228  st   [$28]       4172  st([v6502_Qz])                  #13 Z flag
              1071 c229  st   [$29]       4173  st([v6502_Qn])                  #14 N flag
              1072 00f7  ld   $f7         4174  ld(-18/2)                       #15
              1073 e020  jmp  y,$20       4175  jmp(Y,'v6502_next')             #16
              1074 0200  nop              4176  nop()                           #17
                                          4177
                                          4178  label('.next12')
.next12:      1075 e020  jmp  y,$20       4179  jmp(Y,'v6502_next')             #12
              1076 00f9  ld   $f9         4180  ld(-14/2)                       #13
                                          4181
                                          4182  label('v6502_DEX')
v6502_DEX:    1077 012a  ld   [$2a]       4183  ld([v6502_X])                   #9
              1078 a001  suba $01         4184  suba(1)                         #10
              1079 fc70  bra  .inx13      4185  bra('.inx13')                   #11
              107a c22a  st   [$2a]       4186  st([v6502_X])                   #12
                                          4187
                                          4188  label('v6502_INY')
v6502_INY:    107b 012b  ld   [$2b]       4189  ld([v6502_Y])                   #9
              107c 8001  adda $01         4190  adda(1)                         #10
              107d fc70  bra  .inx13      4191  bra('.inx13')                   #11
              107e c22b  st   [$2b]       4192  st([v6502_Y])                   #12
                                          4193
                                          4194  label('v6502_DEY')
v6502_DEY:    107f 012b  ld   [$2b]       4195  ld([v6502_Y])                   #9
              1080 a001  suba $01         4196  suba(1)                         #10
              1081 fc70  bra  .inx13      4197  bra('.inx13')                   #11
              1082 c22b  st   [$2b]       4198  st([v6502_Y])                   #12
                                          4199
                                          4200  label('v6502_NOP')
v6502_NOP:    1083 00fa  ld   $fa         4201  ld(-12/2)                       #9
              1084 e020  jmp  y,$20       4202  jmp(Y,'v6502_next')             #10
                                          4203  #nop()                          #11 Overlap
                                          4204  #
                                          4205  label('v6502_AND')
v6502_AND:    1085 1525  ld   [$25],y     4206  ld([v6502_ADH],Y)               #9,11
              1086 0118  ld   [$18]       4207  ld([v6502_A])                   #10
              1087 fc90  bra  .eor13      4208  bra('.eor13')                   #11
              1088 2d00  anda [y,x]       4209  anda([Y,X])                     #12
                                          4210
                                          4211  label('v6502_ORA')
v6502_ORA:    1089 1525  ld   [$25],y     4212  ld([v6502_ADH],Y)               #9
              108a 0118  ld   [$18]       4213  ld([v6502_A])                   #10
              108b fc90  bra  .eor13      4214  bra('.eor13')                   #11
                                          4215  label('v6502_EOR')
v6502_EOR:    108c 4d00  ora  [y,x]       4216  ora([Y,X])                      #12,9
                                          4217  #
                                          4218  #label('v6502_EOR')
                                          4219  #nop()                          #9 Overlap
              108d 1525  ld   [$25],y     4220  ld([v6502_ADH],Y)               #10
              108e 0118  ld   [$18]       4221  ld([v6502_A])                   #11
              108f 6d00  xora [y,x]       4222  xora([Y,X])                     #12
                                          4223  label('.eor13')
.eor13:       1090 c218  st   [$18]       4224  st([v6502_A])                   #13
              1091 c228  st   [$28]       4225  st([v6502_Qz])                  #14 Z flag
              1092 c229  st   [$29]       4226  st([v6502_Qn])                  #15 N flag
              1093 140e  ld   $0e,y       4227  ld(hi('v6502_next'),Y)          #16
              1094 00f6  ld   $f6         4228  ld(-20/2)                       #17
              1095 e020  jmp  y,$20       4229  jmp(Y,'v6502_next')             #18
                                          4230  #nop()                          #19 Overlap
                                          4231  #
                                          4232  label('v6502_JMP1')
v6502_JMP1:   1096 140d  ld   $0d,y       4233  ld(hi('v6502_jmp1'),Y)          #9,19 JMP $DDDD
              1097 e0c2  jmp  y,$c2       4234  jmp(Y,'v6502_jmp1')             #10
                                          4235  #nop()                          #11 Overlap
                                          4236  label('v6502_JMP2')
v6502_JMP2:   1098 140d  ld   $0d,y       4237  ld(hi('v6502_jmp2'),Y)          #9 JMP ($DDDD)
              1099 e0ca  jmp  y,$ca       4238  jmp(Y,'v6502_jmp2')             #10
                                          4239  #nop()                          #11 Overlap
                                          4240  label('v6502_JSR')
v6502_JSR:    109a 011c  ld   [$1c]       4241  ld([v6502_S])                   #9,11
              109b a002  suba $02         4242  suba(2)                         #10
              109c d21c  st   [$1c],x     4243  st([v6502_S],X)                 #11
              109d 1400  ld   $00,y       4244  ld(v6502_Stack>>8,Y)            #12
              109e 011b  ld   [$1b]       4245  ld([v6502_PCH])                 #13 Let ADL,ADH point to L operand
              109f c225  st   [$25]       4246  st([v6502_ADH])                 #14
              10a0 011a  ld   [$1a]       4247  ld([v6502_PCL])                 #15
              10a1 c224  st   [$24]       4248  st([v6502_ADL])                 #16
              10a2 8001  adda $01         4249  adda(1)                         #17 Push ++PC
              10a3 c21a  st   [$1a]       4250  st([v6502_PCL])                 #18 Let PCL,PCH point to H operand
              10a4 de00  st   [y,x++]     4251  st([Y,Xpp])                     #19
              10a5 f0a8  beq  $10a8       4252  beq(pc()+3)                     #20
              10a6 fca9  bra  $10a9       4253  bra(pc()+3)                     #21
              10a7 0000  ld   $00         4254  ld(0)                           #22
              10a8 0001  ld   $01         4255  ld(1)                           #22(!)
              10a9 811b  adda [$1b]       4256  adda([v6502_PCH])               #23
              10aa c21b  st   [$1b]       4257  st([v6502_PCH])                 #24
              10ab ce00  st   [y,x]       4258  st([Y,X])                       #25
              10ac 1124  ld   [$24],x     4259  ld([v6502_ADL],X)               #26 Fetch L
              10ad 1525  ld   [$25],y     4260  ld([v6502_ADH],Y)               #27
              10ae 0d00  ld   [y,x]       4261  ld([Y,X])                       #28
              10af 111a  ld   [$1a],x     4262  ld([v6502_PCL],X)               #29 Fetch H
              10b0 c21a  st   [$1a]       4263  st([v6502_PCL])                 #29
              10b1 151b  ld   [$1b],y     4264  ld([v6502_PCH],Y)               #31
              10b2 0d00  ld   [y,x]       4265  ld([Y,X])                       #32
              10b3 c21b  st   [$1b]       4266  st([v6502_PCH])                 #33
              10b4 140e  ld   $0e,y       4267  ld(hi('v6502_next'),Y)          #34
              10b5 00ed  ld   $ed         4268  ld(-38/2)                       #35
              10b6 e020  jmp  y,$20       4269  jmp(Y,'v6502_next')             #36
                                          4270  #nop()                          #37 Overlap
                                          4271  #
                                          4272  label('v6502_INC')
v6502_INC:    10b7 1411  ld   $11,y       4273  ld(hi('v6502_inc'),Y)           #9,37
              10b8 e00e  jmp  y,$0e       4274  jmp(Y,'v6502_inc')              #10
                                          4275  #nop()                          #11 Overlap
                                          4276  label('v6502_LDA')
v6502_LDA:    10b9 1411  ld   $11,y       4277  ld(hi('v6502_lda'),Y)           #9,11
              10ba e018  jmp  y,$18       4278  jmp(Y,'v6502_lda')              #10
                                          4279  #nop()                          #11 Overlap
                                          4280  label('v6502_LDX')
v6502_LDX:    10bb 1411  ld   $11,y       4281  ld(hi('v6502_ldx'),Y)           #9,11
              10bc e022  jmp  y,$22       4282  jmp(Y,'v6502_ldx')              #10
                                          4283  #nop()                          #11 Overlap
                                          4284  label('v6502_LDX2')
v6502_LDX2:   10bd 1411  ld   $11,y       4285  ld(hi('v6502_ldx2'),Y)          #9,11
              10be e02a  jmp  y,$2a       4286  jmp(Y,'v6502_ldx2')             #10
                                          4287  #nop()                          #11 Overlap
                                          4288  label('v6502_LDY')
v6502_LDY:    10bf 1411  ld   $11,y       4289  ld(hi('v6502_ldy'),Y)           #9,11
              10c0 e026  jmp  y,$26       4290  jmp(Y,'v6502_ldy')              #10
                                          4291  #nop()                          #11 Overlap
                                          4292  label('v6502_STA')
v6502_STA:    10c1 1411  ld   $11,y       4293  ld(hi('v6502_sta'),Y)           #9,11
              10c2 e034  jmp  y,$34       4294  jmp(Y,'v6502_sta')              #10
                                          4295  #nop()                          #11 Overlap
                                          4296  label('v6502_STX')
v6502_STX:    10c3 1411  ld   $11,y       4297  ld(hi('v6502_stx'),Y)           #9,11
              10c4 e03a  jmp  y,$3a       4298  jmp(Y,'v6502_stx')              #10
                                          4299  #nop()                          #11 Overlap
                                          4300  label('v6502_STX2')
v6502_STX2:   10c5 1411  ld   $11,y       4301  ld(hi('v6502_stx2'),Y)          #9,11
              10c6 e040  jmp  y,$40       4302  jmp(Y,'v6502_stx2')             #10
                                          4303  #nop()                          #11 Overlap
                                          4304  label('v6502_STY')
v6502_STY:    10c7 1411  ld   $11,y       4305  ld(hi('v6502_sty'),Y)           #9,11
              10c8 e048  jmp  y,$48       4306  jmp(Y,'v6502_sty')              #10
                                          4307  #nop()                          #11 Overlap
                                          4308  label('v6502_TAX')
v6502_TAX:    10c9 1411  ld   $11,y       4309  ld(hi('v6502_tax'),Y)           #9,11
              10ca e04d  jmp  y,$4d       4310  jmp(Y,'v6502_tax')              #10
                                          4311  #nop()                          #11 Overlap
                                          4312  label('v6502_TAY')
v6502_TAY:    10cb 1411  ld   $11,y       4313  ld(hi('v6502_tay'),Y)           #9,11
              10cc e062  jmp  y,$62       4314  jmp(Y,'v6502_tay')              #10
                                          4315  #nop()                          #11 Overlap
                                          4316  label('v6502_TXA')
v6502_TXA:    10cd 1411  ld   $11,y       4317  ld(hi('v6502_txa'),Y)           #9,11
              10ce e065  jmp  y,$65       4318  jmp(Y,'v6502_txa')              #10
                                          4319  #nop()                          #11 Overlap
                                          4320  label('v6502_TYA')
v6502_TYA:    10cf 1411  ld   $11,y       4321  ld(hi('v6502_tya'),Y)           #9,11
              10d0 e068  jmp  y,$68       4322  jmp(Y,'v6502_tya')              #10
                                          4323  #nop()                          #11 Overlap
                                          4324  label('v6502_CLV')
v6502_CLV:    10d1 1411  ld   $11,y       4325  ld(hi('v6502_clv'),Y)           #9,11
              10d2 e076  jmp  y,$76       4326  jmp(Y,'v6502_clv')              #10
                                          4327  #nop()                          #11 Overlap
                                          4328  label('v6502_RTI')
v6502_RTI:    10d3 1411  ld   $11,y       4329  ld(hi('v6502_rti'),Y)           #9,11
              10d4 e0e4  jmp  y,$e4       4330  jmp(Y,'v6502_rti')              #10
                                          4331  #nop()                          #11 Overlap
                                          4332  label('v6502_ROR')
v6502_ROR:    10d5 140d  ld   $0d,y       4333  ld(hi('v6502_ror'),Y)           #9,11
              10d6 e080  jmp  y,$80       4334  jmp(Y,'v6502_ror')              #10
                                          4335  #nop()                          #11 Overlap
                                          4336  label('v6502_LSR')
v6502_LSR:    10d7 140d  ld   $0d,y       4337  ld(hi('v6502_lsr'),Y)           #9,11
              10d8 e09a  jmp  y,$9a       4338  jmp(Y,'v6502_lsr')              #10
                                          4339  #nop()                          #11 Overlap
                                          4340  label('v6502_PHA')
v6502_PHA:    10d9 140d  ld   $0d,y       4341  ld(hi('v6502_pha'),Y)           #9,11
              10da e0df  jmp  y,$df       4342  jmp(Y,'v6502_pha')              #10
                                          4343  #nop()                          #11 Overlap
                                          4344  label('v6502_CLI')
v6502_CLI:    10db 1411  ld   $11,y       4345  ld(hi('v6502_cli'),Y)           #9,11
              10dc e06b  jmp  y,$6b       4346  jmp(Y,'v6502_cli')              #10
                                          4347  #nop()                          #11 Overlap
                                          4348  label('v6502_RTS')
v6502_RTS:    10dd 1411  ld   $11,y       4349  ld(hi('v6502_rts'),Y)           #9,11
              10de e08f  jmp  y,$8f       4350  jmp(Y,'v6502_rts')              #10
                                          4351  #nop()                          #11 Overlap
                                          4352  label('v6502_PLA')
v6502_PLA:    10df 140d  ld   $0d,y       4353  ld(hi('v6502_pla'),Y)           #9,11
              10e0 e0d4  jmp  y,$d4       4354  jmp(Y,'v6502_pla')              #10
                                          4355  #nop()                          #11 Overlap
                                          4356  label('v6502_SEI')
v6502_SEI:    10e1 1411  ld   $11,y       4357  ld(hi('v6502_sei'),Y)           #9,11
              10e2 e06e  jmp  y,$6e       4358  jmp(Y,'v6502_sei')              #10
                                          4359  #nop()                          #11 Overlap
                                          4360  label('v6502_TXS')
v6502_TXS:    10e3 1411  ld   $11,y       4361  ld(hi('v6502_txs'),Y)           #9,11
              10e4 e05e  jmp  y,$5e       4362  jmp(Y,'v6502_txs')              #10
                                          4363  #nop()                          #11 Overlap
                                          4364  label('v6502_TSX')
v6502_TSX:    10e5 1411  ld   $11,y       4365  ld(hi('v6502_tsx'),Y)           #9,11
              10e6 e054  jmp  y,$54       4366  jmp(Y,'v6502_tsx')              #10
                                          4367  #nop()                          #11 Overlap
                                          4368  label('v6502_CPY')
v6502_CPY:    10e7 1411  ld   $11,y       4369  ld(hi('v6502_cpy'),Y)           #9,11
              10e8 e0bd  jmp  y,$bd       4370  jmp(Y,'v6502_cpy')              #10
                                          4371  #nop()                          #11 Overlap
                                          4372  label('v6502_CMP')
v6502_CMP:    10e9 1411  ld   $11,y       4373  ld(hi('v6502_cmp'),Y)           #9,11
              10ea e0be  jmp  y,$be       4374  jmp(Y,'v6502_cmp')              #10
                                          4375  #nop()                          #11 Overlap
                                          4376  label('v6502_DEC')
v6502_DEC:    10eb 1411  ld   $11,y       4377  ld(hi('v6502_dec'),Y)           #9,11
              10ec e005  jmp  y,$05       4378  jmp(Y,'v6502_dec')              #10
                                          4379  #nop()                          #11 Overlap
                                          4380  label('v6502_CLD')
v6502_CLD:    10ed 1411  ld   $11,y       4381  ld(hi('v6502_cld'),Y)           #9,11
              10ee e071  jmp  y,$71       4382  jmp(Y,'v6502_cld')              #10
                                          4383  #nop()                          #11 Overlap
                                          4384  label('v6502_CPX')
v6502_CPX:    10ef 1411  ld   $11,y       4385  ld(hi('v6502_cpx'),Y)           #9,11
              10f0 e0bb  jmp  y,$bb       4386  jmp(Y,'v6502_cpx')              #10
                                          4387  #nop()                          #11 Overlap
                                          4388  label('v6502_ASL')
v6502_ASL:    10f1 140d  ld   $0d,y       4389  ld(hi('v6502_asl'),Y)           #9,11
              10f2 e0bc  jmp  y,$bc       4390  jmp(Y,'v6502_asl')              #10
                                          4391  #nop()                          #11 Overlap
                                          4392  label('v6502_PHP')
v6502_PHP:    10f3 1411  ld   $11,y       4393  ld(hi('v6502_php'),Y)           #9,11
              10f4 e0a2  jmp  y,$a2       4394  jmp(Y,'v6502_php')              #10
                                          4395  #nop()                          #11 Overlap
                                          4396  label('v6502_BIT')
v6502_BIT:    10f5 1411  ld   $11,y       4397  ld(hi('v6502_bit'),Y)           #9
              10f6 e07d  jmp  y,$7d       4398  jmp(Y,'v6502_bit')              #10
                                          4399  #nop()                          #11 Overlap
                                          4400  label('v6502_ROL')
v6502_ROL:    10f7 140d  ld   $0d,y       4401  ld(hi('v6502_rol'),Y)           #9
              10f8 e0a9  jmp  y,$a9       4402  jmp(Y,'v6502_rol')              #10
                                          4403  #nop()                          #11 Overlap
                                          4404  label('v6502_PLP')
v6502_PLP:    10f9 1411  ld   $11,y       4405  ld(hi('v6502_plp'),Y)           #9
              10fa e0d4  jmp  y,$d4       4406  jmp(Y,'v6502_plp')              #10
                                          4407  #nop()                          #11 Overlap
                                          4408  label('v6502_SED')              # Decimal mode not implemented
v6502_SED:    10fb 1411  ld   $11,y       4409  ld(hi('v6502_sed'),Y)           #9,11
              10fc e074  jmp  y,$74       4410  jmp(Y,'v6502_sed')             #10
                                          4411  #nop()                          #11 Overlap
                                          4412  label('v6502_ILL') # All illegal opcodes map to BRK, except $FF which will crash
                                          4413  label('v6502_BRK')
v6502_ILL:
v6502_BRK:    10fd 140d  ld   $0d,y       4414  ld(hi('v6502_brk'),Y)           #9
              10fe e0e7  jmp  y,$e7       4415  jmp(Y,'v6502_brk')              #10
                                          4416  #nop()                          #11 Overlap
                                          4417
                                          4418  while pc()&255 < 255:
                                          4419    nop()
                                          4420
                                          4421  # `v6502_RESUME' is the interpreter's secondary entry point for when
                                          4422  # the opcode and operands were already fetched, just before the last hPulse.
                                          4423  # It must be at $xxff, prefably somewhere in v6502's own code pages.
                                          4424  label('v6502_RESUME')
                                          4425  assert (pc()&255) == 255
v6502_RESUME: 10ff a006  suba $06         4426  suba(v6502_adjust)              #0,11 v6502 secondary entry point
                                          4427  # --- Page boundary ---
                                          4428  align(0x100,0x100)
              1100 c215  st   [$15]       4429  st([vTicks])                    #1
              1101 1124  ld   [$24],x     4430  ld([v6502_ADL],X)               #2
              1102 140f  ld   $0f,y       4431  ld(hi('v6502_execute'),Y)       #3
              1103 e126  jmp  y,[$26]     4432  jmp(Y,[v6502_IR])               #4
              1104 fcff  bra  $ff         4433  bra(255)                        #5
                                          4434
                                          4435  label('v6502_dec')
v6502_dec:    1105 1525  ld   [$25],y     4436  ld([v6502_ADH],Y)               #12
              1106 0d00  ld   [y,x]       4437  ld([Y,X])                       #13
              1107 a001  suba $01         4438  suba(1)                         #14
              1108 ce00  st   [y,x]       4439  st([Y,X])                       #15
              1109 c228  st   [$28]       4440  st([v6502_Qz])                  #16 Z flag
              110a c229  st   [$29]       4441  st([v6502_Qn])                  #17 N flag
              110b 140e  ld   $0e,y       4442  ld(hi('v6502_next'),Y)          #18
              110c 00f5  ld   $f5         4443  ld(-22/2)                       #19
              110d e020  jmp  y,$20       4444  jmp(Y,'v6502_next')             #20
                                          4445  #nop()                          #21 Overlap
                                          4446  #
                                          4447  label('v6502_inc')
v6502_inc:    110e 1525  ld   [$25],y     4448  ld([v6502_ADH],Y)               #12,22
              110f 0d00  ld   [y,x]       4449  ld([Y,X])                       #13
              1110 8001  adda $01         4450  adda(1)                         #14
              1111 ce00  st   [y,x]       4451  st([Y,X])                       #15
              1112 c228  st   [$28]       4452  st([v6502_Qz])                  #16 Z flag
              1113 c229  st   [$29]       4453  st([v6502_Qn])                  #17 N flag
              1114 140e  ld   $0e,y       4454  ld(hi('v6502_next'),Y)          #18
              1115 00f5  ld   $f5         4455  ld(-22/2)                       #19
              1116 e020  jmp  y,$20       4456  jmp(Y,'v6502_next')             #20
              1117 0200  nop              4457  nop()                           #21
                                          4458
                                          4459  label('v6502_lda')
v6502_lda:    1118 0200  nop              4460  nop()                           #12
              1119 1525  ld   [$25],y     4461  ld([v6502_ADH],Y)               #13
              111a 0d00  ld   [y,x]       4462  ld([Y,X])                       #14
              111b c218  st   [$18]       4463  st([v6502_A])                   #15
                                          4464  label('.lda16')
.lda16:       111c c228  st   [$28]       4465  st([v6502_Qz])                  #16 Z flag
              111d c229  st   [$29]       4466  st([v6502_Qn])                  #17 N flag
              111e 0200  nop              4467  nop()                           #18
              111f 140e  ld   $0e,y       4468  ld(hi('v6502_next'),Y)          #19
              1120 e020  jmp  y,$20       4469  jmp(Y,'v6502_next')             #20
              1121 00f5  ld   $f5         4470  ld(-22/2)                       #21
                                          4471
                                          4472  label('v6502_ldx')
v6502_ldx:    1122 1525  ld   [$25],y     4473  ld([v6502_ADH],Y)               #12
              1123 0d00  ld   [y,x]       4474  ld([Y,X])                       #13
              1124 fc1c  bra  .lda16      4475  bra('.lda16')                   #14
              1125 c22a  st   [$2a]       4476  st([v6502_X])                   #15
                                          4477
                                          4478  label('v6502_ldy')
v6502_ldy:    1126 1525  ld   [$25],y     4479  ld([v6502_ADH],Y)               #12
              1127 0d00  ld   [y,x]       4480  ld([Y,X])                       #13
              1128 fc1c  bra  .lda16      4481  bra('.lda16')                   #14
              1129 c22b  st   [$2b]       4482  st([v6502_Y])                   #15
                                          4483
                                          4484  label('v6502_ldx2')
v6502_ldx2:   112a 0124  ld   [$24]       4485  ld([v6502_ADL])                 #12 Special case $B6: LDX $DD,Y
              112b a12a  suba [$2a]       4486  suba([v6502_X])                 #13 Undo X offset
              112c 912b  adda [$2b],x     4487  adda([v6502_Y],X)               #14 Apply Y instead
              112d 0500  ld   [x]         4488  ld([X])                         #15
              112e c22a  st   [$2a]       4489  st([v6502_X])                   #16
              112f c228  st   [$28]       4490  st([v6502_Qz])                  #17 Z flag
              1130 c229  st   [$29]       4491  st([v6502_Qn])                  #18 N flag
              1131 140e  ld   $0e,y       4492  ld(hi('v6502_next'),Y)          #19
              1132 e020  jmp  y,$20       4493  jmp(Y,'v6502_next')             #20
              1133 00f5  ld   $f5         4494  ld(-22/2)                       #21
                                          4495
                                          4496  label('v6502_sta')
v6502_sta:    1134 1525  ld   [$25],y     4497  ld([v6502_ADH],Y)               #12
              1135 0118  ld   [$18]       4498  ld([v6502_A])                   #13
              1136 ce00  st   [y,x]       4499  st([Y,X])                       #14
              1137 140e  ld   $0e,y       4500  ld(hi('v6502_next'),Y)          #15
              1138 e020  jmp  y,$20       4501  jmp(Y,'v6502_next')             #16
              1139 00f7  ld   $f7         4502  ld(-18/2)                       #17
                                          4503
                                          4504  label('v6502_stx')
v6502_stx:    113a 1525  ld   [$25],y     4505  ld([v6502_ADH],Y)               #12
              113b 012a  ld   [$2a]       4506  ld([v6502_X])                   #13
              113c ce00  st   [y,x]       4507  st([Y,X])                       #14
              113d 140e  ld   $0e,y       4508  ld(hi('v6502_next'),Y)          #15
              113e e020  jmp  y,$20       4509  jmp(Y,'v6502_next')             #16
              113f 00f7  ld   $f7         4510  ld(-18/2)                       #17
                                          4511
                                          4512  label('v6502_stx2')
v6502_stx2:   1140 0124  ld   [$24]       4513  ld([v6502_ADL])                 #12 Special case $96: STX $DD,Y
              1141 a12a  suba [$2a]       4514  suba([v6502_X])                 #13 Undo X offset
              1142 912b  adda [$2b],x     4515  adda([v6502_Y],X)               #14 Apply Y instead
              1143 012a  ld   [$2a]       4516  ld([v6502_X])                   #15
              1144 c600  st   [x]         4517  st([X])                         #16
              1145 140e  ld   $0e,y       4518  ld(hi('v6502_next'),Y)          #17
              1146 e020  jmp  y,$20       4519  jmp(Y,'v6502_next')             #18
              1147 00f6  ld   $f6         4520  ld(-20/2)                       #19
                                          4521
                                          4522  label('v6502_sty')
v6502_sty:    1148 1525  ld   [$25],y     4523  ld([v6502_ADH],Y)               #12
              1149 012b  ld   [$2b]       4524  ld([v6502_Y])                   #13
              114a ce00  st   [y,x]       4525  st([Y,X])                       #14
              114b 140e  ld   $0e,y       4526  ld(hi('v6502_next'),Y)          #15
              114c e020  jmp  y,$20       4527  jmp(Y,'v6502_next')             #16
                                          4528  label('v6502_tax')
v6502_tax:    114d 00f7  ld   $f7         4529  ld(-18/2)                       #17,12
                                          4530  #
                                          4531  #label('v6502_tax')
                                          4532  #nop()                          #12 Overlap
              114e 0118  ld   [$18]       4533  ld([v6502_A])                   #13
              114f c22a  st   [$2a]       4534  st([v6502_X])                   #14
                                          4535  label('.tax15')
.tax15:       1150 c228  st   [$28]       4536  st([v6502_Qz])                  #15 Z flag
              1151 c229  st   [$29]       4537  st([v6502_Qn])                  #16 N flag
              1152 140e  ld   $0e,y       4538  ld(hi('v6502_next'),Y)          #17
              1153 e020  jmp  y,$20       4539  jmp(Y,'v6502_next')             #18
                                          4540  label('v6502_tsx')
v6502_tsx:    1154 00f6  ld   $f6         4541  ld(-20/2)                       #19
                                          4542  #
                                          4543  #label('v6502_tsx')
                                          4544  #nop()                          #12 Overlap
              1155 011c  ld   [$1c]       4545  ld([v6502_S])                   #13
              1156 a001  suba $01         4546  suba(1)                         #14 Shift down on export
              1157 c22a  st   [$2a]       4547  st([v6502_X])                   #15
                                          4548  label('.tsx16')
.tsx16:       1158 c228  st   [$28]       4549  st([v6502_Qz])                  #16 Z flag
              1159 c229  st   [$29]       4550  st([v6502_Qn])                  #17 N flag
              115a 0200  nop              4551  nop()                           #18
              115b 140e  ld   $0e,y       4552  ld(hi('v6502_next'),Y)          #19
              115c e020  jmp  y,$20       4553  jmp(Y,'v6502_next')             #20
              115d 00f5  ld   $f5         4554  ld(-22/2)                       #21
                                          4555
                                          4556  label('v6502_txs')
v6502_txs:    115e 012a  ld   [$2a]       4557  ld([v6502_X])                   #12
              115f 8001  adda $01         4558  adda(1)                         #13 Shift up on import
              1160 fc58  bra  .tsx16      4559  bra('.tsx16')                   #14
              1161 c21c  st   [$1c]       4560  st([v6502_S])                   #15
                                          4561
                                          4562  label('v6502_tay')
v6502_tay:    1162 0118  ld   [$18]       4563  ld([v6502_A])                   #12
              1163 fc50  bra  .tax15      4564  bra('.tax15')                   #13
              1164 c22b  st   [$2b]       4565  st([v6502_Y])                   #14
                                          4566
                                          4567  label('v6502_txa')
v6502_txa:    1165 012a  ld   [$2a]       4568  ld([v6502_X])                   #12
              1166 fc50  bra  .tax15      4569  bra('.tax15')                   #13
              1167 c218  st   [$18]       4570  st([v6502_A])                   #14
                                          4571
                                          4572  label('v6502_tya')
v6502_tya:    1168 012b  ld   [$2b]       4573  ld([v6502_Y])                   #12
              1169 fc50  bra  .tax15      4574  bra('.tax15')                   #13
              116a c218  st   [$18]       4575  st([v6502_A])                   #14
                                          4576
                                          4577  label('v6502_cli')
v6502_cli:    116b 0127  ld   [$27]       4578  ld([v6502_P])                   #12
              116c fc79  bra  .clv15      4579  bra('.clv15')                   #13
              116d 20fb  anda $fb         4580  anda(~v6502_Iflag)              #14
                                          4581
                                          4582  label('v6502_sei')
v6502_sei:    116e 0127  ld   [$27]       4583  ld([v6502_P])                   #12
              116f fc79  bra  .clv15      4584  bra('.clv15')                   #13
              1170 4004  ora  $04         4585  ora(v6502_Iflag)                #14
                                          4586
                                          4587  label('v6502_cld')
v6502_cld:    1171 0127  ld   [$27]       4588  ld([v6502_P])                   #12
              1172 fc79  bra  .clv15      4589  bra('.clv15')                   #13
              1173 20f7  anda $f7         4590  anda(~v6502_Dflag)              #14
                                          4591
                                          4592  label('v6502_sed')
v6502_sed:    1174 0127  ld   [$27]       4593  ld([v6502_P])                   #12
              1175 fc79  bra  .clv15      4594  bra('.clv15')                   #13
                                          4595  label('v6502_clv')
v6502_clv:    1176 4008  ora  $08         4596  ora(v6502_Dflag)                #14,12 Overlap
                                          4597  #
                                          4598  #label('v6502_clv')
                                          4599  #nop()                          #12
              1177 0127  ld   [$27]       4600  ld([v6502_P])                   #13
              1178 207f  anda $7f         4601  anda(~v6502_Vemu)               #14
                                          4602  label('.clv15')
.clv15:       1179 c227  st   [$27]       4603  st([v6502_P])                   #15
              117a 140e  ld   $0e,y       4604  ld(hi('v6502_next'),Y)          #16
              117b 00f6  ld   $f6         4605  ld(-20/2)                       #17
              117c e020  jmp  y,$20       4606  jmp(Y,'v6502_next')             #18
                                          4607  label('v6502_bit')
v6502_bit:    117d 0200  nop              4608  nop()                           #19,12
                                          4609  #
                                          4610  #label('v6502_bit')
                                          4611  #nop()                          #12 Overlap
              117e 1124  ld   [$24],x     4612  ld([v6502_ADL],X)               #13
              117f 1525  ld   [$25],y     4613  ld([v6502_ADH],Y)               #14
              1180 0d00  ld   [y,x]       4614  ld([Y,X])                       #15
              1181 c229  st   [$29]       4615  st([v6502_Qn])                  #16 N flag
              1182 2118  anda [$18]       4616  anda([v6502_A])                 #17 This is a reason we keep N and Z in separate bytes
              1183 c228  st   [$28]       4617  st([v6502_Qz])                  #18 Z flag
              1184 0127  ld   [$27]       4618  ld([v6502_P])                   #19
              1185 207f  anda $7f         4619  anda(~v6502_Vemu)               #20
              1186 c227  st   [$27]       4620  st([v6502_P])                   #21
              1187 0d00  ld   [y,x]       4621  ld([Y,X])                       #22
              1188 8200  adda ac          4622  adda(AC)                        #23
              1189 2080  anda $80         4623  anda(v6502_Vemu)                #24
              118a 4127  ora  [$27]       4624  ora([v6502_P])                  #25
              118b c227  st   [$27]       4625  st([v6502_P])                   #26 Update V
              118c 140e  ld   $0e,y       4626  ld(hi('v6502_next'),Y)          #27
              118d e020  jmp  y,$20       4627  jmp(Y,'v6502_next')             #28
              118e 00f1  ld   $f1         4628  ld(-30/2)                       #29
                                          4629
                                          4630  label('v6502_rts')
v6502_rts:    118f 011c  ld   [$1c]       4631  ld([v6502_S])                   #12
              1190 1200  ld   ac,x        4632  ld(AC,X)                        #13
              1191 8002  adda $02         4633  adda(2)                         #14
              1192 c21c  st   [$1c]       4634  st([v6502_S])                   #15
              1193 1400  ld   $00,y       4635  ld(0,Y)                         #16
              1194 0d00  ld   [y,x]       4636  ld([Y,X])                       #17
              1195 de00  st   [y,x++]     4637  st([Y,Xpp])                     #18
              1196 8001  adda $01         4638  adda(1)                         #19
              1197 c21a  st   [$1a]       4639  st([v6502_PCL])                 #20
              1198 f09b  beq  $119b       4640  beq(pc()+3)                     #21
              1199 fc9c  bra  $119c       4641  bra(pc()+3)                     #22
              119a 0000  ld   $00         4642  ld(0)                           #23
              119b 0001  ld   $01         4643  ld(1)                           #23(!)
              119c 8d00  adda [y,x]       4644  adda([Y,X])                     #24
              119d c21b  st   [$1b]       4645  st([v6502_PCH])                 #25
              119e 0200  nop              4646  nop()                           #26
              119f 140e  ld   $0e,y       4647  ld(hi('v6502_next'),Y)          #27
              11a0 e020  jmp  y,$20       4648  jmp(Y,'v6502_next')             #28
              11a1 00f1  ld   $f1         4649  ld(-30/2)                       #29
                                          4650
                                          4651  label('v6502_php')
v6502_php:    11a2 011c  ld   [$1c]       4652  ld([v6502_S])                   #12
              11a3 a001  suba $01         4653  suba(1)                         #13
              11a4 d21c  st   [$1c],x     4654  st([v6502_S],X)                 #14
              11a5 0127  ld   [$27]       4655  ld([v6502_P])                   #15
              11a6 20bd  anda $bd         4656  anda(~v6502_Vflag&~v6502_Zflag) #16 Keep Vemu,B,D,I,C
              11a7 f4aa  bge  $11aa       4657  bpl(pc()+3)                     #17 V to bit 6 and clear N
              11a8 fcaa  bra  $11aa       4658  bra(pc()+2)                     #18
              11a9 60c0  xora $c0         4659  xora(v6502_Vflag^v6502_Vemu)    #19
              11aa c600  st   [x]         4660  st([X])                         #19,20
              11ab 0128  ld   [$28]       4661  ld([v6502_Qz])                  #21 Z flag
              11ac f0af  beq  $11af       4662  beq(pc()+3)                     #22
              11ad fcb0  bra  $11b0       4663  bra(pc()+3)                     #23
              11ae 0000  ld   $00         4664  ld(0)                           #24
              11af 0002  ld   $02         4665  ld(v6502_Zflag)                 #24(!)
              11b0 4500  ora  [x]         4666  ora([X])                        #25
              11b1 c600  st   [x]         4667  st([X])                         #26
              11b2 0129  ld   [$29]       4668  ld([v6502_Qn])                  #27 N flag
              11b3 2080  anda $80         4669  anda(0x80)                      #28
              11b4 4500  ora  [x]         4670  ora([X])                        #29
              11b5 4020  ora  $20         4671  ora(v6502_Uflag)                #30 Unused bit
              11b6 c600  st   [x]         4672  st([X])                         #31
              11b7 0200  nop              4673  nop()                           #32
              11b8 140e  ld   $0e,y       4674  ld(hi('v6502_next'),Y)          #33
              11b9 e020  jmp  y,$20       4675  jmp(Y,'v6502_next')             #34
              11ba 00ee  ld   $ee         4676  ld(-36/2)                       #35
                                          4677
                                          4678  label('v6502_cpx')
v6502_cpx:    11bb fcc0  bra  .cmp14      4679  bra('.cmp14')                   #12
              11bc 012a  ld   [$2a]       4680  ld([v6502_X])                   #13
                                          4681
                                          4682  label('v6502_cpy')
v6502_cpy:    11bd fcc0  bra  .cmp14      4683  bra('.cmp14')                   #12
                                          4684  label('v6502_cmp')
v6502_cmp:    11be 012b  ld   [$2b]       4685  ld([v6502_Y])                   #13,12
                                          4686  #
                                          4687  #label('v6502_cmp')             #12 Overlap
                                          4688  assert v6502_Cflag == 1
              11bf 0118  ld   [$18]       4689  ld([v6502_A])                   #13
                                          4690  label('.cmp14')
.cmp14:       11c0 1525  ld   [$25],y     4691  ld([v6502_ADH],Y)               #14
              11c1 e8c7  blt  .cmp17      4692  bmi('.cmp17')                   #15 Carry?
              11c2 ad00  suba [y,x]       4693  suba([Y,X])                     #16
              11c3 c228  st   [$28]       4694  st([v6502_Qz])                  #17 Z flag
              11c4 c229  st   [$29]       4695  st([v6502_Qn])                  #18 N flag
              11c5 fccb  bra  .cmp21      4696  bra('.cmp21')                   #19
              11c6 4d00  ora  [y,x]       4697  ora([Y,X])                      #20
                                          4698  label('.cmp17')
.cmp17:       11c7 c228  st   [$28]       4699  st([v6502_Qz])                  #17 Z flag
              11c8 c229  st   [$29]       4700  st([v6502_Qn])                  #18 N flag
              11c9 2d00  anda [y,x]       4701  anda([Y,X])                     #19
              11ca 0200  nop              4702  nop()                           #20
                                          4703  label('.cmp21')
.cmp21:       11cb 6080  xora $80         4704  xora(0x80)                      #21
              11cc 3080  anda $80,x       4705  anda(0x80,X)                    #22 Move carry to bit 0
              11cd 0127  ld   [$27]       4706  ld([v6502_P])                   #23 C flag
              11ce 20fe  anda $fe         4707  anda(~1)                        #24
              11cf 4500  ora  [x]         4708  ora([X])                        #25
              11d0 c227  st   [$27]       4709  st([v6502_P])                   #26
              11d1 140e  ld   $0e,y       4710  ld(hi('v6502_next'),Y)          #27
              11d2 e020  jmp  y,$20       4711  jmp(Y,'v6502_next')             #28
              11d3 00f1  ld   $f1         4712  ld(-30/2)                       #29
                                          4713
                                          4714  label('v6502_plp')
                                          4715  assert v6502_Nflag == 128
                                          4716  assert 2*v6502_Vflag == v6502_Vemu
v6502_plp:    11d4 011c  ld   [$1c]       4717  ld([v6502_S])                   #12
              11d5 1200  ld   ac,x        4718  ld(AC,X)                        #13
              11d6 8001  adda $01         4719  adda(1)                         #14
              11d7 c21c  st   [$1c]       4720  st([v6502_S])                   #15
              11d8 0500  ld   [x]         4721  ld([X])                         #16
              11d9 c229  st   [$29]       4722  st([v6502_Qn])                  #17 N flag
              11da 2002  anda $02         4723  anda(v6502_Zflag)               #18
              11db 6002  xora $02         4724  xora(v6502_Zflag)               #19
              11dc c228  st   [$28]       4725  st([v6502_Qz])                  #20 Z flag
              11dd 0500  ld   [x]         4726  ld([X])                         #21
              11de 207f  anda $7f         4727  anda(~v6502_Vemu)               #22 V to bit 7
              11df 8040  adda $40         4728  adda(v6502_Vflag)               #23
              11e0 c227  st   [$27]       4729  st([v6502_P])                   #24 All other flags
              11e1 140e  ld   $0e,y       4730  ld(hi('v6502_next'),Y)          #25
              11e2 e020  jmp  y,$20       4731  jmp(Y,'v6502_next')             #26
              11e3 00f2  ld   $f2         4732  ld(-28/2)                       #27
                                          4733
                                          4734  label('v6502_rti')
v6502_rti:    11e4 011c  ld   [$1c]       4735  ld([v6502_S])                   #12
              11e5 1200  ld   ac,x        4736  ld(AC,X)                        #13
              11e6 8003  adda $03         4737  adda(3)                         #14
              11e7 c21c  st   [$1c]       4738  st([v6502_S])                   #15
              11e8 0500  ld   [x]         4739  ld([X])                         #16
              11e9 c229  st   [$29]       4740  st([v6502_Qn])                  #17 N flag
              11ea 2002  anda $02         4741  anda(v6502_Zflag)               #18
              11eb 6002  xora $02         4742  xora(v6502_Zflag)               #19
              11ec c228  st   [$28]       4743  st([v6502_Qz])                  #20 Z flag
              11ed 1400  ld   $00,y       4744  ld(0,Y)                         #21
              11ee 0d00  ld   [y,x]       4745  ld([Y,X])                       #22
              11ef de00  st   [y,x++]     4746  st([Y,Xpp])                     #23 Just X++
              11f0 207f  anda $7f         4747  anda(~v6502_Vemu)               #24 V to bit 7
              11f1 8040  adda $40         4748  adda(v6502_Vflag)               #25
              11f2 c227  st   [$27]       4749  st([v6502_P])                   #26 All other flags
              11f3 0d00  ld   [y,x]       4750  ld([Y,X])                       #27
              11f4 de00  st   [y,x++]     4751  st([Y,Xpp])                     #28
              11f5 c21a  st   [$1a]       4752  st([v6502_PCL])                 #29
              11f6 0d00  ld   [y,x]       4753  ld([Y,X])                       #30
              11f7 c21b  st   [$1b]       4754  st([v6502_PCH])                 #31
              11f8 0200  nop              4755  nop()                           #32
              11f9 140e  ld   $0e,y       4756  ld(hi('v6502_next'),Y)          #33
              11fa e020  jmp  y,$20       4757  jmp(Y,'v6502_next')             #34
              11fb 00ee  ld   $ee         4758  ld(-36/2)                       #35
                                          4759
                                          4760  #-----------------------------------------------------------------------
                                          4761  #
                                          4762  #  End of core
                                          4763  #
                                          4764  #-----------------------------------------------------------------------
                                          4765  disableListing()
              11fc 0200  nop              ;4 fillers
              11fd 0200  nop
              11fe 0200  nop
              11ff 0200  nop              ;+-----------------------------------+
                                          ;| Apps/Loader/SYS_Loader_v3.py      |
                                          ;+-----------------------------------+
SYS_Loader_v3:
SYS_LoaderNextByteIn_32:
              1200 0109  ld   [$09]
              1201 6127  xora [$27]
              1202 ec0f  bne  .sysNbi#19
              1203 1124  ld   [$24],x
              1204 1525  ld   [$25],y
              1205 0300  ld   in
              1206 ce00  st   [y,x]
              1207 8126  adda [$26]
              1208 c226  st   [$26]
              1209 0124  ld   [$24]
              120a 8001  adda $01
              120b c224  st   [$24]
              120c 1403  ld   $03,y
              120d e0cb  jmp  y,$cb
              120e 00f0  ld   $f0
.sysNbi#19:   120f 0116  ld   [$16]
              1210 a002  suba $02
              1211 c216  st   [$16]
              1212 00f2  ld   $f2
              1213 1403  ld   $03,y
              1214 e0cb  jmp  y,$cb
              1215 0200  nop
SYS_LoaderProcessInput_64:
              1216 1525  ld   [$25],y
              1217 0126  ld   [$26]
              1218 ec45  bne  .sysPi#19
              1219 0124  ld   [$24]
              121a b041  suba $41,x
              121b 0d00  ld   [y,x]
              121c de00  st   [y,x++]
              121d 604c  xora $4c
              121e ec49  bne  .sysPi#25
              121f 0d00  ld   [y,x]       ;Valid command
              1220 de00  st   [y,x++]
              1221 203f  anda $3f
              1222 c228  st   [$28]
              1223 0d00  ld   [y,x]
              1224 de00  st   [y,x++]
              1225 c229  st   [$29]
              1226 0d00  ld   [y,x]
              1227 de00  st   [y,x++]
              1228 c22a  st   [$2a]
              1229 0128  ld   [$28]
              122a ec4e  bne  .sysPi#37
              122b 0129  ld   [$29]       ;Execute
              122c c21a  st   [$1a]
              122d a002  suba $02
              122e c216  st   [$16]
              122f 012a  ld   [$2a]
              1230 c217  st   [$17]
              1231 c21b  st   [$1b]
              1232 0000  ld   $00         ;Reactivate sound channels?
              1233 1402  ld   $02,y
              1234 49fe  ora  [y,$fe]
              1235 49ff  ora  [y,$ff]
              1236 1403  ld   $03,y
              1237 49fe  ora  [y,$fe]
              1238 49ff  ora  [y,$ff]
              1239 1404  ld   $04,y
              123a 49fe  ora  [y,$fe]
              123b 49ff  ora  [y,$ff]
              123c ec3f  bne  $123f
              123d fc40  bra  $1240
              123e 0003  ld   $03         ;Yes
              123f 0000  ld   $00         ;No
              1240 4121  ora  [$21]
              1241 c221  st   [$21]
              1242 1403  ld   $03,y
              1243 e0cb  jmp  y,$cb
              1244 00e0  ld   $e0
.sysPi#19:    1245 0001  ld   $01         ;Wait 6 cycles
              1246 ec46  bne  $1246
              1247 a001  suba $01
              1248 0200  nop              ;Invalid checksum
.sysPi#25:    1249 0067  ld   $67         ;Unknown command
              124a c226  st   [$26]
              124b 1403  ld   $03,y
              124c e0cb  jmp  y,$cb
              124d 00f0  ld   $f0
.sysPi#37:    124e 0124  ld   [$24]       ;Loading data
              124f b001  suba $01,x
              1250 0d00  ld   [y,x]
              1251 c226  st   [$26]
              1252 1403  ld   $03,y
              1253 e0cb  jmp  y,$cb
              1254 00e9  ld   $e9
SYS_LoaderPayloadCopy_34:
              1255 0128  ld   [$28]
              1256 f063  beq  .sysCc#18
              1257 a001  suba $01
              1258 c228  st   [$28]
              1259 1124  ld   [$24],x
              125a 1525  ld   [$25],y
              125b 0d00  ld   [y,x]
              125c 1129  ld   [$29],x
              125d 152a  ld   [$2a],y
              125e ce00  st   [y,x]
              125f 0129  ld   [$29]
              1260 8001  adda $01
              1261 c229  st   [$29]
              1262 fc67  bra  .sysCc#30
.sysCc#18:    1263 1403  ld   $03,y
              1264 0004  ld   $04         ;Wait 11 cycles
              1265 ec65  bne  $1265
              1266 a001  suba $01
.sysCc#30:    1267 e0cb  jmp  y,$cb
              1268 00ef  ld   $ef         ;End of Apps/Loader/SYS_Loader_v3.py, size 105
                                          ;+-----------------------------------+
                                          ;| Apps/Loader/Loader_v3.gcl         |
                                          ;+-----------------------------------+
Loader:       1269 0002  ld   $02         ;| RAM segment address (high byte first)
              126a 0000  ld   $00         ;|
              126b 00ac  ld   $ac         ;| Length (1..256)
              126c 00cd  ld   $cd         ;0200 DEF
              126d 0043  ld   $43
              126e 00e6  ld   $e6         ;0202 SUBI
              126f 0052  ld   $52
              1270 0035  ld   $35         ;0204 BCC
              1271 0053  ld   $53         ;0205 GE
              1272 000e  ld   $0e
              1273 00e3  ld   $e3         ;0207 ADDI
              1274 0032  ld   $32
              1275 002b  ld   $2b         ;0209 STW
              1276 0030  ld   $30         ;0209 'i'
              1277 0011  ld   $11         ;020b LDWI
              1278 0000  ld   $00
              1279 0007  ld   $07
              127a 0090  ld   $90         ;020e BRA
              127b 0013  ld   $13
              127c 002b  ld   $2b         ;0210 STW
              127d 0030  ld   $30         ;0210 'i'
              127e 0011  ld   $11         ;0212 LDWI
              127f 0000  ld   $00
              1280 0008  ld   $08
              1281 002b  ld   $2b         ;0215 STW
              1282 0032  ld   $32         ;0215 'j'
              1283 0021  ld   $21         ;0217 LDW
              1284 0030  ld   $30         ;0217 'i'
              1285 00e9  ld   $e9         ;0219 LSLW
              1286 00e9  ld   $e9         ;021a LSLW
              1287 0099  ld   $99         ;021b ADDW
              1288 0030  ld   $30         ;021b 'i'
              1289 0099  ld   $99         ;021d ADDW
              128a 0032  ld   $32         ;021d 'j'
              128b 002b  ld   $2b         ;021f STW
              128c 0032  ld   $32         ;021f 'j'
              128d 0021  ld   $21         ;0221 LDW
              128e 0034  ld   $34         ;0221 'Pos'
              128f 002b  ld   $2b         ;0223 STW
              1290 0028  ld   $28
              1291 00e3  ld   $e3         ;0225 ADDI
              1292 0006  ld   $06
              1293 002b  ld   $2b         ;0227 STW
              1294 0034  ld   $34         ;0227 'Pos'
              1295 0059  ld   $59         ;0229 LDI
              1296 0005  ld   $05
              1297 002b  ld   $2b         ;022b STW
              1298 0030  ld   $30         ;022b 'i'
              1299 0021  ld   $21         ;022d LDW
              129a 0032  ld   $32         ;022d 'j'
              129b 007f  ld   $7f         ;022f LUP
              129c 0000  ld   $00
              129d 005e  ld   $5e         ;0231 ST
              129e 0026  ld   $26
              129f 00b4  ld   $b4         ;0233 SYS
              12a0 00cb  ld   $cb
              12a1 0093  ld   $93         ;0235 INC
              12a2 0032  ld   $32         ;0235 'j'
              12a3 0093  ld   $93         ;0237 INC
              12a4 0028  ld   $28
              12a5 0021  ld   $21         ;0239 LDW
              12a6 0030  ld   $30         ;0239 'i'
              12a7 00e6  ld   $e6         ;023b SUBI
              12a8 0001  ld   $01
              12a9 0035  ld   $35         ;023d BCC
              12aa 004d  ld   $4d         ;023e GT
              12ab 0029  ld   $29
              12ac 005e  ld   $5e         ;0240 ST
              12ad 0026  ld   $26
              12ae 00b4  ld   $b4         ;0242 SYS
              12af 00cb  ld   $cb
              12b0 00ff  ld   $ff         ;0244 RET
              12b1 002b  ld   $2b         ;0245 STW
              12b2 0036  ld   $36         ;0245 'PrintChar'
              12b3 0011  ld   $11         ;0247 LDWI
              12b4 00e1  ld   $e1
              12b5 0004  ld   $04
              12b6 002b  ld   $2b         ;024a STW
              12b7 0022  ld   $22
              12b8 0011  ld   $11         ;024c LDWI
              12b9 0020  ld   $20
              12ba 000f  ld   $0f
              12bb 002b  ld   $2b         ;024f STW
              12bc 0024  ld   $24
              12bd 0011  ld   $11         ;0251 LDWI
              12be 0006  ld   $06
              12bf 0050  ld   $50
              12c0 002b  ld   $2b         ;0254 STW
              12c1 0034  ld   $34         ;0254 'Pos'
              12c2 00cd  ld   $cd         ;0256 DEF
              12c3 0065  ld   $65
              12c4 0020  ld   $20         ;0258 ' '
              12c5 0052  ld   $52         ;0259 'R'
              12c6 0065  ld   $65         ;025a 'e'
              12c7 0061  ld   $61         ;025b 'a'
              12c8 0064  ld   $64         ;025c 'd'
              12c9 0079  ld   $79         ;025d 'y'
              12ca 0020  ld   $20         ;025e ' '
              12cb 0074  ld   $74         ;025f 't'
              12cc 006f  ld   $6f         ;0260 'o'
              12cd 0020  ld   $20         ;0261 ' '
              12ce 006c  ld   $6c         ;0262 'l'
              12cf 006f  ld   $6f         ;0263 'o'
              12d0 0061  ld   $61         ;0264 'a'
              12d1 0064  ld   $64         ;0265 'd'
              12d2 0000  ld   $00         ;0266 0
              12d3 002b  ld   $2b         ;0267 STW
              12d4 0038  ld   $38         ;0267 'Text'
              12d5 0021  ld   $21         ;0269 LDW
              12d6 0038  ld   $38         ;0269 'Text'
              12d7 00ad  ld   $ad         ;026b PEEK
              12d8 0035  ld   $35         ;026c BCC
              12d9 003f  ld   $3f         ;026d EQ
              12da 0073  ld   $73
              12db 0093  ld   $93         ;026f INC
              12dc 0038  ld   $38         ;026f 'Text'
              12dd 00cf  ld   $cf         ;0271 CALL
              12de 0036  ld   $36         ;0271 'PrintChar'
              12df 0090  ld   $90         ;0273 BRA
              12e0 0067  ld   $67
              12e1 0011  ld   $11         ;0275 LDWI
              12e2 0000  ld   $00
              12e3 0012  ld   $12
              12e4 002b  ld   $2b         ;0278 STW
              12e5 003a  ld   $3a         ;0278 'NextByteIn_32'
              12e6 0011  ld   $11         ;027a LDWI
              12e7 0055  ld   $55
              12e8 0012  ld   $12
              12e9 002b  ld   $2b         ;027d STW
              12ea 003c  ld   $3c         ;027d 'PayloadCopy_34'
              12eb 001a  ld   $1a         ;027f LD
              12ec 0021  ld   $21
              12ed 0082  ld   $82         ;0281 ANDI
              12ee 00f8  ld   $f8
              12ef 005e  ld   $5e         ;0283 ST
              12f0 0021  ld   $21
              12f1 0011  ld   $11         ;0285 LDWI
              12f2 00fe  ld   $fe
              12f3 0002  ld   $02
              12f4 002b  ld   $2b         ;0288 STW
              12f5 0030  ld   $30         ;0288 'i'
              12f6 0059  ld   $59         ;028a LDI
              12f7 0000  ld   $00
              12f8 00f3  ld   $f3         ;028c DOKE
              12f9 0030  ld   $30         ;028c 'i'
              12fa 0093  ld   $93         ;028e INC
              12fb fe00  bra  ac          ;+-----------------------------------+
              12fc fcfd  bra  $12fd       ;|                                   |
              12fd 1404  ld   $04,y       ;| Trampoline for page $1200 lookups |
              12fe e065  jmp  y,$65       ;|                                   |
              12ff c218  st   [$18]       ;+-----------------------------------+
              1300 0031  ld   $31         ;028e 'i'+1
              1301 00f3  ld   $f3         ;0290 DOKE
              1302 0030  ld   $30         ;0290 'i'
              1303 0093  ld   $93         ;0292 INC
              1304 0031  ld   $31         ;0292 'i'+1
              1305 00f3  ld   $f3         ;0294 DOKE
              1306 0030  ld   $30         ;0294 'i'
              1307 005e  ld   $5e         ;0296 ST
              1308 0028  ld   $28
              1309 0011  ld   $11         ;0298 LDWI
              130a 000c  ld   $0c
              130b 0059  ld   $59
              130c 002b  ld   $2b         ;029b STW
              130d 003e  ld   $3e         ;029b 'A'
              130e 0011  ld   $11         ;029d LDWI
              130f 000c  ld   $0c
              1310 005b  ld   $5b
              1311 002b  ld   $2b         ;02a0 STW
              1312 0040  ld   $40         ;02a0 'B'
              1313 0059  ld   $59         ;02a2 LDI
              1314 0067  ld   $67
              1315 005e  ld   $5e         ;02a4 ST
              1316 0026  ld   $26
              1317 0011  ld   $11         ;02a6 LDWI
              1318 000c  ld   $0c
              1319 005a  ld   $5a
              131a 002b  ld   $2b         ;02a9 STW
              131b 001a  ld   $1a
              131c 00ff  ld   $ff         ;02ab RET
              131d 005a  ld   $5a         ;| RAM segment address (high byte first)
              131e 000c  ld   $0c         ;|
              131f 0075  ld   $75         ;| Length (1..256)
              1320 0021  ld   $21         ;5a0c LDW
              1321 0040  ld   $40         ;5a0c 'B'
              1322 002b  ld   $2b         ;5a0e STW
              1323 0024  ld   $24
              1324 0059  ld   $59         ;5a10 LDI
              1325 00cf  ld   $cf
              1326 005e  ld   $5e         ;5a12 ST
              1327 0027  ld   $27
              1328 0021  ld   $21         ;5a14 LDW
              1329 003a  ld   $3a         ;5a14 'NextByteIn_32'
              132a 002b  ld   $2b         ;5a16 STW
              132b 0022  ld   $22
              132c 00b4  ld   $b4         ;5a18 SYS
              132d 00fe  ld   $fe
              132e 0059  ld   $59         ;5a1a LDI
              132f 00db  ld   $db
              1330 005e  ld   $5e         ;5a1c ST
              1331 0027  ld   $27
              1332 00b4  ld   $b4         ;5a1e SYS
              1333 00fe  ld   $fe
              1334 0059  ld   $59         ;5a20 LDI
              1335 00eb  ld   $eb
              1336 005e  ld   $5e         ;5a22 ST
              1337 0027  ld   $27
              1338 00b4  ld   $b4         ;5a24 SYS
              1339 00fe  ld   $fe
              133a 0059  ld   $59         ;5a26 LDI
              133b 00fb  ld   $fb
              133c 005e  ld   $5e         ;5a28 ST
              133d 0027  ld   $27
              133e 00b4  ld   $b4         ;5a2a SYS
              133f 00fe  ld   $fe
              1340 0021  ld   $21         ;5a2c LDW
              1341 003c  ld   $3c         ;5a2c 'PayloadCopy_34'
              1342 002b  ld   $2b         ;5a2e STW
              1343 0022  ld   $22
              1344 00b4  ld   $b4         ;5a30 SYS
              1345 00fd  ld   $fd
              1346 0059  ld   $59         ;5a32 LDI
              1347 0002  ld   $02
              1348 005e  ld   $5e         ;5a34 ST
              1349 0027  ld   $27
              134a 0021  ld   $21         ;5a36 LDW
              134b 003a  ld   $3a         ;5a36 'NextByteIn_32'
              134c 002b  ld   $2b         ;5a38 STW
              134d 0022  ld   $22
              134e 00b4  ld   $b4         ;5a3a SYS
              134f 00fe  ld   $fe
              1350 0059  ld   $59         ;5a3c LDI
              1351 0006  ld   $06
              1352 005e  ld   $5e         ;5a3e ST
              1353 0027  ld   $27
              1354 0021  ld   $21         ;5a40 LDW
              1355 003c  ld   $3c         ;5a40 'PayloadCopy_34'
              1356 002b  ld   $2b         ;5a42 STW
              1357 0022  ld   $22
              1358 00b4  ld   $b4         ;5a44 SYS
              1359 00fd  ld   $fd
              135a 0021  ld   $21         ;5a46 LDW
              135b 003a  ld   $3a         ;5a46 'NextByteIn_32'
              135c 002b  ld   $2b         ;5a48 STW
              135d 0022  ld   $22
              135e 00b4  ld   $b4         ;5a4a SYS
              135f 00fe  ld   $fe
              1360 001a  ld   $1a         ;5a4c LD
              1361 0027  ld   $27
              1362 00e3  ld   $e3         ;5a4e ADDI
              1363 0004  ld   $04
              1364 005e  ld   $5e         ;5a50 ST
              1365 0027  ld   $27
              1366 008c  ld   $8c         ;5a52 XORI
              1367 00f2  ld   $f2
              1368 0035  ld   $35         ;5a54 BCC
              1369 0072  ld   $72         ;5a55 NE
              136a 003e  ld   $3e
              136b 0059  ld   $59         ;5a57 LDI
              136c 00b9  ld   $b9
              136d 005e  ld   $5e         ;5a59 ST
              136e 0027  ld   $27
              136f 00b4  ld   $b4         ;5a5b SYS
              1370 00fe  ld   $fe
              1371 001a  ld   $1a         ;5a5d LD
              1372 0026  ld   $26
              1373 0035  ld   $35         ;5a5f BCC
              1374 0072  ld   $72         ;5a60 NE
              1375 0064  ld   $64
              1376 0059  ld   $59         ;5a62 LDI
              1377 000c  ld   $0c
              1378 0090  ld   $90         ;5a64 BRA
              1379 0066  ld   $66
              137a 0059  ld   $59         ;5a66 LDI
              137b 0003  ld   $03
              137c 00f0  ld   $f0         ;5a68 POKE
              137d 003e  ld   $3e         ;5a68 'A'
              137e 001a  ld   $1a         ;5a6a LD
              137f 003e  ld   $3e         ;5a6a 'A'
              1380 00e6  ld   $e6         ;5a6c SUBI
              1381 000b  ld   $0b
              1382 0082  ld   $82         ;5a6e ANDI
              1383 007f  ld   $7f
              1384 00e3  ld   $e3         ;5a70 ADDI
              1385 000c  ld   $0c
              1386 005e  ld   $5e         ;5a72 ST
              1387 003e  ld   $3e         ;5a72 'A'
              1388 0059  ld   $59         ;5a74 LDI
              1389 003f  ld   $3f
              138a 00f0  ld   $f0         ;5a76 POKE
              138b 003e  ld   $3e         ;5a76 'A'
              138c 0011  ld   $11         ;5a78 LDWI
              138d 0016  ld   $16
              138e 0012  ld   $12
              138f 002b  ld   $2b         ;5a7b STW
              1390 0022  ld   $22
              1391 00b4  ld   $b4         ;5a7d SYS
              1392 00ee  ld   $ee
              1393 0090  ld   $90         ;5a7f BRA
              1394 000a  ld   $0a
              1395 0000  ld   $00         ;End of Apps/Loader/Loader_v3.gcl, size 301
                                          ;+-----------------------------------+
                                          ;| Apps/TinyBASIC/TinyBASIC_v3.gcl   |
                                          ;+-----------------------------------+
TinyBASIC:    1396 0002  ld   $02         ;| RAM segment address (high byte first)
              1397 0000  ld   $00         ;|
              1398 00e7  ld   $e7         ;| Length (1..256)
              1399 0011  ld   $11         ;0200 LDWI
              139a 00df  ld   $df
              139b 0001  ld   $01
              139c 00f6  ld   $f6         ;0203 DEEK
              139d 002b  ld   $2b         ;0204 STW
              139e 0030  ld   $30         ;0204 'Pos'
              139f 00cd  ld   $cd         ;0206 DEF
              13a0 00b2  ld   $b2
              13a1 0075  ld   $75         ;0208 PUSH
              13a2 00cf  ld   $cf         ;0209 CALL
              13a3 0032  ld   $32         ;0209 'Number'
              13a4 0035  ld   $35         ;020b BCC
              13a5 0050  ld   $50         ;020c LT
              13a6 0010  ld   $10
              13a7 00cf  ld   $cf         ;020e CALL
              13a8 0034  ld   $34         ;020e 'Spaces'
              13a9 0063  ld   $63         ;0210 POP
              13aa 00ff  ld   $ff         ;0211 RET
              13ab 00cf  ld   $cf         ;0212 CALL
              13ac 0036  ld   $36         ;0212 'Keyword'
              13ad 0028  ld   $28         ;0214 '('
              13ae 0000  ld   $00         ;0215 0
              13af 0035  ld   $35         ;0216 BCC
              13b0 003f  ld   $3f         ;0217 EQ
              13b1 001b  ld   $1b
              13b2 00cf  ld   $cf         ;0219 CALL
              13b3 0038  ld   $38         ;0219 'Expression'
              13b4 0090  ld   $90         ;021b BRA
              13b5 00a7  ld   $a7
              13b6 00cf  ld   $cf         ;021d CALL
              13b7 0036  ld   $36         ;021d 'Keyword'
              13b8 0070  ld   $70         ;021f 'p'
              13b9 0065  ld   $65         ;0220 'e'
              13ba 0065  ld   $65         ;0221 'e'
              13bb 006b  ld   $6b         ;0222 'k'
              13bc 0028  ld   $28         ;0223 '('
              13bd 0000  ld   $00         ;0224 0
              13be 0035  ld   $35         ;0225 BCC
              13bf 003f  ld   $3f         ;0226 EQ
              13c0 002d  ld   $2d
              13c1 00cf  ld   $cf         ;0228 CALL
              13c2 0038  ld   $38         ;0228 'Expression'
              13c3 00ad  ld   $ad         ;022a PEEK
              13c4 002b  ld   $2b         ;022b STW
              13c5 003a  ld   $3a         ;022b 'Value'
              13c6 0090  ld   $90         ;022d BRA
              13c7 00a7  ld   $a7
              13c8 00cf  ld   $cf         ;022f CALL
              13c9 0036  ld   $36         ;022f 'Keyword'
              13ca 0072  ld   $72         ;0231 'r'
              13cb 006e  ld   $6e         ;0232 'n'
              13cc 0064  ld   $64         ;0233 'd'
              13cd 0028  ld   $28         ;0234 '('
              13ce 0000  ld   $00         ;0235 0
              13cf 0035  ld   $35         ;0236 BCC
              13d0 003f  ld   $3f         ;0237 EQ
              13d1 004b  ld   $4b
              13d2 00cf  ld   $cf         ;0239 CALL
              13d3 0038  ld   $38         ;0239 'Expression'
              13d4 0011  ld   $11         ;023b LDWI
              13d5 00a7  ld   $a7
              13d6 0004  ld   $04
              13d7 002b  ld   $2b         ;023e STW
              13d8 0022  ld   $22
              13d9 00b4  ld   $b4         ;0240 SYS
              13da 00fd  ld   $fd
              13db 0035  ld   $35         ;0242 BCC
              13dc 0050  ld   $50         ;0243 LT
              13dd 003e  ld   $3e
              13de 00cf  ld   $cf         ;0245 CALL
              13df 003c  ld   $3c         ;0245 'Divide'
              13e0 0021  ld   $21         ;0247 LDW
              13e1 003e  ld   $3e         ;0247 'i'
              13e2 002b  ld   $2b         ;0249 STW
              13e3 003a  ld   $3a         ;0249 'Value'
              13e4 0090  ld   $90         ;024b BRA
              13e5 00a7  ld   $a7
              13e6 00cf  ld   $cf         ;024d CALL
              13e7 0036  ld   $36         ;024d 'Keyword'
              13e8 0075  ld   $75         ;024f 'u'
              13e9 0073  ld   $73         ;0250 's'
              13ea 0072  ld   $72         ;0251 'r'
              13eb 0028  ld   $28         ;0252 '('
              13ec 0000  ld   $00         ;0253 0
              13ed 0035  ld   $35         ;0254 BCC
              13ee 003f  ld   $3f         ;0255 EQ
              13ef 005d  ld   $5d
              13f0 00cf  ld   $cf         ;0257 CALL
              13f1 0038  ld   $38         ;0257 'Expression'
              13f2 00cf  ld   $cf         ;0259 CALL
              13f3 003a  ld   $3a         ;0259 'Value'
              13f4 002b  ld   $2b         ;025b STW
              13f5 003a  ld   $3a         ;025b 'Value'
              13f6 0090  ld   $90         ;025d BRA
              13f7 00a7  ld   $a7
              13f8 00cf  ld   $cf         ;025f CALL
              13f9 0040  ld   $40         ;025f 'Variable'
              13fa 002b  ld   $2b         ;0261 STW
              13fb fe00  bra  ac          ;+-----------------------------------+
              13fc fcfd  bra  $13fd       ;|                                   |
              13fd 1404  ld   $04,y       ;| Trampoline for page $1300 lookups |
              13fe e065  jmp  y,$65       ;|                                   |
              13ff c218  st   [$18]       ;+-----------------------------------+
              1400 0042  ld   $42         ;0261 'k'
              1401 00cf  ld   $cf         ;0263 CALL
              1402 0034  ld   $34         ;0263 'Spaces'
              1403 00cf  ld   $cf         ;0265 CALL
              1404 0036  ld   $36         ;0265 'Keyword'
              1405 0028  ld   $28         ;0267 '('
              1406 0000  ld   $00         ;0268 0
              1407 0035  ld   $35         ;0269 BCC
              1408 003f  ld   $3f         ;026a EQ
              1409 00a0  ld   $a0
              140a 0075  ld   $75         ;026c PUSH
              140b 0021  ld   $21         ;026d LDW
              140c 0042  ld   $42         ;026d 'k'
              140d 00ec  ld   $ec         ;026f STLW
              140e 0000  ld   $00
              140f 00cf  ld   $cf         ;0271 CALL
              1410 0038  ld   $38         ;0271 'Expression'
              1411 0035  ld   $35         ;0273 BCC
              1412 0053  ld   $53         ;0274 GE
              1413 0076  ld   $76
              1414 00cf  ld   $cf         ;0276 CALL
              1415 0044  ld   $44         ;0276 'ValueError'
              1416 00ee  ld   $ee         ;0278 LDLW
              1417 0000  ld   $00
              1418 002b  ld   $2b         ;027a STW
              1419 0042  ld   $42         ;027a 'k'
              141a 0063  ld   $63         ;027c POP
              141b 001a  ld   $1a         ;027d LD
              141c 0043  ld   $43         ;027d 'k'+1
              141d 00b8  ld   $b8         ;027f SUBW
              141e 003a  ld   $3a         ;027f 'Value'
              141f 00e6  ld   $e6         ;0281 SUBI
              1420 0002  ld   $02
              1421 005e  ld   $5e         ;0283 ST
              1422 0043  ld   $43         ;0283 'k'+1
              1423 0021  ld   $21         ;0285 LDW
              1424 0046  ld   $46         ;0285 'End'
              1425 00fc  ld   $fc         ;0287 XORW
              1426 0042  ld   $42         ;0287 'k'
              1427 0035  ld   $35         ;0289 BCC
              1428 0053  ld   $53         ;028a GE
              1429 008e  ld   $8e
              142a 0021  ld   $21         ;028c LDW
              142b 0046  ld   $46         ;028c 'End'
              142c 0090  ld   $90         ;028e BRA
              142d 0092  ld   $92
              142e 0021  ld   $21         ;0290 LDW
              142f 0042  ld   $42         ;0290 'k'
              1430 00b8  ld   $b8         ;0292 SUBW
              1431 0046  ld   $46         ;0292 'End'
              1432 0035  ld   $35         ;0294 BCC
              1433 0053  ld   $53         ;0295 GE
              1434 0097  ld   $97
              1435 00cf  ld   $cf         ;0297 CALL
              1436 0044  ld   $44         ;0297 'ValueError'
              1437 00cf  ld   $cf         ;0299 CALL
              1438 0036  ld   $36         ;0299 'Keyword'
              1439 0029  ld   $29         ;029b ')'
              143a 0000  ld   $00         ;029c 0
              143b 0035  ld   $35         ;029d BCC
              143c 0072  ld   $72         ;029e NE
              143d 00a0  ld   $a0
              143e 00cf  ld   $cf         ;02a0 CALL
              143f 0048  ld   $48         ;02a0 'SyntaxError'
              1440 0021  ld   $21         ;02a2 LDW
              1441 0042  ld   $42         ;02a2 'k'
              1442 00f6  ld   $f6         ;02a4 DEEK
              1443 002b  ld   $2b         ;02a5 STW
              1444 003a  ld   $3a         ;02a5 'Value'
              1445 0063  ld   $63         ;02a7 POP
              1446 00ff  ld   $ff         ;02a8 RET
              1447 00cf  ld   $cf         ;02a9 CALL
              1448 0036  ld   $36         ;02a9 'Keyword'
              1449 0029  ld   $29         ;02ab ')'
              144a 0000  ld   $00         ;02ac 0
              144b 0035  ld   $35         ;02ad BCC
              144c 0072  ld   $72         ;02ae NE
              144d 00b0  ld   $b0
              144e 00cf  ld   $cf         ;02b0 CALL
              144f 0048  ld   $48         ;02b0 'SyntaxError'
              1450 0063  ld   $63         ;02b2 POP
              1451 00ff  ld   $ff         ;02b3 RET
              1452 002b  ld   $2b         ;02b4 STW
              1453 004a  ld   $4a         ;02b4 'Factor'
              1454 00cd  ld   $cd         ;02b6 DEF
              1455 00c8  ld   $c8
              1456 0021  ld   $21         ;02b8 LDW
              1457 001a  ld   $1a
              1458 002b  ld   $2b         ;02ba STW
              1459 004c  ld   $4c         ;02ba 'tmp'
              145a 0021  ld   $21         ;02bc LDW
              145b 004c  ld   $4c         ;02bc 'tmp'
              145c 00ad  ld   $ad         ;02be PEEK
              145d 0093  ld   $93         ;02bf INC
              145e 004c  ld   $4c         ;02bf 'tmp'
              145f 0035  ld   $35         ;02c1 BCC
              1460 003f  ld   $3f         ;02c2 EQ
              1461 00c6  ld   $c6
              1462 00cf  ld   $cf         ;02c4 CALL
              1463 004e  ld   $4e         ;02c4 'PrintChar'
              1464 0090  ld   $90         ;02c6 BRA
              1465 00ba  ld   $ba
              1466 00cf  ld   $cf         ;02c8 CALL
              1467 004c  ld   $4c         ;02c8 'tmp'
              1468 002b  ld   $2b         ;02ca STW
              1469 0050  ld   $50         ;02ca 'PrintS'
              146a 00cd  ld   $cd         ;02cc DEF
              146b 00e0  ld   $e0
              146c 001a  ld   $1a         ;02ce LD
              146d 000f  ld   $0f
              146e 008c  ld   $8c         ;02d0 XORI
              146f 0003  ld   $03
              1470 0035  ld   $35         ;02d2 BCC
              1471 0072  ld   $72         ;02d3 NE
              1472 00df  ld   $df
              1473 0021  ld   $21         ;02d5 LDW
              1474 0052  ld   $52         ;02d5 'PrintCharScreen'
              1475 002b  ld   $2b         ;02d7 STW
              1476 004e  ld   $4e         ;02d7 'PrintChar'
              1477 00cf  ld   $cf         ;02d9 CALL
              1478 0054  ld   $54         ;02d9 'Prompt'
              1479 0042  ld   $42         ;02db 'B'
              147a 0072  ld   $72         ;02dc 'r'
              147b 0065  ld   $65         ;02dd 'e'
              147c 0061  ld   $61         ;02de 'a'
              147d 006b  ld   $6b         ;02df 'k'
              147e 0000  ld   $00         ;02e0 0
              147f 00ff  ld   $ff         ;02e1 RET
              1480 002b  ld   $2b         ;02e2 STW
              1481 0056  ld   $56         ;02e2 'TestBreak'
              1482 0093  ld   $93         ;02e4 INC
              1483 001b  ld   $1b
              1484 00ff  ld   $ff         ;02e6 RET
              1485 0003  ld   $03         ;| RAM segment address (high byte first)
              1486 0000  ld   $00         ;|
              1487 00f9  ld   $f9         ;| Length (1..256)
              1488 00cd  ld   $cd         ;0300 DEF
              1489 006e  ld   $6e
              148a 002b  ld   $2b         ;0302 STW
              148b 0042  ld   $42         ;0302 'k'
              148c 00e6  ld   $e6         ;0304 SUBI
              148d 0083  ld   $83
              148e 0035  ld   $35         ;0306 BCC
              148f 004d  ld   $4d         ;0307 GT
              1490 006d  ld   $6d
              1491 001a  ld   $1a         ;0309 LD
              1492 0031  ld   $31         ;0309 'Pos'+1
              1493 00e6  ld   $e6         ;030b SUBI
              1494 0078  ld   $78
              1495 0035  ld   $35         ;030d BCC
              1496 004d  ld   $4d         ;030e GT
              1497 006d  ld   $6d
              1498 001a  ld   $1a         ;0310 LD
              1499 0030  ld   $30         ;0310 'Pos'
              149a 00e6  ld   $e6         ;0312 SUBI
              149b 009a  ld   $9a
              149c 0035  ld   $35         ;0314 BCC
              149d 0056  ld   $56         ;0315 LE
              149e 0019  ld   $19
              149f 0075  ld   $75         ;0317 PUSH
              14a0 00cf  ld   $cf         ;0318 CALL
              14a1 0058  ld   $58         ;0318 'Newline'
              14a2 0063  ld   $63         ;031a POP
              14a3 0021  ld   $21         ;031b LDW
              14a4 0042  ld   $42         ;031b 'k'
              14a5 00e6  ld   $e6         ;031d SUBI
              14a6 0052  ld   $52
              14a7 0035  ld   $35         ;031f BCC
              14a8 0053  ld   $53         ;0320 GE
              14a9 0029  ld   $29
              14aa 00e3  ld   $e3         ;0322 ADDI
              14ab 0032  ld   $32
              14ac 002b  ld   $2b         ;0324 STW
              14ad 003e  ld   $3e         ;0324 'i'
              14ae 0011  ld   $11         ;0326 LDWI
              14af 0000  ld   $00
              14b0 0007  ld   $07
              14b1 0090  ld   $90         ;0329 BRA
              14b2 002e  ld   $2e
              14b3 002b  ld   $2b         ;032b STW
              14b4 003e  ld   $3e         ;032b 'i'
              14b5 0011  ld   $11         ;032d LDWI
              14b6 0000  ld   $00
              14b7 0008  ld   $08
              14b8 002b  ld   $2b         ;0330 STW
              14b9 0042  ld   $42         ;0330 'k'
              14ba 0021  ld   $21         ;0332 LDW
              14bb 003e  ld   $3e         ;0332 'i'
              14bc 0035  ld   $35         ;0334 BCC
              14bd 0050  ld   $50         ;0335 LT
              14be 006d  ld   $6d
              14bf 00e9  ld   $e9         ;0337 LSLW
              14c0 00e9  ld   $e9         ;0338 LSLW
              14c1 0099  ld   $99         ;0339 ADDW
              14c2 003e  ld   $3e         ;0339 'i'
              14c3 0099  ld   $99         ;033b ADDW
              14c4 0042  ld   $42         ;033b 'k'
              14c5 002b  ld   $2b         ;033d STW
              14c6 0042  ld   $42         ;033d 'k'
              14c7 0011  ld   $11         ;033f LDWI
              14c8 00e1  ld   $e1
              14c9 0004  ld   $04
              14ca 002b  ld   $2b         ;0342 STW
              14cb 0022  ld   $22
              14cc 0021  ld   $21         ;0344 LDW
              14cd 002a  ld   $2a
              14ce 002b  ld   $2b         ;0346 STW
              14cf 0024  ld   $24
              14d0 0021  ld   $21         ;0348 LDW
              14d1 0030  ld   $30         ;0348 'Pos'
              14d2 002b  ld   $2b         ;034a STW
              14d3 0028  ld   $28
              14d4 00ec  ld   $ec         ;034c STLW
              14d5 00fe  ld   $fe
              14d6 00e3  ld   $e3         ;034e ADDI
              14d7 0006  ld   $06
              14d8 002b  ld   $2b         ;0350 STW
              14d9 0030  ld   $30         ;0350 'Pos'
              14da 0059  ld   $59         ;0352 LDI
              14db 0005  ld   $05
              14dc 002b  ld   $2b         ;0354 STW
              14dd 003e  ld   $3e         ;0354 'i'
              14de 0021  ld   $21         ;0356 LDW
              14df 0042  ld   $42         ;0356 'k'
              14e0 007f  ld   $7f         ;0358 LUP
              14e1 0000  ld   $00
              14e2 005e  ld   $5e         ;035a ST
              14e3 0026  ld   $26
              14e4 00b4  ld   $b4         ;035c SYS
              14e5 00cb  ld   $cb
              14e6 0093  ld   $93         ;035e INC
              14e7 0042  ld   $42         ;035e 'k'
              14e8 0093  ld   $93         ;0360 INC
              14e9 0028  ld   $28
              14ea 0021  ld   $21         ;0362 LDW
              14eb 003e  ld   $3e         ;0362 'i'
              14ec 00e6  ld   $e6         ;0364 SUBI
              14ed 0001  ld   $01
              14ee 0035  ld   $35         ;0366 BCC
              14ef 004d  ld   $4d         ;0367 GT
              14f0 0052  ld   $52
              14f1 005e  ld   $5e         ;0369 ST
              14f2 0026  ld   $26
              14f3 00b4  ld   $b4         ;036b SYS
              14f4 00cb  ld   $cb
              14f5 00ee  ld   $ee         ;036d LDLW
              14f6 00fe  ld   $fe
              14f7 00ff  ld   $ff         ;036f RET
              14f8 002b  ld   $2b         ;0370 STW
              14f9 004e  ld   $4e         ;0370 'PrintChar'
              14fa 002b  ld   $2b         ;0372 STW
              14fb fe00  bra  ac          ;+-----------------------------------+
              14fc fcfd  bra  $14fd       ;|                                   |
              14fd 1404  ld   $04,y       ;| Trampoline for page $1400 lookups |
              14fe e065  jmp  y,$65       ;|                                   |
              14ff c218  st   [$18]       ;+-----------------------------------+
              1500 0052  ld   $52         ;0372 'PrintCharScreen'
              1501 00cd  ld   $cd         ;0374 DEF
              1502 00f4  ld   $f4
              1503 0075  ld   $75         ;0376 PUSH
              1504 002b  ld   $2b         ;0377 STW
              1505 004c  ld   $4c         ;0377 'tmp'
              1506 0011  ld   $11         ;0379 LDWI
              1507 0000  ld   $00
              1508 000b  ld   $0b
              1509 002b  ld   $2b         ;037c STW
              150a 0022  ld   $22         ;037c '_sysFn'
              150b 001a  ld   $1a         ;037e LD
              150c 0021  ld   $21
              150d 00e6  ld   $e6         ;0380 SUBI
              150e 0038  ld   $38
              150f 0035  ld   $35         ;0382 BCC
              1510 0050  ld   $50         ;0383 LT
              1511 0087  ld   $87
              1512 00e6  ld   $e6         ;0385 SUBI
              1513 00ff  ld   $ff
              1514 00b4  ld   $b4         ;0387 SYS
              1515 00e6  ld   $e6
              1516 0011  ld   $11         ;0389 LDWI
              1517 00a0  ld   $a0
              1518 001b  ld   $1b
              1519 002b  ld   $2b         ;038c STW
              151a 005a  ld   $5a         ;038c 'Active'
              151b 0021  ld   $21         ;038e LDW
              151c 004c  ld   $4c         ;038e 'tmp'
              151d 00f3  ld   $f3         ;0390 DOKE
              151e 005a  ld   $5a         ;0390 'Active'
              151f 0059  ld   $59         ;0392 LDI
              1520 00a2  ld   $a2
              1521 005e  ld   $5e         ;0394 ST
              1522 005a  ld   $5a         ;0394 'Active'
              1523 0059  ld   $59         ;0396 LDI
              1524 007f  ld   $7f
              1525 00cf  ld   $cf         ;0398 CALL
              1526 004e  ld   $4e         ;0398 'PrintChar'
              1527 002b  ld   $2b         ;039a STW
              1528 0030  ld   $30         ;039a 'Pos'
              1529 001a  ld   $1a         ;039c LD
              152a 000f  ld   $0f
              152b 002b  ld   $2b         ;039e STW
              152c 004c  ld   $4c         ;039e 'tmp'
              152d 001a  ld   $1a         ;03a0 LD
              152e 000f  ld   $0f
              152f 00f0  ld   $f0         ;03a2 POKE
              1530 005a  ld   $5a         ;03a2 'Active'
              1531 00fc  ld   $fc         ;03a4 XORW
              1532 004c  ld   $4c         ;03a4 'tmp'
              1533 0035  ld   $35         ;03a6 BCC
              1534 0072  ld   $72         ;03a7 NE
              1535 00ac  ld   $ac
              1536 0021  ld   $21         ;03a9 LDW
              1537 005a  ld   $5a         ;03a9 'Active'
              1538 00ad  ld   $ad         ;03ab PEEK
              1539 0090  ld   $90         ;03ac BRA
              153a 009c  ld   $9c
              153b 0021  ld   $21         ;03ae LDW
              153c 005a  ld   $5a         ;03ae 'Active'
              153d 00ad  ld   $ad         ;03b0 PEEK
              153e 008c  ld   $8c         ;03b1 XORI
              153f 000a  ld   $0a
              1540 0035  ld   $35         ;03b3 BCC
              1541 003f  ld   $3f         ;03b4 EQ
              1542 00ef  ld   $ef
              1543 008c  ld   $8c         ;03b6 XORI
              1544 0075  ld   $75
              1545 0035  ld   $35         ;03b8 BCC
              1546 0072  ld   $72         ;03b9 NE
              1547 00d0  ld   $d0
              1548 0059  ld   $59         ;03bb LDI
              1549 0020  ld   $20
              154a 00cf  ld   $cf         ;03bd CALL
              154b 004e  ld   $4e         ;03bd 'PrintChar'
              154c 002b  ld   $2b         ;03bf STW
              154d 0030  ld   $30         ;03bf 'Pos'
              154e 001a  ld   $1a         ;03c1 LD
              154f 0030  ld   $30         ;03c1 'Pos'
              1550 00e6  ld   $e6         ;03c3 SUBI
              1551 0006  ld   $06
              1552 0035  ld   $35         ;03c5 BCC
              1553 0050  ld   $50         ;03c6 LT
              1554 00ce  ld   $ce
              1555 005e  ld   $5e         ;03c8 ST
              1556 0030  ld   $30         ;03c8 'Pos'
              1557 0021  ld   $21         ;03ca LDW
              1558 005a  ld   $5a         ;03ca 'Active'
              1559 00e6  ld   $e6         ;03cc SUBI
              155a 0001  ld   $01
              155b 002b  ld   $2b         ;03ce STW
              155c 005a  ld   $5a         ;03ce 'Active'
              155d 0090  ld   $90         ;03d0 BRA
              155e 0094  ld   $94
              155f 00e6  ld   $e6         ;03d2 SUBI
              1560 0060  ld   $60
              1561 0035  ld   $35         ;03d4 BCC
              1562 0053  ld   $53         ;03d5 GE
              1563 0094  ld   $94
              1564 001a  ld   $1a         ;03d7 LD
              1565 0030  ld   $30         ;03d7 'Pos'
              1566 00e6  ld   $e6         ;03d9 SUBI
              1567 0096  ld   $96
              1568 0035  ld   $35         ;03db BCC
              1569 0050  ld   $50         ;03dc LT
              156a 00e6  ld   $e6
              156b 0059  ld   $59         ;03de LDI
              156c 00a2  ld   $a2
              156d 005e  ld   $5e         ;03e0 ST
              156e 005a  ld   $5a         ;03e0 'Active'
              156f 0059  ld   $59         ;03e2 LDI
              1570 005c  ld   $5c
              1571 00cf  ld   $cf         ;03e4 CALL
              1572 004e  ld   $4e         ;03e4 'PrintChar'
              1573 0090  ld   $90         ;03e6 BRA
              1574 0094  ld   $94
              1575 0021  ld   $21         ;03e8 LDW
              1576 005a  ld   $5a         ;03e8 'Active'
              1577 00ad  ld   $ad         ;03ea PEEK
              1578 00cf  ld   $cf         ;03eb CALL
              1579 004e  ld   $4e         ;03eb 'PrintChar'
              157a 0093  ld   $93         ;03ed INC
              157b 005a  ld   $5a         ;03ed 'Active'
              157c 0090  ld   $90         ;03ef BRA
              157d 0094  ld   $94
              157e 0011  ld   $11         ;03f1 LDWI
              157f 00e7  ld   $e7
              1580 0006  ld   $06
              1581 00cf  ld   $cf         ;03f4 CALL
              1582 0018  ld   $18         ;03f4 vAC
              1583 0093  ld   $93         ;03f6 INC
              1584 001b  ld   $1b
              1585 00ff  ld   $ff         ;03f8 RET
              1586 0004  ld   $04         ;| RAM segment address (high byte first)
              1587 0000  ld   $00         ;|
              1588 00ec  ld   $ec         ;| Length (1..256)
              1589 002b  ld   $2b         ;0400 STW
              158a 005c  ld   $5c         ;0400 'GetLine'
              158b 00cd  ld   $cd         ;0402 DEF
              158c 00e3  ld   $e3
              158d 00cf  ld   $cf         ;0404 CALL
              158e 0034  ld   $34         ;0404 'Spaces'
              158f 00cf  ld   $cf         ;0406 CALL
              1590 0036  ld   $36         ;0406 'Keyword'
              1591 0067  ld   $67         ;0408 'g'
              1592 006f  ld   $6f         ;0409 'o'
              1593 0074  ld   $74         ;040a 't'
              1594 006f  ld   $6f         ;040b 'o'
              1595 0000  ld   $00         ;040c 0
              1596 0035  ld   $35         ;040d BCC
              1597 003f  ld   $3f         ;040e EQ
              1598 0012  ld   $12
              1599 00cf  ld   $cf         ;0410 CALL
              159a 0038  ld   $38         ;0410 'Expression'
              159b 00cf  ld   $cf         ;0412 CALL
              159c 005e  ld   $5e         ;0412 'GotoValue'
              159d 00cf  ld   $cf         ;0414 CALL
              159e 0036  ld   $36         ;0414 'Keyword'
              159f 0067  ld   $67         ;0416 'g'
              15a0 006f  ld   $6f         ;0417 'o'
              15a1 0073  ld   $73         ;0418 's'
              15a2 0075  ld   $75         ;0419 'u'
              15a3 0062  ld   $62         ;041a 'b'
              15a4 0000  ld   $00         ;041b 0
              15a5 0035  ld   $35         ;041c BCC
              15a6 003f  ld   $3f         ;041d EQ
              15a7 0026  ld   $26
              15a8 00cf  ld   $cf         ;041f CALL
              15a9 0038  ld   $38         ;041f 'Expression'
              15aa 0075  ld   $75         ;0421 PUSH
              15ab 0021  ld   $21         ;0422 LDW
              15ac 005a  ld   $5a         ;0422 'Active'
              15ad 00ec  ld   $ec         ;0424 STLW
              15ae 0000  ld   $00
              15af 00cf  ld   $cf         ;0426 CALL
              15b0 005e  ld   $5e         ;0426 'GotoValue'
              15b1 00cf  ld   $cf         ;0428 CALL
              15b2 0036  ld   $36         ;0428 'Keyword'
              15b3 0072  ld   $72         ;042a 'r'
              15b4 0065  ld   $65         ;042b 'e'
              15b5 0074  ld   $74         ;042c 't'
              15b6 0075  ld   $75         ;042d 'u'
              15b7 0072  ld   $72         ;042e 'r'
              15b8 006e  ld   $6e         ;042f 'n'
              15b9 0000  ld   $00         ;0430 0
              15ba 0035  ld   $35         ;0431 BCC
              15bb 003f  ld   $3f         ;0432 EQ
              15bc 003f  ld   $3f
              15bd 001a  ld   $1a         ;0434 LD
              15be 001c  ld   $1c
              15bf 0035  ld   $35         ;0436 BCC
              15c0 0072  ld   $72         ;0437 NE
              15c1 0039  ld   $39
              15c2 00cf  ld   $cf         ;0439 CALL
              15c3 0060  ld   $60         ;0439 'StackError'
              15c4 00f6  ld   $f6         ;043b DEEK
              15c5 002b  ld   $2b         ;043c STW
              15c6 005a  ld   $5a         ;043c 'Active'
              15c7 0063  ld   $63         ;043e POP
              15c8 00cf  ld   $cf         ;043f CALL
              15c9 0062  ld   $62         ;043f 'EndOfLine'
              15ca 00cf  ld   $cf         ;0441 CALL
              15cb 0036  ld   $36         ;0441 'Keyword'
              15cc 0069  ld   $69         ;0443 'i'
              15cd 0066  ld   $66         ;0444 'f'
              15ce 0000  ld   $00         ;0445 0
              15cf 0035  ld   $35         ;0446 BCC
              15d0 003f  ld   $3f         ;0447 EQ
              15d1 0096  ld   $96
              15d2 00cf  ld   $cf         ;0449 CALL
              15d3 0038  ld   $38         ;0449 'Expression'
              15d4 00df  ld   $df         ;044b ALLOC
              15d5 00fc  ld   $fc
              15d6 00ec  ld   $ec         ;044d STLW
              15d7 0002  ld   $02
              15d8 00cf  ld   $cf         ;044f CALL
              15d9 0064  ld   $64         ;044f 'RelOp'
              15da 0035  ld   $35         ;0451 BCC
              15db 0072  ld   $72         ;0452 NE
              15dc 0054  ld   $54
              15dd 00cf  ld   $cf         ;0454 CALL
              15de 0048  ld   $48         ;0454 'SyntaxError'
              15df 00ec  ld   $ec         ;0456 STLW
              15e0 0000  ld   $00
              15e1 00cf  ld   $cf         ;0458 CALL
              15e2 0038  ld   $38         ;0458 'Expression'
              15e3 00cf  ld   $cf         ;045a CALL
              15e4 0036  ld   $36         ;045a 'Keyword'
              15e5 0074  ld   $74         ;045c 't'
              15e6 0068  ld   $68         ;045d 'h'
              15e7 0065  ld   $65         ;045e 'e'
              15e8 006e  ld   $6e         ;045f 'n'
              15e9 0000  ld   $00         ;0460 0
              15ea 00ee  ld   $ee         ;0461 LDLW
              15eb 0002  ld   $02
              15ec 00fc  ld   $fc         ;0463 XORW
              15ed 003a  ld   $3a         ;0463 'Value'
              15ee 0035  ld   $35         ;0465 BCC
              15ef 0053  ld   $53         ;0466 GE
              15f0 006a  ld   $6a
              15f1 00ee  ld   $ee         ;0468 LDLW
              15f2 0002  ld   $02
              15f3 0090  ld   $90         ;046a BRA
              15f4 006e  ld   $6e
              15f5 00ee  ld   $ee         ;046c LDLW
              15f6 0002  ld   $02
              15f7 00b8  ld   $b8         ;046e SUBW
              15f8 003a  ld   $3a         ;046e 'Value'
              15f9 0035  ld   $35         ;0470 BCC
              15fa 0056  ld   $56         ;0471 LE
              15fb fe00  bra  ac          ;+-----------------------------------+
              15fc fcfd  bra  $15fd       ;|                                   |
              15fd 1404  ld   $04,y       ;| Trampoline for page $1500 lookups |
              15fe e065  jmp  y,$65       ;|                                   |
              15ff c218  st   [$18]       ;+-----------------------------------+
              1600 0073  ld   $73
              1601 0059  ld   $59         ;0473 LDI
              1602 0004  ld   $04
              1603 0035  ld   $35         ;0475 BCC
              1604 0053  ld   $53         ;0476 GE
              1605 0078  ld   $78
              1606 0059  ld   $59         ;0478 LDI
              1607 0001  ld   $01
              1608 0035  ld   $35         ;047a BCC
              1609 0072  ld   $72         ;047b NE
              160a 007d  ld   $7d
              160b 0059  ld   $59         ;047d LDI
              160c 0002  ld   $02
              160d 002b  ld   $2b         ;047f STW
              160e 003e  ld   $3e         ;047f 'i'
              160f 00ee  ld   $ee         ;0481 LDLW
              1610 0000  ld   $00
              1611 00f8  ld   $f8         ;0483 ANDW
              1612 003e  ld   $3e         ;0483 'i'
              1613 00df  ld   $df         ;0485 ALLOC
              1614 0004  ld   $04
              1615 0035  ld   $35         ;0487 BCC
              1616 003f  ld   $3f         ;0488 EQ
              1617 008a  ld   $8a
              1618 00cf  ld   $cf         ;048a CALL
              1619 0066  ld   $66         ;048a 'Statements'
              161a 0021  ld   $21         ;048c LDW
              161b 005a  ld   $5a         ;048c 'Active'
              161c 00ad  ld   $ad         ;048e PEEK
              161d 0035  ld   $35         ;048f BCC
              161e 003f  ld   $3f         ;0490 EQ
              161f 0094  ld   $94
              1620 0093  ld   $93         ;0492 INC
              1621 005a  ld   $5a         ;0492 'Active'
              1622 0090  ld   $90         ;0494 BRA
              1623 008a  ld   $8a
              1624 00cf  ld   $cf         ;0496 CALL
              1625 0062  ld   $62         ;0496 'EndOfLine'
              1626 00cf  ld   $cf         ;0498 CALL
              1627 0036  ld   $36         ;0498 'Keyword'
              1628 0070  ld   $70         ;049a 'p'
              1629 006f  ld   $6f         ;049b 'o'
              162a 006b  ld   $6b         ;049c 'k'
              162b 0065  ld   $65         ;049d 'e'
              162c 0000  ld   $00         ;049e 0
              162d 0035  ld   $35         ;049f BCC
              162e 003f  ld   $3f         ;04a0 EQ
              162f 00b3  ld   $b3
              1630 00cf  ld   $cf         ;04a2 CALL
              1631 0038  ld   $38         ;04a2 'Expression'
              1632 002b  ld   $2b         ;04a4 STW
              1633 0068  ld   $68         ;04a4 'Address'
              1634 00cf  ld   $cf         ;04a6 CALL
              1635 0036  ld   $36         ;04a6 'Keyword'
              1636 002c  ld   $2c         ;04a8 ','
              1637 0000  ld   $00         ;04a9 0
              1638 0035  ld   $35         ;04aa BCC
              1639 0072  ld   $72         ;04ab NE
              163a 00ad  ld   $ad
              163b 00cf  ld   $cf         ;04ad CALL
              163c 0048  ld   $48         ;04ad 'SyntaxError'
              163d 00cf  ld   $cf         ;04af CALL
              163e 0038  ld   $38         ;04af 'Expression'
              163f 00f0  ld   $f0         ;04b1 POKE
              1640 0068  ld   $68         ;04b1 'Address'
              1641 00cf  ld   $cf         ;04b3 CALL
              1642 0062  ld   $62         ;04b3 'EndOfLine'
              1643 00cf  ld   $cf         ;04b5 CALL
              1644 0036  ld   $36         ;04b5 'Keyword'
              1645 0072  ld   $72         ;04b7 'r'
              1646 0065  ld   $65         ;04b8 'e'
              1647 006d  ld   $6d         ;04b9 'm'
              1648 0000  ld   $00         ;04ba 0
              1649 0035  ld   $35         ;04bb BCC
              164a 0072  ld   $72         ;04bc NE
              164b 00c0  ld   $c0
              164c 00cf  ld   $cf         ;04be CALL
              164d 0036  ld   $36         ;04be 'Keyword'
              164e 0027  ld   $27         ;04c0 "'"
              164f 0000  ld   $00         ;04c1 0
              1650 0035  ld   $35         ;04c2 BCC
              1651 003f  ld   $3f         ;04c3 EQ
              1652 00cf  ld   $cf
              1653 0021  ld   $21         ;04c5 LDW
              1654 005a  ld   $5a         ;04c5 'Active'
              1655 00ad  ld   $ad         ;04c7 PEEK
              1656 0035  ld   $35         ;04c8 BCC
              1657 003f  ld   $3f         ;04c9 EQ
              1658 00cd  ld   $cd
              1659 0093  ld   $93         ;04cb INC
              165a 005a  ld   $5a         ;04cb 'Active'
              165b 0090  ld   $90         ;04cd BRA
              165c 00c3  ld   $c3
              165d 00cf  ld   $cf         ;04cf CALL
              165e 0062  ld   $62         ;04cf 'EndOfLine'
              165f 00cf  ld   $cf         ;04d1 CALL
              1660 0036  ld   $36         ;04d1 'Keyword'
              1661 006c  ld   $6c         ;04d3 'l'
              1662 0069  ld   $69         ;04d4 'i'
              1663 006e  ld   $6e         ;04d5 'n'
              1664 0065  ld   $65         ;04d6 'e'
              1665 0000  ld   $00         ;04d7 0
              1666 0035  ld   $35         ;04d8 BCC
              1667 003f  ld   $3f         ;04d9 EQ
              1668 00de  ld   $de
              1669 0011  ld   $11         ;04db LDWI
              166a 00a0  ld   $a0
              166b 0019  ld   $19
              166c 00cf  ld   $cf         ;04de CALL
              166d 0018  ld   $18         ;04de vAC
              166e 0011  ld   $11         ;04e0 LDWI
              166f 0000  ld   $00
              1670 0005  ld   $05
              1671 00cf  ld   $cf         ;04e3 CALL
              1672 0018  ld   $18         ;04e3 vAC
              1673 002b  ld   $2b         ;04e5 STW
              1674 0066  ld   $66         ;04e5 'Statements'
              1675 0093  ld   $93         ;04e7 INC
              1676 001b  ld   $1b
              1677 0093  ld   $93         ;04e9 INC
              1678 001b  ld   $1b
              1679 00ff  ld   $ff         ;04eb RET
              167a 0005  ld   $05         ;| RAM segment address (high byte first)
              167b 0000  ld   $00         ;|
              167c 00fd  ld   $fd         ;| Length (1..256)
              167d 00cf  ld   $cf         ;0500 CALL
              167e 0036  ld   $36         ;0500 'Keyword'
              167f 006e  ld   $6e         ;0502 'n'
              1680 0065  ld   $65         ;0503 'e'
              1681 0078  ld   $78         ;0504 'x'
              1682 0074  ld   $74         ;0505 't'
              1683 0000  ld   $00         ;0506 0
              1684 0035  ld   $35         ;0507 BCC
              1685 003f  ld   $3f         ;0508 EQ
              1686 0037  ld   $37
              1687 00cf  ld   $cf         ;050a CALL
              1688 0040  ld   $40         ;050a 'Variable'
              1689 002b  ld   $2b         ;050c STW
              168a 0068  ld   $68         ;050c 'Address'
              168b 0075  ld   $75         ;050e PUSH
              168c 0021  ld   $21         ;050f LDW
              168d 005a  ld   $5a         ;050f 'Active'
              168e 00ec  ld   $ec         ;0511 STLW
              168f 0000  ld   $00
              1690 0011  ld   $11         ;0513 LDWI
              1691 0000  ld   $00
              1692 00ff  ld   $ff
              1693 0099  ld   $99         ;0516 ADDW
              1694 0068  ld   $68         ;0516 'Address'
              1695 00f6  ld   $f6         ;0518 DEEK
              1696 0035  ld   $35         ;0519 BCC
              1697 0072  ld   $72         ;051a NE
              1698 001c  ld   $1c
              1699 00cf  ld   $cf         ;051c CALL
              169a 0044  ld   $44         ;051c 'ValueError'
              169b 002b  ld   $2b         ;051e STW
              169c 005a  ld   $5a         ;051e 'Active'
              169d 00cf  ld   $cf         ;0520 CALL
              169e 0038  ld   $38         ;0520 'Expression'
              169f 0021  ld   $21         ;0522 LDW
              16a0 0068  ld   $68         ;0522 'Address'
              16a1 00f6  ld   $f6         ;0524 DEEK
              16a2 00e3  ld   $e3         ;0525 ADDI
              16a3 0001  ld   $01
              16a4 00f3  ld   $f3         ;0527 DOKE
              16a5 0068  ld   $68         ;0527 'Address'
              16a6 00b8  ld   $b8         ;0529 SUBW
              16a7 003a  ld   $3a         ;0529 'Value'
              16a8 0035  ld   $35         ;052b BCC
              16a9 0056  ld   $56         ;052c LE
              16aa 0032  ld   $32
              16ab 00ee  ld   $ee         ;052e LDLW
              16ac 0000  ld   $00
              16ad 002b  ld   $2b         ;0530 STW
              16ae 005a  ld   $5a         ;0530 'Active'
              16af 00cf  ld   $cf         ;0532 CALL
              16b0 0034  ld   $34         ;0532 'Spaces'
              16b1 0063  ld   $63         ;0534 POP
              16b2 00cf  ld   $cf         ;0535 CALL
              16b3 0056  ld   $56         ;0535 'TestBreak'
              16b4 00cf  ld   $cf         ;0537 CALL
              16b5 0062  ld   $62         ;0537 'EndOfLine'
              16b6 00cf  ld   $cf         ;0539 CALL
              16b7 0036  ld   $36         ;0539 'Keyword'
              16b8 0066  ld   $66         ;053b 'f'
              16b9 006f  ld   $6f         ;053c 'o'
              16ba 0072  ld   $72         ;053d 'r'
              16bb 0000  ld   $00         ;053e 0
              16bc 0035  ld   $35         ;053f BCC
              16bd 003f  ld   $3f         ;0540 EQ
              16be 006c  ld   $6c
              16bf 00cf  ld   $cf         ;0542 CALL
              16c0 0040  ld   $40         ;0542 'Variable'
              16c1 002b  ld   $2b         ;0544 STW
              16c2 0068  ld   $68         ;0544 'Address'
              16c3 00cf  ld   $cf         ;0546 CALL
              16c4 0034  ld   $34         ;0546 'Spaces'
              16c5 00cf  ld   $cf         ;0548 CALL
              16c6 0036  ld   $36         ;0548 'Keyword'
              16c7 003d  ld   $3d         ;054a '='
              16c8 0000  ld   $00         ;054b 0
              16c9 0035  ld   $35         ;054c BCC
              16ca 0072  ld   $72         ;054d NE
              16cb 004f  ld   $4f
              16cc 00cf  ld   $cf         ;054f CALL
              16cd 0048  ld   $48         ;054f 'SyntaxError'
              16ce 00cf  ld   $cf         ;0551 CALL
              16cf 0038  ld   $38         ;0551 'Expression'
              16d0 00f3  ld   $f3         ;0553 DOKE
              16d1 0068  ld   $68         ;0553 'Address'
              16d2 00cf  ld   $cf         ;0555 CALL
              16d3 0036  ld   $36         ;0555 'Keyword'
              16d4 0074  ld   $74         ;0557 't'
              16d5 006f  ld   $6f         ;0558 'o'
              16d6 0000  ld   $00         ;0559 0
              16d7 0035  ld   $35         ;055a BCC
              16d8 0072  ld   $72         ;055b NE
              16d9 005d  ld   $5d
              16da 00cf  ld   $cf         ;055d CALL
              16db 0048  ld   $48         ;055d 'SyntaxError'
              16dc 0011  ld   $11         ;055f LDWI
              16dd 0000  ld   $00
              16de 00ff  ld   $ff
              16df 0099  ld   $99         ;0562 ADDW
              16e0 0068  ld   $68         ;0562 'Address'
              16e1 002b  ld   $2b         ;0564 STW
              16e2 006a  ld   $6a         ;0564 'j'
              16e3 0021  ld   $21         ;0566 LDW
              16e4 005a  ld   $5a         ;0566 'Active'
              16e5 00f3  ld   $f3         ;0568 DOKE
              16e6 006a  ld   $6a         ;0568 'j'
              16e7 00cf  ld   $cf         ;056a CALL
              16e8 0038  ld   $38         ;056a 'Expression'
              16e9 00cf  ld   $cf         ;056c CALL
              16ea 0062  ld   $62         ;056c 'EndOfLine'
              16eb 00cf  ld   $cf         ;056e CALL
              16ec 0036  ld   $36         ;056e 'Keyword'
              16ed 0061  ld   $61         ;0570 'a'
              16ee 0074  ld   $74         ;0571 't'
              16ef 0000  ld   $00         ;0572 0
              16f0 0035  ld   $35         ;0573 BCC
              16f1 003f  ld   $3f         ;0574 EQ
              16f2 009a  ld   $9a
              16f3 00cf  ld   $cf         ;0576 CALL
              16f4 0038  ld   $38         ;0576 'Expression'
              16f5 0035  ld   $35         ;0578 BCC
              16f6 0053  ld   $53         ;0579 GE
              16f7 007b  ld   $7b
              16f8 00cf  ld   $cf         ;057b CALL
              16f9 0044  ld   $44         ;057b 'ValueError'
              16fa 005e  ld   $5e         ;057d ST
              16fb fe00  bra  ac          ;+-----------------------------------+
              16fc fcfd  bra  $16fd       ;|                                   |
              16fd 1404  ld   $04,y       ;| Trampoline for page $1600 lookups |
              16fe e065  jmp  y,$65       ;|                                   |
              16ff c218  st   [$18]       ;+-----------------------------------+
              1700 0030  ld   $30         ;057d 'Pos'
              1701 00cf  ld   $cf         ;057f CALL
              1702 0036  ld   $36         ;057f 'Keyword'
              1703 002c  ld   $2c         ;0581 ','
              1704 0000  ld   $00         ;0582 0
              1705 0035  ld   $35         ;0583 BCC
              1706 003f  ld   $3f         ;0584 EQ
              1707 0098  ld   $98
              1708 00cf  ld   $cf         ;0586 CALL
              1709 0038  ld   $38         ;0586 'Expression'
              170a 0035  ld   $35         ;0588 BCC
              170b 0053  ld   $53         ;0589 GE
              170c 008b  ld   $8b
              170d 00cf  ld   $cf         ;058b CALL
              170e 0044  ld   $44         ;058b 'ValueError'
              170f 00e6  ld   $e6         ;058d SUBI
              1710 0078  ld   $78
              1711 0035  ld   $35         ;058f BCC
              1712 0050  ld   $50         ;0590 LT
              1713 0092  ld   $92
              1714 00cf  ld   $cf         ;0592 CALL
              1715 0044  ld   $44         ;0592 'ValueError'
              1716 00e3  ld   $e3         ;0594 ADDI
              1717 00f8  ld   $f8
              1718 00e9  ld   $e9         ;0596 LSLW
              1719 00ad  ld   $ad         ;0597 PEEK
              171a 005e  ld   $5e         ;0598 ST
              171b 0031  ld   $31         ;0598 'Pos'+1
              171c 00cf  ld   $cf         ;059a CALL
              171d 0062  ld   $62         ;059a 'EndOfLine'
              171e 00cf  ld   $cf         ;059c CALL
              171f 0036  ld   $36         ;059c 'Keyword'
              1720 0070  ld   $70         ;059e 'p'
              1721 0075  ld   $75         ;059f 'u'
              1722 0074  ld   $74         ;05a0 't'
              1723 0000  ld   $00         ;05a1 0
              1724 0035  ld   $35         ;05a2 BCC
              1725 003f  ld   $3f         ;05a3 EQ
              1726 00a9  ld   $a9
              1727 00cf  ld   $cf         ;05a5 CALL
              1728 0038  ld   $38         ;05a5 'Expression'
              1729 00cf  ld   $cf         ;05a7 CALL
              172a 004e  ld   $4e         ;05a7 'PrintChar'
              172b 00cf  ld   $cf         ;05a9 CALL
              172c 0062  ld   $62         ;05a9 'EndOfLine'
              172d 00cf  ld   $cf         ;05ab CALL
              172e 0036  ld   $36         ;05ab 'Keyword'
              172f 0070  ld   $70         ;05ad 'p'
              1730 0072  ld   $72         ;05ae 'r'
              1731 0069  ld   $69         ;05af 'i'
              1732 006e  ld   $6e         ;05b0 'n'
              1733 0074  ld   $74         ;05b1 't'
              1734 0000  ld   $00         ;05b2 0
              1735 0035  ld   $35         ;05b3 BCC
              1736 0072  ld   $72         ;05b4 NE
              1737 00b8  ld   $b8
              1738 00cf  ld   $cf         ;05b6 CALL
              1739 0036  ld   $36         ;05b6 'Keyword'
              173a 003f  ld   $3f         ;05b8 '?'
              173b 0000  ld   $00         ;05b9 0
              173c 0035  ld   $35         ;05ba BCC
              173d 003f  ld   $3f         ;05bb EQ
              173e 00c0  ld   $c0
              173f 0011  ld   $11         ;05bd LDWI
              1740 00a0  ld   $a0
              1741 0013  ld   $13
              1742 00cf  ld   $cf         ;05c0 CALL
              1743 0018  ld   $18         ;05c0 vAC
              1744 00cf  ld   $cf         ;05c2 CALL
              1745 0036  ld   $36         ;05c2 'Keyword'
              1746 006d  ld   $6d         ;05c4 'm'
              1747 006f  ld   $6f         ;05c5 'o'
              1748 0064  ld   $64         ;05c6 'd'
              1749 0065  ld   $65         ;05c7 'e'
              174a 0000  ld   $00         ;05c8 0
              174b 0035  ld   $35         ;05c9 BCC
              174c 003f  ld   $3f         ;05ca EQ
              174d 00de  ld   $de
              174e 00cf  ld   $cf         ;05cc CALL
              174f 0038  ld   $38         ;05cc 'Expression'
              1750 001a  ld   $1a         ;05ce LD
              1751 0021  ld   $21
              1752 00e6  ld   $e6         ;05d0 SUBI
              1753 0020  ld   $20
              1754 0035  ld   $35         ;05d2 BCC
              1755 0050  ld   $50         ;05d3 LT
              1756 00dc  ld   $dc
              1757 0011  ld   $11         ;05d5 LDWI
              1758 0000  ld   $00
              1759 000b  ld   $0b
              175a 002b  ld   $2b         ;05d8 STW
              175b 0022  ld   $22
              175c 0021  ld   $21         ;05da LDW
              175d 003a  ld   $3a         ;05da 'Value'
              175e 00b4  ld   $b4         ;05dc SYS
              175f 00e6  ld   $e6
              1760 00cf  ld   $cf         ;05de CALL
              1761 0062  ld   $62         ;05de 'EndOfLine'
              1762 00cf  ld   $cf         ;05e0 CALL
              1763 0036  ld   $36         ;05e0 'Keyword'
              1764 0073  ld   $73         ;05e2 's'
              1765 0061  ld   $61         ;05e3 'a'
              1766 0076  ld   $76         ;05e4 'v'
              1767 0065  ld   $65         ;05e5 'e'
              1768 0000  ld   $00         ;05e6 0
              1769 0035  ld   $35         ;05e7 BCC
              176a 003f  ld   $3f         ;05e8 EQ
              176b 00f6  ld   $f6
              176c 001a  ld   $1a         ;05ea LD
              176d 0021  ld   $21
              176e 00e6  ld   $e6         ;05ec SUBI
              176f 0028  ld   $28
              1770 0035  ld   $35         ;05ee BCC
              1771 0053  ld   $53         ;05ef GE
              1772 00f1  ld   $f1
              1773 00cf  ld   $cf         ;05f1 CALL
              1774 0044  ld   $44         ;05f1 'ValueError'
              1775 0011  ld   $11         ;05f3 LDWI
              1776 00a0  ld   $a0
              1777 0017  ld   $17
              1778 00cf  ld   $cf         ;05f6 CALL
              1779 0018  ld   $18         ;05f6 vAC
              177a 0011  ld   $11         ;05f8 LDWI
              177b 00a0  ld   $a0
              177c 0014  ld   $14
              177d 00cf  ld   $cf         ;05fb CALL
              177e 0018  ld   $18         ;05fb vAC
              177f 0006  ld   $06         ;| RAM segment address (high byte first)
              1780 0000  ld   $00         ;|
              1781 00fc  ld   $fc         ;| Length (1..256)
              1782 00cd  ld   $cd         ;0600 DEF
              1783 00bb  ld   $bb
              1784 0075  ld   $75         ;0602 PUSH
              1785 00cf  ld   $cf         ;0603 CALL
              1786 0032  ld   $32         ;0603 'Number'
              1787 0035  ld   $35         ;0605 BCC
              1788 0056  ld   $56         ;0606 LE
              1789 00b9  ld   $b9
              178a 0021  ld   $21         ;0608 LDW
              178b 0046  ld   $46         ;0608 'End'
              178c 002b  ld   $2b         ;060a STW
              178d 003e  ld   $3e         ;060a 'i'
              178e 002b  ld   $2b         ;060c STW
              178f 006a  ld   $6a         ;060c 'j'
              1790 00fc  ld   $fc         ;060e XORW
              1791 006c  ld   $6c         ;060e 'Begin'
              1792 0035  ld   $35         ;0610 BCC
              1793 003f  ld   $3f         ;0611 EQ
              1794 0016  ld   $16
              1795 0021  ld   $21         ;0613 LDW
              1796 0046  ld   $46         ;0613 'End'
              1797 00cf  ld   $cf         ;0615 CALL
              1798 006e  ld   $6e         ;0615 'PrevBlock'
              1799 00f6  ld   $f6         ;0617 DEEK
              179a 00b8  ld   $b8         ;0618 SUBW
              179b 003a  ld   $3a         ;0618 'Value'
              179c 0035  ld   $35         ;061a BCC
              179d 0050  ld   $50         ;061b LT
              179e 005a  ld   $5a
              179f 0021  ld   $21         ;061d LDW
              17a0 006c  ld   $6c         ;061d 'Begin'
              17a1 002b  ld   $2b         ;061f STW
              17a2 003e  ld   $3e         ;061f 'i'
              17a3 0021  ld   $21         ;0621 LDW
              17a4 003e  ld   $3e         ;0621 'i'
              17a5 00f6  ld   $f6         ;0623 DEEK
              17a6 00b8  ld   $b8         ;0624 SUBW
              17a7 003a  ld   $3a         ;0624 'Value'
              17a8 0035  ld   $35         ;0626 BCC
              17a9 0053  ld   $53         ;0627 GE
              17aa 002d  ld   $2d
              17ab 0021  ld   $21         ;0629 LDW
              17ac 003e  ld   $3e         ;0629 'i'
              17ad 00cf  ld   $cf         ;062b CALL
              17ae 0070  ld   $70         ;062b 'NextBlock'
              17af 0090  ld   $90         ;062d BRA
              17b0 001d  ld   $1d
              17b1 0035  ld   $35         ;062f BCC
              17b2 0056  ld   $56         ;0630 LE
              17b3 005a  ld   $5a
              17b4 0021  ld   $21         ;0632 LDW
              17b5 0000  ld   $00
              17b6 00fc  ld   $fc         ;0634 XORW
              17b7 0046  ld   $46         ;0634 'End'
              17b8 0035  ld   $35         ;0636 BCC
              17b9 003f  ld   $3f         ;0637 EQ
              17ba 0058  ld   $58
              17bb 0021  ld   $21         ;0639 LDW
              17bc 006a  ld   $6a         ;0639 'j'
              17bd 002b  ld   $2b         ;063b STW
              17be 0042  ld   $42         ;063b 'k'
              17bf 00cf  ld   $cf         ;063d CALL
              17c0 006e  ld   $6e         ;063d 'PrevBlock'
              17c1 002b  ld   $2b         ;063f STW
              17c2 006a  ld   $6a         ;063f 'j'
              17c3 002b  ld   $2b         ;0641 STW
              17c4 004c  ld   $4c         ;0641 'tmp'
              17c5 0021  ld   $21         ;0643 LDW
              17c6 004c  ld   $4c         ;0643 'tmp'
              17c7 00ad  ld   $ad         ;0645 PEEK
              17c8 00f0  ld   $f0         ;0646 POKE
              17c9 0042  ld   $42         ;0646 'k'
              17ca 0093  ld   $93         ;0648 INC
              17cb 004c  ld   $4c         ;0648 'tmp'
              17cc 0093  ld   $93         ;064a INC
              17cd 0042  ld   $42         ;064a 'k'
              17ce 0021  ld   $21         ;064c LDW
              17cf 004c  ld   $4c         ;064c 'tmp'
              17d0 0082  ld   $82         ;064e ANDI
              17d1 001f  ld   $1f
              17d2 0035  ld   $35         ;0650 BCC
              17d3 0072  ld   $72         ;0651 NE
              17d4 0041  ld   $41
              17d5 0021  ld   $21         ;0653 LDW
              17d6 006a  ld   $6a         ;0653 'j'
              17d7 00fc  ld   $fc         ;0655 XORW
              17d8 003e  ld   $3e         ;0655 'i'
              17d9 0035  ld   $35         ;0657 BCC
              17da 0072  ld   $72         ;0658 NE
              17db 0037  ld   $37
              17dc 0059  ld   $59         ;065a LDI
              17dd 0001  ld   $01
              17de 0035  ld   $35         ;065c BCC
              17df 003f  ld   $3f         ;065d EQ
              17e0 0070  ld   $70
              17e1 0021  ld   $21         ;065f LDW
              17e2 0000  ld   $00
              17e3 00e6  ld   $e6         ;0661 SUBI
              17e4 0080  ld   $80
              17e5 00e6  ld   $e6         ;0663 SUBI
              17e6 00c0  ld   $c0
              17e7 00fc  ld   $fc         ;0665 XORW
              17e8 0046  ld   $46         ;0665 'End'
              17e9 0035  ld   $35         ;0667 BCC
              17ea 0072  ld   $72         ;0668 NE
              17eb 006a  ld   $6a
              17ec 00cf  ld   $cf         ;066a CALL
              17ed 0048  ld   $48         ;066a 'SyntaxError'
              17ee 0021  ld   $21         ;066c LDW
              17ef 0046  ld   $46         ;066c 'End'
              17f0 00cf  ld   $cf         ;066e CALL
              17f1 0070  ld   $70         ;066e 'NextBlock'
              17f2 002b  ld   $2b         ;0670 STW
              17f3 0046  ld   $46         ;0670 'End'
              17f4 0021  ld   $21         ;0672 LDW
              17f5 005a  ld   $5a         ;0672 'Active'
              17f6 00ad  ld   $ad         ;0674 PEEK
              17f7 0035  ld   $35         ;0675 BCC
              17f8 003f  ld   $3f         ;0676 EQ
              17f9 008a  ld   $8a
              17fa 0021  ld   $21         ;0678 LDW
              17fb fe00  bra  ac          ;+-----------------------------------+
              17fc fcfd  bra  $17fd       ;|                                   |
              17fd 1404  ld   $04,y       ;| Trampoline for page $1700 lookups |
              17fe e065  jmp  y,$65       ;|                                   |
              17ff c218  st   [$18]       ;+-----------------------------------+
              1800 003a  ld   $3a         ;0678 'Value'
              1801 00f3  ld   $f3         ;067a DOKE
              1802 003e  ld   $3e         ;067a 'i'
              1803 0093  ld   $93         ;067c INC
              1804 003e  ld   $3e         ;067c 'i'
              1805 0093  ld   $93         ;067e INC
              1806 003e  ld   $3e         ;067e 'i'
              1807 0021  ld   $21         ;0680 LDW
              1808 005a  ld   $5a         ;0680 'Active'
              1809 00ad  ld   $ad         ;0682 PEEK
              180a 0093  ld   $93         ;0683 INC
              180b 005a  ld   $5a         ;0683 'Active'
              180c 00f0  ld   $f0         ;0685 POKE
              180d 003e  ld   $3e         ;0685 'i'
              180e 0035  ld   $35         ;0687 BCC
              180f 0072  ld   $72         ;0688 NE
              1810 007c  ld   $7c
              1811 0090  ld   $90         ;068a BRA
              1812 00b7  ld   $b7
              1813 0021  ld   $21         ;068c LDW
              1814 003e  ld   $3e         ;068c 'i'
              1815 002b  ld   $2b         ;068e STW
              1816 006a  ld   $6a         ;068e 'j'
              1817 00fc  ld   $fc         ;0690 XORW
              1818 0046  ld   $46         ;0690 'End'
              1819 0035  ld   $35         ;0692 BCC
              181a 003f  ld   $3f         ;0693 EQ
              181b 00b1  ld   $b1
              181c 0021  ld   $21         ;0695 LDW
              181d 006a  ld   $6a         ;0695 'j'
              181e 00cf  ld   $cf         ;0697 CALL
              181f 0070  ld   $70         ;0697 'NextBlock'
              1820 002b  ld   $2b         ;0699 STW
              1821 006a  ld   $6a         ;0699 'j'
              1822 002b  ld   $2b         ;069b STW
              1823 004c  ld   $4c         ;069b 'tmp'
              1824 0021  ld   $21         ;069d LDW
              1825 004c  ld   $4c         ;069d 'tmp'
              1826 00ad  ld   $ad         ;069f PEEK
              1827 00f0  ld   $f0         ;06a0 POKE
              1828 003e  ld   $3e         ;06a0 'i'
              1829 0093  ld   $93         ;06a2 INC
              182a 004c  ld   $4c         ;06a2 'tmp'
              182b 0093  ld   $93         ;06a4 INC
              182c 003e  ld   $3e         ;06a4 'i'
              182d 0021  ld   $21         ;06a6 LDW
              182e 004c  ld   $4c         ;06a6 'tmp'
              182f 0082  ld   $82         ;06a8 ANDI
              1830 001f  ld   $1f
              1831 0035  ld   $35         ;06aa BCC
              1832 0072  ld   $72         ;06ab NE
              1833 009b  ld   $9b
              1834 0021  ld   $21         ;06ad LDW
              1835 006a  ld   $6a         ;06ad 'j'
              1836 002b  ld   $2b         ;06af STW
              1837 003e  ld   $3e         ;06af 'i'
              1838 0090  ld   $90         ;06b1 BRA
              1839 008e  ld   $8e
              183a 0021  ld   $21         ;06b3 LDW
              183b 0046  ld   $46         ;06b3 'End'
              183c 00cf  ld   $cf         ;06b5 CALL
              183d 006e  ld   $6e         ;06b5 'PrevBlock'
              183e 002b  ld   $2b         ;06b7 STW
              183f 0046  ld   $46         ;06b7 'End'
              1840 0021  ld   $21         ;06b9 LDW
              1841 003a  ld   $3a         ;06b9 'Value'
              1842 0063  ld   $63         ;06bb POP
              1843 00ff  ld   $ff         ;06bc RET
              1844 002b  ld   $2b         ;06bd STW
              1845 0072  ld   $72         ;06bd 'Insert'
              1846 0011  ld   $11         ;06bf LDWI
              1847 003f  ld   $3f
              1848 0035  ld   $35
              1849 002b  ld   $2b         ;06c2 STW
              184a 002a  ld   $2a
              184b 0011  ld   $11         ;06c4 LDWI
              184c 00a0  ld   $a0
              184d 0018  ld   $18
              184e 002b  ld   $2b         ;06c7 STW
              184f 0058  ld   $58         ;06c7 'Newline'
              1850 00cf  ld   $cf         ;06c9 CALL
              1851 0018  ld   $18         ;06c9 vAC
              1852 00cf  ld   $cf         ;06cb CALL
              1853 0050  ld   $50         ;06cb 'PrintS'
              1854 002a  ld   $2a         ;06cd '*'
              1855 002a  ld   $2a         ;06ce '*'
              1856 002a  ld   $2a         ;06cf '*'
              1857 0020  ld   $20         ;06d0 ' '
              1858 0054  ld   $54         ;06d1 'T'
              1859 0069  ld   $69         ;06d2 'i'
              185a 006e  ld   $6e         ;06d3 'n'
              185b 0079  ld   $79         ;06d4 'y'
              185c 0020  ld   $20         ;06d5 ' '
              185d 0042  ld   $42         ;06d6 'B'
              185e 0041  ld   $41         ;06d7 'A'
              185f 0053  ld   $53         ;06d8 'S'
              1860 0049  ld   $49         ;06d9 'I'
              1861 0043  ld   $43         ;06da 'C'
              1862 0020  ld   $20         ;06db ' '
              1863 0076  ld   $76         ;06dc 'v'
              1864 0033  ld   $33         ;06dd '3'
              1865 0000  ld   $00         ;06de 0
              1866 00cf  ld   $cf         ;06df CALL
              1867 0058  ld   $58         ;06df 'Newline'
              1868 0011  ld   $11         ;06e1 LDWI
              1869 00a0  ld   $a0
              186a 0008  ld   $08
              186b 002b  ld   $2b         ;06e4 STW
              186c 001a  ld   $1a
              186d 00ff  ld   $ff         ;06e6 RET
              186e 0059  ld   $59         ;06e7 LDI
              186f 0000  ld   $00
              1870 00f0  ld   $f0         ;06e9 POKE
              1871 005a  ld   $5a         ;06e9 'Active'
              1872 0059  ld   $59         ;06eb LDI
              1873 0020  ld   $20
              1874 00cf  ld   $cf         ;06ed CALL
              1875 004e  ld   $4e         ;06ed 'PrintChar'
              1876 00cf  ld   $cf         ;06ef CALL
              1877 0058  ld   $58         ;06ef 'Newline'
              1878 0059  ld   $59         ;06f1 LDI
              1879 00a2  ld   $a2
              187a 005e  ld   $5e         ;06f3 ST
              187b 005a  ld   $5a         ;06f3 'Active'
              187c 00cf  ld   $cf         ;06f5 CALL
              187d 0034  ld   $34         ;06f5 'Spaces'
              187e 0021  ld   $21         ;06f7 LDW
              187f 005a  ld   $5a         ;06f7 'Active'
              1880 00ad  ld   $ad         ;06f9 PEEK
              1881 0063  ld   $63         ;06fa POP
              1882 00ff  ld   $ff         ;06fb RET
              1883 0008  ld   $08         ;| RAM segment address (high byte first)
              1884 00a0  ld   $a0         ;|
              1885 005f  ld   $5f         ;| Length (1..256)
              1886 00cd  ld   $cd         ;08a0 DEF
              1887 00b6  ld   $b6
              1888 0088  ld   $88         ;08a2 ORI
              1889 001f  ld   $1f
              188a 00e3  ld   $e3         ;08a4 ADDI
              188b 0001  ld   $01
              188c 002b  ld   $2b         ;08a6 STW
              188d 004c  ld   $4c         ;08a6 'tmp'
              188e 0035  ld   $35         ;08a8 BCC
              188f 0056  ld   $56         ;08a9 LE
              1890 00b3  ld   $b3
              1891 0082  ld   $82         ;08ab ANDI
              1892 00e0  ld   $e0
              1893 0035  ld   $35         ;08ad BCC
              1894 0072  ld   $72         ;08ae NE
              1895 00b3  ld   $b3
              1896 0021  ld   $21         ;08b0 LDW
              1897 004c  ld   $4c         ;08b0 'tmp'
              1898 00e3  ld   $e3         ;08b2 ADDI
              1899 00a0  ld   $a0
              189a 00ff  ld   $ff         ;08b4 RET
              189b 0021  ld   $21         ;08b5 LDW
              189c 004c  ld   $4c         ;08b5 'tmp'
              189d 00ff  ld   $ff         ;08b7 RET
              189e 002b  ld   $2b         ;08b8 STW
              189f 0070  ld   $70         ;08b8 'NextBlock'
              18a0 00cd  ld   $cd         ;08ba DEF
              18a1 00ce  ld   $ce
              18a2 00e6  ld   $e6         ;08bc SUBI
              18a3 0020  ld   $20
              18a4 002b  ld   $2b         ;08be STW
              18a5 004c  ld   $4c         ;08be 'tmp'
              18a6 0035  ld   $35         ;08c0 BCC
              18a7 0050  ld   $50         ;08c1 LT
              18a8 00cb  ld   $cb
              18a9 0082  ld   $82         ;08c3 ANDI
              18aa 0060  ld   $60
              18ab 0035  ld   $35         ;08c5 BCC
              18ac 0072  ld   $72         ;08c6 NE
              18ad 00cb  ld   $cb
              18ae 0021  ld   $21         ;08c8 LDW
              18af 004c  ld   $4c         ;08c8 'tmp'
              18b0 00e6  ld   $e6         ;08ca SUBI
              18b1 00a0  ld   $a0
              18b2 00ff  ld   $ff         ;08cc RET
              18b3 0021  ld   $21         ;08cd LDW
              18b4 004c  ld   $4c         ;08cd 'tmp'
              18b5 00ff  ld   $ff         ;08cf RET
              18b6 002b  ld   $2b         ;08d0 STW
              18b7 006e  ld   $6e         ;08d0 'PrevBlock'
              18b8 00cd  ld   $cd         ;08d2 DEF
              18b9 00fa  ld   $fa
              18ba 0021  ld   $21         ;08d4 LDW
              18bb 006c  ld   $6c         ;08d4 'Begin'
              18bc 002b  ld   $2b         ;08d6 STW
              18bd 003e  ld   $3e         ;08d6 'i'
              18be 00fc  ld   $fc         ;08d8 XORW
              18bf 0046  ld   $46         ;08d8 'End'
              18c0 0035  ld   $35         ;08da BCC
              18c1 003f  ld   $3f         ;08db EQ
              18c2 00f3  ld   $f3
              18c3 0021  ld   $21         ;08dd LDW
              18c4 003e  ld   $3e         ;08dd 'i'
              18c5 00f6  ld   $f6         ;08df DEEK
              18c6 00fc  ld   $fc         ;08e0 XORW
              18c7 003a  ld   $3a         ;08e0 'Value'
              18c8 0035  ld   $35         ;08e2 BCC
              18c9 0072  ld   $72         ;08e3 NE
              18ca 00ed  ld   $ed
              18cb 0021  ld   $21         ;08e5 LDW
              18cc 003e  ld   $3e         ;08e5 'i'
              18cd 00e3  ld   $e3         ;08e7 ADDI
              18ce 0002  ld   $02
              18cf 002b  ld   $2b         ;08e9 STW
              18d0 005a  ld   $5a         ;08e9 'Active'
              18d1 00cf  ld   $cf         ;08eb CALL
              18d2 0056  ld   $56         ;08eb 'TestBreak'
              18d3 00cf  ld   $cf         ;08ed CALL
              18d4 0066  ld   $66         ;08ed 'Statements'
              18d5 0021  ld   $21         ;08ef LDW
              18d6 003e  ld   $3e         ;08ef 'i'
              18d7 00cf  ld   $cf         ;08f1 CALL
              18d8 0070  ld   $70         ;08f1 'NextBlock'
              18d9 0090  ld   $90         ;08f3 BRA
              18da 00d4  ld   $d4
              18db 00cf  ld   $cf         ;08f5 CALL
              18dc 0054  ld   $54         ;08f5 'Prompt'
              18dd 004c  ld   $4c         ;08f7 'L'
              18de 0069  ld   $69         ;08f8 'i'
              18df 006e  ld   $6e         ;08f9 'n'
              18e0 0065  ld   $65         ;08fa 'e'
              18e1 0000  ld   $00         ;08fb 0
              18e2 0093  ld   $93         ;08fc INC
              18e3 001b  ld   $1b
              18e4 00ff  ld   $ff         ;08fe RET
              18e5 0009  ld   $09         ;| RAM segment address (high byte first)
              18e6 00a0  ld   $a0         ;|
              18e7 005e  ld   $5e         ;| Length (1..256)
              18e8 002b  ld   $2b         ;09a0 STW
              18e9 005e  ld   $5e         ;09a0 'GotoValue'
              18ea 00cd  ld   $cd         ;09a2 DEF
              18eb 00de  ld   $de
              18ec 0075  ld   $75         ;09a4 PUSH
              18ed 0035  ld   $35         ;09a5 BCC
              18ee 0053  ld   $53         ;09a6 GE
              18ef 00b0  ld   $b0
              18f0 0059  ld   $59         ;09a8 LDI
              18f1 0000  ld   $00
              18f2 00b8  ld   $b8         ;09aa SUBW
              18f3 003a  ld   $3a         ;09aa 'Value'
              18f4 002b  ld   $2b         ;09ac STW
              18f5 003a  ld   $3a         ;09ac 'Value'
              18f6 0059  ld   $59         ;09ae LDI
              18f7 002d  ld   $2d
              18f8 00cf  ld   $cf         ;09b0 CALL
              18f9 004e  ld   $4e         ;09b0 'PrintChar'
              18fa 0059  ld   $59         ;09b2 LDI
              18fb fe00  bra  ac          ;+-----------------------------------+
              18fc fcfd  bra  $18fd       ;|                                   |
              18fd 1404  ld   $04,y       ;| Trampoline for page $1800 lookups |
              18fe e065  jmp  y,$65       ;|                                   |
              18ff c218  st   [$18]       ;+-----------------------------------+
              1900 0000  ld   $00
              1901 002b  ld   $2b         ;09b4 STW
              1902 0042  ld   $42         ;09b4 'k'
              1903 0021  ld   $21         ;09b6 LDW
              1904 003a  ld   $3a         ;09b6 'Value'
              1905 0035  ld   $35         ;09b8 BCC
              1906 0053  ld   $53         ;09b9 GE
              1907 00c4  ld   $c4
              1908 0011  ld   $11         ;09bb LDWI
              1909 00d0  ld   $d0
              190a 008a  ld   $8a
              190b 0099  ld   $99         ;09be ADDW
              190c 003a  ld   $3a         ;09be 'Value'
              190d 002b  ld   $2b         ;09c0 STW
              190e 003a  ld   $3a         ;09c0 'Value'
              190f 0059  ld   $59         ;09c2 LDI
              1910 0003  ld   $03
              1911 002b  ld   $2b         ;09c4 STW
              1912 0042  ld   $42         ;09c4 'k'
              1913 0011  ld   $11         ;09c6 LDWI
              1914 0010  ld   $10
              1915 0027  ld   $27
              1916 00cf  ld   $cf         ;09c9 CALL
              1917 0074  ld   $74         ;09c9 'PrintDigit'
              1918 0011  ld   $11         ;09cb LDWI
              1919 00e8  ld   $e8
              191a 0003  ld   $03
              191b 00cf  ld   $cf         ;09ce CALL
              191c 0074  ld   $74         ;09ce 'PrintDigit'
              191d 0059  ld   $59         ;09d0 LDI
              191e 0064  ld   $64
              191f 00cf  ld   $cf         ;09d2 CALL
              1920 0074  ld   $74         ;09d2 'PrintDigit'
              1921 0059  ld   $59         ;09d4 LDI
              1922 000a  ld   $0a
              1923 00cf  ld   $cf         ;09d6 CALL
              1924 0074  ld   $74         ;09d6 'PrintDigit'
              1925 0059  ld   $59         ;09d8 LDI
              1926 0030  ld   $30
              1927 0099  ld   $99         ;09da ADDW
              1928 003a  ld   $3a         ;09da 'Value'
              1929 00cf  ld   $cf         ;09dc CALL
              192a 004e  ld   $4e         ;09dc 'PrintChar'
              192b 0063  ld   $63         ;09de POP
              192c 00ff  ld   $ff         ;09df RET
              192d 002b  ld   $2b         ;09e0 STW
              192e 0076  ld   $76         ;09e0 'PrintValue'
              192f 00cd  ld   $cd         ;09e2 DEF
              1930 00ea  ld   $ea
              1931 00cf  ld   $cf         ;09e4 CALL
              1932 0054  ld   $54         ;09e4 'Prompt'
              1933 0053  ld   $53         ;09e6 'S'
              1934 0074  ld   $74         ;09e7 't'
              1935 0061  ld   $61         ;09e8 'a'
              1936 0063  ld   $63         ;09e9 'c'
              1937 006b  ld   $6b         ;09ea 'k'
              1938 0000  ld   $00         ;09eb 0
              1939 002b  ld   $2b         ;09ec STW
              193a 0060  ld   $60         ;09ec 'StackError'
              193b 00cd  ld   $cd         ;09ee DEF
              193c 00f7  ld   $f7
              193d 00cf  ld   $cf         ;09f0 CALL
              193e 0054  ld   $54         ;09f0 'Prompt'
              193f 0053  ld   $53         ;09f2 'S'
              1940 0079  ld   $79         ;09f3 'y'
              1941 006e  ld   $6e         ;09f4 'n'
              1942 0074  ld   $74         ;09f5 't'
              1943 0061  ld   $61         ;09f6 'a'
              1944 0078  ld   $78         ;09f7 'x'
              1945 0000  ld   $00         ;09f8 0
              1946 002b  ld   $2b         ;09f9 STW
              1947 0048  ld   $48         ;09f9 'SyntaxError'
              1948 0093  ld   $93         ;09fb INC
              1949 001b  ld   $1b
              194a 00ff  ld   $ff         ;09fd RET
              194b 000a  ld   $0a         ;| RAM segment address (high byte first)
              194c 00a0  ld   $a0         ;|
              194d 005f  ld   $5f         ;| Length (1..256)
              194e 00cd  ld   $cd         ;0aa0 DEF
              194f 00d2  ld   $d2
              1950 0021  ld   $21         ;0aa2 LDW
              1951 001a  ld   $1a
              1952 002b  ld   $2b         ;0aa4 STW
              1953 004c  ld   $4c         ;0aa4 'tmp'
              1954 0021  ld   $21         ;0aa6 LDW
              1955 005a  ld   $5a         ;0aa6 'Active'
              1956 002b  ld   $2b         ;0aa8 STW
              1957 006a  ld   $6a         ;0aa8 'j'
              1958 0021  ld   $21         ;0aaa LDW
              1959 004c  ld   $4c         ;0aaa 'tmp'
              195a 00ad  ld   $ad         ;0aac PEEK
              195b 0093  ld   $93         ;0aad INC
              195c 004c  ld   $4c         ;0aad 'tmp'
              195d 0035  ld   $35         ;0aaf BCC
              195e 003f  ld   $3f         ;0ab0 EQ
              195f 00ce  ld   $ce
              1960 002b  ld   $2b         ;0ab2 STW
              1961 003e  ld   $3e         ;0ab2 'i'
              1962 0021  ld   $21         ;0ab4 LDW
              1963 005a  ld   $5a         ;0ab4 'Active'
              1964 00ad  ld   $ad         ;0ab6 PEEK
              1965 0088  ld   $88         ;0ab7 ORI
              1966 0020  ld   $20
              1967 00fc  ld   $fc         ;0ab9 XORW
              1968 003e  ld   $3e         ;0ab9 'i'
              1969 0035  ld   $35         ;0abb BCC
              196a 0072  ld   $72         ;0abc NE
              196b 00c0  ld   $c0
              196c 0093  ld   $93         ;0abe INC
              196d 005a  ld   $5a         ;0abe 'Active'
              196e 0090  ld   $90         ;0ac0 BRA
              196f 00a8  ld   $a8
              1970 0021  ld   $21         ;0ac2 LDW
              1971 006a  ld   $6a         ;0ac2 'j'
              1972 002b  ld   $2b         ;0ac4 STW
              1973 005a  ld   $5a         ;0ac4 'Active'
              1974 0021  ld   $21         ;0ac6 LDW
              1975 004c  ld   $4c         ;0ac6 'tmp'
              1976 00ad  ld   $ad         ;0ac8 PEEK
              1977 0093  ld   $93         ;0ac9 INC
              1978 004c  ld   $4c         ;0ac9 'tmp'
              1979 0035  ld   $35         ;0acb BCC
              197a 0072  ld   $72         ;0acc NE
              197b 00c4  ld   $c4
              197c 00cf  ld   $cf         ;0ace CALL
              197d 004c  ld   $4c         ;0ace 'tmp'
              197e 00cf  ld   $cf         ;0ad0 CALL
              197f 0034  ld   $34         ;0ad0 'Spaces'
              1980 00cf  ld   $cf         ;0ad2 CALL
              1981 004c  ld   $4c         ;0ad2 'tmp'
              1982 002b  ld   $2b         ;0ad4 STW
              1983 0036  ld   $36         ;0ad4 'Keyword'
              1984 00cd  ld   $cd         ;0ad6 DEF
              1985 00fa  ld   $fa
              1986 0011  ld   $11         ;0ad8 LDWI
              1987 0000  ld   $00
              1988 0080  ld   $80
              1989 002b  ld   $2b         ;0adb STW
              198a 003a  ld   $3a         ;0adb 'Value'
              198b 00e9  ld   $e9         ;0add LSLW
              198c 00e9  ld   $e9         ;0ade LSLW
              198d 0099  ld   $99         ;0adf ADDW
              198e 003a  ld   $3a         ;0adf 'Value'
              198f 00e9  ld   $e9         ;0ae1 LSLW
              1990 002b  ld   $2b         ;0ae2 STW
              1991 003e  ld   $3e         ;0ae2 'i'
              1992 0021  ld   $21         ;0ae4 LDW
              1993 005a  ld   $5a         ;0ae4 'Active'
              1994 00ad  ld   $ad         ;0ae6 PEEK
              1995 00e6  ld   $e6         ;0ae7 SUBI
              1996 0030  ld   $30
              1997 0035  ld   $35         ;0ae9 BCC
              1998 0050  ld   $50         ;0aea LT
              1999 00f7  ld   $f7
              199a 00e6  ld   $e6         ;0aec SUBI
              199b 000a  ld   $0a
              199c 0035  ld   $35         ;0aee BCC
              199d 0053  ld   $53         ;0aef GE
              199e 00f7  ld   $f7
              199f 00e3  ld   $e3         ;0af1 ADDI
              19a0 000a  ld   $0a
              19a1 0099  ld   $99         ;0af3 ADDW
              19a2 003e  ld   $3e         ;0af3 'i'
              19a3 0093  ld   $93         ;0af5 INC
              19a4 005a  ld   $5a         ;0af5 'Active'
              19a5 0090  ld   $90         ;0af7 BRA
              19a6 00d9  ld   $d9
              19a7 0021  ld   $21         ;0af9 LDW
              19a8 003a  ld   $3a         ;0af9 'Value'
              19a9 00ff  ld   $ff         ;0afb RET
              19aa 0093  ld   $93         ;0afc INC
              19ab 001b  ld   $1b
              19ac 00ff  ld   $ff         ;0afe RET
              19ad 000b  ld   $0b         ;| RAM segment address (high byte first)
              19ae 00a0  ld   $a0         ;|
              19af 0060  ld   $60         ;| Length (1..256)
              19b0 002b  ld   $2b         ;0ba0 STW
              19b1 0032  ld   $32         ;0ba0 'Number'
              19b2 00cd  ld   $cd         ;0ba2 DEF
              19b3 00d1  ld   $d1
              19b4 0021  ld   $21         ;0ba4 LDW
              19b5 005a  ld   $5a         ;0ba4 'Active'
              19b6 00ad  ld   $ad         ;0ba6 PEEK
              19b7 0035  ld   $35         ;0ba7 BCC
              19b8 003f  ld   $3f         ;0ba8 EQ
              19b9 00b3  ld   $b3
              19ba 008c  ld   $8c         ;0baa XORI
              19bb 003a  ld   $3a
              19bc 0035  ld   $35         ;0bac BCC
              19bd 0072  ld   $72         ;0bad NE
              19be 00b1  ld   $b1
              19bf 0093  ld   $93         ;0baf INC
              19c0 005a  ld   $5a         ;0baf 'Active'
              19c1 00cf  ld   $cf         ;0bb1 CALL
              19c2 0066  ld   $66         ;0bb1 'Statements'
              19c3 00cf  ld   $cf         ;0bb3 CALL
              19c4 0048  ld   $48         ;0bb3 'SyntaxError'
              19c5 0021  ld   $21         ;0bb5 LDW
              19c6 005a  ld   $5a         ;0bb5 'Active'
              19c7 00cf  ld   $cf         ;0bb7 CALL
              19c8 0070  ld   $70         ;0bb7 'NextBlock'
              19c9 002b  ld   $2b         ;0bb9 STW
              19ca 005a  ld   $5a         ;0bb9 'Active'
              19cb 00fc  ld   $fc         ;0bbb XORW
              19cc 0046  ld   $46         ;0bbb 'End'
              19cd 0035  ld   $35         ;0bbd BCC
              19ce 003f  ld   $3f         ;0bbe EQ
              19cf 00ce  ld   $ce
              19d0 0011  ld   $11         ;0bc0 LDWI
              19d1 00c0  ld   $c0
              19d2 001b  ld   $1b
              19d3 00fc  ld   $fc         ;0bc3 XORW
              19d4 005a  ld   $5a         ;0bc3 'Active'
              19d5 0035  ld   $35         ;0bc5 BCC
              19d6 003f  ld   $3f         ;0bc6 EQ
              19d7 00ce  ld   $ce
              19d8 0021  ld   $21         ;0bc8 LDW
              19d9 005a  ld   $5a         ;0bc8 'Active'
              19da 00e3  ld   $e3         ;0bca ADDI
              19db 0002  ld   $02
              19dc 002b  ld   $2b         ;0bcc STW
              19dd 005a  ld   $5a         ;0bcc 'Active'
              19de 00cf  ld   $cf         ;0bce CALL
              19df 0066  ld   $66         ;0bce 'Statements'
              19e0 00cf  ld   $cf         ;0bd0 CALL
              19e1 0054  ld   $54         ;0bd0 'Prompt'
              19e2 0000  ld   $00         ;0bd2 0
              19e3 002b  ld   $2b         ;0bd3 STW
              19e4 0062  ld   $62         ;0bd3 'EndOfLine'
              19e5 00cd  ld   $cd         ;0bd5 DEF
              19e6 00fb  ld   $fb
              19e7 0021  ld   $21         ;0bd7 LDW
              19e8 0000  ld   $00
              19e9 002b  ld   $2b         ;0bd9 STW
              19ea 003e  ld   $3e         ;0bd9 'i'
              19eb 0059  ld   $59         ;0bdb LDI
              19ec 0002  ld   $02
              19ed 002b  ld   $2b         ;0bdd STW
              19ee 006a  ld   $6a         ;0bdd 'j'
              19ef 0021  ld   $21         ;0bdf LDW
              19f0 003e  ld   $3e         ;0bdf 'i'
              19f1 00e6  ld   $e6         ;0be1 SUBI
              19f2 0036  ld   $36
              19f3 002b  ld   $2b         ;0be3 STW
              19f4 003e  ld   $3e         ;0be3 'i'
              19f5 0059  ld   $59         ;0be5 LDI
              19f6 0000  ld   $00
              19f7 00f0  ld   $f0         ;0be7 POKE
              19f8 003e  ld   $3e         ;0be7 'i'
              19f9 0093  ld   $93         ;0be9 INC
              19fa 003e  ld   $3e         ;0be9 'i'
              19fb fe00  bra  ac          ;+-----------------------------------+
              19fc fcfd  bra  $19fd       ;|                                   |
              19fd 1404  ld   $04,y       ;| Trampoline for page $1900 lookups |
              19fe e065  jmp  y,$65       ;|                                   |
              19ff c218  st   [$18]       ;+-----------------------------------+
              1a00 001a  ld   $1a         ;0beb LD
              1a01 003e  ld   $3e         ;0beb 'i'
              1a02 0035  ld   $35         ;0bed BCC
              1a03 0072  ld   $72         ;0bee NE
              1a04 00e3  ld   $e3
              1a05 0021  ld   $21         ;0bf0 LDW
              1a06 006a  ld   $6a         ;0bf0 'j'
              1a07 00e6  ld   $e6         ;0bf2 SUBI
              1a08 0001  ld   $01
              1a09 0035  ld   $35         ;0bf4 BCC
              1a0a 0072  ld   $72         ;0bf5 NE
              1a0b 00db  ld   $db
              1a0c 0011  ld   $11         ;0bf7 LDWI
              1a0d 00c0  ld   $c0
              1a0e 001b  ld   $1b
              1a0f 002b  ld   $2b         ;0bfa STW
              1a10 006c  ld   $6c         ;0bfa 'Begin'
              1a11 00ff  ld   $ff         ;0bfc RET
              1a12 0093  ld   $93         ;0bfd INC
              1a13 001b  ld   $1b
              1a14 00ff  ld   $ff         ;0bff RET
              1a15 000c  ld   $0c         ;| RAM segment address (high byte first)
              1a16 00a0  ld   $a0         ;|
              1a17 0060  ld   $60         ;| Length (1..256)
              1a18 002b  ld   $2b         ;0ca0 STW
              1a19 0078  ld   $78         ;0ca0 'Clear'
              1a1a 00cd  ld   $cd         ;0ca2 DEF
              1a1b 00ed  ld   $ed
              1a1c 0075  ld   $75         ;0ca4 PUSH
              1a1d 001a  ld   $1a         ;0ca5 LD
              1a1e 001c  ld   $1c
              1a1f 00e6  ld   $e6         ;0ca7 SUBI
              1a20 008d  ld   $8d
              1a21 0035  ld   $35         ;0ca9 BCC
              1a22 0053  ld   $53         ;0caa GE
              1a23 00ac  ld   $ac
              1a24 00cf  ld   $cf         ;0cac CALL
              1a25 0060  ld   $60         ;0cac 'StackError'
              1a26 00cf  ld   $cf         ;0cae CALL
              1a27 0036  ld   $36         ;0cae 'Keyword'
              1a28 002d  ld   $2d         ;0cb0 '-'
              1a29 0000  ld   $00         ;0cb1 0
              1a2a 0035  ld   $35         ;0cb2 BCC
              1a2b 003f  ld   $3f         ;0cb3 EQ
              1a2c 00bb  ld   $bb
              1a2d 00cf  ld   $cf         ;0cb5 CALL
              1a2e 007a  ld   $7a         ;0cb5 'Term'
              1a2f 0059  ld   $59         ;0cb7 LDI
              1a30 0000  ld   $00
              1a31 00b8  ld   $b8         ;0cb9 SUBW
              1a32 003a  ld   $3a         ;0cb9 'Value'
              1a33 0090  ld   $90         ;0cbb BRA
              1a34 00c1  ld   $c1
              1a35 00cf  ld   $cf         ;0cbd CALL
              1a36 0036  ld   $36         ;0cbd 'Keyword'
              1a37 002b  ld   $2b         ;0cbf '+'
              1a38 0000  ld   $00         ;0cc0 0
              1a39 00cf  ld   $cf         ;0cc1 CALL
              1a3a 007a  ld   $7a         ;0cc1 'Term'
              1a3b 0075  ld   $75         ;0cc3 PUSH
              1a3c 00ec  ld   $ec         ;0cc4 STLW
              1a3d 0000  ld   $00
              1a3e 00cf  ld   $cf         ;0cc6 CALL
              1a3f 0036  ld   $36         ;0cc6 'Keyword'
              1a40 002b  ld   $2b         ;0cc8 '+'
              1a41 0000  ld   $00         ;0cc9 0
              1a42 0035  ld   $35         ;0cca BCC
              1a43 003f  ld   $3f         ;0ccb EQ
              1a44 00d5  ld   $d5
              1a45 00cf  ld   $cf         ;0ccd CALL
              1a46 007a  ld   $7a         ;0ccd 'Term'
              1a47 00ee  ld   $ee         ;0ccf LDLW
              1a48 0000  ld   $00
              1a49 0099  ld   $99         ;0cd1 ADDW
              1a4a 003a  ld   $3a         ;0cd1 'Value'
              1a4b 00ec  ld   $ec         ;0cd3 STLW
              1a4c 0000  ld   $00
              1a4d 0090  ld   $90         ;0cd5 BRA
              1a4e 00c4  ld   $c4
              1a4f 00cf  ld   $cf         ;0cd7 CALL
              1a50 0036  ld   $36         ;0cd7 'Keyword'
              1a51 002d  ld   $2d         ;0cd9 '-'
              1a52 0000  ld   $00         ;0cda 0
              1a53 0035  ld   $35         ;0cdb BCC
              1a54 003f  ld   $3f         ;0cdc EQ
              1a55 00e6  ld   $e6
              1a56 00cf  ld   $cf         ;0cde CALL
              1a57 007a  ld   $7a         ;0cde 'Term'
              1a58 00ee  ld   $ee         ;0ce0 LDLW
              1a59 0000  ld   $00
              1a5a 00b8  ld   $b8         ;0ce2 SUBW
              1a5b 003a  ld   $3a         ;0ce2 'Value'
              1a5c 00ec  ld   $ec         ;0ce4 STLW
              1a5d 0000  ld   $00
              1a5e 0090  ld   $90         ;0ce6 BRA
              1a5f 00c4  ld   $c4
              1a60 00ee  ld   $ee         ;0ce8 LDLW
              1a61 0000  ld   $00
              1a62 002b  ld   $2b         ;0cea STW
              1a63 003a  ld   $3a         ;0cea 'Value'
              1a64 0063  ld   $63         ;0cec POP
              1a65 0063  ld   $63         ;0ced POP
              1a66 00ff  ld   $ff         ;0cee RET
              1a67 002b  ld   $2b         ;0cef STW
              1a68 0038  ld   $38         ;0cef 'Expression'
              1a69 00cd  ld   $cd         ;0cf1 DEF
              1a6a 00f9  ld   $f9
              1a6b 00cf  ld   $cf         ;0cf3 CALL
              1a6c 0054  ld   $54         ;0cf3 'Prompt'
              1a6d 0056  ld   $56         ;0cf5 'V'
              1a6e 0061  ld   $61         ;0cf6 'a'
              1a6f 006c  ld   $6c         ;0cf7 'l'
              1a70 0075  ld   $75         ;0cf8 'u'
              1a71 0065  ld   $65         ;0cf9 'e'
              1a72 0000  ld   $00         ;0cfa 0
              1a73 002b  ld   $2b         ;0cfb STW
              1a74 0044  ld   $44         ;0cfb 'ValueError'
              1a75 0093  ld   $93         ;0cfd INC
              1a76 001b  ld   $1b
              1a77 00ff  ld   $ff         ;0cff RET
              1a78 000d  ld   $0d         ;| RAM segment address (high byte first)
              1a79 00a0  ld   $a0         ;|
              1a7a 004b  ld   $4b         ;| Length (1..256)
              1a7b 00cd  ld   $cd         ;0da0 DEF
              1a7c 00e4  ld   $e4
              1a7d 0075  ld   $75         ;0da2 PUSH
              1a7e 00cf  ld   $cf         ;0da3 CALL
              1a7f 004a  ld   $4a         ;0da3 'Factor'
              1a80 0075  ld   $75         ;0da5 PUSH
              1a81 0021  ld   $21         ;0da6 LDW
              1a82 003a  ld   $3a         ;0da6 'Value'
              1a83 00ec  ld   $ec         ;0da8 STLW
              1a84 0000  ld   $00
              1a85 00cf  ld   $cf         ;0daa CALL
              1a86 0036  ld   $36         ;0daa 'Keyword'
              1a87 002a  ld   $2a         ;0dac '*'
              1a88 0000  ld   $00         ;0dad 0
              1a89 0035  ld   $35         ;0dae BCC
              1a8a 003f  ld   $3f         ;0daf EQ
              1a8b 00b9  ld   $b9
              1a8c 00cf  ld   $cf         ;0db1 CALL
              1a8d 004a  ld   $4a         ;0db1 'Factor'
              1a8e 00ee  ld   $ee         ;0db3 LDLW
              1a8f 0000  ld   $00
              1a90 00cf  ld   $cf         ;0db5 CALL
              1a91 007c  ld   $7c         ;0db5 'Multiply'
              1a92 00ec  ld   $ec         ;0db7 STLW
              1a93 0000  ld   $00
              1a94 0090  ld   $90         ;0db9 BRA
              1a95 00a8  ld   $a8
              1a96 00cf  ld   $cf         ;0dbb CALL
              1a97 0036  ld   $36         ;0dbb 'Keyword'
              1a98 002f  ld   $2f         ;0dbd '/'
              1a99 0000  ld   $00         ;0dbe 0
              1a9a 0035  ld   $35         ;0dbf BCC
              1a9b 003f  ld   $3f         ;0dc0 EQ
              1a9c 00ca  ld   $ca
              1a9d 00cf  ld   $cf         ;0dc2 CALL
              1a9e 004a  ld   $4a         ;0dc2 'Factor'
              1a9f 00ee  ld   $ee         ;0dc4 LDLW
              1aa0 0000  ld   $00
              1aa1 00cf  ld   $cf         ;0dc6 CALL
              1aa2 003c  ld   $3c         ;0dc6 'Divide'
              1aa3 00ec  ld   $ec         ;0dc8 STLW
              1aa4 0000  ld   $00
              1aa5 0090  ld   $90         ;0dca BRA
              1aa6 00a8  ld   $a8
              1aa7 00cf  ld   $cf         ;0dcc CALL
              1aa8 0036  ld   $36         ;0dcc 'Keyword'
              1aa9 0025  ld   $25         ;0dce '%'
              1aaa 0000  ld   $00         ;0dcf 0
              1aab 0035  ld   $35         ;0dd0 BCC
              1aac 003f  ld   $3f         ;0dd1 EQ
              1aad 00dd  ld   $dd
              1aae 00cf  ld   $cf         ;0dd3 CALL
              1aaf 004a  ld   $4a         ;0dd3 'Factor'
              1ab0 00ee  ld   $ee         ;0dd5 LDLW
              1ab1 0000  ld   $00
              1ab2 00cf  ld   $cf         ;0dd7 CALL
              1ab3 003c  ld   $3c         ;0dd7 'Divide'
              1ab4 0021  ld   $21         ;0dd9 LDW
              1ab5 003e  ld   $3e         ;0dd9 'i'
              1ab6 00ec  ld   $ec         ;0ddb STLW
              1ab7 0000  ld   $00
              1ab8 0090  ld   $90         ;0ddd BRA
              1ab9 00a8  ld   $a8
              1aba 00ee  ld   $ee         ;0ddf LDLW
              1abb 0000  ld   $00
              1abc 002b  ld   $2b         ;0de1 STW
              1abd 003a  ld   $3a         ;0de1 'Value'
              1abe 0063  ld   $63         ;0de3 POP
              1abf 0063  ld   $63         ;0de4 POP
              1ac0 00ff  ld   $ff         ;0de5 RET
              1ac1 002b  ld   $2b         ;0de6 STW
              1ac2 007a  ld   $7a         ;0de6 'Term'
              1ac3 0093  ld   $93         ;0de8 INC
              1ac4 001b  ld   $1b
              1ac5 00ff  ld   $ff         ;0dea RET
              1ac6 000e  ld   $0e         ;| RAM segment address (high byte first)
              1ac7 00a0  ld   $a0         ;|
              1ac8 0060  ld   $60         ;| Length (1..256)
              1ac9 00cd  ld   $cd         ;0ea0 DEF
              1aca 00fb  ld   $fb
              1acb 002b  ld   $2b         ;0ea2 STW
              1acc 006a  ld   $6a         ;0ea2 'j'
              1acd 00fc  ld   $fc         ;0ea4 XORW
              1ace 003a  ld   $3a         ;0ea4 'Value'
              1acf 002b  ld   $2b         ;0ea6 STW
              1ad0 0042  ld   $42         ;0ea6 'k'
              1ad1 0021  ld   $21         ;0ea8 LDW
              1ad2 006a  ld   $6a         ;0ea8 'j'
              1ad3 0035  ld   $35         ;0eaa BCC
              1ad4 0053  ld   $53         ;0eab GE
              1ad5 00b1  ld   $b1
              1ad6 0059  ld   $59         ;0ead LDI
              1ad7 0000  ld   $00
              1ad8 00b8  ld   $b8         ;0eaf SUBW
              1ad9 006a  ld   $6a         ;0eaf 'j'
              1ada 002b  ld   $2b         ;0eb1 STW
              1adb 006a  ld   $6a         ;0eb1 'j'
              1adc 0021  ld   $21         ;0eb3 LDW
              1add 003a  ld   $3a         ;0eb3 'Value'
              1ade 0035  ld   $35         ;0eb5 BCC
              1adf 0053  ld   $53         ;0eb6 GE
              1ae0 00bc  ld   $bc
              1ae1 0059  ld   $59         ;0eb8 LDI
              1ae2 0000  ld   $00
              1ae3 00b8  ld   $b8         ;0eba SUBW
              1ae4 003a  ld   $3a         ;0eba 'Value'
              1ae5 002b  ld   $2b         ;0ebc STW
              1ae6 003a  ld   $3a         ;0ebc 'Value'
              1ae7 0035  ld   $35         ;0ebe BCC
              1ae8 0072  ld   $72         ;0ebf NE
              1ae9 00c1  ld   $c1
              1aea 00cf  ld   $cf         ;0ec1 CALL
              1aeb 0044  ld   $44         ;0ec1 'ValueError'
              1aec 0059  ld   $59         ;0ec3 LDI
              1aed 0000  ld   $00
              1aee 002b  ld   $2b         ;0ec5 STW
              1aef 003e  ld   $3e         ;0ec5 'i'
              1af0 002b  ld   $2b         ;0ec7 STW
              1af1 004c  ld   $4c         ;0ec7 'tmp'
              1af2 0021  ld   $21         ;0ec9 LDW
              1af3 003e  ld   $3e         ;0ec9 'i'
              1af4 0099  ld   $99         ;0ecb ADDW
              1af5 003e  ld   $3e         ;0ecb 'i'
              1af6 002b  ld   $2b         ;0ecd STW
              1af7 003e  ld   $3e         ;0ecd 'i'
              1af8 0021  ld   $21         ;0ecf LDW
              1af9 006a  ld   $6a         ;0ecf 'j'
              1afa 0035  ld   $35         ;0ed1 BCC
              1afb fe00  bra  ac          ;+-----------------------------------+
              1afc fcfd  bra  $1afd       ;|                                   |
              1afd 1404  ld   $04,y       ;| Trampoline for page $1a00 lookups |
              1afe e065  jmp  y,$65       ;|                                   |
              1aff c218  st   [$18]       ;+-----------------------------------+
              1b00 0053  ld   $53         ;0ed2 GE
              1b01 00d4  ld   $d4
              1b02 0093  ld   $93         ;0ed4 INC
              1b03 003e  ld   $3e         ;0ed4 'i'
              1b04 0021  ld   $21         ;0ed6 LDW
              1b05 006a  ld   $6a         ;0ed6 'j'
              1b06 0099  ld   $99         ;0ed8 ADDW
              1b07 006a  ld   $6a         ;0ed8 'j'
              1b08 002b  ld   $2b         ;0eda STW
              1b09 006a  ld   $6a         ;0eda 'j'
              1b0a 0021  ld   $21         ;0edc LDW
              1b0b 003e  ld   $3e         ;0edc 'i'
              1b0c 00b8  ld   $b8         ;0ede SUBW
              1b0d 003a  ld   $3a         ;0ede 'Value'
              1b0e 0035  ld   $35         ;0ee0 BCC
              1b0f 0050  ld   $50         ;0ee1 LT
              1b10 00e5  ld   $e5
              1b11 002b  ld   $2b         ;0ee3 STW
              1b12 003e  ld   $3e         ;0ee3 'i'
              1b13 0093  ld   $93         ;0ee5 INC
              1b14 006a  ld   $6a         ;0ee5 'j'
              1b15 0021  ld   $21         ;0ee7 LDW
              1b16 004c  ld   $4c         ;0ee7 'tmp'
              1b17 00e3  ld   $e3         ;0ee9 ADDI
              1b18 0001  ld   $01
              1b19 0082  ld   $82         ;0eeb ANDI
              1b1a 000f  ld   $0f
              1b1b 0035  ld   $35         ;0eed BCC
              1b1c 0072  ld   $72         ;0eee NE
              1b1d 00c5  ld   $c5
              1b1e 0021  ld   $21         ;0ef0 LDW
              1b1f 0042  ld   $42         ;0ef0 'k'
              1b20 0035  ld   $35         ;0ef2 BCC
              1b21 0053  ld   $53         ;0ef3 GE
              1b22 00f8  ld   $f8
              1b23 0059  ld   $59         ;0ef5 LDI
              1b24 0000  ld   $00
              1b25 00b8  ld   $b8         ;0ef7 SUBW
              1b26 006a  ld   $6a         ;0ef7 'j'
              1b27 00ff  ld   $ff         ;0ef9 RET
              1b28 0021  ld   $21         ;0efa LDW
              1b29 006a  ld   $6a         ;0efa 'j'
              1b2a 00ff  ld   $ff         ;0efc RET
              1b2b 0093  ld   $93         ;0efd INC
              1b2c 001b  ld   $1b
              1b2d 00ff  ld   $ff         ;0eff RET
              1b2e 000f  ld   $0f         ;| RAM segment address (high byte first)
              1b2f 00a0  ld   $a0         ;|
              1b30 005e  ld   $5e         ;| Length (1..256)
              1b31 002b  ld   $2b         ;0fa0 STW
              1b32 003c  ld   $3c         ;0fa0 'Divide'
              1b33 00cd  ld   $cd         ;0fa2 DEF
              1b34 00c7  ld   $c7
              1b35 002b  ld   $2b         ;0fa4 STW
              1b36 004c  ld   $4c         ;0fa4 'tmp'
              1b37 0059  ld   $59         ;0fa6 LDI
              1b38 0000  ld   $00
              1b39 002b  ld   $2b         ;0fa8 STW
              1b3a 006a  ld   $6a         ;0fa8 'j'
              1b3b 0059  ld   $59         ;0faa LDI
              1b3c 0001  ld   $01
              1b3d 002b  ld   $2b         ;0fac STW
              1b3e 003e  ld   $3e         ;0fac 'i'
              1b3f 00f8  ld   $f8         ;0fae ANDW
              1b40 004c  ld   $4c         ;0fae 'tmp'
              1b41 0035  ld   $35         ;0fb0 BCC
              1b42 003f  ld   $3f         ;0fb1 EQ
              1b43 00b7  ld   $b7
              1b44 0021  ld   $21         ;0fb3 LDW
              1b45 006a  ld   $6a         ;0fb3 'j'
              1b46 0099  ld   $99         ;0fb5 ADDW
              1b47 003a  ld   $3a         ;0fb5 'Value'
              1b48 002b  ld   $2b         ;0fb7 STW
              1b49 006a  ld   $6a         ;0fb7 'j'
              1b4a 0021  ld   $21         ;0fb9 LDW
              1b4b 003a  ld   $3a         ;0fb9 'Value'
              1b4c 0099  ld   $99         ;0fbb ADDW
              1b4d 003a  ld   $3a         ;0fbb 'Value'
              1b4e 002b  ld   $2b         ;0fbd STW
              1b4f 003a  ld   $3a         ;0fbd 'Value'
              1b50 0021  ld   $21         ;0fbf LDW
              1b51 003e  ld   $3e         ;0fbf 'i'
              1b52 0099  ld   $99         ;0fc1 ADDW
              1b53 003e  ld   $3e         ;0fc1 'i'
              1b54 0035  ld   $35         ;0fc3 BCC
              1b55 0072  ld   $72         ;0fc4 NE
              1b56 00aa  ld   $aa
              1b57 0021  ld   $21         ;0fc6 LDW
              1b58 006a  ld   $6a         ;0fc6 'j'
              1b59 00ff  ld   $ff         ;0fc8 RET
              1b5a 002b  ld   $2b         ;0fc9 STW
              1b5b 007c  ld   $7c         ;0fc9 'Multiply'
              1b5c 00cd  ld   $cd         ;0fcb DEF
              1b5d 00e6  ld   $e6
              1b5e 0021  ld   $21         ;0fcd LDW
              1b5f 0000  ld   $00
              1b60 002b  ld   $2b         ;0fcf STW
              1b61 003e  ld   $3e         ;0fcf 'i'
              1b62 0021  ld   $21         ;0fd1 LDW
              1b63 005a  ld   $5a         ;0fd1 'Active'
              1b64 00ad  ld   $ad         ;0fd3 PEEK
              1b65 0082  ld   $82         ;0fd4 ANDI
              1b66 005f  ld   $5f
              1b67 00e6  ld   $e6         ;0fd6 SUBI
              1b68 0040  ld   $40
              1b69 0035  ld   $35         ;0fd8 BCC
              1b6a 0050  ld   $50         ;0fd9 LT
              1b6b 00e4  ld   $e4
              1b6c 00e6  ld   $e6         ;0fdb SUBI
              1b6d 001b  ld   $1b
              1b6e 0035  ld   $35         ;0fdd BCC
              1b6f 0053  ld   $53         ;0fde GE
              1b70 00e4  ld   $e4
              1b71 0093  ld   $93         ;0fe0 INC
              1b72 005a  ld   $5a         ;0fe0 'Active'
              1b73 00e9  ld   $e9         ;0fe2 LSLW
              1b74 0099  ld   $99         ;0fe3 ADDW
              1b75 003e  ld   $3e         ;0fe3 'i'
              1b76 00ff  ld   $ff         ;0fe5 RET
              1b77 00cf  ld   $cf         ;0fe6 CALL
              1b78 0048  ld   $48         ;0fe6 'SyntaxError'
              1b79 002b  ld   $2b         ;0fe8 STW
              1b7a 0040  ld   $40         ;0fe8 'Variable'
              1b7b 00cd  ld   $cd         ;0fea DEF
              1b7c 00f7  ld   $f7
              1b7d 0021  ld   $21         ;0fec LDW
              1b7e 005a  ld   $5a         ;0fec 'Active'
              1b7f 00ad  ld   $ad         ;0fee PEEK
              1b80 008c  ld   $8c         ;0fef XORI
              1b81 0020  ld   $20
              1b82 0035  ld   $35         ;0ff1 BCC
              1b83 0072  ld   $72         ;0ff2 NE
              1b84 00f6  ld   $f6
              1b85 0093  ld   $93         ;0ff4 INC
              1b86 005a  ld   $5a         ;0ff4 'Active'
              1b87 0090  ld   $90         ;0ff6 BRA
              1b88 00ea  ld   $ea
              1b89 00ff  ld   $ff         ;0ff8 RET
              1b8a 002b  ld   $2b         ;0ff9 STW
              1b8b 0034  ld   $34         ;0ff9 'Spaces'
              1b8c 0093  ld   $93         ;0ffb INC
              1b8d 001b  ld   $1b
              1b8e 00ff  ld   $ff         ;0ffd RET
              1b8f 0010  ld   $10         ;| RAM segment address (high byte first)
              1b90 00a0  ld   $a0         ;|
              1b91 0060  ld   $60         ;| Length (1..256)
              1b92 00cd  ld   $cd         ;10a0 DEF
              1b93 00fb  ld   $fb
              1b94 0075  ld   $75         ;10a2 PUSH
              1b95 0021  ld   $21         ;10a3 LDW
              1b96 006c  ld   $6c         ;10a3 'Begin'
              1b97 002b  ld   $2b         ;10a5 STW
              1b98 006a  ld   $6a         ;10a5 'j'
              1b99 00fc  ld   $fc         ;10a7 XORW
              1b9a 0046  ld   $46         ;10a7 'End'
              1b9b 0035  ld   $35         ;10a9 BCC
              1b9c 003f  ld   $3f         ;10aa EQ
              1b9d 00c9  ld   $c9
              1b9e 00cf  ld   $cf         ;10ac CALL
              1b9f 0056  ld   $56         ;10ac 'TestBreak'
              1ba0 0021  ld   $21         ;10ae LDW
              1ba1 006a  ld   $6a         ;10ae 'j'
              1ba2 00f6  ld   $f6         ;10b0 DEEK
              1ba3 002b  ld   $2b         ;10b1 STW
              1ba4 003a  ld   $3a         ;10b1 'Value'
              1ba5 00cf  ld   $cf         ;10b3 CALL
              1ba6 0076  ld   $76         ;10b3 'PrintValue'
              1ba7 0093  ld   $93         ;10b5 INC
              1ba8 006a  ld   $6a         ;10b5 'j'
              1ba9 0093  ld   $93         ;10b7 INC
              1baa 006a  ld   $6a         ;10b7 'j'
              1bab 0021  ld   $21         ;10b9 LDW
              1bac 006a  ld   $6a         ;10b9 'j'
              1bad 00ad  ld   $ad         ;10bb PEEK
              1bae 0035  ld   $35         ;10bc BCC
              1baf 003f  ld   $3f         ;10bd EQ
              1bb0 00c1  ld   $c1
              1bb1 00cf  ld   $cf         ;10bf CALL
              1bb2 004e  ld   $4e         ;10bf 'PrintChar'
              1bb3 0090  ld   $90         ;10c1 BRA
              1bb4 00b5  ld   $b5
              1bb5 00cf  ld   $cf         ;10c3 CALL
              1bb6 0058  ld   $58         ;10c3 'Newline'
              1bb7 0021  ld   $21         ;10c5 LDW
              1bb8 006a  ld   $6a         ;10c5 'j'
              1bb9 00cf  ld   $cf         ;10c7 CALL
              1bba 0070  ld   $70         ;10c7 'NextBlock'
              1bbb 0090  ld   $90         ;10c9 BRA
              1bbc 00a3  ld   $a3
              1bbd 002b  ld   $2b         ;10cb STW
              1bbe 003a  ld   $3a         ;10cb 'Value'
              1bbf 0021  ld   $21         ;10cd LDW
              1bc0 0000  ld   $00
              1bc1 00e6  ld   $e6         ;10cf SUBI
              1bc2 0080  ld   $80
              1bc3 00e6  ld   $e6         ;10d1 SUBI
              1bc4 00c0  ld   $c0
              1bc5 00fc  ld   $fc         ;10d3 XORW
              1bc6 006a  ld   $6a         ;10d3 'j'
              1bc7 0035  ld   $35         ;10d5 BCC
              1bc8 003f  ld   $3f         ;10d6 EQ
              1bc9 00e2  ld   $e2
              1bca 0021  ld   $21         ;10d8 LDW
              1bcb 006a  ld   $6a         ;10d8 'j'
              1bcc 00cf  ld   $cf         ;10da CALL
              1bcd 0070  ld   $70         ;10da 'NextBlock'
              1bce 002b  ld   $2b         ;10dc STW
              1bcf 006a  ld   $6a         ;10dc 'j'
              1bd0 0021  ld   $21         ;10de LDW
              1bd1 003a  ld   $3a         ;10de 'Value'
              1bd2 00e3  ld   $e3         ;10e0 ADDI
              1bd3 0020  ld   $20
              1bd4 0090  ld   $90         ;10e2 BRA
              1bd5 00c9  ld   $c9
              1bd6 0021  ld   $21         ;10e4 LDW
              1bd7 004e  ld   $4e         ;10e4 'PrintChar'
              1bd8 00fc  ld   $fc         ;10e6 XORW
              1bd9 0052  ld   $52         ;10e6 'PrintCharScreen'
              1bda 0035  ld   $35         ;10e8 BCC
              1bdb 0072  ld   $72         ;10e9 NE
              1bdc 00f9  ld   $f9
              1bdd 00cf  ld   $cf         ;10eb CALL
              1bde 0076  ld   $76         ;10eb 'PrintValue'
              1bdf 00cf  ld   $cf         ;10ed CALL
              1be0 0050  ld   $50         ;10ed 'PrintS'
              1be1 0020  ld   $20         ;10ef ' '
              1be2 0062  ld   $62         ;10f0 'b'
              1be3 0079  ld   $79         ;10f1 'y'
              1be4 0074  ld   $74         ;10f2 't'
              1be5 0065  ld   $65         ;10f3 'e'
              1be6 0073  ld   $73         ;10f4 's'
              1be7 0020  ld   $20         ;10f5 ' '
              1be8 0066  ld   $66         ;10f6 'f'
              1be9 0072  ld   $72         ;10f7 'r'
              1bea 0065  ld   $65         ;10f8 'e'
              1beb 0065  ld   $65         ;10f9 'e'
              1bec 0000  ld   $00         ;10fa 0
              1bed 0063  ld   $63         ;10fb POP
              1bee 00ff  ld   $ff         ;10fc RET
              1bef 0093  ld   $93         ;10fd INC
              1bf0 001b  ld   $1b
              1bf1 00ff  ld   $ff         ;10ff RET
              1bf2 0011  ld   $11         ;| RAM segment address (high byte first)
              1bf3 00a0  ld   $a0         ;|
              1bf4 0060  ld   $60         ;| Length (1..256)
              1bf5 002b  ld   $2b         ;11a0 STW
              1bf6 007e  ld   $7e         ;11a0 'List'
              1bf7 00cd  ld   $cd         ;11a2 DEF
              1bf8 00c1  ld   $c1
              1bf9 0075  ld   $75         ;11a4 PUSH
              1bfa 002b  ld   $2b         ;11a5 STW
              1bfb fe00  bra  ac          ;+-----------------------------------+
              1bfc fcfd  bra  $1bfd       ;|                                   |
              1bfd 1404  ld   $04,y       ;| Trampoline for page $1b00 lookups |
              1bfe e065  jmp  y,$65       ;|                                   |
              1bff c218  st   [$18]       ;+-----------------------------------+
              1c00 003e  ld   $3e         ;11a5 'i'
              1c01 0021  ld   $21         ;11a7 LDW
              1c02 003a  ld   $3a         ;11a7 'Value'
              1c03 00b8  ld   $b8         ;11a9 SUBW
              1c04 003e  ld   $3e         ;11a9 'i'
              1c05 0035  ld   $35         ;11ab BCC
              1c06 0050  ld   $50         ;11ac LT
              1c07 00b2  ld   $b2
              1c08 002b  ld   $2b         ;11ae STW
              1c09 003a  ld   $3a         ;11ae 'Value'
              1c0a 0093  ld   $93         ;11b0 INC
              1c0b 0042  ld   $42         ;11b0 'k'
              1c0c 0090  ld   $90         ;11b2 BRA
              1c0d 00a7  ld   $a7
              1c0e 0021  ld   $21         ;11b4 LDW
              1c0f 0042  ld   $42         ;11b4 'k'
              1c10 0035  ld   $35         ;11b6 BCC
              1c11 003f  ld   $3f         ;11b7 EQ
              1c12 00bf  ld   $bf
              1c13 0088  ld   $88         ;11b9 ORI
              1c14 0030  ld   $30
              1c15 00cf  ld   $cf         ;11bb CALL
              1c16 004e  ld   $4e         ;11bb 'PrintChar'
              1c17 0059  ld   $59         ;11bd LDI
              1c18 0030  ld   $30
              1c19 002b  ld   $2b         ;11bf STW
              1c1a 0042  ld   $42         ;11bf 'k'
              1c1b 0063  ld   $63         ;11c1 POP
              1c1c 00ff  ld   $ff         ;11c2 RET
              1c1d 002b  ld   $2b         ;11c3 STW
              1c1e 0074  ld   $74         ;11c3 'PrintDigit'
              1c1f 00cd  ld   $cd         ;11c5 DEF
              1c20 00f1  ld   $f1
              1c21 0075  ld   $75         ;11c7 PUSH
              1c22 0059  ld   $59         ;11c8 LDI
              1c23 0000  ld   $00
              1c24 002b  ld   $2b         ;11ca STW
              1c25 0042  ld   $42         ;11ca 'k'
              1c26 00cf  ld   $cf         ;11cc CALL
              1c27 0036  ld   $36         ;11cc 'Keyword'
              1c28 003c  ld   $3c         ;11ce '<'
              1c29 0000  ld   $00         ;11cf 0
              1c2a 0035  ld   $35         ;11d0 BCC
              1c2b 003f  ld   $3f         ;11d1 EQ
              1c2c 00d3  ld   $d3
              1c2d 0093  ld   $93         ;11d3 INC
              1c2e 0042  ld   $42         ;11d3 'k'
              1c2f 00cf  ld   $cf         ;11d5 CALL
              1c30 0036  ld   $36         ;11d5 'Keyword'
              1c31 003e  ld   $3e         ;11d7 '>'
              1c32 0000  ld   $00         ;11d8 0
              1c33 0035  ld   $35         ;11d9 BCC
              1c34 003f  ld   $3f         ;11da EQ
              1c35 00e0  ld   $e0
              1c36 0021  ld   $21         ;11dc LDW
              1c37 0042  ld   $42         ;11dc 'k'
              1c38 00e3  ld   $e3         ;11de ADDI
              1c39 0004  ld   $04
              1c3a 002b  ld   $2b         ;11e0 STW
              1c3b 0042  ld   $42         ;11e0 'k'
              1c3c 00cf  ld   $cf         ;11e2 CALL
              1c3d 0036  ld   $36         ;11e2 'Keyword'
              1c3e 003d  ld   $3d         ;11e4 '='
              1c3f 0000  ld   $00         ;11e5 0
              1c40 0035  ld   $35         ;11e6 BCC
              1c41 003f  ld   $3f         ;11e7 EQ
              1c42 00ed  ld   $ed
              1c43 0021  ld   $21         ;11e9 LDW
              1c44 0042  ld   $42         ;11e9 'k'
              1c45 00e3  ld   $e3         ;11eb ADDI
              1c46 0002  ld   $02
              1c47 002b  ld   $2b         ;11ed STW
              1c48 0042  ld   $42         ;11ed 'k'
              1c49 0021  ld   $21         ;11ef LDW
              1c4a 0042  ld   $42         ;11ef 'k'
              1c4b 0063  ld   $63         ;11f1 POP
              1c4c 00ff  ld   $ff         ;11f2 RET
              1c4d 002b  ld   $2b         ;11f3 STW
              1c4e 0064  ld   $64         ;11f3 'RelOp'
              1c4f 0011  ld   $11         ;11f5 LDWI
              1c50 00a0  ld   $a0
              1c51 001b  ld   $1b
              1c52 00f6  ld   $f6         ;11f8 DEEK
              1c53 002b  ld   $2b         ;11f9 STW
              1c54 0046  ld   $46         ;11f9 'End'
              1c55 00e3  ld   $e3         ;11fb ADDI
              1c56 0002  ld   $02
              1c57 0093  ld   $93         ;11fd INC
              1c58 001b  ld   $1b
              1c59 00ff  ld   $ff         ;11ff RET
              1c5a 0012  ld   $12         ;| RAM segment address (high byte first)
              1c5b 00a0  ld   $a0         ;|
              1c5c 005d  ld   $5d         ;| Length (1..256)
              1c5d 002b  ld   $2b         ;12a0 STW
              1c5e 005a  ld   $5a         ;12a0 'Active'
              1c5f 00cd  ld   $cd         ;12a2 DEF
              1c60 00f7  ld   $f7
              1c61 0021  ld   $21         ;12a4 LDW
              1c62 001a  ld   $1a
              1c63 002b  ld   $2b         ;12a6 STW
              1c64 004c  ld   $4c         ;12a6 'tmp'
              1c65 001a  ld   $1a         ;12a8 LD
              1c66 0030  ld   $30         ;12a8 'Pos'
              1c67 00e6  ld   $e6         ;12aa SUBI
              1c68 0002  ld   $02
              1c69 0035  ld   $35         ;12ac BCC
              1c6a 0056  ld   $56         ;12ad LE
              1c6b 00af  ld   $af
              1c6c 00cf  ld   $cf         ;12af CALL
              1c6d 0058  ld   $58         ;12af 'Newline'
              1c6e 0059  ld   $59         ;12b1 LDI
              1c6f 0000  ld   $00
              1c70 005e  ld   $5e         ;12b3 ST
              1c71 001c  ld   $1c
              1c72 0021  ld   $21         ;12b5 LDW
              1c73 004c  ld   $4c         ;12b5 'tmp'
              1c74 00ad  ld   $ad         ;12b7 PEEK
              1c75 0035  ld   $35         ;12b8 BCC
              1c76 003f  ld   $3f         ;12b9 EQ
              1c77 00e3  ld   $e3
              1c78 0059  ld   $59         ;12bb LDI
              1c79 003f  ld   $3f
              1c7a 00cf  ld   $cf         ;12bd CALL
              1c7b 004e  ld   $4e         ;12bd 'PrintChar'
              1c7c 0021  ld   $21         ;12bf LDW
              1c7d 004c  ld   $4c         ;12bf 'tmp'
              1c7e 00ad  ld   $ad         ;12c1 PEEK
              1c7f 0093  ld   $93         ;12c2 INC
              1c80 004c  ld   $4c         ;12c2 'tmp'
              1c81 0035  ld   $35         ;12c4 BCC
              1c82 0072  ld   $72         ;12c5 NE
              1c83 00bb  ld   $bb
              1c84 00cf  ld   $cf         ;12c7 CALL
              1c85 0050  ld   $50         ;12c7 'PrintS'
              1c86 0020  ld   $20         ;12c9 ' '
              1c87 0065  ld   $65         ;12ca 'e'
              1c88 0072  ld   $72         ;12cb 'r'
              1c89 0072  ld   $72         ;12cc 'r'
              1c8a 006f  ld   $6f         ;12cd 'o'
              1c8b 0072  ld   $72         ;12ce 'r'
              1c8c 0000  ld   $00         ;12cf 0
              1c8d 00e6  ld   $e6         ;12d0 SUBI
              1c8e 0020  ld   $20
              1c8f 00f8  ld   $f8         ;12d2 ANDW
              1c90 005a  ld   $5a         ;12d2 'Active'
              1c91 00f6  ld   $f6         ;12d4 DEEK
              1c92 0035  ld   $35         ;12d5 BCC
              1c93 003f  ld   $3f         ;12d6 EQ
              1c94 00e1  ld   $e1
              1c95 002b  ld   $2b         ;12d8 STW
              1c96 003a  ld   $3a         ;12d8 'Value'
              1c97 00cf  ld   $cf         ;12da CALL
              1c98 0050  ld   $50         ;12da 'PrintS'
              1c99 0020  ld   $20         ;12dc ' '
              1c9a 0069  ld   $69         ;12dd 'i'
              1c9b 006e  ld   $6e         ;12de 'n'
              1c9c 0020  ld   $20         ;12df ' '
              1c9d 0000  ld   $00         ;12e0 0
              1c9e 00cf  ld   $cf         ;12e1 CALL
              1c9f 0076  ld   $76         ;12e1 'PrintValue'
              1ca0 00cf  ld   $cf         ;12e3 CALL
              1ca1 0058  ld   $58         ;12e3 'Newline'
              1ca2 00cf  ld   $cf         ;12e5 CALL
              1ca3 0050  ld   $50         ;12e5 'PrintS'
              1ca4 004f  ld   $4f         ;12e7 'O'
              1ca5 006b  ld   $6b         ;12e8 'k'
              1ca6 0000  ld   $00         ;12e9 0
              1ca7 00cf  ld   $cf         ;12ea CALL
              1ca8 0058  ld   $58         ;12ea 'Newline'
              1ca9 0059  ld   $59         ;12ec LDI
              1caa 0000  ld   $00
              1cab 00cf  ld   $cf         ;12ee CALL
              1cac 005c  ld   $5c         ;12ee 'GetLine'
              1cad 0035  ld   $35         ;12f0 BCC
              1cae 003f  ld   $3f         ;12f1 EQ
              1caf 00ea  ld   $ea
              1cb0 00cf  ld   $cf         ;12f3 CALL
              1cb1 0072  ld   $72         ;12f3 'Insert'
              1cb2 0035  ld   $35         ;12f5 BCC
              1cb3 004d  ld   $4d         ;12f6 GT
              1cb4 00ea  ld   $ea
              1cb5 0011  ld   $11         ;12f8 785
              1cb6 002b  ld   $2b         ;12f9 STW
              1cb7 0054  ld   $54         ;12f9 'Prompt'
              1cb8 00cf  ld   $cf         ;12fb CALL
              1cb9 0066  ld   $66         ;12fb 'Statements'
              1cba 0013  ld   $13         ;| RAM segment address (high byte first)
              1cbb 00a0  ld   $a0         ;|
              1cbc 0059  ld   $59         ;| Length (1..256)
              1cbd 0021  ld   $21         ;13a0 LDW
              1cbe 005a  ld   $5a         ;13a0 'Active'
              1cbf 00ad  ld   $ad         ;13a2 PEEK
              1cc0 0035  ld   $35         ;13a3 BCC
              1cc1 003f  ld   $3f         ;13a4 EQ
              1cc2 00f3  ld   $f3
              1cc3 008c  ld   $8c         ;13a6 XORI
              1cc4 003a  ld   $3a
              1cc5 0035  ld   $35         ;13a8 BCC
              1cc6 003f  ld   $3f         ;13a9 EQ
              1cc7 00f3  ld   $f3
              1cc8 0021  ld   $21         ;13ab LDW
              1cc9 005a  ld   $5a         ;13ab 'Active'
              1cca 00ad  ld   $ad         ;13ad PEEK
              1ccb 0035  ld   $35         ;13ae BCC
              1ccc 003f  ld   $3f         ;13af EQ
              1ccd 00f1  ld   $f1
              1cce 008c  ld   $8c         ;13b1 XORI
              1ccf 003a  ld   $3a
              1cd0 0035  ld   $35         ;13b3 BCC
              1cd1 003f  ld   $3f         ;13b4 EQ
              1cd2 00f1  ld   $f1
              1cd3 008c  ld   $8c         ;13b6 XORI
              1cd4 0018  ld   $18
              1cd5 0035  ld   $35         ;13b8 BCC
              1cd6 0072  ld   $72         ;13b9 NE
              1cd7 00ce  ld   $ce
              1cd8 0093  ld   $93         ;13bb INC
              1cd9 005a  ld   $5a         ;13bb 'Active'
              1cda 00cf  ld   $cf         ;13bd CALL
              1cdb 0036  ld   $36         ;13bd 'Keyword'
              1cdc 0022  ld   $22         ;13bf 34
              1cdd 0000  ld   $00         ;13c0 0
              1cde 0035  ld   $35         ;13c1 BCC
              1cdf 0072  ld   $72         ;13c2 NE
              1ce0 00cc  ld   $cc
              1ce1 0021  ld   $21         ;13c4 LDW
              1ce2 005a  ld   $5a         ;13c4 'Active'
              1ce3 00ad  ld   $ad         ;13c6 PEEK
              1ce4 0035  ld   $35         ;13c7 BCC
              1ce5 003f  ld   $3f         ;13c8 EQ
              1ce6 00cc  ld   $cc
              1ce7 00cf  ld   $cf         ;13ca CALL
              1ce8 004e  ld   $4e         ;13ca 'PrintChar'
              1ce9 0090  ld   $90         ;13cc BRA
              1cea 00b9  ld   $b9
              1ceb 0090  ld   $90         ;13ce BRA
              1cec 00d2  ld   $d2
              1ced 00cf  ld   $cf         ;13d0 CALL
              1cee 0038  ld   $38         ;13d0 'Expression'
              1cef 00cf  ld   $cf         ;13d2 CALL
              1cf0 0076  ld   $76         ;13d2 'PrintValue'
              1cf1 00cf  ld   $cf         ;13d4 CALL
              1cf2 0036  ld   $36         ;13d4 'Keyword'
              1cf3 002c  ld   $2c         ;13d6 44
              1cf4 0000  ld   $00         ;13d7 0
              1cf5 0035  ld   $35         ;13d8 BCC
              1cf6 003f  ld   $3f         ;13d9 EQ
              1cf7 00e8  ld   $e8
              1cf8 0059  ld   $59         ;13db LDI
              1cf9 0020  ld   $20
              1cfa 00cf  ld   $cf         ;13dd CALL
              1cfb fe00  bra  ac          ;+-----------------------------------+
              1cfc fcfd  bra  $1cfd       ;|                                   |
              1cfd 1404  ld   $04,y       ;| Trampoline for page $1c00 lookups |
              1cfe e065  jmp  y,$65       ;|                                   |
              1cff c218  st   [$18]       ;+-----------------------------------+
              1d00 004e  ld   $4e         ;13dd 'PrintChar'
              1d01 001a  ld   $1a         ;13df LD
              1d02 0030  ld   $30         ;13df 'Pos'
              1d03 00e6  ld   $e6         ;13e1 SUBI
              1d04 0002  ld   $02
              1d05 0082  ld   $82         ;13e3 ANDI
              1d06 0007  ld   $07
              1d07 0035  ld   $35         ;13e5 BCC
              1d08 0072  ld   $72         ;13e6 NE
              1d09 00d9  ld   $d9
              1d0a 0090  ld   $90         ;13e8 BRA
              1d0b 00a9  ld   $a9
              1d0c 00cf  ld   $cf         ;13ea CALL
              1d0d 0036  ld   $36         ;13ea 'Keyword'
              1d0e 003b  ld   $3b         ;13ec 59
              1d0f 0000  ld   $00         ;13ed 0
              1d10 0035  ld   $35         ;13ee BCC
              1d11 0072  ld   $72         ;13ef NE
              1d12 00a9  ld   $a9
              1d13 00cf  ld   $cf         ;13f1 CALL
              1d14 0058  ld   $58         ;13f1 'Newline'
              1d15 0090  ld   $90         ;13f3 BRA
              1d16 00f5  ld   $f5
              1d17 00cf  ld   $cf         ;13f5 CALL
              1d18 0058  ld   $58         ;13f5 'Newline'
              1d19 00cf  ld   $cf         ;13f7 CALL
              1d1a 0062  ld   $62         ;13f7 'EndOfLine'
              1d1b 0014  ld   $14         ;| RAM segment address (high byte first)
              1d1c 00a0  ld   $a0         ;|
              1d1d 005d  ld   $5d         ;| Length (1..256)
              1d1e 00cf  ld   $cf         ;14a0 CALL
              1d1f 0036  ld   $36         ;14a0 'Keyword'
              1d20 0069  ld   $69         ;14a2 'i'
              1d21 006e  ld   $6e         ;14a3 'n'
              1d22 0070  ld   $70         ;14a4 'p'
              1d23 0075  ld   $75         ;14a5 'u'
              1d24 0074  ld   $74         ;14a6 't'
              1d25 0000  ld   $00         ;14a7 0
              1d26 0035  ld   $35         ;14a8 BCC
              1d27 003f  ld   $3f         ;14a9 EQ
              1d28 00e4  ld   $e4
              1d29 0021  ld   $21         ;14ab LDW
              1d2a 005a  ld   $5a         ;14ab 'Active'
              1d2b 00ad  ld   $ad         ;14ad PEEK
              1d2c 0035  ld   $35         ;14ae BCC
              1d2d 003f  ld   $3f         ;14af EQ
              1d2e 00b1  ld   $b1
              1d2f 00cf  ld   $cf         ;14b1 CALL
              1d30 004e  ld   $4e         ;14b1 'PrintChar'
              1d31 00cf  ld   $cf         ;14b3 CALL
              1d32 0040  ld   $40         ;14b3 'Variable'
              1d33 002b  ld   $2b         ;14b5 STW
              1d34 0068  ld   $68         ;14b5 'Address'
              1d35 00cf  ld   $cf         ;14b7 CALL
              1d36 0034  ld   $34         ;14b7 'Spaces'
              1d37 00df  ld   $df         ;14b9 ALLOC
              1d38 00fc  ld   $fc
              1d39 0021  ld   $21         ;14bb LDW
              1d3a 005a  ld   $5a         ;14bb 'Active'
              1d3b 00ec  ld   $ec         ;14bd STLW
              1d3c 0002  ld   $02
              1d3d 0088  ld   $88         ;14bf ORI
              1d3e 001f  ld   $1f
              1d3f 00e6  ld   $e6         ;14c1 SUBI
              1d40 001f  ld   $1f
              1d41 00f6  ld   $f6         ;14c3 DEEK
              1d42 00ec  ld   $ec         ;14c4 STLW
              1d43 0000  ld   $00
              1d44 0059  ld   $59         ;14c6 LDI
              1d45 003f  ld   $3f
              1d46 00cf  ld   $cf         ;14c8 CALL
              1d47 004e  ld   $4e         ;14c8 'PrintChar'
              1d48 00cf  ld   $cf         ;14ca CALL
              1d49 0058  ld   $58         ;14ca 'Newline'
              1d4a 00ee  ld   $ee         ;14cc LDLW
              1d4b 0000  ld   $00
              1d4c 00cf  ld   $cf         ;14ce CALL
              1d4d 005c  ld   $5c         ;14ce 'GetLine'
              1d4e 0035  ld   $35         ;14d0 BCC
              1d4f 003f  ld   $3f         ;14d1 EQ
              1d50 00c4  ld   $c4
              1d51 00cf  ld   $cf         ;14d3 CALL
              1d52 0038  ld   $38         ;14d3 'Expression'
              1d53 00f3  ld   $f3         ;14d5 DOKE
              1d54 0068  ld   $68         ;14d5 'Address'
              1d55 00ee  ld   $ee         ;14d7 LDLW
              1d56 0002  ld   $02
              1d57 002b  ld   $2b         ;14d9 STW
              1d58 005a  ld   $5a         ;14d9 'Active'
              1d59 00df  ld   $df         ;14db ALLOC
              1d5a 0004  ld   $04
              1d5b 00cf  ld   $cf         ;14dd CALL
              1d5c 0036  ld   $36         ;14dd 'Keyword'
              1d5d 002c  ld   $2c         ;14df ','
              1d5e 0000  ld   $00         ;14e0 0
              1d5f 0035  ld   $35         ;14e1 BCC
              1d60 0072  ld   $72         ;14e2 NE
              1d61 00a9  ld   $a9
              1d62 00cf  ld   $cf         ;14e4 CALL
              1d63 0062  ld   $62         ;14e4 'EndOfLine'
              1d64 00cf  ld   $cf         ;14e6 CALL
              1d65 0036  ld   $36         ;14e6 'Keyword'
              1d66 006e  ld   $6e         ;14e8 'n'
              1d67 0065  ld   $65         ;14e9 'e'
              1d68 0077  ld   $77         ;14ea 'w'
              1d69 0000  ld   $00         ;14eb 0
              1d6a 0035  ld   $35         ;14ec BCC
              1d6b 003f  ld   $3f         ;14ed EQ
              1d6c 00f6  ld   $f6
              1d6d 00cf  ld   $cf         ;14ef CALL
              1d6e 0078  ld   $78         ;14ef 'Clear'
              1d6f 002b  ld   $2b         ;14f1 STW
              1d70 0046  ld   $46         ;14f1 'End'
              1d71 00cf  ld   $cf         ;14f3 CALL
              1d72 007e  ld   $7e         ;14f3 'List'
              1d73 00cf  ld   $cf         ;14f5 CALL
              1d74 0054  ld   $54         ;14f5 'Prompt'
              1d75 0000  ld   $00         ;14f7 0
              1d76 0011  ld   $11         ;14f8 LDWI
              1d77 00a0  ld   $a0
              1d78 0015  ld   $15
              1d79 00cf  ld   $cf         ;14fb CALL
              1d7a 0018  ld   $18         ;14fb vAC
              1d7b 0015  ld   $15         ;| RAM segment address (high byte first)
              1d7c 00a0  ld   $a0         ;|
              1d7d 005c  ld   $5c         ;| Length (1..256)
              1d7e 00cf  ld   $cf         ;15a0 CALL
              1d7f 0036  ld   $36         ;15a0 'Keyword'
              1d80 0063  ld   $63         ;15a2 'c'
              1d81 006c  ld   $6c         ;15a3 'l'
              1d82 0073  ld   $73         ;15a4 's'
              1d83 0000  ld   $00         ;15a5 0
              1d84 0035  ld   $35         ;15a6 BCC
              1d85 003f  ld   $3f         ;15a7 EQ
              1d86 00cb  ld   $cb
              1d87 0011  ld   $11         ;15a9 LDWI
              1d88 0000  ld   $00
              1d89 0001  ld   $01
              1d8a 00ad  ld   $ad         ;15ac PEEK
              1d8b 005e  ld   $5e         ;15ad ST
              1d8c 0031  ld   $31         ;15ad 'Pos'+1
              1d8d 0059  ld   $59         ;15af LDI
              1d8e 000e  ld   $0e
              1d8f 002b  ld   $2b         ;15b1 STW
              1d90 006a  ld   $6a         ;15b1 'j'
              1d91 00cf  ld   $cf         ;15b3 CALL
              1d92 0058  ld   $58         ;15b3 'Newline'
              1d93 0021  ld   $21         ;15b5 LDW
              1d94 006a  ld   $6a         ;15b5 'j'
              1d95 00e6  ld   $e6         ;15b7 SUBI
              1d96 0001  ld   $01
              1d97 0035  ld   $35         ;15b9 BCC
              1d98 004d  ld   $4d         ;15ba GT
              1d99 00af  ld   $af
              1d9a 00cf  ld   $cf         ;15bc CALL
              1d9b 0058  ld   $58         ;15bc 'Newline'
              1d9c 0011  ld   $11         ;15be LDWI
              1d9d 0000  ld   $00
              1d9e 0001  ld   $01
              1d9f 00ad  ld   $ad         ;15c1 PEEK
              1da0 008c  ld   $8c         ;15c2 XORI
              1da1 0008  ld   $08
              1da2 0035  ld   $35         ;15c4 BCC
              1da3 0072  ld   $72         ;15c5 NE
              1da4 00ba  ld   $ba
              1da5 0059  ld   $59         ;15c7 LDI
              1da6 0008  ld   $08
              1da7 005e  ld   $5e         ;15c9 ST
              1da8 0031  ld   $31         ;15c9 'Pos'+1
              1da9 00cf  ld   $cf         ;15cb CALL
              1daa 0062  ld   $62         ;15cb 'EndOfLine'
              1dab 00cf  ld   $cf         ;15cd CALL
              1dac 0036  ld   $36         ;15cd 'Keyword'
              1dad 006c  ld   $6c         ;15cf 'l'
              1dae 0069  ld   $69         ;15d0 'i'
              1daf 0073  ld   $73         ;15d1 's'
              1db0 0074  ld   $74         ;15d2 't'
              1db1 0000  ld   $00         ;15d3 0
              1db2 0035  ld   $35         ;15d4 BCC
              1db3 003f  ld   $3f         ;15d5 EQ
              1db4 00d9  ld   $d9
              1db5 00cf  ld   $cf         ;15d7 CALL
              1db6 007e  ld   $7e         ;15d7 'List'
              1db7 00cf  ld   $cf         ;15d9 CALL
              1db8 0062  ld   $62         ;15d9 'EndOfLine'
              1db9 00cf  ld   $cf         ;15db CALL
              1dba 0036  ld   $36         ;15db 'Keyword'
              1dbb 0072  ld   $72         ;15dd 'r'
              1dbc 0075  ld   $75         ;15de 'u'
              1dbd 006e  ld   $6e         ;15df 'n'
              1dbe 0000  ld   $00         ;15e0 0
              1dbf 0035  ld   $35         ;15e1 BCC
              1dc0 003f  ld   $3f         ;15e2 EQ
              1dc1 00e9  ld   $e9
              1dc2 00cf  ld   $cf         ;15e4 CALL
              1dc3 0078  ld   $78         ;15e4 'Clear'
              1dc4 00f6  ld   $f6         ;15e6 DEEK
              1dc5 002b  ld   $2b         ;15e7 STW
              1dc6 003a  ld   $3a         ;15e7 'Value'
              1dc7 00cf  ld   $cf         ;15e9 CALL
              1dc8 005e  ld   $5e         ;15e9 'GotoValue'
              1dc9 00cf  ld   $cf         ;15eb CALL
              1dca 0036  ld   $36         ;15eb 'Keyword'
              1dcb 0065  ld   $65         ;15ed 'e'
              1dcc 006e  ld   $6e         ;15ee 'n'
              1dcd 0064  ld   $64         ;15ef 'd'
              1dce 0000  ld   $00         ;15f0 0
              1dcf 0035  ld   $35         ;15f1 BCC
              1dd0 003f  ld   $3f         ;15f2 EQ
              1dd1 00f5  ld   $f5
              1dd2 00cf  ld   $cf         ;15f4 CALL
              1dd3 0054  ld   $54         ;15f4 'Prompt'
              1dd4 0000  ld   $00         ;15f6 0
              1dd5 0011  ld   $11         ;15f7 LDWI
              1dd6 00a0  ld   $a0
              1dd7 0016  ld   $16
              1dd8 00cf  ld   $cf         ;15fa CALL
              1dd9 0018  ld   $18         ;15fa vAC
              1dda 0016  ld   $16         ;| RAM segment address (high byte first)
              1ddb 00a0  ld   $a0         ;|
              1ddc 004e  ld   $4e         ;| Length (1..256)
              1ddd 00cf  ld   $cf         ;16a0 CALL
              1dde 0036  ld   $36         ;16a0 'Keyword'
              1ddf 006c  ld   $6c         ;16a2 'l'
              1de0 0065  ld   $65         ;16a3 'e'
              1de1 0074  ld   $74         ;16a4 't'
              1de2 0000  ld   $00         ;16a5 0
              1de3 00cf  ld   $cf         ;16a6 CALL
              1de4 0040  ld   $40         ;16a6 'Variable'
              1de5 002b  ld   $2b         ;16a8 STW
              1de6 0068  ld   $68         ;16a8 'Address'
              1de7 00cf  ld   $cf         ;16aa CALL
              1de8 0034  ld   $34         ;16aa 'Spaces'
              1de9 00cf  ld   $cf         ;16ac CALL
              1dea 0036  ld   $36         ;16ac 'Keyword'
              1deb 0028  ld   $28         ;16ae 40
              1dec 0000  ld   $00         ;16af 0
              1ded 0035  ld   $35         ;16b0 BCC
              1dee 003f  ld   $3f         ;16b1 EQ
              1def 00dd  ld   $dd
              1df0 00cf  ld   $cf         ;16b3 CALL
              1df1 0038  ld   $38         ;16b3 'Expression'
              1df2 0035  ld   $35         ;16b5 BCC
              1df3 0053  ld   $53         ;16b6 GE
              1df4 00b8  ld   $b8
              1df5 00cf  ld   $cf         ;16b8 CALL
              1df6 0044  ld   $44         ;16b8 'ValueError'
              1df7 001a  ld   $1a         ;16ba LD
              1df8 0069  ld   $69         ;16ba 'Address'+1
              1df9 00b8  ld   $b8         ;16bc SUBW
              1dfa 003a  ld   $3a         ;16bc 'Value'
              1dfb fe00  bra  ac          ;+-----------------------------------+
              1dfc fcfd  bra  $1dfd       ;|                                   |
              1dfd 1404  ld   $04,y       ;| Trampoline for page $1d00 lookups |
              1dfe e065  jmp  y,$65       ;|                                   |
              1dff c218  st   [$18]       ;+-----------------------------------+
              1e00 00e6  ld   $e6         ;16be SUBI
              1e01 0002  ld   $02
              1e02 005e  ld   $5e         ;16c0 ST
              1e03 0069  ld   $69         ;16c0 'Address'+1
              1e04 0021  ld   $21         ;16c2 LDW
              1e05 0046  ld   $46         ;16c2 'End'
              1e06 00fc  ld   $fc         ;16c4 XORW
              1e07 0068  ld   $68         ;16c4 'Address'
              1e08 0035  ld   $35         ;16c6 BCC
              1e09 0053  ld   $53         ;16c7 GE
              1e0a 00cb  ld   $cb
              1e0b 0021  ld   $21         ;16c9 LDW
              1e0c 0046  ld   $46         ;16c9 'End'
              1e0d 0090  ld   $90         ;16cb BRA
              1e0e 00cf  ld   $cf
              1e0f 0021  ld   $21         ;16cd LDW
              1e10 0068  ld   $68         ;16cd 'Address'
              1e11 00b8  ld   $b8         ;16cf SUBW
              1e12 0046  ld   $46         ;16cf 'End'
              1e13 0035  ld   $35         ;16d1 BCC
              1e14 0053  ld   $53         ;16d2 GE
              1e15 00d4  ld   $d4
              1e16 00cf  ld   $cf         ;16d4 CALL
              1e17 0044  ld   $44         ;16d4 'ValueError'
              1e18 00cf  ld   $cf         ;16d6 CALL
              1e19 0036  ld   $36         ;16d6 'Keyword'
              1e1a 0029  ld   $29         ;16d8 41
              1e1b 0000  ld   $00         ;16d9 0
              1e1c 0035  ld   $35         ;16da BCC
              1e1d 0072  ld   $72         ;16db NE
              1e1e 00dd  ld   $dd
              1e1f 00cf  ld   $cf         ;16dd CALL
              1e20 0048  ld   $48         ;16dd 'SyntaxError'
              1e21 00cf  ld   $cf         ;16df CALL
              1e22 0036  ld   $36         ;16df 'Keyword'
              1e23 003d  ld   $3d         ;16e1 '='
              1e24 0000  ld   $00         ;16e2 0
              1e25 0035  ld   $35         ;16e3 BCC
              1e26 0072  ld   $72         ;16e4 NE
              1e27 00e6  ld   $e6
              1e28 00cf  ld   $cf         ;16e6 CALL
              1e29 0048  ld   $48         ;16e6 'SyntaxError'
              1e2a 00cf  ld   $cf         ;16e8 CALL
              1e2b 0038  ld   $38         ;16e8 'Expression'
              1e2c 00f3  ld   $f3         ;16ea DOKE
              1e2d 0068  ld   $68         ;16ea 'Address'
              1e2e 00cf  ld   $cf         ;16ec CALL
              1e2f 0062  ld   $62         ;16ec 'EndOfLine'
              1e30 0017  ld   $17         ;| RAM segment address (high byte first)
              1e31 00a0  ld   $a0         ;|
              1e32 005f  ld   $5f         ;| Length (1..256)
              1e33 0021  ld   $21         ;17a0 LDW
              1e34 0000  ld   $00
              1e35 005e  ld   $5e         ;17a2 ST
              1e36 0027  ld   $27
              1e37 00e6  ld   $e6         ;17a4 SUBI
              1e38 0060  ld   $60
              1e39 002b  ld   $2b         ;17a6 STW
              1e3a 0068  ld   $68         ;17a6 'Address'
              1e3b 00cd  ld   $cd         ;17a8 DEF
              1e3c 00e8  ld   $e8
              1e3d 0075  ld   $75         ;17aa PUSH
              1e3e 002b  ld   $2b         ;17ab STW
              1e3f 0042  ld   $42         ;17ab 'k'
              1e40 001a  ld   $1a         ;17ad LD
              1e41 0027  ld   $27
              1e42 00e3  ld   $e3         ;17af ADDI
              1e43 0008  ld   $08
              1e44 005e  ld   $5e         ;17b1 ST
              1e45 0027  ld   $27
              1e46 001a  ld   $1a         ;17b3 LD
              1e47 0030  ld   $30         ;17b3 'Pos'
              1e48 00e6  ld   $e6         ;17b5 SUBI
              1e49 0006  ld   $06
              1e4a 0035  ld   $35         ;17b7 BCC
              1e4b 0053  ld   $53         ;17b8 GE
              1e4c 00de  ld   $de
              1e4d 0059  ld   $59         ;17ba LDI
              1e4e 000a  ld   $0a
              1e4f 00f0  ld   $f0         ;17bc POKE
              1e50 0068  ld   $68         ;17bc 'Address'
              1e51 0021  ld   $21         ;17be LDW
              1e52 0068  ld   $68         ;17be 'Address'
              1e53 0088  ld   $88         ;17c0 ORI
              1e54 001f  ld   $1f
              1e55 008c  ld   $8c         ;17c2 XORI
              1e56 001f  ld   $1f
              1e57 002b  ld   $2b         ;17c4 STW
              1e58 0068  ld   $68         ;17c4 'Address'
              1e59 002b  ld   $2b         ;17c6 STW
              1e5a 0024  ld   $24
              1e5b 0059  ld   $59         ;17c8 LDI
              1e5c 0001  ld   $01
              1e5d 005e  ld   $5e         ;17ca ST
              1e5e 0026  ld   $26
              1e5f 0011  ld   $11         ;17cc LDWI
              1e60 0006  ld   $06
              1e61 000b  ld   $0b
              1e62 002b  ld   $2b         ;17cf STW
              1e63 0022  ld   $22
              1e64 00b4  ld   $b4         ;17d1 SYS
              1e65 00e6  ld   $e6
              1e66 0035  ld   $35         ;17d3 BCC
              1e67 003f  ld   $3f         ;17d4 EQ
              1e68 00da  ld   $da
              1e69 0059  ld   $59         ;17d6 LDI
              1e6a 0003  ld   $03
              1e6b 005e  ld   $5e         ;17d8 ST
              1e6c 000f  ld   $0f
              1e6d 00cf  ld   $cf         ;17da CALL
              1e6e 0056  ld   $56         ;17da 'TestBreak'
              1e6f 0059  ld   $59         ;17dc LDI
              1e70 0008  ld   $08
              1e71 005e  ld   $5e         ;17de ST
              1e72 0027  ld   $27
              1e73 0021  ld   $21         ;17e0 LDW
              1e74 0042  ld   $42         ;17e0 'k'
              1e75 00f0  ld   $f0         ;17e2 POKE
              1e76 0068  ld   $68         ;17e2 'Address'
              1e77 0093  ld   $93         ;17e4 INC
              1e78 0068  ld   $68         ;17e4 'Address'
              1e79 00cf  ld   $cf         ;17e6 CALL
              1e7a 0052  ld   $52         ;17e6 'PrintCharScreen'
              1e7b 0063  ld   $63         ;17e8 POP
              1e7c 00ff  ld   $ff         ;17e9 RET
              1e7d 002b  ld   $2b         ;17ea STW
              1e7e 004e  ld   $4e         ;17ea 'PrintChar'
              1e7f 001a  ld   $1a         ;17ec LD
              1e80 000f  ld   $0f
              1e81 008c  ld   $8c         ;17ee XORI
              1e82 00ff  ld   $ff
              1e83 0035  ld   $35         ;17f0 BCC
              1e84 0072  ld   $72         ;17f1 NE
              1e85 00ea  ld   $ea
              1e86 00cf  ld   $cf         ;17f3 CALL
              1e87 007e  ld   $7e         ;17f3 'List'
              1e88 0059  ld   $59         ;17f5 LDI
              1e89 0020  ld   $20
              1e8a 00cf  ld   $cf         ;17f7 CALL
              1e8b 004e  ld   $4e         ;17f7 'PrintChar'
              1e8c 0021  ld   $21         ;17f9 LDW
              1e8d 0052  ld   $52         ;17f9 'PrintCharScreen'
              1e8e 002b  ld   $2b         ;17fb STW
              1e8f 004e  ld   $4e         ;17fb 'PrintChar'
              1e90 00cf  ld   $cf         ;17fd CALL
              1e91 0062  ld   $62         ;17fd 'EndOfLine'
              1e92 0018  ld   $18         ;| RAM segment address (high byte first)
              1e93 00a0  ld   $a0         ;|
              1e94 005e  ld   $5e         ;| Length (1..256)
              1e95 0011  ld   $11         ;18a0 LDWI
              1e96 00e1  ld   $e1
              1e97 0004  ld   $04
              1e98 002b  ld   $2b         ;18a3 STW
              1e99 0022  ld   $22
              1e9a 0059  ld   $59         ;18a5 LDI
              1e9b 0000  ld   $00
              1e9c 005e  ld   $5e         ;18a7 ST
              1e9d 0030  ld   $30         ;18a7 'Pos'
              1e9e 005e  ld   $5e         ;18a9 ST
              1e9f 0026  ld   $26
              1ea0 001a  ld   $1a         ;18ab LD
              1ea1 0031  ld   $31         ;18ab 'Pos'+1
              1ea2 00e3  ld   $e3         ;18ad ADDI
              1ea3 000f  ld   $0f
              1ea4 0082  ld   $82         ;18af ANDI
              1ea5 0078  ld   $78
              1ea6 0035  ld   $35         ;18b1 BCC
              1ea7 0072  ld   $72         ;18b2 NE
              1ea8 00b4  ld   $b4
              1ea9 0059  ld   $59         ;18b4 LDI
              1eaa 0008  ld   $08
              1eab 005e  ld   $5e         ;18b6 ST
              1eac 0031  ld   $31         ;18b6 'Pos'+1
              1ead 0021  ld   $21         ;18b8 LDW
              1eae 002a  ld   $2a
              1eaf 002b  ld   $2b         ;18ba STW
              1eb0 0024  ld   $24
              1eb1 0021  ld   $21         ;18bc LDW
              1eb2 0030  ld   $30         ;18bc 'Pos'
              1eb3 002b  ld   $2b         ;18be STW
              1eb4 0028  ld   $28
              1eb5 00b4  ld   $b4         ;18c0 SYS
              1eb6 00cb  ld   $cb
              1eb7 0093  ld   $93         ;18c2 INC
              1eb8 0028  ld   $28
              1eb9 00b4  ld   $b4         ;18c4 SYS
              1eba 00cb  ld   $cb
              1ebb 0093  ld   $93         ;18c6 INC
              1ebc 0028  ld   $28
              1ebd 001a  ld   $1a         ;18c8 LD
              1ebe 0028  ld   $28
              1ebf 008c  ld   $8c         ;18ca XORI
              1ec0 00a0  ld   $a0
              1ec1 0035  ld   $35         ;18cc BCC
              1ec2 0072  ld   $72         ;18cd NE
              1ec3 00be  ld   $be
              1ec4 0011  ld   $11         ;18cf LDWI
              1ec5 00ee  ld   $ee
              1ec6 0001  ld   $01
              1ec7 002b  ld   $2b         ;18d2 STW
              1ec8 003e  ld   $3e         ;18d2 'i'
              1ec9 0088  ld   $88         ;18d4 ORI
              1eca 00ff  ld   $ff
              1ecb 00f6  ld   $f6         ;18d6 DEEK
              1ecc 00b8  ld   $b8         ;18d7 SUBW
              1ecd 0030  ld   $30         ;18d7 'Pos'
              1ece 001a  ld   $1a         ;18d9 LD
              1ecf 0019  ld   $19
              1ed0 0035  ld   $35         ;18db BCC
              1ed1 0072  ld   $72         ;18dc NE
              1ed2 00f7  ld   $f7
              1ed3 0021  ld   $21         ;18de LDW
              1ed4 003e  ld   $3e         ;18de 'i'
              1ed5 00ad  ld   $ad         ;18e0 PEEK
              1ed6 00e6  ld   $e6         ;18e1 SUBI
              1ed7 0078  ld   $78
              1ed8 0035  ld   $35         ;18e3 BCC
              1ed9 0053  ld   $53         ;18e4 GE
              1eda 00e8  ld   $e8
              1edb 008c  ld   $8c         ;18e6 XORI
              1edc 0080  ld   $80
              1edd 0090  ld   $90         ;18e8 BRA
              1ede 00ea  ld   $ea
              1edf 008c  ld   $8c         ;18ea XORI
              1ee0 0008  ld   $08
              1ee1 00f0  ld   $f0         ;18ec POKE
              1ee2 003e  ld   $3e         ;18ec 'i'
              1ee3 0021  ld   $21         ;18ee LDW
              1ee4 003e  ld   $3e         ;18ee 'i'
              1ee5 00e6  ld   $e6         ;18f0 SUBI
              1ee6 0002  ld   $02
              1ee7 002b  ld   $2b         ;18f2 STW
              1ee8 003e  ld   $3e         ;18f2 'i'
              1ee9 008c  ld   $8c         ;18f4 XORI
              1eea 00fe  ld   $fe
              1eeb 0035  ld   $35         ;18f6 BCC
              1eec 0072  ld   $72         ;18f7 NE
              1eed 00dc  ld   $dc
              1eee 0093  ld   $93         ;18f9 INC
              1eef 0030  ld   $30         ;18f9 'Pos'
              1ef0 0093  ld   $93         ;18fb INC
              1ef1 0030  ld   $30         ;18fb 'Pos'
              1ef2 00ff  ld   $ff         ;18fd RET
              1ef3 0019  ld   $19         ;| RAM segment address (high byte first)
              1ef4 00a0  ld   $a0         ;|
              1ef5 0060  ld   $60         ;| Length (1..256)
              1ef6 0059  ld   $59         ;19a0 LDI
              1ef7 0001  ld   $01
              1ef8 002b  ld   $2b         ;19a2 STW
              1ef9 0024  ld   $24
              1efa 0011  ld   $11         ;19a4 LDWI
              1efb fe00  bra  ac          ;+-----------------------------------+
              1efc fcfd  bra  $1efd       ;|                                   |
              1efd 1404  ld   $04,y       ;| Trampoline for page $1e00 lookups |
              1efe e065  jmp  y,$65       ;|                                   |
              1eff c218  st   [$18]       ;+-----------------------------------+
              1f00 0000  ld   $00
              1f01 0001  ld   $01
              1f02 002b  ld   $2b         ;19a7 STW
              1f03 0026  ld   $26
              1f04 00cf  ld   $cf         ;19a9 CALL
              1f05 0038  ld   $38         ;19a9 'Expression'
              1f06 0075  ld   $75         ;19ab PUSH
              1f07 00ec  ld   $ec         ;19ac STLW
              1f08 0000  ld   $00
              1f09 00cf  ld   $cf         ;19ae CALL
              1f0a 0036  ld   $36         ;19ae 'Keyword'
              1f0b 002c  ld   $2c         ;19b0 ','
              1f0c 0000  ld   $00         ;19b1 0
              1f0d 0035  ld   $35         ;19b2 BCC
              1f0e 0072  ld   $72         ;19b3 NE
              1f0f 00b5  ld   $b5
              1f10 00cf  ld   $cf         ;19b5 CALL
              1f11 0048  ld   $48         ;19b5 'SyntaxError'
              1f12 00cf  ld   $cf         ;19b7 CALL
              1f13 0038  ld   $38         ;19b7 'Expression'
              1f14 002b  ld   $2b         ;19b9 STW
              1f15 006a  ld   $6a         ;19b9 'j'
              1f16 0035  ld   $35         ;19bb BCC
              1f17 0053  ld   $53         ;19bc GE
              1f18 00c8  ld   $c8
              1f19 0059  ld   $59         ;19be LDI
              1f1a 0000  ld   $00
              1f1b 00b8  ld   $b8         ;19c0 952
              1f1c 0026  ld   $26         ;19c1 38
              1f1d 002b  ld   $2b         ;19c2 STW
              1f1e 0026  ld   $26
              1f1f 0059  ld   $59         ;19c4 LDI
              1f20 0000  ld   $00
              1f21 00b8  ld   $b8         ;19c6 SUBW
              1f22 006a  ld   $6a         ;19c6 'j'
              1f23 002b  ld   $2b         ;19c8 STW
              1f24 006a  ld   $6a         ;19c8 'j'
              1f25 00ee  ld   $ee         ;19ca LDLW
              1f26 0000  ld   $00
              1f27 002b  ld   $2b         ;19cc STW
              1f28 003e  ld   $3e         ;19cc 'i'
              1f29 0035  ld   $35         ;19ce BCC
              1f2a 0053  ld   $53         ;19cf GE
              1f2b 00db  ld   $db
              1f2c 0059  ld   $59         ;19d1 LDI
              1f2d 0000  ld   $00
              1f2e 00b8  ld   $b8         ;19d3 952
              1f2f 0024  ld   $24         ;19d4 36
              1f30 002b  ld   $2b         ;19d5 STW
              1f31 0024  ld   $24
              1f32 0059  ld   $59         ;19d7 LDI
              1f33 0000  ld   $00
              1f34 00b8  ld   $b8         ;19d9 SUBW
              1f35 003e  ld   $3e         ;19d9 'i'
              1f36 002b  ld   $2b         ;19db STW
              1f37 003e  ld   $3e         ;19db 'i'
              1f38 00b8  ld   $b8         ;19dd SUBW
              1f39 006a  ld   $6a         ;19dd 'j'
              1f3a 0035  ld   $35         ;19df BCC
              1f3b 0053  ld   $53         ;19e0 GE
              1f3c 00f8  ld   $f8
              1f3d 0021  ld   $21         ;19e2 LDW
              1f3e 003e  ld   $3e         ;19e2 'i'
              1f3f 002b  ld   $2b         ;19e4 STW
              1f40 004c  ld   $4c         ;19e4 'tmp'
              1f41 0021  ld   $21         ;19e6 LDW
              1f42 006a  ld   $6a         ;19e6 'j'
              1f43 002b  ld   $2b         ;19e8 STW
              1f44 003e  ld   $3e         ;19e8 'i'
              1f45 0021  ld   $21         ;19ea LDW
              1f46 004c  ld   $4c         ;19ea 'tmp'
              1f47 002b  ld   $2b         ;19ec STW
              1f48 006a  ld   $6a         ;19ec 'j'
              1f49 0021  ld   $21         ;19ee LDW
              1f4a 0024  ld   $24
              1f4b 002b  ld   $2b         ;19f0 STW
              1f4c 004c  ld   $4c         ;19f0 'tmp'
              1f4d 0021  ld   $21         ;19f2 LDW
              1f4e 0026  ld   $26
              1f4f 002b  ld   $2b         ;19f4 STW
              1f50 0024  ld   $24
              1f51 0021  ld   $21         ;19f6 LDW
              1f52 004c  ld   $4c         ;19f6 'tmp'
              1f53 002b  ld   $2b         ;19f8 STW
              1f54 0026  ld   $26
              1f55 0063  ld   $63         ;19fa POP
              1f56 0011  ld   $11         ;19fb LDWI
              1f57 00a0  ld   $a0
              1f58 001a  ld   $1a
              1f59 00cf  ld   $cf         ;19fe CALL
              1f5a 0018  ld   $18         ;19fe vAC
              1f5b 001a  ld   $1a         ;| RAM segment address (high byte first)
              1f5c 00a0  ld   $a0         ;|
              1f5d 0060  ld   $60         ;| Length (1..256)
              1f5e 0021  ld   $21         ;1aa0 LDW
              1f5f 003a  ld   $3a         ;1aa0 'Value'
              1f60 0035  ld   $35         ;1aa2 BCC
              1f61 0053  ld   $53         ;1aa3 GE
              1f62 00a8  ld   $a8
              1f63 0011  ld   $11         ;1aa5 LDWI
              1f64 0000  ld   $00
              1f65 0078  ld   $78
              1f66 0090  ld   $90         ;1aa8 BRA
              1f67 00ab  ld   $ab
              1f68 0011  ld   $11         ;1aaa LDWI
              1f69 0000  ld   $00
              1f6a 0088  ld   $88
              1f6b 002b  ld   $2b         ;1aad STW
              1f6c 0028  ld   $28
              1f6d 0021  ld   $21         ;1aaf LDW
              1f6e 003e  ld   $3e         ;1aaf 'i'
              1f6f 002b  ld   $2b         ;1ab1 STW
              1f70 004c  ld   $4c         ;1ab1 'tmp'
              1f71 002b  ld   $2b         ;1ab3 STW
              1f72 0042  ld   $42         ;1ab3 'k'
              1f73 001a  ld   $1a         ;1ab5 LD
              1f74 002b  ld   $2b
              1f75 00f0  ld   $f0         ;1ab7 POKE
              1f76 0030  ld   $30         ;1ab7 'Pos'
              1f77 0021  ld   $21         ;1ab9 LDW
              1f78 004c  ld   $4c         ;1ab9 'tmp'
              1f79 00e6  ld   $e6         ;1abb SUBI
              1f7a 0001  ld   $01
              1f7b 002b  ld   $2b         ;1abd STW
              1f7c 004c  ld   $4c         ;1abd 'tmp'
              1f7d 0035  ld   $35         ;1abf BCC
              1f7e 0050  ld   $50         ;1ac0 LT
              1f7f 00fc  ld   $fc
              1f80 0021  ld   $21         ;1ac2 LDW
              1f81 0042  ld   $42         ;1ac2 'k'
              1f82 00b8  ld   $b8         ;1ac4 SUBW
              1f83 006a  ld   $6a         ;1ac4 'j'
              1f84 00b8  ld   $b8         ;1ac6 SUBW
              1f85 006a  ld   $6a         ;1ac6 'j'
              1f86 002b  ld   $2b         ;1ac8 STW
              1f87 0042  ld   $42         ;1ac8 'k'
              1f88 0035  ld   $35         ;1aca BCC
              1f89 0053  ld   $53         ;1acb GE
              1f8a 00d7  ld   $d7
              1f8b 0099  ld   $99         ;1acd ADDW
              1f8c 003e  ld   $3e         ;1acd 'i'
              1f8d 0099  ld   $99         ;1acf ADDW
              1f8e 003e  ld   $3e         ;1acf 'i'
              1f8f 002b  ld   $2b         ;1ad1 STW
              1f90 0042  ld   $42         ;1ad1 'k'
              1f91 0021  ld   $21         ;1ad3 LDW
              1f92 0026  ld   $26
              1f93 0099  ld   $99         ;1ad5 ADDW
              1f94 0030  ld   $30         ;1ad5 'Pos'
              1f95 002b  ld   $2b         ;1ad7 STW
              1f96 0030  ld   $30         ;1ad7 'Pos'
              1f97 0021  ld   $21         ;1ad9 LDW
              1f98 0024  ld   $24
              1f99 0099  ld   $99         ;1adb ADDW
              1f9a 0030  ld   $30         ;1adb 'Pos'
              1f9b 002b  ld   $2b         ;1add STW
              1f9c 0030  ld   $30         ;1add 'Pos'
              1f9d 001a  ld   $1a         ;1adf LD
              1f9e 0030  ld   $30         ;1adf 'Pos'
              1f9f 00e6  ld   $e6         ;1ae1 SUBI
              1fa0 00a0  ld   $a0
              1fa1 0035  ld   $35         ;1ae3 BCC
              1fa2 0050  ld   $50         ;1ae4 LT
              1fa3 00ed  ld   $ed
              1fa4 0035  ld   $35         ;1ae6 BCC
              1fa5 0056  ld   $56         ;1ae7 LE
              1fa6 00eb  ld   $eb
              1fa7 0093  ld   $93         ;1ae9 INC
              1fa8 0031  ld   $31         ;1ae9 'Pos'+1
              1fa9 00e3  ld   $e3         ;1aeb ADDI
              1faa 0040  ld   $40
              1fab 005e  ld   $5e         ;1aed ST
              1fac 0030  ld   $30         ;1aed 'Pos'
              1fad 001a  ld   $1a         ;1aef LD
              1fae 0031  ld   $31         ;1aef 'Pos'+1
              1faf 0082  ld   $82         ;1af1 ANDI
              1fb0 0078  ld   $78
              1fb1 0035  ld   $35         ;1af3 BCC
              1fb2 0072  ld   $72         ;1af4 NE
              1fb3 00fa  ld   $fa
              1fb4 0021  ld   $21         ;1af6 LDW
              1fb5 0028  ld   $28
              1fb6 0099  ld   $99         ;1af8 ADDW
              1fb7 0030  ld   $30         ;1af8 'Pos'
              1fb8 002b  ld   $2b         ;1afa STW
              1fb9 0030  ld   $30         ;1afa 'Pos'
              1fba 0090  ld   $90         ;1afc BRA
              1fbb 00b3  ld   $b3
              1fbc 00cf  ld   $cf         ;1afe CALL
              1fbd 0062  ld   $62         ;1afe 'EndOfLine'
              1fbe 001b  ld   $1b         ;| RAM segment address (high byte first)
              1fbf 00a0  ld   $a0         ;|
              1fc0 0006  ld   $06         ;| Length (1..256)
              1fc1 00a0  ld   $a0         ;1ba0 _Buffer
              1fc2 001b  ld   $1b
              1fc3 004e  ld   $4e         ;1ba2 'N'
              1fc4 0045  ld   $45         ;1ba3 'E'
              1fc5 0057  ld   $57         ;1ba4 'W'
              1fc6 0000  ld   $00         ;1ba5 0
              1fc7 0000  ld   $00         ;End of Apps/TinyBASIC/TinyBASIC_v3.gcl, size 3122
                                          ;+-----------------------------------+
                                          ;| Apps/MainMenu/MainMenu_v4_bmwtcu.gcl |
                                          ;+-----------------------------------+
Main:         1fc8 0002  ld   $02         ;| RAM segment address (high byte first)
              1fc9 0000  ld   $00         ;|
              1fca 00c0  ld   $c0         ;| Length (1..256)
              1fcb 00cd  ld   $cd         ;0200 DEF
              1fcc 004e  ld   $4e
              1fcd 0021  ld   $21         ;0202 LDW
              1fce 0030  ld   $30         ;0202 'Char'
              1fcf 00e6  ld   $e6         ;0204 SUBI
              1fd0 0052  ld   $52
              1fd1 0035  ld   $35         ;0206 BCC
              1fd2 0053  ld   $53         ;0207 GE
              1fd3 0010  ld   $10
              1fd4 00e3  ld   $e3         ;0209 ADDI
              1fd5 0032  ld   $32
              1fd6 002b  ld   $2b         ;020b STW
              1fd7 0032  ld   $32         ;020b 'i'
              1fd8 0011  ld   $11         ;020d LDWI
              1fd9 0000  ld   $00
              1fda 0007  ld   $07
              1fdb 0090  ld   $90         ;0210 BRA
              1fdc 0015  ld   $15
              1fdd 002b  ld   $2b         ;0212 STW
              1fde 0032  ld   $32         ;0212 'i'
              1fdf 0011  ld   $11         ;0214 LDWI
              1fe0 0000  ld   $00
              1fe1 0008  ld   $08
              1fe2 002b  ld   $2b         ;0217 STW
              1fe3 0034  ld   $34         ;0217 'fontData'
              1fe4 0021  ld   $21         ;0219 LDW
              1fe5 0032  ld   $32         ;0219 'i'
              1fe6 00e9  ld   $e9         ;021b LSLW
              1fe7 00e9  ld   $e9         ;021c LSLW
              1fe8 0099  ld   $99         ;021d ADDW
              1fe9 0032  ld   $32         ;021d 'i'
              1fea 0099  ld   $99         ;021f ADDW
              1feb 0034  ld   $34         ;021f 'fontData'
              1fec 002b  ld   $2b         ;0221 STW
              1fed 0034  ld   $34         ;0221 'fontData'
              1fee 0059  ld   $59         ;0223 LDI
              1fef 0020  ld   $20
              1ff0 005e  ld   $5e         ;0225 ST
              1ff1 0024  ld   $24
              1ff2 0021  ld   $21         ;0227 LDW
              1ff3 0036  ld   $36         ;0227 'Color'
              1ff4 005e  ld   $5e         ;0229 ST
              1ff5 0025  ld   $25
              1ff6 0021  ld   $21         ;022b LDW
              1ff7 0038  ld   $38         ;022b 'Pos'
              1ff8 002b  ld   $2b         ;022d STW
              1ff9 0028  ld   $28
              1ffa 00e3  ld   $e3         ;022f ADDI
              1ffb fe00  bra  ac          ;+-----------------------------------+
              1ffc fcfd  bra  $1ffd       ;|                                   |
              1ffd 1404  ld   $04,y       ;| Trampoline for page $1f00 lookups |
              1ffe e065  jmp  y,$65       ;|                                   |
              1fff c218  st   [$18]       ;+-----------------------------------+
              2000 0006  ld   $06
              2001 002b  ld   $2b         ;0231 STW
              2002 0038  ld   $38         ;0231 'Pos'
              2003 0011  ld   $11         ;0233 LDWI
              2004 00e1  ld   $e1
              2005 0004  ld   $04
              2006 002b  ld   $2b         ;0236 STW
              2007 0022  ld   $22
              2008 0059  ld   $59         ;0238 LDI
              2009 00fb  ld   $fb
              200a 002b  ld   $2b         ;023a STW
              200b 0032  ld   $32         ;023a 'i'
              200c 0021  ld   $21         ;023c LDW
              200d 0034  ld   $34         ;023c 'fontData'
              200e 007f  ld   $7f         ;023e LUP
              200f 0000  ld   $00
              2010 0093  ld   $93         ;0240 INC
              2011 0034  ld   $34         ;0240 'fontData'
              2012 005e  ld   $5e         ;0242 ST
              2013 0026  ld   $26
              2014 00b4  ld   $b4         ;0244 SYS
              2015 00cb  ld   $cb
              2016 0093  ld   $93         ;0246 INC
              2017 0028  ld   $28
              2018 0093  ld   $93         ;0248 INC
              2019 0032  ld   $32         ;0248 'i'
              201a 0021  ld   $21         ;024a LDW
              201b 0032  ld   $32         ;024a 'i'
              201c 0035  ld   $35         ;024c BCC
              201d 0072  ld   $72         ;024d NE
              201e 003a  ld   $3a
              201f 00ff  ld   $ff         ;024f RET
              2020 002b  ld   $2b         ;0250 STW
              2021 003a  ld   $3a         ;0250 'PrintChar'
              2022 00cd  ld   $cd         ;0252 DEF
              2023 007b  ld   $7b
              2024 0075  ld   $75         ;0254 PUSH
              2025 002b  ld   $2b         ;0255 STW
              2026 003c  ld   $3c         ;0255 'Text'
              2027 0021  ld   $21         ;0257 LDW
              2028 003c  ld   $3c         ;0257 'Text'
              2029 00ad  ld   $ad         ;0259 PEEK
              202a 0035  ld   $35         ;025a BCC
              202b 003f  ld   $3f         ;025b EQ
              202c 0079  ld   $79
              202d 002b  ld   $2b         ;025d STW
              202e 0030  ld   $30         ;025d 'Char'
              202f 0093  ld   $93         ;025f INC
              2030 003c  ld   $3c         ;025f 'Text'
              2031 008c  ld   $8c         ;0261 XORI
              2032 0009  ld   $09
              2033 0035  ld   $35         ;0263 BCC
              2034 0072  ld   $72         ;0264 NE
              2035 006c  ld   $6c
              2036 0021  ld   $21         ;0266 LDW
              2037 0038  ld   $38         ;0266 'Pos'
              2038 00e3  ld   $e3         ;0268 ADDI
              2039 0012  ld   $12
              203a 002b  ld   $2b         ;026a STW
              203b 0038  ld   $38         ;026a 'Pos'
              203c 0090  ld   $90         ;026c BRA
              203d 0055  ld   $55
              203e 008c  ld   $8c         ;026e XORI
              203f 0003  ld   $03
              2040 0035  ld   $35         ;0270 BCC
              2041 0072  ld   $72         ;0271 NE
              2042 0075  ld   $75
              2043 00cf  ld   $cf         ;0273 CALL
              2044 003e  ld   $3e         ;0273 'Newline'
              2045 0090  ld   $90         ;0275 BRA
              2046 0055  ld   $55
              2047 00cf  ld   $cf         ;0277 CALL
              2048 003a  ld   $3a         ;0277 'PrintChar'
              2049 0090  ld   $90         ;0279 BRA
              204a 0055  ld   $55
              204b 0063  ld   $63         ;027b POP
              204c 00ff  ld   $ff         ;027c RET
              204d 002b  ld   $2b         ;027d STW
              204e 0040  ld   $40         ;027d 'PrintText'
              204f 00cd  ld   $cd         ;027f DEF
              2050 0095  ld   $95
              2051 0075  ld   $75         ;0281 PUSH
              2052 0059  ld   $59         ;0282 LDI
              2053 002d  ld   $2d
              2054 002b  ld   $2b         ;0284 STW
              2055 0030  ld   $30         ;0284 'Char'
              2056 0059  ld   $59         ;0286 LDI
              2057 001a  ld   $1a
              2058 002b  ld   $2b         ;0288 STW
              2059 0042  ld   $42         ;0288 'j'
              205a 00cf  ld   $cf         ;028a CALL
              205b 003a  ld   $3a         ;028a 'PrintChar'
              205c 0021  ld   $21         ;028c LDW
              205d 0042  ld   $42         ;028c 'j'
              205e 00e6  ld   $e6         ;028e SUBI
              205f 0001  ld   $01
              2060 0035  ld   $35         ;0290 BCC
              2061 004d  ld   $4d         ;0291 GT
              2062 0086  ld   $86
              2063 00cf  ld   $cf         ;0293 CALL
              2064 003e  ld   $3e         ;0293 'Newline'
              2065 0063  ld   $63         ;0295 POP
              2066 00ff  ld   $ff         ;0296 RET
              2067 002b  ld   $2b         ;0297 STW
              2068 0044  ld   $44         ;0297 'PrintDivider'
              2069 00cd  ld   $cd         ;0299 DEF
              206a 00b9  ld   $b9
              206b 0075  ld   $75         ;029b PUSH
              206c 0011  ld   $11         ;029c LDWI
              206d 000b  ld   $0b
              206e 0020  ld   $20
              206f 002b  ld   $2b         ;029f STW
              2070 0038  ld   $38         ;029f 'Pos'
              2071 0021  ld   $21         ;02a1 LDW
              2072 0046  ld   $46         ;02a1 'Item'
              2073 002b  ld   $2b         ;02a3 STW
              2074 0042  ld   $42         ;02a3 'j'
              2075 0011  ld   $11         ;02a5 LDWI
              2076 0000  ld   $00
              2077 0008  ld   $08
              2078 0099  ld   $99         ;02a8 ADDW
              2079 0038  ld   $38         ;02a8 'Pos'
              207a 002b  ld   $2b         ;02aa STW
              207b 0038  ld   $38         ;02aa 'Pos'
              207c 0021  ld   $21         ;02ac LDW
              207d 0042  ld   $42         ;02ac 'j'
              207e 00e6  ld   $e6         ;02ae SUBI
              207f 0001  ld   $01
              2080 0035  ld   $35         ;02b0 BCC
              2081 0053  ld   $53         ;02b1 GE
              2082 00a1  ld   $a1
              2083 0059  ld   $59         ;02b3 LDI
              2084 0082  ld   $82
              2085 002b  ld   $2b         ;02b5 STW
              2086 0030  ld   $30         ;02b5 'Char'
              2087 00cf  ld   $cf         ;02b7 CALL
              2088 003a  ld   $3a         ;02b7 'PrintChar'
              2089 0063  ld   $63         ;02b9 POP
              208a 00ff  ld   $ff         ;02ba RET
              208b 002b  ld   $2b         ;02bb STW
              208c 0048  ld   $48         ;02bb 'PrintArrow'
              208d 0093  ld   $93         ;02bd INC
              208e 001b  ld   $1b         ;02bd '_vLR'+1
              208f 00ff  ld   $ff         ;02bf RET
              2090 0003  ld   $03         ;| RAM segment address (high byte first)
              2091 0000  ld   $00         ;|
              2092 0071  ld   $71         ;| Length (1..256)
              2093 00cd  ld   $cd         ;0300 DEF
              2094 006a  ld   $6a
              2095 0075  ld   $75         ;0302 PUSH
              2096 0059  ld   $59         ;0303 LDI
              2097 0000  ld   $00
              2098 002b  ld   $2b         ;0305 STW
              2099 0046  ld   $46         ;0305 'Item'
              209a 001a  ld   $1a         ;0307 LD
              209b 000e  ld   $0e
              209c 002b  ld   $2b         ;0309 STW
              209d 0036  ld   $36         ;0309 'Color'
              209e 00cf  ld   $cf         ;030b CALL
              209f 0048  ld   $48         ;030b 'PrintArrow'
              20a0 001a  ld   $1a         ;030d LD
              20a1 0011  ld   $11
              20a2 008c  ld   $8c         ;030f XORI
              20a3 00fb  ld   $fb
              20a4 0035  ld   $35         ;0311 BCC
              20a5 0072  ld   $72         ;0312 NE
              20a6 0028  ld   $28
              20a7 00cf  ld   $cf         ;0314 CALL
              20a8 004a  ld   $4a         ;0314 'WipeOutArrow'
              20a9 0021  ld   $21         ;0316 LDW
              20aa 0046  ld   $46         ;0316 'Item'
              20ab 00e6  ld   $e6         ;0318 SUBI
              20ac 0001  ld   $01
              20ad 0035  ld   $35         ;031a BCC
              20ae 003f  ld   $3f         ;031b EQ
              20af 0022  ld   $22
              20b0 00e6  ld   $e6         ;031d SUBI
              20b1 0001  ld   $01
              20b2 0035  ld   $35         ;031f BCC
              20b3 003f  ld   $3f         ;0320 EQ
              20b4 0022  ld   $22
              20b5 0093  ld   $93         ;0322 INC
              20b6 0046  ld   $46         ;0322 'Item'
              20b7 001a  ld   $1a         ;0324 LD
              20b8 0011  ld   $11
              20b9 0088  ld   $88         ;0326 ORI
              20ba 0004  ld   $04
              20bb 005e  ld   $5e         ;0328 ST
              20bc 0011  ld   $11
              20bd 001a  ld   $1a         ;032a LD
              20be 0011  ld   $11
              20bf 008c  ld   $8c         ;032c XORI
              20c0 00f7  ld   $f7
              20c1 0035  ld   $35         ;032e BCC
              20c2 0072  ld   $72         ;032f NE
              20c3 0047  ld   $47
              20c4 00cf  ld   $cf         ;0331 CALL
              20c5 004a  ld   $4a         ;0331 'WipeOutArrow'
              20c6 0021  ld   $21         ;0333 LDW
              20c7 0046  ld   $46         ;0333 'Item'
              20c8 0035  ld   $35         ;0335 BCC
              20c9 003f  ld   $3f         ;0336 EQ
              20ca 0041  ld   $41
              20cb 00e6  ld   $e6         ;0338 SUBI
              20cc 0002  ld   $02
              20cd 0035  ld   $35         ;033a BCC
              20ce 003f  ld   $3f         ;033b EQ
              20cf 0041  ld   $41
              20d0 0021  ld   $21         ;033d LDW
              20d1 0046  ld   $46         ;033d 'Item'
              20d2 00e6  ld   $e6         ;033f SUBI
              20d3 0001  ld   $01
              20d4 002b  ld   $2b         ;0341 STW
              20d5 0046  ld   $46         ;0341 'Item'
              20d6 001a  ld   $1a         ;0343 LD
              20d7 0011  ld   $11
              20d8 0088  ld   $88         ;0345 ORI
              20d9 0008  ld   $08
              20da 005e  ld   $5e         ;0347 ST
              20db 0011  ld   $11
              20dc 001a  ld   $1a         ;0349 LD
              20dd 0011  ld   $11
              20de 0082  ld   $82         ;034b ANDI
              20df 0080  ld   $80
              20e0 0035  ld   $35         ;034d BCC
              20e1 0072  ld   $72         ;034e NE
              20e2 0005  ld   $05
              20e3 0059  ld   $59         ;0350 LDI
              20e4 002a  ld   $2a
              20e5 002b  ld   $2b         ;0352 STW
              20e6 0036  ld   $36         ;0352 'Color'
              20e7 00cf  ld   $cf         ;0354 CALL
              20e8 0048  ld   $48         ;0354 'PrintArrow'
              20e9 0021  ld   $21         ;0356 LDW
              20ea 0046  ld   $46         ;0356 'Item'
              20eb 0035  ld   $35         ;0358 BCC
              20ec 0072  ld   $72         ;0359 NE
              20ed 005e  ld   $5e
              20ee 0011  ld   $11         ;035b LDWI
              20ef 0069  ld   $69
              20f0 0012  ld   $12
              20f1 0090  ld   $90         ;035e BRA
              20f2 0066  ld   $66
              20f3 00e6  ld   $e6         ;0360 SUBI
              20f4 0001  ld   $01
              20f5 0035  ld   $35         ;0362 BCC
              20f6 004d  ld   $4d         ;0363 GT
              20f7 0066  ld   $66
              20f8 0011  ld   $11         ;0365 LDWI
              20f9 0096  ld   $96
              20fa 0013  ld   $13
              20fb fe00  bra  ac          ;+-----------------------------------+
              20fc fcfd  bra  $20fd       ;|                                   |
              20fd 1404  ld   $04,y       ;| Trampoline for page $2000 lookups |
              20fe e065  jmp  y,$65       ;|                                   |
              20ff c218  st   [$18]       ;+-----------------------------------+
              2100 002b  ld   $2b         ;0368 STW
              2101 004c  ld   $4c         ;0368 'Program'
              2102 0063  ld   $63         ;036a POP
              2103 00ff  ld   $ff         ;036b RET
              2104 002b  ld   $2b         ;036c STW
              2105 004e  ld   $4e         ;036c 'SelectMenu'
              2106 0093  ld   $93         ;036e INC
              2107 001b  ld   $1b         ;036e '_vLR'+1
              2108 00ff  ld   $ff         ;0370 RET
              2109 0004  ld   $04         ;| RAM segment address (high byte first)
              210a 0000  ld   $00         ;|
              210b 0089  ld   $89         ;| Length (1..256)
              210c 00cd  ld   $cd         ;0400 DEF
              210d 000b  ld   $0b
              210e 001a  ld   $1a         ;0402 LD
              210f 0039  ld   $39         ;0402 'Pos'+1
              2110 00e3  ld   $e3         ;0404 ADDI
              2111 0008  ld   $08
              2112 005e  ld   $5e         ;0406 ST
              2113 0039  ld   $39         ;0406 'Pos'+1
              2114 0059  ld   $59         ;0408 LDI
              2115 0002  ld   $02
              2116 005e  ld   $5e         ;040a ST
              2117 0038  ld   $38         ;040a 'Pos'
              2118 00ff  ld   $ff         ;040c RET
              2119 002b  ld   $2b         ;040d STW
              211a 003e  ld   $3e         ;040d 'Newline'
              211b 00cd  ld   $cd         ;040f DEF
              211c 001f  ld   $1f
              211d 0009  ld   $09         ;0411 9
              211e 004c  ld   $4c         ;0412 'L'
              211f 006f  ld   $6f         ;0413 'o'
              2120 0061  ld   $61         ;0414 'a'
              2121 0064  ld   $64         ;0415 'd'
              2122 0065  ld   $65         ;0416 'e'
              2123 0072  ld   $72         ;0417 'r'
              2124 000a  ld   $0a         ;0418 10
              2125 0009  ld   $09         ;0419 9
              2126 0042  ld   $42         ;041a 'B'
              2127 0041  ld   $41         ;041b 'A'
              2128 0053  ld   $53         ;041c 'S'
              2129 0049  ld   $49         ;041d 'I'
              212a 0043  ld   $43         ;041e 'C'
              212b 000a  ld   $0a         ;041f 10
              212c 0000  ld   $00         ;0420 0
              212d 002b  ld   $2b         ;0421 STW
              212e 0050  ld   $50         ;0421 'MainMenu'
              212f 00cd  ld   $cd         ;0423 DEF
              2130 006d  ld   $6d
              2131 0055  ld   $55         ;0425 'U'
              2132 0073  ld   $73         ;0426 's'
              2133 0065  ld   $65         ;0427 'e'
              2134 0020  ld   $20         ;0428 ' '
              2135 005b  ld   $5b         ;0429 91
              2136 0041  ld   $41         ;042a 'A'
              2137 0072  ld   $72         ;042b 'r'
              2138 0072  ld   $72         ;042c 'r'
              2139 006f  ld   $6f         ;042d 'o'
              213a 0077  ld   $77         ;042e 'w'
              213b 0073  ld   $73         ;042f 's'
              213c 005d  ld   $5d         ;0430 93
              213d 0020  ld   $20         ;0431 ' '
              213e 0074  ld   $74         ;0432 't'
              213f 006f  ld   $6f         ;0433 'o'
              2140 0020  ld   $20         ;0434 ' '
              2141 0073  ld   $73         ;0435 's'
              2142 0065  ld   $65         ;0436 'e'
              2143 006c  ld   $6c         ;0437 'l'
              2144 0065  ld   $65         ;0438 'e'
              2145 0063  ld   $63         ;0439 'c'
              2146 0074  ld   $74         ;043a 't'
              2147 000a  ld   $0a         ;043b 10
              2148 0050  ld   $50         ;043c 'P'
              2149 0072  ld   $72         ;043d 'r'
              214a 0065  ld   $65         ;043e 'e'
              214b 0073  ld   $73         ;043f 's'
              214c 0073  ld   $73         ;0440 's'
              214d 0020  ld   $20         ;0441 ' '
              214e 005b  ld   $5b         ;0442 91
              214f 0041  ld   $41         ;0443 'A'
              2150 005d  ld   $5d         ;0444 93
              2151 0020  ld   $20         ;0445 ' '
              2152 0074  ld   $74         ;0446 't'
              2153 006f  ld   $6f         ;0447 'o'
              2154 0020  ld   $20         ;0448 ' '
              2155 0073  ld   $73         ;0449 's'
              2156 0074  ld   $74         ;044a 't'
              2157 0061  ld   $61         ;044b 'a'
              2158 0072  ld   $72         ;044c 'r'
              2159 0074  ld   $74         ;044d 't'
              215a 0020  ld   $20         ;044e ' '
              215b 0070  ld   $70         ;044f 'p'
              215c 0072  ld   $72         ;0450 'r'
              215d 006f  ld   $6f         ;0451 'o'
              215e 0067  ld   $67         ;0452 'g'
              215f 0072  ld   $72         ;0453 'r'
              2160 0061  ld   $61         ;0454 'a'
              2161 006d  ld   $6d         ;0455 'm'
              2162 000a  ld   $0a         ;0456 10
              2163 000a  ld   $0a         ;0457 10
              2164 0048  ld   $48         ;0458 'H'
              2165 006f  ld   $6f         ;0459 'o'
              2166 006c  ld   $6c         ;045a 'l'
              2167 0064  ld   $64         ;045b 'd'
              2168 0020  ld   $20         ;045c ' '
              2169 005b  ld   $5b         ;045d 91
              216a 0053  ld   $53         ;045e 'S'
              216b 0074  ld   $74         ;045f 't'
              216c 0061  ld   $61         ;0460 'a'
              216d 0072  ld   $72         ;0461 'r'
              216e 0074  ld   $74         ;0462 't'
              216f 005d  ld   $5d         ;0463 93
              2170 0020  ld   $20         ;0464 ' '
              2171 0066  ld   $66         ;0465 'f'
              2172 006f  ld   $6f         ;0466 'o'
              2173 0072  ld   $72         ;0467 'r'
              2174 0020  ld   $20         ;0468 ' '
              2175 0072  ld   $72         ;0469 'r'
              2176 0065  ld   $65         ;046a 'e'
              2177 0073  ld   $73         ;046b 's'
              2178 0065  ld   $65         ;046c 'e'
              2179 0074  ld   $74         ;046d 't'
              217a 0000  ld   $00         ;046e 0
              217b 002b  ld   $2b         ;046f STW
              217c 0052  ld   $52         ;046f 'HelpText'
              217d 00cd  ld   $cd         ;0471 DEF
              217e 0082  ld   $82
              217f 0075  ld   $75         ;0473 PUSH
              2180 0021  ld   $21         ;0474 LDW
              2181 0038  ld   $38         ;0474 'Pos'
              2182 00e6  ld   $e6         ;0476 SUBI
              2183 000c  ld   $0c
              2184 002b  ld   $2b         ;0478 STW
              2185 0038  ld   $38         ;0478 'Pos'
              2186 0059  ld   $59         ;047a LDI
              2187 0020  ld   $20
              2188 002b  ld   $2b         ;047c STW
              2189 0030  ld   $30         ;047c 'Char'
              218a 00cf  ld   $cf         ;047e CALL
              218b 003a  ld   $3a         ;047e 'PrintChar'
              218c 00cf  ld   $cf         ;0480 CALL
              218d 003a  ld   $3a         ;0480 'PrintChar'
              218e 0063  ld   $63         ;0482 POP
              218f 00ff  ld   $ff         ;0483 RET
              2190 002b  ld   $2b         ;0484 STW
              2191 004a  ld   $4a         ;0484 'WipeOutArrow'
              2192 0093  ld   $93         ;0486 INC
              2193 001b  ld   $1b         ;0486 '_vLR'+1
              2194 00ff  ld   $ff         ;0488 RET
              2195 0005  ld   $05         ;| RAM segment address (high byte first)
              2196 0000  ld   $00         ;|
              2197 008c  ld   $8c         ;| Length (1..256)
              2198 00cd  ld   $cd         ;0500 DEF
              2199 001b  ld   $1b
              219a 0075  ld   $75         ;0502 PUSH
              219b 0059  ld   $59         ;0503 LDI
              219c 002a  ld   $2a
              219d 002b  ld   $2b         ;0505 STW
              219e 0036  ld   $36         ;0505 'Color'
              219f 00cf  ld   $cf         ;0507 CALL
              21a0 0044  ld   $44         ;0507 'PrintDivider'
              21a1 0059  ld   $59         ;0509 LDI
              21a2 000f  ld   $0f
              21a3 002b  ld   $2b         ;050b STW
              21a4 0036  ld   $36         ;050b 'Color'
              21a5 0021  ld   $21         ;050d LDW
              21a6 0050  ld   $50         ;050d 'MainMenu'
              21a7 00cf  ld   $cf         ;050f CALL
              21a8 0040  ld   $40         ;050f 'PrintText'
              21a9 0059  ld   $59         ;0511 LDI
              21aa 002a  ld   $2a
              21ab 002b  ld   $2b         ;0513 STW
              21ac 0036  ld   $36         ;0513 'Color'
              21ad 00cf  ld   $cf         ;0515 CALL
              21ae 0044  ld   $44         ;0515 'PrintDivider'
              21af 0021  ld   $21         ;0517 LDW
              21b0 0052  ld   $52         ;0517 'HelpText'
              21b1 00cf  ld   $cf         ;0519 CALL
              21b2 0040  ld   $40         ;0519 'PrintText'
              21b3 0063  ld   $63         ;051b POP
              21b4 00ff  ld   $ff         ;051c RET
              21b5 002b  ld   $2b         ;051d STW
              21b6 0054  ld   $54         ;051d 'PrintMenu'
              21b7 001a  ld   $1a         ;051f LD
              21b8 0021  ld   $21
              21b9 0088  ld   $88         ;0521 ORI
              21ba 0003  ld   $03
              21bb 005e  ld   $5e         ;0523 ST
              21bc 0021  ld   $21
              21bd 0059  ld   $59         ;0525 LDI
              21be 005a  ld   $5a
              21bf 005e  ld   $5e         ;0527 ST
              21c0 002c  ld   $2c
              21c1 0011  ld   $11         ;0529 LDWI
              21c2 0002  ld   $02
              21c3 0020  ld   $20
              21c4 002b  ld   $2b         ;052c STW
              21c5 0038  ld   $38         ;052c 'Pos'
              21c6 00cf  ld   $cf         ;052e CALL
              21c7 0054  ld   $54         ;052e 'PrintMenu'
              21c8 00cf  ld   $cf         ;0530 CALL
              21c9 004e  ld   $4e         ;0530 'SelectMenu'
              21ca 0011  ld   $11         ;0532 LDWI
              21cb 0000  ld   $00
              21cc 0008  ld   $08
              21cd 002b  ld   $2b         ;0535 STW
              21ce 0028  ld   $28
              21cf 0011  ld   $11         ;0537 LDWI
              21d0 0001  ld   $01
              21d1 0088  ld   $88
              21d2 002b  ld   $2b         ;053a STW
              21d3 0032  ld   $32         ;053a 'i'
              21d4 0011  ld   $11         ;053c LDWI
              21d5 0080  ld   $80
              21d6 00ff  ld   $ff
              21d7 002b  ld   $2b         ;053f STW
              21d8 0042  ld   $42         ;053f 'j'
              21d9 0021  ld   $21         ;0541 LDW
              21da 0038  ld   $38         ;0541 'Pos'
              21db 00e3  ld   $e3         ;0543 ADDI
              21dc 0030  ld   $30
              21dd 00f8  ld   $f8         ;0545 ANDW
              21de 0042  ld   $42         ;0545 'j'
              21df 002b  ld   $2b         ;0547 STW
              21e0 0056  ld   $56         ;0547 'q'
              21e1 0011  ld   $11         ;0549 LDWI
              21e2 00e1  ld   $e1
              21e3 0004  ld   $04
              21e4 002b  ld   $2b         ;054c STW
              21e5 0022  ld   $22
              21e6 0059  ld   $59         ;054e LDI
              21e7 0020  ld   $20
              21e8 005e  ld   $5e         ;0550 ST
              21e9 0024  ld   $24
              21ea 005e  ld   $5e         ;0552 ST
              21eb 0025  ld   $25
              21ec 0021  ld   $21         ;0554 LDW
              21ed 0028  ld   $28
              21ee 00e3  ld   $e3         ;0556 ADDI
              21ef 0030  ld   $30
              21f0 00f8  ld   $f8         ;0558 ANDW
              21f1 0042  ld   $42         ;0558 'j'
              21f2 00fc  ld   $fc         ;055a XORW
              21f3 0056  ld   $56         ;055a 'q'
              21f4 0035  ld   $35         ;055c BCC
              21f5 003f  ld   $3f         ;055d EQ
              21f6 0066  ld   $66
              21f7 001a  ld   $1a         ;055f LD
              21f8 0059  ld   $59         ;055f 'p'+1
              21f9 008c  ld   $8c         ;0561 XORI
              21fa 0078  ld   $78
              21fb fe00  bra  ac          ;+-----------------------------------+
              21fc fcfd  bra  $21fd       ;|                                   |
              21fd 1404  ld   $04,y       ;| Trampoline for page $2100 lookups |
              21fe e065  jmp  y,$65       ;|                                   |
              21ff c218  st   [$18]       ;+-----------------------------------+
              2200 0035  ld   $35         ;0563 BCC
              2201 003f  ld   $3f         ;0564 EQ
              2202 0066  ld   $66
              2203 00b4  ld   $b4         ;0566 SYS
              2204 00cb  ld   $cb
              2205 0011  ld   $11         ;0568 LDWI
              2206 0000  ld   $00
              2207 0008  ld   $08
              2208 0099  ld   $99         ;056b 921
              2209 0028  ld   $28         ;056c 40
              220a 002b  ld   $2b         ;056d STW
              220b 0028  ld   $28
              220c 0035  ld   $35         ;056f BCC
              220d 004d  ld   $4d         ;0570 GT
              220e 0054  ld   $54
              220f 0099  ld   $99         ;0572 ADDW
              2210 0032  ld   $32         ;0572 'i'
              2211 002b  ld   $2b         ;0574 STW
              2212 0028  ld   $28
              2213 0082  ld   $82         ;0576 ANDI
              2214 00ff  ld   $ff
              2215 008c  ld   $8c         ;0578 XORI
              2216 00a0  ld   $a0
              2217 0035  ld   $35         ;057a BCC
              2218 0072  ld   $72         ;057b NE
              2219 0052  ld   $52
              221a 0059  ld   $59         ;057d LDI
              221b 00ad  ld   $ad
              221c 002b  ld   $2b         ;057f STW
              221d 0022  ld   $22
              221e 0021  ld   $21         ;0581 LDW
              221f 004c  ld   $4c         ;0581 'Program'
              2220 002b  ld   $2b         ;0583 STW
              2221 0024  ld   $24
              2222 0011  ld   $11         ;0585 LDWI
              2223 0000  ld   $00
              2224 0002  ld   $02
              2225 002b  ld   $2b         ;0588 STW
              2226 001a  ld   $1a         ;0588 '_vLR'
              2227 00b4  ld   $b4         ;058a SYS
              2228 00e2  ld   $e2
              2229 0000  ld   $00         ;End of Apps/MainMenu/MainMenu_v4_bmwtcu.gcl, size 610
                                          ;+-----------------------------------+
                                          ;| Core/Reset_v4_bmwtcu.gcl          |
                                          ;+-----------------------------------+
Reset:        222a 0002  ld   $02         ;| RAM segment address (high byte first)
              222b 0000  ld   $00         ;|
              222c 00c7  ld   $c7         ;| Length (1..256)
              222d 00cd  ld   $cd         ;0200 DEF
              222e 003c  ld   $3c
              222f 0011  ld   $11         ;0202 LDWI
              2230 0000  ld   $00
              2231 0001  ld   $01
              2232 002b  ld   $2b         ;0205 STW
              2233 0030  ld   $30         ;0205 'p'
              2234 0011  ld   $11         ;0207 LDWI
              2235 0000  ld   $00
              2236 0008  ld   $08
              2237 002b  ld   $2b         ;020a STW
              2238 0032  ld   $32         ;020a 'q'
              2239 001a  ld   $1a         ;020c LD
              223a 0033  ld   $33         ;020c 'q'+1
              223b 00f0  ld   $f0         ;020e POKE
              223c 0030  ld   $30         ;020e 'p'
              223d 0093  ld   $93         ;0210 INC
              223e 0030  ld   $30         ;0210 'p'
              223f 0059  ld   $59         ;0212 LDI
              2240 0000  ld   $00
              2241 00f0  ld   $f0         ;0214 POKE
              2242 0030  ld   $30         ;0214 'p'
              2243 0093  ld   $93         ;0216 INC
              2244 0030  ld   $30         ;0216 'p'
              2245 0093  ld   $93         ;0218 INC
              2246 0033  ld   $33         ;0218 'q'+1
              2247 0021  ld   $21         ;021a LDW
              2248 0032  ld   $32         ;021a 'q'
              2249 0035  ld   $35         ;021c BCC
              224a 004d  ld   $4d         ;021d GT
              224b 000a  ld   $0a
              224c 0011  ld   $11         ;021f LDWI
              224d 0003  ld   $03
              224e 000b  ld   $0b
              224f 002b  ld   $2b         ;0222 STW
              2250 0022  ld   $22         ;0222 '_sysFn'
              2251 0059  ld   $59         ;0224 LDI
              2252 0020  ld   $20
              2253 005e  ld   $5e         ;0226 ST
              2254 0025  ld   $25
              2255 0011  ld   $11         ;0228 LDWI
              2256 0000  ld   $00
              2257 0008  ld   $08
              2258 002b  ld   $2b         ;022b STW
              2259 0030  ld   $30         ;022b 'p'
              225a 002b  ld   $2b         ;022d STW
              225b 0026  ld   $26         ;022d '_sysArgs2'
              225c 0059  ld   $59         ;022f LDI
              225d 00a0  ld   $a0
              225e 005e  ld   $5e         ;0231 ST
              225f 0024  ld   $24
              2260 00b4  ld   $b4         ;0233 SYS
              2261 00f3  ld   $f3
              2262 0011  ld   $11         ;0235 LDWI
              2263 0000  ld   $00
              2264 0001  ld   $01
              2265 0099  ld   $99         ;0238 ADDW
              2266 0030  ld   $30         ;0238 'p'
              2267 0035  ld   $35         ;023a BCC
              2268 004d  ld   $4d         ;023b GT
              2269 0029  ld   $29
              226a 00ff  ld   $ff         ;023d RET
              226b 002b  ld   $2b         ;023e STW
              226c 0034  ld   $34         ;023e 'SetupVideo'
              226d 00cd  ld   $cd         ;0240 DEF
              226e 00c0  ld   $c0
              226f 0075  ld   $75         ;0242 PUSH
              2270 00cd  ld   $cd         ;0243 DEF
              2271 0072  ld   $72
              2272 002a  ld   $2a         ;0245 '*'
              2273 002a  ld   $2a         ;0246 '*'
              2274 002a  ld   $2a         ;0247 '*'
              2275 0020  ld   $20         ;0248 ' '
              2276 0047  ld   $47         ;0249 'G'
              2277 0069  ld   $69         ;024a 'i'
              2278 0067  ld   $67         ;024b 'g'
              2279 0061  ld   $61         ;024c 'a'
              227a 0074  ld   $74         ;024d 't'
              227b 0072  ld   $72         ;024e 'r'
              227c 006f  ld   $6f         ;024f 'o'
              227d 006e  ld   $6e         ;0250 'n'
              227e 0020  ld   $20         ;0251 ' '
              227f 003f  ld   $3f         ;0252 '?'
              2280 003f  ld   $3f         ;0253 '?'
              2281 004b  ld   $4b         ;0254 'K'
              2282 0020  ld   $20         ;0255 ' '
              2283 002a  ld   $2a         ;0256 '*'
              2284 002a  ld   $2a         ;0257 '*'
              2285 002a  ld   $2a         ;0258 '*'
              2286 000a  ld   $0a         ;0259 10
              2287 0020  ld   $20         ;025a ' '
              2288 0054  ld   $54         ;025b 'T'
              2289 0054  ld   $54         ;025c 'T'
              228a 004c  ld   $4c         ;025d 'L'
              228b 0020  ld   $20         ;025e ' '
              228c 006d  ld   $6d         ;025f 'm'
              228d 0069  ld   $69         ;0260 'i'
              228e 0063  ld   $63         ;0261 'c'
              228f 0072  ld   $72         ;0262 'r'
              2290 006f  ld   $6f         ;0263 'o'
              2291 0063  ld   $63         ;0264 'c'
              2292 006f  ld   $6f         ;0265 'o'
              2293 006d  ld   $6d         ;0266 'm'
              2294 0070  ld   $70         ;0267 'p'
              2295 0075  ld   $75         ;0268 'u'
              2296 0074  ld   $74         ;0269 't'
              2297 0065  ld   $65         ;026a 'e'
              2298 0072  ld   $72         ;026b 'r'
              2299 0020  ld   $20         ;026c ' '
              229a 0062  ld   $62         ;026d 'b'
              229b 006d  ld   $6d         ;026e 'm'
              229c 0077  ld   $77         ;026f 'w'
              229d 0074  ld   $74         ;0270 't'
              229e 0063  ld   $63         ;0271 'c'
              229f 0075  ld   $75         ;0272 'u'
              22a0 0000  ld   $00         ;0273 0
              22a1 002b  ld   $2b         ;0274 STW
              22a2 0036  ld   $36         ;0274 'Text'
              22a3 00e3  ld   $e3         ;0276 ADDI
              22a4 000d  ld   $0d
              22a5 002b  ld   $2b         ;0278 STW
              22a6 0030  ld   $30         ;0278 'p'
              22a7 0011  ld   $11         ;027a LDWI
              22a8 002f  ld   $2f
              22a9 002f  ld   $2f
              22aa 002b  ld   $2b         ;027d STW
              22ab 0038  ld   $38         ;027d 'Char'
              22ac 001a  ld   $1a         ;027f LD
              22ad 0001  ld   $01
              22ae 00e6  ld   $e6         ;0281 SUBI
              22af 0001  ld   $01
              22b0 0082  ld   $82         ;0283 ANDI
              22b1 00ff  ld   $ff
              22b2 00e3  ld   $e3         ;0285 ADDI
              22b3 0001  ld   $01
              22b4 0093  ld   $93         ;0287 INC
              22b5 0039  ld   $39         ;0287 'Char'+1
              22b6 00e6  ld   $e6         ;0289 SUBI
              22b7 0028  ld   $28
              22b8 0035  ld   $35         ;028b BCC
              22b9 0053  ld   $53         ;028c GE
              22ba 0085  ld   $85
              22bb 00e3  ld   $e3         ;028e ADDI
              22bc 0028  ld   $28
              22bd 0093  ld   $93         ;0290 INC
              22be 0038  ld   $38         ;0290 'Char'
              22bf 00e6  ld   $e6         ;0292 SUBI
              22c0 0004  ld   $04
              22c1 0035  ld   $35         ;0294 BCC
              22c2 0053  ld   $53         ;0295 GE
              22c3 008e  ld   $8e
              22c4 001a  ld   $1a         ;0297 LD
              22c5 0039  ld   $39         ;0297 'Char'+1
              22c6 00f0  ld   $f0         ;0299 POKE
              22c7 0030  ld   $30         ;0299 'p'
              22c8 0093  ld   $93         ;029b INC
              22c9 0030  ld   $30         ;029b 'p'
              22ca 0021  ld   $21         ;029d LDW
              22cb 0038  ld   $38         ;029d 'Char'
              22cc 00f0  ld   $f0         ;029f POKE
              22cd 0030  ld   $30         ;029f 'p'
              22ce 0021  ld   $21         ;02a1 LDW
              22cf 0036  ld   $36         ;02a1 'Text'
              22d0 00ad  ld   $ad         ;02a3 PEEK
              22d1 0035  ld   $35         ;02a4 BCC
              22d2 003f  ld   $3f         ;02a5 EQ
              22d3 00be  ld   $be
              22d4 002b  ld   $2b         ;02a7 STW
              22d5 0038  ld   $38         ;02a7 'Char'
              22d6 0093  ld   $93         ;02a9 INC
              22d7 0036  ld   $36         ;02a9 'Text'
              22d8 008c  ld   $8c         ;02ab XORI
              22d9 000a  ld   $0a
              22da 0035  ld   $35         ;02ad BCC
              22db 0072  ld   $72         ;02ae NE
              22dc 00ba  ld   $ba
              22dd 0059  ld   $59         ;02b0 LDI
              22de 0002  ld   $02
              22df 005e  ld   $5e         ;02b2 ST
              22e0 003a  ld   $3a         ;02b2 'Pos'
              22e1 001a  ld   $1a         ;02b4 LD
              22e2 003b  ld   $3b         ;02b4 'Pos'+1
              22e3 00e3  ld   $e3         ;02b6 ADDI
              22e4 0008  ld   $08
              22e5 005e  ld   $5e         ;02b8 ST
              22e6 003b  ld   $3b         ;02b8 'Pos'+1
              22e7 0090  ld   $90         ;02ba BRA
              22e8 00bc  ld   $bc
              22e9 00cf  ld   $cf         ;02bc CALL
              22ea 003c  ld   $3c         ;02bc 'PrintChar'
              22eb 0090  ld   $90         ;02be BRA
              22ec 009f  ld   $9f
              22ed 0063  ld   $63         ;02c0 POP
              22ee 00ff  ld   $ff         ;02c1 RET
              22ef 002b  ld   $2b         ;02c2 STW
              22f0 003e  ld   $3e         ;02c2 'PrintStartupMessage'
              22f1 0093  ld   $93         ;02c4 INC
              22f2 001b  ld   $1b
              22f3 00ff  ld   $ff         ;02c6 RET
              22f4 0003  ld   $03         ;| RAM segment address (high byte first)
              22f5 0000  ld   $00         ;|
              22f6 00e7  ld   $e7         ;| Length (1..256)
              22f7 00cd  ld   $cd         ;0300 DEF
              22f8 004b  ld   $4b
              22f9 0021  ld   $21         ;0302 LDW
              22fa 0038  ld   $38         ;0302 'Char'
              22fb fe00  bra  ac          ;+-----------------------------------+
              22fc fcfd  bra  $22fd       ;|                                   |
              22fd 1404  ld   $04,y       ;| Trampoline for page $2200 lookups |
              22fe e065  jmp  y,$65       ;|                                   |
              22ff c218  st   [$18]       ;+-----------------------------------+
              2300 00e6  ld   $e6         ;0304 SUBI
              2301 0052  ld   $52
              2302 0035  ld   $35         ;0306 BCC
              2303 0053  ld   $53         ;0307 GE
              2304 0010  ld   $10
              2305 00e3  ld   $e3         ;0309 ADDI
              2306 0032  ld   $32
              2307 002b  ld   $2b         ;030b STW
              2308 0040  ld   $40         ;030b 'i'
              2309 0011  ld   $11         ;030d LDWI
              230a 0000  ld   $00
              230b 0007  ld   $07
              230c 0090  ld   $90         ;0310 BRA
              230d 0015  ld   $15
              230e 002b  ld   $2b         ;0312 STW
              230f 0040  ld   $40         ;0312 'i'
              2310 0011  ld   $11         ;0314 LDWI
              2311 0000  ld   $00
              2312 0008  ld   $08
              2313 002b  ld   $2b         ;0317 STW
              2314 0042  ld   $42         ;0317 'fontData'
              2315 0021  ld   $21         ;0319 LDW
              2316 0040  ld   $40         ;0319 'i'
              2317 00e9  ld   $e9         ;031b LSLW
              2318 00e9  ld   $e9         ;031c LSLW
              2319 0099  ld   $99         ;031d ADDW
              231a 0040  ld   $40         ;031d 'i'
              231b 0099  ld   $99         ;031f ADDW
              231c 0042  ld   $42         ;031f 'fontData'
              231d 002b  ld   $2b         ;0321 STW
              231e 0042  ld   $42         ;0321 'fontData'
              231f 0011  ld   $11         ;0323 LDWI
              2320 0020  ld   $20
              2321 003f  ld   $3f
              2322 002b  ld   $2b         ;0326 STW
              2323 0024  ld   $24         ;0326 '_sysArgs0'
              2324 0021  ld   $21         ;0328 LDW
              2325 003a  ld   $3a         ;0328 'Pos'
              2326 002b  ld   $2b         ;032a STW
              2327 0028  ld   $28         ;032a '_sysArgs4'
              2328 00e3  ld   $e3         ;032c ADDI
              2329 0006  ld   $06
              232a 002b  ld   $2b         ;032e STW
              232b 003a  ld   $3a         ;032e 'Pos'
              232c 0011  ld   $11         ;0330 LDWI
              232d 00e1  ld   $e1
              232e 0004  ld   $04
              232f 002b  ld   $2b         ;0333 STW
              2330 0022  ld   $22         ;0333 '_sysFn'
              2331 0059  ld   $59         ;0335 LDI
              2332 00fb  ld   $fb
              2333 002b  ld   $2b         ;0337 STW
              2334 0040  ld   $40         ;0337 'i'
              2335 0021  ld   $21         ;0339 LDW
              2336 0042  ld   $42         ;0339 'fontData'
              2337 007f  ld   $7f         ;033b LUP
              2338 0000  ld   $00
              2339 0093  ld   $93         ;033d INC
              233a 0042  ld   $42         ;033d 'fontData'
              233b 005e  ld   $5e         ;033f ST
              233c 0026  ld   $26
              233d 00b4  ld   $b4         ;0341 SYS
              233e 00cb  ld   $cb
              233f 0093  ld   $93         ;0343 INC
              2340 0028  ld   $28
              2341 0093  ld   $93         ;0345 INC
              2342 0040  ld   $40         ;0345 'i'
              2343 0021  ld   $21         ;0347 LDW
              2344 0040  ld   $40         ;0347 'i'
              2345 0035  ld   $35         ;0349 BCC
              2346 0072  ld   $72         ;034a NE
              2347 0037  ld   $37
              2348 00ff  ld   $ff         ;034c RET
              2349 002b  ld   $2b         ;034d STW
              234a 003c  ld   $3c         ;034d 'PrintChar'
              234b 00cd  ld   $cd         ;034f DEF
              234c 0086  ld   $86
              234d 002b  ld   $2b         ;0351 STW
              234e 0040  ld   $40         ;0351 'i'
              234f 0088  ld   $88         ;0353 ORI
              2350 00ff  ld   $ff
              2351 008c  ld   $8c         ;0355 XORI
              2352 00ff  ld   $ff
              2353 0088  ld   $88         ;0357 ORI
              2354 00fa  ld   $fa
              2355 002b  ld   $2b         ;0359 STW
              2356 0030  ld   $30         ;0359 'p'
              2357 001a  ld   $1a         ;035b LD
              2358 0040  ld   $40         ;035b 'i'
              2359 002b  ld   $2b         ;035d STW
              235a 0040  ld   $40         ;035d 'i'
              235b 0059  ld   $59         ;035f LDI
              235c 0000  ld   $00
              235d 00f0  ld   $f0         ;0361 POKE
              235e 0030  ld   $30         ;0361 'p'
              235f 0093  ld   $93         ;0363 INC
              2360 0030  ld   $30         ;0363 'p'
              2361 0059  ld   $59         ;0365 LDI
              2362 0003  ld   $03
              2363 00f0  ld   $f0         ;0367 POKE
              2364 0030  ld   $30         ;0367 'p'
              2365 0093  ld   $93         ;0369 INC
              2366 0030  ld   $30         ;0369 'p'
              2367 0011  ld   $11         ;036b LDWI
              2368 0000  ld   $00
              2369 0009  ld   $09
              236a 0099  ld   $99         ;036e ADDW
              236b 0040  ld   $40         ;036e 'i'
              236c 007f  ld   $7f         ;0370 LUP
              236d 0000  ld   $00
              236e 00f0  ld   $f0         ;0372 POKE
              236f 0030  ld   $30         ;0372 'p'
              2370 0093  ld   $93         ;0374 INC
              2371 0030  ld   $30         ;0374 'p'
              2372 0011  ld   $11         ;0376 LDWI
              2373 0000  ld   $00
              2374 0009  ld   $09
              2375 0099  ld   $99         ;0379 ADDW
              2376 0040  ld   $40         ;0379 'i'
              2377 007f  ld   $7f         ;037b LUP
              2378 0001  ld   $01
              2379 00f0  ld   $f0         ;037d POKE
              237a 0030  ld   $30         ;037d 'p'
              237b 0093  ld   $93         ;037f INC
              237c 0030  ld   $30         ;037f 'p'
              237d 00f0  ld   $f0         ;0381 POKE
              237e 0030  ld   $30         ;0381 'p'
              237f 0093  ld   $93         ;0383 INC
              2380 0030  ld   $30         ;0383 'p'
              2381 00f0  ld   $f0         ;0385 POKE
              2382 0030  ld   $30         ;0385 'p'
              2383 00ff  ld   $ff         ;0387 RET
              2384 002b  ld   $2b         ;0388 STW
              2385 0044  ld   $44         ;0388 'SetupChannel'
              2386 0011  ld   $11         ;038a LDWI
              2387 000f  ld   $0f
              2388 000b  ld   $0b
              2389 002b  ld   $2b         ;038d STW
              238a 0022  ld   $22         ;038d '_sysFn'
              238b 0059  ld   $59         ;038f LDI
              238c 0000  ld   $00
              238d 00b4  ld   $b4         ;0391 SYS
              238e 00f5  ld   $f5
              238f 0011  ld   $11         ;0393 LDWI
              2390 0012  ld   $12
              2391 000b  ld   $0b
              2392 002b  ld   $2b         ;0396 STW
              2393 0022  ld   $22         ;0396 '_sysFn'
              2394 0059  ld   $59         ;0398 LDI
              2395 0000  ld   $00
              2396 00b4  ld   $b4         ;039a SYS
              2397 00f7  ld   $f7
              2398 00b4  ld   $b4         ;039c SYS
              2399 00f7  ld   $f7
              239a 00b4  ld   $b4         ;039e SYS
              239b 00f7  ld   $f7
              239c 00b4  ld   $b4         ;03a0 SYS
              239d 00f7  ld   $f7
              239e 0011  ld   $11         ;03a2 LDWI
              239f 0058  ld   $58
              23a0 0001  ld   $01
              23a1 00cf  ld   $cf         ;03a5 CALL
              23a2 0044  ld   $44         ;03a5 'SetupChannel'
              23a3 0011  ld   $11         ;03a7 LDWI
              23a4 0070  ld   $70
              23a5 0002  ld   $02
              23a6 00cf  ld   $cf         ;03aa CALL
              23a7 0044  ld   $44         ;03aa 'SetupChannel'
              23a8 0011  ld   $11         ;03ac LDWI
              23a9 0078  ld   $78
              23aa 0003  ld   $03
              23ab 00cf  ld   $cf         ;03af CALL
              23ac 0044  ld   $44         ;03af 'SetupChannel'
              23ad 0011  ld   $11         ;03b1 LDWI
              23ae 007e  ld   $7e
              23af 0004  ld   $04
              23b0 00cf  ld   $cf         ;03b4 CALL
              23b1 0044  ld   $44         ;03b4 'SetupChannel'
              23b2 00cf  ld   $cf         ;03b6 CALL
              23b3 0034  ld   $34         ;03b6 'SetupVideo'
              23b4 0011  ld   $11         ;03b8 LDWI
              23b5 0014  ld   $14
              23b6 0008  ld   $08
              23b7 002b  ld   $2b         ;03bb STW
              23b8 003a  ld   $3a         ;03bb 'Pos'
              23b9 00cf  ld   $cf         ;03bd CALL
              23ba 003e  ld   $3e         ;03bd 'PrintStartupMessage'
              23bb 001a  ld   $1a         ;03bf LD
              23bc 002e  ld   $2e
              23bd 0082  ld   $82         ;03c1 ANDI
              23be 0080  ld   $80
              23bf 0035  ld   $35         ;03c3 BCC
              23c0 0072  ld   $72         ;03c4 NE
              23c1 00c8  ld   $c8
              23c2 005e  ld   $5e         ;03c6 ST
              23c3 002e  ld   $2e
              23c4 005e  ld   $5e         ;03c8 ST
              23c5 002d  ld   $2d
              23c6 0059  ld   $59         ;03ca LDI
              23c7 0009  ld   $09
              23c8 005e  ld   $5e         ;03cc ST
              23c9 002f  ld   $2f
              23ca 0011  ld   $11         ;03ce LDWI
              23cb 0000  ld   $00
              23cc 000b  ld   $0b
              23cd 002b  ld   $2b         ;03d1 STW
              23ce 0022  ld   $22         ;03d1 '_sysFn'
              23cf 0059  ld   $59         ;03d3 LDI
              23d0 0001  ld   $01
              23d1 00b4  ld   $b4         ;03d5 SYS
              23d2 00e6  ld   $e6
              23d3 0011  ld   $11         ;03d7 LDWI
              23d4 00c8  ld   $c8
              23d5 001f  ld   $1f
              23d6 002b  ld   $2b         ;03da STW
              23d7 0024  ld   $24         ;03da '_sysArgs0'
              23d8 0011  ld   $11         ;03dc LDWI
              23d9 0000  ld   $00
              23da 0002  ld   $02
              23db 002b  ld   $2b         ;03df STW
              23dc 001a  ld   $1a         ;03df '_vLR'
              23dd 0059  ld   $59         ;03e1 LDI
              23de 00ad  ld   $ad
              23df 002b  ld   $2b         ;03e3 STW
              23e0 0022  ld   $22         ;03e3 '_sysFn'
              23e1 00b4  ld   $b4         ;03e5 SYS
              23e2 00e2  ld   $e2
              23e3 0000  ld   $00         ;End of Core/Reset_v4_bmwtcu.gcl, size 442
              23e4 0200  nop              ;23 fillers
              23e5 0200  nop
              23e6 0200  nop
              * 23 times
              23fb fe00  bra  ac          ;+-----------------------------------+
              23fc fcfd  bra  $23fd       ;|                                   |
              23fd 1404  ld   $04,y       ;| Trampoline for page $2300 lookups |
              23fe e065  jmp  y,$65       ;|                                   |
              23ff c218  st   [$18]       ;+-----------------------------------+
              2400
