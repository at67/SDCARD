* source: Core/SDCARD_bmwtcu.asm.py
                                          164   enableListing()
                                          165   #-----------------------------------------------------------------------
                                          166   #
                                          167   #  Start of core
                                          168   #
                                          169   #-----------------------------------------------------------------------
                                          170
                                          171   # Pre-loading the formal interface as a way to get warnings when
                                          172   # accidentally redefined with a different value
                                          173   loadBindings('interface.json')
                                          174   loadBindings('Core/interface-dev.json') # Provisional values for DEVROM
                                          175
                                          176   # Gigatron clock
                                          177   cpuClock = 6.250e+06
                                          178
                                          179   # Output pin assignment for VGA
                                          180   R, G, B, hSync, vSync = 1, 4, 16, 64, 128
                                          181   syncBits = hSync+vSync # Both pulses negative
                                          182
                                          183   # When the XOUT register is in the circuit, the rising edge triggers its update.
                                          184   # The loop can therefore not be agnostic to the horizontal pulse polarity.
                                          185   assert syncBits & hSync != 0
                                          186
                                          187   # VGA 640x480 defaults (to be adjusted below!)
                                          188   vFront = 10     # Vertical front porch
                                          189   vPulse = 2      # Vertical sync pulse
                                          190   vBack  = 33     # Vertical back porch
                                          191   vgaLines = vFront + vPulse + vBack + 480
                                          192   vgaClock = 25.175e+06
                                          193
                                          194   # Video adjustments for Gigatron
                                          195   # 1. Our clock is (slightly) slower than 1/4th VGA clock. Not all monitors will
                                          196   #    accept the decreased frame rate, so we restore the frame rate to above
                                          197   #    minimum 59.94 Hz by cutting some lines from the vertical front porch.
                                          198   vFrontAdjust = vgaLines - int(4 * cpuClock / vgaClock * vgaLines)
                                          199   vFront -= vFrontAdjust
                                          200   # 2. Extend vertical sync pulse so we can feed the game controller the same
                                          201   #    signal. This is needed for controllers based on the 4021 instead of 74165
                                          202   vPulseExtension = max(0, 8-vPulse)
                                          203   vPulse += vPulseExtension
                                          204   # 3. Borrow these lines from the back porch so the refresh rate remains
                                          205   #    unaffected
                                          206   vBack -= vPulseExtension
                                          207
                                          208   # Start value of vertical blank counter
                                          209   videoYline0 = 1-2*(vFront+vPulse+vBack-2)
                                          210
                                          211   # Mismatch between video lines and sound channels
                                          212   soundDiscontinuity = (vFront+vPulse+vBack) % 4
                                          213
                                          214   # QQVGA resolution
                                          215   qqVgaWidth      = 160
                                          216   qqVgaHeight     = 120
                                          217
                                          218   # Game controller bits (actual controllers in kit have negative output)
                                          219   # +----------------------------------------+
                                          220   # |       Up                        B*     |
                                          221   # |  Left    Right               B     A*  |
                                          222   # |      Down      Select Start     A      |
                                          223   # +----------------------------------------+ *=Auto fire
                                          224   buttonRight     = 1
                                          225   buttonLeft      = 2
                                          226   buttonDown      = 4
                                          227   buttonUp        = 8
                                          228   buttonStart     = 16
                                          229   buttonSelect    = 32
                                          230   buttonB         = 64
                                          231   buttonA         = 128
                                          232
                                          233   #-----------------------------------------------------------------------
                                          234   #
                                          235   #  RAM page 0: zero-page variables
                                          236   #
                                          237   #-----------------------------------------------------------------------
                                          238
                                          239   # Memory size in pages from auto-detect
                                          240   memSize         = zpByte()
                                          241
                                          242   # The current channel number for sound generation. Advanced every scan line
                                          243   # and independent of the vertical refresh to maintain constant oscillation.
                                          244   channel         = zpByte()
                                          245
                                          246   # Next sound sample being synthesized
                                          247   sample          = zpByte()
                                          248   # To save one instruction in the critical inner loop, `sample' is always
                                          249   # reset with its own address instead of, for example, the value 0. Compare:
                                          250   # 1 instruction reset
                                          251   #       st sample,[sample]
                                          252   # 2 instruction reset:
                                          253   #       ld 0
                                          254   #       st [sample]
                                          255   # The difference is not audible. This is fine when the reset/address
                                          256   # value is low and doesn't overflow with 4 channels added to it.
                                          257   # There is an alternative, but it requires pull-down diodes on the data bus:
                                          258   #       st [sample],[sample]
                                          259   assert 4*63 + sample < 256
                                          260   # We pin this reset/address value to 3, so `sample' swings from 3 to 255
                                          261   assert sample == 3
                                          262
                                          263   # Former bootCount and bootCheck (<= ROMv3)
                                          264   zpReserved      = zpByte() # Recycled and still unused. Candidate future uses:
                                          265                              # - Video driver high address (for alternative video modes)
                                          266                              # - v6502: ADH offset ("MMU")
                                          267                              # - v8080: ???
                                          268   vCpuSelect      = zpByte() # Active interpreter page
                                          269
                                          270   # Entropy harvested from SRAM startup and controller input
                                          271   entropy         = zpByte(3)
                                          272
                                          273   # Visible video
                                          274   videoY          = zpByte() # Counts up from 0 to 238 in steps of 2
                                          275                              # Counts up (and is odd) during vertical blank
                                          276   videoModeB      = zpByte() # Handler for every 2nd line (pixel burst or vCPU)
                                          277   videoModeC      = zpByte() # Handler for every 3rd line (pixel burst or vCPU)
                                          278   videoModeD      = zpByte() # Handler for every 4th line (pixel burst or vCPU)
                                          279
                                          280   nextVideo       = zpByte() # Jump offset to scan line handler (videoA, B, C...)
                                          281   videoPulse      = nextVideo # Used for pulse width modulation
                                          282
                                          283   # Frame counter is good enough as system clock
                                          284   frameCount      = zpByte(1)
                                          285
                                          286   # Serial input (game controller)
                                          287   serialRaw       = zpByte() # New raw serial read
                                          288   serialLast      = zpByte() # Previous serial read
                                          289   buttonState     = zpByte() # Clearable button state
                                          290   resetTimer      = zpByte() # After 2 seconds of holding 'Start', do a soft reset
                                          291                              # XXX move to page 1 to free up space
                                          292
                                          293   # Extended output (blinkenlights in bit 0:3 and audio in bit 4:7). This
                                          294   # value must be present in AC during a rising hSync edge. It then gets
                                          295   # copied to the XOUT register by the hardware. The XOUT register is only
                                          296   # accessible in this indirect manner because it isn't part of the core
                                          297   # CPU architecture.
                                          298   xout            = zpByte()
                                          299   xoutMask        = zpByte() # The blinkenlights and sound on/off state
                                          300
                                          301   # vCPU interpreter
                                          302   vTicks          = zpByte()  # Interpreter ticks are units of 2 clocks
                                          303   vPC             = zpByte(2) # Interpreter program counter, points into RAM
                                          304   vAC             = zpByte(2) # Interpreter accumulator, 16-bits
                                          305   vLR             = zpByte(2) # Return address, for returning after CALL
                                          306   vSP             = zpByte(1) # Stack pointer
                                          307   vTmp            = zpByte()
                                          308   vReturn         = zpByte()  # Return into video loop (in page of vBlankStart)
                                          309
                                          310   # Scratch
                                          311   frameX          = zpByte() # Starting byte within page
                                          312   frameY          = zpByte() # Page of current pixel line (updated by videoA)
                                          313
                                          314   # Vertical blank (reuse some variables used in the visible part)
                                          315   videoSync0      = frameX   # Vertical sync type on current line (0xc0 or 0x40)
                                          316   videoSync1      = frameY   # Same during horizontal pulse (0x80 or 0x00)
                                          317
                                          318   # Versioning for GT1 compatibility
                                          319   # Please refer to Docs/GT1-files.txt for interpreting this variable
                                          320   romType         = zpByte(1)
                                          321
                                          322   # The low 3 bits are repurposed to select the actively updated sound channels.
                                          323   # Valid bit combinations are:
                                          324   #  xxxxx011     Default after reset: 4 channels (page 1,2,3,4)
                                          325   #  xxxxx001     2 channels at double update rate (page 1,2)
                                          326   #  xxxxx000     1 channel at quadruple update rate (page 1)
                                          327   # The main application for this is to free up the high bytes of page 2,3,4.
                                          328   channelMask = symbol('channelMask_v4')
                                          329   assert romType == channelMask
                                          330
                                          331   # SYS function arguments and results/scratch
                                          332   sysFn           = zpByte(2)
                                          333   sysArgs         = zpByte(8)
                                          334
                                          335   # Play sound if non-zero, count down and stop sound when zero
                                          336   soundTimer      = zpByte()
                                          337
                                          338   # Fow now the LED state machine itself is hard-coded in the program ROM
                                          339   ledTimer        = zpByte() # Number of ticks until next LED change
                                          340   ledState_v2     = zpByte() # Current LED state
                                          341   ledTempo        = zpByte() # Next value for ledTimer after LED state change
                                          342
                                          343   # All bytes above, except 0x80, are free for temporary/scratch/stacks etc
                                          344   userVars        = zpByte(0)
                                          345
                                          346   #-----------------------------------------------------------------------
                                          347   #
                                          348   #  RAM page 1: video line table
                                          349   #
                                          350   #-----------------------------------------------------------------------
                                          351
                                          352   # Byte 0-239 define the video lines
                                          353   videoTable      = 0x0100 # Indirection table: Y[0] dX[0]  ..., Y[119] dX[119]
                                          354
                                          355   vReset          = 0x01f0
                                          356   vIRQ_v5         = 0x01f6
                                          357   ctrlBits        = 0x01f8
                                          358   videoTop_v5     = 0x01f9 # Number of skip lines
                                          359
                                          360   # Highest bytes are for sound channel variables
                                          361   wavA = 250      # Waveform modulation with `adda'
                                          362   wavX = 251      # Waveform modulation with `xora'
                                          363   keyL = 252      # Frequency low 7 bits (bit7 == 0)
                                          364   keyH = 253      # Frequency high 8 bits
                                          365   oscL = 254      # Phase low 7 bits
                                          366   oscH = 255      # Phase high 8 bits
                                          367
                                          368   #-----------------------------------------------------------------------
                                          369   #  Memory layout
                                          370   #-----------------------------------------------------------------------
                                          371
                                          372   userCode = 0x0200       # Application vCPU code
                                          373   soundTable = 0x0700     # Wave form tables (doubles as right-shift-2 table)
                                          374   screenMemory = 0x0800   # Default start of screen memory: 0x0800 to 0x7fff
                                          375
                                          376   #-----------------------------------------------------------------------
                                          377   #  Application definitions
                                          378   #-----------------------------------------------------------------------
                                          379
                                          380   maxTicks = 28//2                 # Duration of vCPU's slowest virtual opcode (ticks)
                                          381   minTicks = 14//2                 # vcPU's fastest instruction
                                          382   v6502_maxTicks = 38//2           # Max duration of v6502 processing phase (ticks)
                                          383
                                          384   runVcpu_overhead = 5            # Caller overhead (cycles)
                                          385   vCPU_overhead = 9               # Callee overhead of jumping in and out (cycles)
                                          386   v6502_overhead = 11             # Callee overhead for v6502 (cycles)
                                          387
                                          388   v6502_adjust = (v6502_maxTicks - maxTicks) + (v6502_overhead - vCPU_overhead)//2
                                          389   assert v6502_adjust >= 0        # v6502's overhead is a bit more than vCPU
                                          390
                                          391   def runVcpu(n, ref=None, returnTo=None):
                                          392     """Macro to run interpreter for exactly n cycles. Returns 0 in AC.
                                          393
                                          394     - `n' is the number of available Gigatron cycles including overhead.
                                          395       This is converted into interpreter ticks and takes into account
                                          396       the vCPU calling overheads. A `nop' is inserted when necessary
                                          397       for alignment between cycles and ticks.
                                          398     - `returnTo' is where program flow continues after return. If not set
                                          399        explicitely, it will be the first instruction behind the expansion.
                                          400     - If another interpreter than vCPU is active (v6502...), that one
                                          401       must adjust for the timing differences, because runVcpu wouldn't know."""
                                          402
                                          403     overhead = runVcpu_overhead + vCPU_overhead
                                          404     if returnTo == 0x100:         # Special case for videoZ
                                          405       overhead -= 2
                                          406
                                          407     if n is None:
                                          408       # (Clumsily) create a maximum time slice, corresponding to a vTicks
                                          409       # value of 127 (giving 282 cycles). A higher value doesn't work because
                                          410       # then SYS functions that just need 28 cycles (0 excess) won't start.
                                          411       n = (127 + maxTicks) * 2 + overhead
                                          412
                                          413     n -= overhead
                                          414     assert n > 0
                                          415
                                          416     if n % 2 == 1:
                                          417       nop()                       # Tick alignment
                                          418       n -= 1
                                          419     assert n % 2 == 0
                                          420
                                          421     print('runVcpu at $%04x net cycles %3s info %s' % (pc(), n, ref))
                                          422
                                          423     if returnTo != 0x100:
                                          424       if returnTo is None:
                                          425         returnTo = pc() + 5       # Next instruction
                                          426       ld(lo(returnTo))            #0
                                          427       st([vReturn])               #1
                                          428
                                          429     n //= 2
                                          430     n -= maxTicks                 # First instruction always runs
                                          431     assert n < 128
                                          432     assert n >= v6502_adjust
                                          433
                                          434     ld([vCpuSelect],Y)            #2
                                          435     jmp(Y,'ENTER')                #3
                                          436     ld(n)                         #4
                                          437   assert runVcpu_overhead ==       5
                                          438
                                          439   #-----------------------------------------------------------------------
                                          440   #       v6502 definitions
                                          441   #-----------------------------------------------------------------------
                                          442
                                          443   # Registers are zero page variables
                                          444   v6502_PC        = vLR           # Program Counter
                                          445   v6502_PCL       = vLR+0         # Program Counter Low
                                          446   v6502_PCH       = vLR+1         # Program Counter High
                                          447   v6502_S         = vSP           # Stack Pointer (kept as "S+1")
                                          448   v6502_A         = vAC+0         # Accumulator
                                          449   v6502_BI        = vAC+1         # B Input Register (used by SBC)
                                          450   v6502_ADL       = sysArgs+0     # Low Address Register
                                          451   v6502_ADH       = sysArgs+1     # High Address Register
                                          452   v6502_IR        = sysArgs+2     # Instruction Register
                                          453   v6502_P         = sysArgs+3     # Processor Status Register (V flag in bit 7)
                                          454   v6502_Qz        = sysArgs+4     # Quick Status Register for Z flag
                                          455   v6502_Qn        = sysArgs+5     # Quick Status Register for N flag
                                          456   v6502_X         = sysArgs+6     # Index Register X
                                          457   v6502_Y         = sysArgs+7     # Index Register Y
                                          458   v6502_Tmp       = vTmp          # Scratch (may be clobbered outside v6502)
                                          459
                                          460   # MOS 6502 definitions for P register
                                          461   v6502_Cflag = 1                 # Carry Flag (unsigned overflow)
                                          462   v6502_Zflag = 2                 # Zero Flag (all bits zero)
                                          463   v6502_Iflag = 4                 # Interrupt Enable Flag (1=Disable)
                                          464   v6502_Dflag = 8                 # Decimal Enable Flag (aka BCD mode, 1=Enable)
                                          465   v6502_Bflag = 16                # Break (or PHP) Instruction Flag
                                          466   v6502_Uflag = 32                # Unused (always 1)
                                          467   v6502_Vflag = 64                # Overflow Flag (signed overflow)
                                          468   v6502_Nflag = 128               # Negative Flag (bit 7 of result)
                                          469
                                          470   # In emulation it is much faster to keep the V flag in bit 7
                                          471   # This can be corrected when importing/exporting with PHP, PLP, etc
                                          472   v6502_Vemu = 128
                                          473
                                          474   # On overflow:
                                          475   #       """Overflow is set if two inputs with the same sign produce
                                          476   #          a result with a different sign. Otherwise it is clear."""
                                          477   # Formula (without carry/borrow in!):
                                          478   #       (A ^ (A+B)) & (B ^ (A+B)) & 0x80
                                          479   # References:
                                          480   #       http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
                                          481   #       http://6502.org/tutorials/vflag.html
                                          482
                                          483   # Memory layout
                                          484   v6502_Stack     = 0x0000        # 0x0100 is already used in the Gigatron
                                          485   #v6502_NMI      = 0xfffa
                                          486   #v6502_RESET    = 0xfffc
                                          487   #v6502_IRQ      = 0xfffe
                                          488
                                          489   #-----------------------------------------------------------------------
                                          490   #
                                          491   #  $0000 ROM page 0: Boot
                                          492   #
                                          493   #-----------------------------------------------------------------------
                                          494
                                          495   align(0x100, size=0x80)
                                          496
                                          497   # Give a first sign of life that can be checked with a voltmeter
              address
              |    encoding
              |    |     instruction
              |    |     |    operands
              |    |     |    |
              V    V     V    V
              0000 0000  ld   $00         498   ld(0b0000)                      # LEDs |OOOO|
              0001 1880  ld   $80,out     499   ld(syncBits^hSync,OUT)          # Prepare XOUT update, hSync goes down, RGB to black
              0002 18c0  ld   $c0,out     500   ld(syncBits,OUT)                # hSync goes up, updating XOUT
                                          501
                                          502   # Setup I/O and RAM expander
              0003 c17c  ctrl $7c         503   ctrl(0b01111100)                # Disable SPI slaves, enable RAM, bank 1
                                          504   #      ^^^^^^^^
                                          505   #      |||||||`-- SCLK
                                          506   #      ||||||`--- Not connected
                                          507   #      |||||`---- /SS0
                                          508   #      ||||`----- /SS1
                                          509   #      |||`------ /SS2
                                          510   #      ||`------- /SS3
                                          511   #      |`-------- B0
                                          512   #      `--------- B1
                                          513   # bit15 --------- MOSI = 0
                                          514
                                          515   # Simple RAM test and size check by writing to [1<<n] and see if [0] changes or not.
              0004 0001  ld   $01         516   ld(1)                           # Quick RAM test and count
                                          517   label('.countMem0')
.countMem0:   0005 d601  st   [$01],y     518   st([memSize],Y)                 # Store in RAM and load AC in Y
              0006 00ff  ld   $ff         519   ld(255)
              0007 6900  xora [y,$00]     520   xora([Y,0])                     # Invert value from memory
              0008 ca00  st   [y,$00]     521   st([Y,0])                       # Test RAM by writing the new value
              0009 c200  st   [$00]       522   st([0])                         # Copy result in [0]
              000a 6900  xora [y,$00]     523   xora([Y,0])                     # Read back and compare if written ok
              000b ec0b  bne  $000b       524   bne(pc())                       # Loop forever on RAM failure here
              000c 00ff  ld   $ff         525   ld(255)
              000d 6900  xora [y,$00]     526   xora([Y,0])                     # Invert memory value again
              000e ca00  st   [y,$00]     527   st([Y,0])                       # To restore original value
              000f 6100  xora [$00]       528   xora([0])                       # Compare with inverted copy
              0010 f014  beq  .countMem1  529   beq('.countMem1')               # If equal, we wrapped around
              0011 0101  ld   [$01]       530   ld([memSize])
              0012 fc05  bra  .countMem0  531   bra('.countMem0')               # Loop to test next address line
              0013 8200  adda ac          532   adda(AC)                        # Executes in the branch delay slot!
                                          533   label('.countMem1')
                                          534
                                          535   # Momentarily wait to allow for debouncing of the reset switch by spinning
                                          536   # roughly 2^15 times at 2 clocks per loop: 6.5ms@10MHz to 10ms@6.3MHz
                                          537   # Real-world switches normally bounce shorter than that.
                                          538   # "[...] 16 switches exhibited an average 1557 usec of bouncing, with,
                                          539   #  as I said, a max of 6200 usec" (From: http://www.ganssle.com/debouncing.htm)
                                          540   # Relevant for the breadboard version, as the kit doesn't have a reset switch.
                                          541
.countMem1:   0014 00ff  ld   $ff         542   ld(255)                         # Debounce reset button
                                          543   label('.debounce')
.debounce:    0015 c200  st   [$00]       544   st([0])
              0016 ec16  bne  $0016       545   bne(pc())
              0017 a001  suba $01         546   suba(1)                         # Branch delay slot
              0018 0100  ld   [$00]       547   ld([0])
              0019 ec15  bne  .debounce   548   bne('.debounce')
              001a a001  suba $01         549   suba(1)                         # Branch delay slot
                                          550
                                          551   # Update LEDs (memory is present and counted, reset is stable)
              001b 0001  ld   $01         552   ld(0b0001)                      # LEDs |*OOO|
              001c 1880  ld   $80,out     553   ld(syncBits^hSync,OUT)
              001d 18c0  ld   $c0,out     554   ld(syncBits,OUT)
                                          555
                                          556   # Scan the entire RAM space to collect entropy for a random number generator.
                                          557   # The 16-bit address space is scanned, even if less RAM was detected.
              001e 0000  ld   $00         558   ld(0)                           # Collect entropy from RAM
              001f d218  st   [$18],x     559   st([vAC+0],X)
              0020 d619  st   [$19],y     560   st([vAC+1],Y)
                                          561   label('.initEnt0')
.initEnt0:    0021 0106  ld   [$06]       562   ld([entropy+0])
              0022 f425  bge  .initEnt1   563   bpl('.initEnt1')
              0023 8d00  adda [y,x]       564   adda([Y,X])
              0024 60bf  xora $bf         565   xora(191)
                                          566   label('.initEnt1')
.initEnt1:    0025 c206  st   [$06]       567   st([entropy+0])
              0026 0107  ld   [$07]       568   ld([entropy+1])
              0027 f42a  bge  .initEnt2   569   bpl('.initEnt2')
              0028 8106  adda [$06]       570   adda([entropy+0])
              0029 60c1  xora $c1         571   xora(193)
                                          572   label('.initEnt2')
.initEnt2:    002a c207  st   [$07]       573   st([entropy+1])
              002b 8108  adda [$08]       574   adda([entropy+2])
              002c c208  st   [$08]       575   st([entropy+2])
              002d 0118  ld   [$18]       576   ld([vAC+0])
              002e 8001  adda $01         577   adda(1)
              002f ec21  bne  .initEnt0   578   bne('.initEnt0')
              0030 d218  st   [$18],x     579   st([vAC+0],X)
              0031 0119  ld   [$19]       580   ld([vAC+1])
              0032 8001  adda $01         581   adda(1)
              0033 ec21  bne  .initEnt0   582   bne('.initEnt0')
              0034 d619  st   [$19],y     583   st([vAC+1],Y)
                                          584
                                          585   # Update LEDs
              0035 0003  ld   $03         586   ld(0b0011)                      # LEDs |**OO|
              0036 1880  ld   $80,out     587   ld(syncBits^hSync,OUT)
              0037 18c0  ld   $c0,out     588   ld(syncBits,OUT)
                                          589
                                          590   # vCPU reset handler
              0038 00ee  ld   $ee         591   ld((vReset&255)-2)              # Setup vCPU reset handler
              0039 c216  st   [$16]       592   st([vPC])
              003a 9002  adda $02,x       593   adda(2,X)
              003b 0001  ld   $01         594   ld(vReset>>8)
              003c d617  st   [$17],y     595   st([vPC+1],Y)
              003d dc59  st   $59,[y,x++] 596   st('LDI',             [Y,Xpp])
              003e dc5e  st   $5e,[y,x++] 597   st('SYS_Reset_88',    [Y,Xpp])
              003f dc2b  st   $2b,[y,x++] 598   st('STW',             [Y,Xpp])
              0040 dc22  st   $22,[y,x++] 599   st(sysFn,             [Y,Xpp])
              0041 dcb4  st   $b4,[y,x++] 600   st('SYS',             [Y,Xpp])  # SYS -> SYS_Reset_88 -> SYS_Exec_88
              0042 dce2  st   $e2,[y,x++] 601   st(256-88//2+maxTicks,[Y,Xpp])
              0043 dc00  st   $00,[y,x++] 602   st(0,                 [Y,Xpp])  # vIRQ_v5: Disable interrupts
              0044 dc00  st   $00,[y,x++] 603   st(0,                 [Y,Xpp])  # vIRQ_v5
              0045 dcfc  st   $fc,[y,x++] 604   st(0b11111100,        [Y,Xpp])  # Control register
              0046 dc00  st   $00,[y,x++] 605   st(0,                 [Y,Xpp])  # videoTop
                                          606
              0047 0002  ld   $02         607   ld(hi('ENTER'))                 # Active interpreter (vCPU,v6502) = vCPU
              0048 c205  st   [$05]       608   st([vCpuSelect])
                                          609
              0049 00ff  ld   $ff         610   ld(255)                         # Setup serial input
              004a c20e  st   [$0e]       611   st([frameCount])
              004b c20f  st   [$0f]       612   st([serialRaw])
              004c c210  st   [$10]       613   st([serialLast])
              004d c211  st   [$11]       614   st([buttonState])
              004e c212  st   [$12]       615   st([resetTimer])                # resetTimer<0 when entering Main.gcl
                                          616
              004f 0007  ld   $07         617   ld(0b0111)                      # LEDs |***O|
              0050 1880  ld   $80,out     618   ld(syncBits^hSync,OUT)
              0051 18c0  ld   $c0,out     619   ld(syncBits,OUT)
                                          620
              0052 0000  ld   $00         621   ld(0)
              0053 c200  st   [$00]       622   st([0])                         # Carry lookup ([0x80] in 1st line of vBlank)
              0054 c202  st   [$02]       623   st([channel])
              0055 c22c  st   [$2c]       624   st([soundTimer])
                                          625
              0056 000f  ld   $0f         626   ld(0b1111)                      # LEDs |****|
              0057 1880  ld   $80,out     627   ld(syncBits^hSync,OUT)
              0058 18c0  ld   $c0,out     628   ld(syncBits,OUT)
              0059 c213  st   [$13]       629   st([xout])                      # Setup for control by video loop
              005a c214  st   [$14]       630   st([xoutMask])
                                          631
              005b 1401  ld   $01,y       632   ld(hi('startVideo'),Y)          # Enter video loop at vertical blank
              005c e003  jmp  y,$03       633   jmp(Y,'startVideo')
              005d c22e  st   [$2e]       634   st([ledState_v2])               # Setting to 1..126 means "stopped"
                                          635
                                          636   #-----------------------------------------------------------------------
                                          637   # Extension SYS_Reset_88: Soft reset
                                          638   #-----------------------------------------------------------------------
                                          639
                                          640   # SYS_Reset_88 initiates an immediate Gigatron reset from within the vCPU.
                                          641   # The reset sequence itself is mostly implemented in GCL by Reset.gcl,
                                          642   # which must first be loaded into RAM. But as that takes more than 1 scanline,
                                          643   # some vCPU bootstrapping code gets loaded with SYS_Exec_88.
                                          644   # !!! This function was REMOVED from interface.json
                                          645   # !!! Better use vReset as generic entry point for soft reset
                                          646
                                          647   # ROM type (see also Docs/GT1-files.txt)
                                          648   romTypeValue = 0xF0 #symbol('romTypeValue_DEVROM')
                                          649
                                          650   label('SYS_Reset_88')
                                          651   assert pc()>>8 == 0
                                          652   assert (romTypeValue & 7) == 0
SYS_Reset_88: 005e 00f0  ld   $f0         653   ld(romTypeValue)                #15 Set ROM type/version and clear channel mask
              005f c221  st   [$21]       654   st([romType])                   #16
              0060 0000  ld   $00         655   ld(0)                           #17
              0061 c21c  st   [$1c]       656   st([vSP])                       #18 vSP
              0062 1401  ld   $01,y       657   ld(hi('videoTop_v5'),Y)         #19
              0063 caf9  st   [y,$f9]     658   st([Y,lo('videoTop_v5')])       #20 Show all 120 pixel lines
              0064 caf6  st   [y,$f6]     659   st([Y,vIRQ_v5])                 #21 Disable vIRQ dispatch
              0065 caf7  st   [y,$f7]     660   st([Y,vIRQ_v5+1])               #22
              0066 c22c  st   [$2c]       661   st([soundTimer])                #23 soundTimer
                                          662   assert userCode&255 == 0
              0067 c21a  st   [$1a]       663   st([vLR])                       #24 vLR
              0068 0002  ld   $02         664   ld(userCode>>8)                 #25
              0069 c21b  st   [$1b]       665   st([vLR+1])                     #26
              006a 00f6  ld   $f6         666   ld('nopixels')                  #27 Video mode 3 (fast)
              006b c20a  st   [$0a]       667   st([videoModeB])                #28
              006c c20b  st   [$0b]       668   st([videoModeC])                #29
              006d c20c  st   [$0c]       669   st([videoModeD])                #30
              006e 00ad  ld   $ad         670   ld('SYS_Exec_88')               #31 SYS_Exec_88
              006f c222  st   [$22]       671   st([sysFn])                     #32 High byte (remains) 0
              0070 00b9  ld   $b9         672   ld('Reset')                     #33 Reset.gt1 from EPROM
              0071 c224  st   [$24]       673   st([sysArgs+0])                 #34
              0072 0021  ld   $21         674   ld(hi('Reset'))                 #35
              0073 c225  st   [$25]       675   st([sysArgs+1])                 #36
              0074 0116  ld   [$16]       676   ld([vPC])                       #37 Force second SYS call
              0075 a002  suba $02         677   suba(2)                         #38
              0076 c216  st   [$16]       678   st([vPC])                       #39
                                          679   # Return to interpreter
              0077 1403  ld   $03,y       680   ld(hi('NEXTY'),Y)               #40
              0078 e000  jmp  y,$00       681   jmp(Y,'NEXTY')                  #41
              0079 00ea  ld   $ea         682   ld(-44/2)                       #42
                                          683
                                          684   #-----------------------------------------------------------------------
                                          685   # Placeholders for future SYS functions. This works as a kind of jump
                                          686   # table. The indirection allows SYS implementations to be moved around
                                          687   # between ROM versions, at the expense of 2 clock cycles (or 1). When
                                          688   # the function is not present it just acts as a NOP. Of course, when a
                                          689   # SYS function must be patched or extended it needs to have budget for
                                          690   # that in its declared maximum cycle count.
                                          691   #
                                          692   # Technically the same goal can be achieved by starting each function
                                          693   # with 2 nop's, or by overdeclaring their duration in the first place
                                          694   # (a bit is still wise to do). But this can result in fragmentation
                                          695   # of future ROM images. The indirection avoids that.
                                          696   #
                                          697   # An added advantage of having these in ROM page 0 is that it saves one
                                          698   # byte when setting sysFn: LDI+STW (4 bytes) instead of LDWI+STW (5 bytes)
                                          699   #-----------------------------------------------------------------------
                                          700
              007a 0200  nop              701   align(0x80, size=0x80)
              007b 0200  nop
              007c 0200  nop
              * 6 times
                                          702   assert pc() == 0x80
                                          703
              0080 1403  ld   $03,y       704   ld(hi('REENTER'),Y)             #15 slot 0x80
              0081 e0cb  jmp  y,$cb       705   jmp(Y,'REENTER')                #16
              0082 00f6  ld   $f6         706   ld(-20/2)                       #17
                                          707
              0083 1403  ld   $03,y       708   ld(hi('REENTER'),Y)             #15 slot 0x83
              0084 e0cb  jmp  y,$cb       709   jmp(Y,'REENTER')                #16
              0085 00f6  ld   $f6         710   ld(-20/2)                       #17
                                          711
              0086 1403  ld   $03,y       712   ld(hi('REENTER'),Y)             #15 slot 0x86
              0087 e0cb  jmp  y,$cb       713   jmp(Y,'REENTER')                #16
              0088 00f6  ld   $f6         714   ld(-20/2)                       #17
                                          715
              0089 1403  ld   $03,y       716   ld(hi('REENTER'),Y)             #15 slot 0x89
              008a e0cb  jmp  y,$cb       717   jmp(Y,'REENTER')                #16
              008b 00f6  ld   $f6         718   ld(-20/2)                       #17
                                          719
              008c 1403  ld   $03,y       720   ld(hi('REENTER'),Y)             #15 slot 0x8c
              008d e0cb  jmp  y,$cb       721   jmp(Y,'REENTER')                #16
              008e 00f6  ld   $f6         722   ld(-20/2)                       #17
                                          723
              008f 1403  ld   $03,y       724   ld(hi('REENTER'),Y)             #15 slot 0x8f
              0090 e0cb  jmp  y,$cb       725   jmp(Y,'REENTER')                #16
              0091 00f6  ld   $f6         726   ld(-20/2)                       #17
                                          727
              0092 1403  ld   $03,y       728   ld(hi('REENTER'),Y)             #15 slot 0x92
              0093 e0cb  jmp  y,$cb       729   jmp(Y,'REENTER')                #16
              0094 00f6  ld   $f6         730   ld(-20/2)                       #17
                                          731
              0095 1403  ld   $03,y       732   ld(hi('REENTER'),Y)             #15 slot 0x95
              0096 e0cb  jmp  y,$cb       733   jmp(Y,'REENTER')                #16
              0097 00f6  ld   $f6         734   ld(-20/2)                       #17
                                          735
              0098 1403  ld   $03,y       736   ld(hi('REENTER'),Y)             #15 slot 0x98
              0099 e0cb  jmp  y,$cb       737   jmp(Y,'REENTER')                #16
              009a 00f6  ld   $f6         738   ld(-20/2)                       #17
                                          739
              009b 1403  ld   $03,y       740   ld(hi('REENTER'),Y)             #15 slot 0x9b
              009c e0cb  jmp  y,$cb       741   jmp(Y,'REENTER')                #16
              009d 00f6  ld   $f6         742   ld(-20/2)                       #17
                                          743
              009e 1403  ld   $03,y       744   ld(hi('REENTER'),Y)             #15 slot 0x9e
              009f e0cb  jmp  y,$cb       745   jmp(Y,'REENTER')                #16
              00a0 00f6  ld   $f6         746   ld(-20/2)                       #17
                                          747
              00a1 1403  ld   $03,y       748   ld(hi('REENTER'),Y)             #15 slot 0xa1
              00a2 e0cb  jmp  y,$cb       749   jmp(Y,'REENTER')                #16
              00a3 00f6  ld   $f6         750   ld(-20/2)                       #17
                                          751
              00a4 1403  ld   $03,y       752   ld(hi('REENTER'),Y)             #15 slot 0xa4
              00a5 e0cb  jmp  y,$cb       753   jmp(Y,'REENTER')                #16
              00a6 00f6  ld   $f6         754   ld(-20/2)                       #17
                                          755
              00a7 1403  ld   $03,y       756   ld(hi('REENTER'),Y)             #15 slot 0xa7
              00a8 e0cb  jmp  y,$cb       757   jmp(Y,'REENTER')                #16
              00a9 00f6  ld   $f6         758   ld(-20/2)                       #17
                                          759
              00aa 1403  ld   $03,y       760   ld(hi('REENTER'),Y)             #15 slot 0xaa
              00ab e0cb  jmp  y,$cb       761   jmp(Y,'REENTER')                #16
              00ac 00f6  ld   $f6         762   ld(-20/2)                       #17
                                          763
                                          764   #-----------------------------------------------------------------------
                                          765   # Extension SYS_Exec_88: Load code from ROM into memory and execute it
                                          766   #-----------------------------------------------------------------------
                                          767   #
                                          768   # This loads the vCPU code with consideration of the current vSP
                                          769   # Used during reset, but also for switching between applications or for
                                          770   # loading data from ROM from within an application (overlays).
                                          771   #
                                          772   # ROM stream format is [<addrH> <addrL> <n&255> n*<byte>]* 0
                                          773   # on top of lookup tables.
                                          774   #
                                          775   # Variables:
                                          776   #       sysArgs[0:1]    ROM pointer (in)
                                          777   #       sysArgs[2:3]    RAM pointer (changed)
                                          778   #       sysArgs[4]      State counter (changed)
                                          779   #       vLR             vCPU continues here (in)
                                          780
                                          781   label('SYS_Exec_88')
SYS_Exec_88:  00ad 1412  ld   $12,y       782   ld(hi('sys_Exec'),Y)            #15
              00ae e04b  jmp  y,$4b       783   jmp(Y,'sys_Exec')               #16
              00af 0000  ld   $00         784   ld(0)                           #17 Address of loader on zero page
                                          785
                                          786   #-----------------------------------------------------------------------
                                          787   # More placeholders for future SYS functions
                                          788   #-----------------------------------------------------------------------
                                          789
              00b0 1403  ld   $03,y       790   ld(hi('REENTER'),Y)             #15 slot 0xb0
              00b1 e0cb  jmp  y,$cb       791   jmp(Y,'REENTER')                #16
              00b2 00f6  ld   $f6         792   ld(-20/2)                       #17
                                          793
              00b3 1403  ld   $03,y       794   ld(hi('REENTER'),Y)             #15 slot 0xb3
              00b4 e0cb  jmp  y,$cb       795   jmp(Y,'REENTER')                #16
              00b5 00f6  ld   $f6         796   ld(-20/2)                       #17
                                          797
              00b6 1403  ld   $03,y       798   ld(hi('REENTER'),Y)             #15 slot 0xb6
              00b7 e0cb  jmp  y,$cb       799   jmp(Y,'REENTER')                #16
              00b8 00f6  ld   $f6         800   ld(-20/2)                       #17
                                          801
              00b9 1403  ld   $03,y       802   ld(hi('REENTER'),Y)             #15 slot 0xb9
              00ba e0cb  jmp  y,$cb       803   jmp(Y,'REENTER')                #16
              00bb 00f6  ld   $f6         804   ld(-20/2)                       #17
                                          805
              00bc 1403  ld   $03,y       806   ld(hi('REENTER'),Y)             #15 slot 0xbc
              00bd e0cb  jmp  y,$cb       807   jmp(Y,'REENTER')                #16
              00be 00f6  ld   $f6         808   ld(-20/2)                       #17
                                          809
              00bf 1403  ld   $03,y       810   ld(hi('REENTER'),Y)             #15 slot 0xbf
              00c0 e0cb  jmp  y,$cb       811   jmp(Y,'REENTER')                #16
              00c1 00f6  ld   $f6         812   ld(-20/2)                       #17
                                          813
              00c2 1403  ld   $03,y       814   ld(hi('REENTER'),Y)             #15 slot 0xc2
              00c3 e0cb  jmp  y,$cb       815   jmp(Y,'REENTER')                #16
              00c4 00f6  ld   $f6         816   ld(-20/2)                       #17
                                          817
              00c5 1403  ld   $03,y       818   ld(hi('REENTER'),Y)             #15 slot 0xc5
              00c6 e0cb  jmp  y,$cb       819   jmp(Y,'REENTER')                #16
              00c7 00f6  ld   $f6         820   ld(-20/2)                       #17
                                          821
              00c8 1403  ld   $03,y       822   ld(hi('REENTER'),Y)             #15 slot 0xc8
              00c9 e0cb  jmp  y,$cb       823   jmp(Y,'REENTER')                #16
              00ca 00f6  ld   $f6         824   ld(-20/2)                       #17
                                          825
              00cb 1403  ld   $03,y       826   ld(hi('REENTER'),Y)             #15 slot 0xcb
              00cc e0cb  jmp  y,$cb       827   jmp(Y,'REENTER')                #16
              00cd 00f6  ld   $f6         828   ld(-20/2)                       #17
                                          829
              00ce 1403  ld   $03,y       830   ld(hi('REENTER'),Y)             #15 slot 0xce
              00cf e0cb  jmp  y,$cb       831   jmp(Y,'REENTER')                #16
              00d0 00f6  ld   $f6         832   ld(-20/2)                       #17
                                          833
              00d1 1403  ld   $03,y       834   ld(hi('REENTER'),Y)             #15 slot 0xd1
              00d2 e0cb  jmp  y,$cb       835   jmp(Y,'REENTER')                #16
              00d3 00f6  ld   $f6         836   ld(-20/2)                       #17
                                          837
              00d4 1403  ld   $03,y       838   ld(hi('REENTER'),Y)             #15 slot 0xd4
              00d5 e0cb  jmp  y,$cb       839   jmp(Y,'REENTER')                #16
              00d6 00f6  ld   $f6         840   ld(-20/2)                       #17
                                          841
              00d7 1403  ld   $03,y       842   ld(hi('REENTER'),Y)             #15 slot 0xd7
              00d8 e0cb  jmp  y,$cb       843   jmp(Y,'REENTER')                #16
              00d9 00f6  ld   $f6         844   ld(-20/2)                       #17
                                          845
              00da 1403  ld   $03,y       846   ld(hi('REENTER'),Y)             #15 slot 0xda
              00db e0cb  jmp  y,$cb       847   jmp(Y,'REENTER')                #16
              00dc 00f6  ld   $f6         848   ld(-20/2)                       #17
                                          849
              00dd 1403  ld   $03,y       850   ld(hi('REENTER'),Y)             #15 slot 0xdd
              00de e0cb  jmp  y,$cb       851   jmp(Y,'REENTER')                #16
              00df 00f6  ld   $f6         852   ld(-20/2)                       #17
                                          853
              00e0 1403  ld   $03,y       854   ld(hi('REENTER'),Y)             #15 slot 0xe0
              00e1 e0cb  jmp  y,$cb       855   jmp(Y,'REENTER')                #16
              00e2 00f6  ld   $f6         856   ld(-20/2)                       #17
                                          857
              00e3 1403  ld   $03,y       858   ld(hi('REENTER'),Y)             #15 slot 0xe3
              00e4 e0cb  jmp  y,$cb       859   jmp(Y,'REENTER')                #16
              00e5 00f6  ld   $f6         860   ld(-20/2)                       #17
                                          861
              00e6 1403  ld   $03,y       862   ld(hi('REENTER'),Y)             #15 slot 0xe6
              00e7 e0cb  jmp  y,$cb       863   jmp(Y,'REENTER')                #16
              00e8 00f6  ld   $f6         864   ld(-20/2)                       #17
                                          865
                                          866   #-----------------------------------------------------------------------
                                          867   # Extension SYS_StoreBytes_DEVROM_XXX
                                          868   #-----------------------------------------------------------------------
                                          869
              00e9 1403  ld   $03,y       870   ld(hi('REENTER'),Y)             #15 slot 0xe9
              00ea e0cb  jmp  y,$cb       871   jmp(Y,'REENTER')                #16
              00eb 00f6  ld   $f6         872   ld(-20/2)                       #17
                                          873
                                          874   #-----------------------------------------------------------------------
                                          875   # Extension SYS_LoadBytes_DEVROM_XXX
                                          876   #-----------------------------------------------------------------------
                                          877
                                          878   # Load object variables into zero-page
                                          879   # XXX Unfinished
                                          880   #
                                          881   # Variables
                                          882   #       vLR             Pointer to size byte + object variables
                                          883   #       $30...$30+n-1   Target location
                                          884
                                          885   label('SYS_LoadBytes_DEVROM_XXX')
SYS_LoadBytes_DEVROM_XXX:
              00ec 1412  ld   $12,y       886   ld(hi('sys_LoadBytes'),Y)       #15
              00ed e0e9  jmp  y,$e9       887   jmp(Y,'sys_LoadBytes')          #16
              00ee 151b  ld   [$1b],y     888   ld([vLR+1],Y)                   #17
                                          889
                                          890   #-----------------------------------------------------------------------
                                          891   # Extension SYS_ReadRomDir_v5_80
                                          892   #-----------------------------------------------------------------------
                                          893
                                          894   # Get next entry from ROM file system. Use vAC=0 to get the first entry.
                                          895
                                          896   # Variables:
                                          897   #       vAC             Start address of current entry (inout)
                                          898   #       sysArgs[0:7]    File name, padded with zeroes (out)
                                          899
                                          900   label('SYS_ReadRomDir_v5_80')
SYS_ReadRomDir_v5_80:
              00ef 1423  ld   $23,y       901   ld(hi('sys_ReadRomDir'),Y)      #15
              00f0 e082  jmp  y,$82       902   jmp(Y,'sys_ReadRomDir')         #16
              00f1 0119  ld   [$19]       903   ld([vAC+1])                     #17
                                          904
              00f2 0200  nop              905   fillers(until=symbol('SYS_Out_22') & 255)
              00f3 0200  nop
                                          906
                                          907   #-----------------------------------------------------------------------
                                          908   # Extension SYS_Out_22
                                          909   #-----------------------------------------------------------------------
                                          910
                                          911   # Send byte to output port
                                          912   #
                                          913   # Variables:
                                          914   #       vAC
                                          915
                                          916   label('SYS_Out_22')
SYS_Out_22:   00f4 1924  ld   [$24],out   917   ld([sysArgs+0],OUT)             #15
              00f5 0200  nop              918   nop()                           #16
              00f6 1403  ld   $03,y       919   ld(hi('REENTER'),Y)             #17
              00f7 e0cb  jmp  y,$cb       920   jmp(Y,'REENTER')                #18
              00f8 00f5  ld   $f5         921   ld(-22/2)                       #19
                                          922
                                          923   #-----------------------------------------------------------------------
                                          924   # Extension SYS_In_24
                                          925   #-----------------------------------------------------------------------
                                          926
                                          927   # Read a byte from the input port
                                          928   #
                                          929   # Variables:
                                          930   #       vAC
                                          931
                                          932   label('SYS_In_24')
SYS_In_24:    00f9 c318  st   in,[$18]    933   st(IN, [vAC])                   #15
              00fa 0000  ld   $00         934   ld(0)                           #16
              00fb c219  st   [$19]       935   st([vAC+1])                     #17
              00fc 0200  nop              936   nop()                           #18
              00fd 1403  ld   $03,y       937   ld(hi('REENTER'),Y)             #19
              00fe e0cb  jmp  y,$cb       938   jmp(Y,'REENTER')                #20
              00ff 00f4  ld   $f4         939   ld(-24/2)                       #21
                                          940
                                          941   assert pc()&255 == 0
                                          942
                                          943   #-----------------------------------------------------------------------
                                          944   #
                                          945   #  $0100 ROM page 1: Video loop vertical blank
                                          946   #
                                          947   #-----------------------------------------------------------------------
                                          948   align(0x100, size=0x100)
                                          949
                                          950   # Video off mode (also no sound, serial, timer, blinkenlights, ...).
                                          951   # For benchmarking purposes. This still has the overhead for the vTicks
                                          952   # administration, time slice granularity etc.
                                          953   label('videoZ')
                                          954   videoZ = pc()
videoZ:       0100 1505  ld   [$05],y     955   runVcpu(None, '---- novideo', returnTo=videoZ)
              0101 e0ff  jmp  y,$ff
              0102 007f  ld   $7f
                                          956
                                          957   label('startVideo')             # (Re)start of video signal from idle state
startVideo:   0103 00c0  ld   $c0         958   ld(syncBits)
                                          959
                                          960   # Start of vertical blank interval
                                          961   label('vBlankStart')
vBlankStart:  0104 c21f  st   [$1f]       962   st([videoSync0])                #32 Start of vertical blank interval
              0105 0080  ld   $80         963   ld(syncBits^hSync)              #33
              0106 c220  st   [$20]       964   st([videoSync1])                #34
                                          965
                                          966   # Reset line counter before vCPU can see it
              0107 00b3  ld   $b3         967   ld(videoYline0)                 #35
              0108 c209  st   [$09]       968   st([videoY])                    #36
                                          969
                                          970   # Update frame count and [0x80] (4 cycles)
              0109 0001  ld   $01         971   ld(1)                           #37 Reinitialize carry lookup, for robustness
              010a c280  st   [$80]       972   st([0x80])                      #38
              010b 810e  adda [$0e]       973   adda([frameCount])              #39 Frame counter
              010c c20e  st   [$0e]       974   st([frameCount])                #40
                                          975
                                          976   # Mix entropy (11 cycles)
              010d 6107  xora [$07]       977   xora([entropy+1])               #41 Mix entropy
              010e 610f  xora [$0f]       978   xora([serialRaw])               #42 Mix in serial input
              010f 8106  adda [$06]       979   adda([entropy+0])               #43
              0110 c206  st   [$06]       980   st([entropy+0])                 #44
              0111 8108  adda [$08]       981   adda([entropy+2])               #45 Some hidden state
              0112 c208  st   [$08]       982   st([entropy+2])                 #46
              0113 e816  blt  $0116       983   bmi(pc()+3)                     #47
              0114 fc17  bra  $0117       984   bra(pc()+3)                     #48
              0115 6053  xora $53         985   xora(64+16+2+1)                 #49
              0116 606c  xora $6c         986   xora(64+32+8+4)                 #49(!)
              0117 8107  adda [$07]       987   adda([entropy+1])               #50
              0118 c207  st   [$07]       988   st([entropy+1])                 #51
                                          989
                                          990   # LED sequencer (18 cycles)
              0119 012d  ld   [$2d]       991   ld([ledTimer])                  #52 Blinkenlight sequencer
              011a f01d  beq  $011d       992   beq(pc()+3)                     #53
              011b fc1e  bra  $011e       993   bra(pc()+3)                     #54
              011c a001  suba $01         994   suba(1)                         #55
              011d 012f  ld   [$2f]       995   ld([ledTempo])                  #55(!)
              011e c22d  st   [$2d]       996   st([ledTimer])                  #56
              011f f022  beq  $0122       997   beq(pc()+3)                     #57
              0120 fc23  bra  $0123       998   bra(pc()+3)                     #58
              0121 0000  ld   $00         999   ld(0)                           #59 Don't advance state
              0122 0001  ld   $01         1000  ld(1)                           #59(!) Advance state when timer passes through 0
              0123 812e  adda [$2e]       1001  adda([ledState_v2])             #60
              0124 ec27  bne  $0127       1002  bne(pc()+3)                     #61
              0125 fc28  bra  $0128       1003  bra(pc()+3)                     #62
              0126 00e8  ld   $e8         1004  ld(-24)                         #63 State 0 becomes -24, start of sequence
              0127 e42c  bgt  .leds#65    1005  bgt('.leds#65')                 #63(!) Catch the stopped state (>0)
              0128 c22e  st   [$2e]       1006  st([ledState_v2])               #64
              0129 8048  adda $48         1007  adda('.leds#69')                #65
              012a fe00  bra  ac          1008  bra(AC)                         #66 Jump to lookup table
              012b fc48  bra  .leds#69    1009  bra('.leds#69')                 #67 Single-instruction subroutine
                                          1010
                                          1011  label('.leds#65')
.leds#65:     012c 000f  ld   $0f         1012  ld(0x0f)                        #65 Maintain stopped state
              012d c22e  st   [$2e]       1013  st([ledState_v2])               #66
              012e fc48  bra  .leds#69    1014  bra('.leds#69')                 #67
              012f 2114  anda [$14]       1015  anda([xoutMask])                #68 Always clear sound bits (this is why AC=0x0f)
                                          1016
              0130 000f  ld   $0f         1017  ld(0b1111)                      #68 LEDs |****| offset -24 Low 4 bits are the LED output
              0131 0007  ld   $07         1018  ld(0b0111)                      #68 LEDs |***O|
              0132 0003  ld   $03         1019  ld(0b0011)                      #68 LEDs |**OO|
              0133 0001  ld   $01         1020  ld(0b0001)                      #68 LEDs |*OOO|
              0134 0002  ld   $02         1021  ld(0b0010)                      #68 LEDs |O*OO|
              0135 0004  ld   $04         1022  ld(0b0100)                      #68 LEDs |OO*O|
              0136 0008  ld   $08         1023  ld(0b1000)                      #68 LEDs |OOO*|
              0137 0004  ld   $04         1024  ld(0b0100)                      #68 LEDs |OO*O|
              0138 0002  ld   $02         1025  ld(0b0010)                      #68 LEDs |O*OO|
              0139 0001  ld   $01         1026  ld(0b0001)                      #68 LEDs |*OOO|
              013a 0003  ld   $03         1027  ld(0b0011)                      #68 LEDs |**OO|
              013b 0007  ld   $07         1028  ld(0b0111)                      #68 LEDs |***O|
              013c 000f  ld   $0f         1029  ld(0b1111)                      #68 LEDs |****|
              013d 000e  ld   $0e         1030  ld(0b1110)                      #68 LEDs |O***|
              013e 000c  ld   $0c         1031  ld(0b1100)                      #68 LEDs |OO**|
              013f 0008  ld   $08         1032  ld(0b1000)                      #68 LEDs |OOO*|
              0140 0004  ld   $04         1033  ld(0b0100)                      #68 LEDs |OO*O|
              0141 0002  ld   $02         1034  ld(0b0010)                      #68 LEDs |O*OO|
              0142 0001  ld   $01         1035  ld(0b0001)                      #68 LEDs |*OOO|
              0143 0002  ld   $02         1036  ld(0b0010)                      #68 LEDs |O*OO|
              0144 0004  ld   $04         1037  ld(0b0100)                      #68 LEDs |OO*O|
              0145 0008  ld   $08         1038  ld(0b1000)                      #68 LEDs |OOO*|
              0146 000c  ld   $0c         1039  ld(0b1100)                      #68 LEDs |OO**|
              0147 000e  ld   $0e         1040  ld(0b1110)                      #68 LEDs |O***| offset -1
                                          1041  label('.leds#69')
.leds#69:     0148 c214  st   [$14]       1042  st([xoutMask])                  #69 Sound bits will be re-enabled below
              0149 0010  ld   $10         1043  ld(vPulse*2)                    #70 vPulse default length when not modulated
              014a c20d  st   [$0d]       1044  st([videoPulse])                #71
                                          1045
                                          1046  # When the total number of scan lines per frame is not an exact multiple of the
                                          1047  # (4) channels, there will be an audible discontinuity if no measure is taken.
                                          1048  # This static noise can be suppressed by swallowing the first `lines mod 4'
                                          1049  # partial samples after transitioning into vertical blank. This is easiest if
                                          1050  # the modulo is 0 (do nothing), 1 (reset sample when entering the last visible
                                          1051  # scan line), or 2 (reset sample while in the first blank scan line). For the
                                          1052  # last case there is no solution yet: give a warning.
                                          1053  extra = 0
                                          1054  if soundDiscontinuity == 2:
                                          1055    st(sample, [sample])          # Sound continuity
                                          1056    extra += 1
                                          1057  if soundDiscontinuity > 2:
                                          1058    highlight('Warning: sound discontinuity not suppressed')
                                          1059
                                          1060  # vCPU interrupt
              014b 010e  ld   [$0e]       1061  ld([frameCount])                #72
                                          1062  beq('vBlankFirst#75')           #73
              014c f052  beq  vBlankFirst#75
                                          1063
              014d 0055  ld   $55         1064  runVcpu(186-74-extra,           #74 Application cycles (scan line 0)
              014e c21e  st   [$1e]
              014f 1505  ld   [$05],y
              0150 e0ff  jmp  y,$ff
              0151 0023  ld   $23
                                          1065      '---D line 0 no timeout',
                                          1066      returnTo='vBlankFirst#186')
                                          1067
                                          1068  label('vBlankFirst#75')
vBlankFirst#75:
              0152 1412  ld   $12,y       1069  ld(hi('vBlankFirst#78'),Y)      #75
              0153 e000  jmp  y,$00       1070  jmp(Y,'vBlankFirst#78')         #76
              0154 1401  ld   $01,y       1071  ld(hi(vIRQ_v5),Y)               #77
                                          1072  label('vBlankFirst#186')
                                          1073
                                          1074  # Mitigation for rogue channelMask (3 cycles)
vBlankFirst#186:
              0155 0121  ld   [$21]       1075  ld([channelMask])               #186 Normalize channelMask, for robustness
              0156 20fb  anda $fb         1076  anda(0b11111011)                #187
              0157 c221  st   [$21]       1077  st([channelMask])               #188
                                          1078
                                          1079  # Sound on/off (6 cycles)
              0158 012c  ld   [$2c]       1080  ld([soundTimer])                #189 Sound on/off
              0159 ec5c  bne  $015c       1081  bne(pc()+3)                     #190
              015a fc5d  bra  $015d       1082  bra(pc()+3)                     #191
              015b 0000  ld   $00         1083  ld(0)                           #192 Keeps sound unchanged (should be off here)
              015c 00f0  ld   $f0         1084  ld(0xf0)                        #192(!) Turns sound back on
              015d 4114  ora  [$14]       1085  ora([xoutMask])                 #193
              015e c214  st   [$14]       1086  st([xoutMask])                  #194
                                          1087
                                          1088  # Sound timer count down (5 cycles)
              015f 012c  ld   [$2c]       1089  ld([soundTimer])                #195 Sound timer
              0160 f063  beq  $0163       1090  beq(pc()+3)                     #196
              0161 fc64  bra  $0164       1091  bra(pc()+3)                     #197
              0162 a001  suba $01         1092  suba(1)                         #198
              0163 0000  ld   $00         1093  ld(0)                           #198
              0164 c22c  st   [$2c]       1094  st([soundTimer])                #199
                                          1095
              0165 191f  ld   [$1f],out   1096  ld([videoSync0],OUT)            #0 <New scan line start>
                                          1097  label('sound1')
sound1:       0166 0102  ld   [$02]       1098  ld([channel])                   #1 Advance to next sound channel
              0167 2121  anda [$21]       1099  anda([channelMask])             #2
              0168 8001  adda $01         1100  adda(1)                         #3
              0169 1920  ld   [$20],out   1101  ld([videoSync1],OUT)            #4 Start horizontal pulse
              016a d602  st   [$02],y     1102  st([channel],Y)                 #5
              016b 007f  ld   $7f         1103  ld(0x7f)                        #6 Update sound channel
              016c 29fe  anda [y,$fe]     1104  anda([Y,oscL])                  #7
              016d 89fc  adda [y,$fc]     1105  adda([Y,keyL])                  #8
              016e cafe  st   [y,$fe]     1106  st([Y,oscL])                    #9
              016f 3080  anda $80,x       1107  anda(0x80,X)                    #10
              0170 0500  ld   [x]         1108  ld([X])                         #11
              0171 89ff  adda [y,$ff]     1109  adda([Y,oscH])                  #12
              0172 89fd  adda [y,$fd]     1110  adda([Y,keyH])                  #13
              0173 caff  st   [y,$ff]     1111  st([Y,oscH])                    #14
              0174 20fc  anda $fc         1112  anda(0xfc)                      #15
              0175 69fb  xora [y,$fb]     1113  xora([Y,wavX])                  #16
              0176 1200  ld   ac,x        1114  ld(AC,X)                        #17
              0177 09fa  ld   [y,$fa]     1115  ld([Y,wavA])                    #18
              0178 1407  ld   $07,y       1116  ld(soundTable>>8,Y)             #19
              0179 8d00  adda [y,x]       1117  adda([Y,X])                     #20
              017a e87d  blt  $017d       1118  bmi(pc()+3)                     #21
              017b fc7e  bra  $017e       1119  bra(pc()+3)                     #22
              017c 203f  anda $3f         1120  anda(63)                        #23
              017d 003f  ld   $3f         1121  ld(63)                          #23(!)
              017e 8103  adda [$03]       1122  adda([sample])                  #24
              017f c203  st   [$03]       1123  st([sample])                    #25
                                          1124
              0180 0113  ld   [$13]       1125  ld([xout])                      #26 Gets copied to XOUT
              0181 1412  ld   $12,y       1126  ld(hi('vBlankLast#34'),Y)       #27 Prepare jumping out of page in last line
              0182 191f  ld   [$1f],out   1127  ld([videoSync0],OUT)            #28 End horizontal pulse
                                          1128
                                          1129  # Count through the vertical blank interval until its last scan line
              0183 0109  ld   [$09]       1130  ld([videoY])                    #29
                                          1131  bpl('.vBlankLast#32')           #30
              0184 f4b1  bge  .vBlankLast#32
              0185 8002  adda $02         1132  adda(2)                         #31
              0186 c209  st   [$09]       1133  st([videoY])                    #32
                                          1134
                                          1135  # Determine if we're in the vertical sync pulse
              0187 a0bd  suba $bd         1136  suba(1-2*(vBack+vPulse-1))      #33 Prepare sync values
              0188 ec8d  bne  .prepSync36 1137  bne('.prepSync36')              #34 Tests for start of vPulse
              0189 a10d  suba [$0d]       1138  suba([videoPulse])              #35
              018a 0040  ld   $40         1139  ld(syncBits^vSync)              #36 Entering vertical sync pulse
              018b fc92  bra  .prepSync39 1140  bra('.prepSync39')              #37
              018c c21f  st   [$1f]       1141  st([videoSync0])                #38
                                          1142  label('.prepSync36')
.prepSync36:  018d ec91  bne  .prepSync38 1143  bne('.prepSync38')              #36 Tests for end of vPulse
              018e 00c0  ld   $c0         1144  ld(syncBits)                    #37
              018f fc93  bra  .prepSync40 1145  bra('.prepSync40')              #38 Entering vertical back porch
              0190 c21f  st   [$1f]       1146  st([videoSync0])                #39
                                          1147  label('.prepSync38')
.prepSync38:  0191 011f  ld   [$1f]       1148  ld([videoSync0])                #38 Load current value
                                          1149  label('.prepSync39')
.prepSync39:  0192 0200  nop              1150  nop()                           #39
                                          1151  label('.prepSync40')
.prepSync40:  0193 6040  xora $40         1152  xora(hSync)                     #40 Precompute, as during the pulse there is no time
              0194 c220  st   [$20]       1153  st([videoSync1])                #41
                                          1154
                                          1155  # Capture the serial input before the '595 shifts it out
              0195 0109  ld   [$09]       1156  ld([videoY])                    #42 Capture serial input
              0196 60cf  xora $cf         1157  xora(1-2*(vBack-1-1))           #43 Exactly when the 74HC595 has captured all 8 controller bits
              0197 ec9a  bne  $019a       1158  bne(pc()+3)                     #44
              0198 fc9b  bra  $019b       1159  bra(pc()+3)                     #45
              0199 c30f  st   in,[$0f]    1160  st(IN, [serialRaw])             #46
              019a c000  st   $00,[$00]   1161  st(0,[0])                       #46(!) Reinitialize carry lookup, for robustness
                                          1162
                                          1163  # Update [xout] with the next sound sample every 4 scan lines.
                                          1164  # Keep doing this on 'videoC equivalent' scan lines in vertical blank.
              019b 0109  ld   [$09]       1165  ld([videoY])                    #47
              019c 2006  anda $06         1166  anda(6)                         #48
                                          1167  beq('vBlankSample')             #49
              019d f0a6  beq  vBlankSample
              019e 0103  ld   [$03]       1168  ld([sample])                    #50
                                          1169
                                          1170  label('vBlankNormal')
vBlankNormal: 019f 00a4  ld   $a4         1171  runVcpu(199-51, 'AB-D line 1-36')#51 Application cycles (vBlank scan lines without sound sample update)
              01a0 c21e  st   [$1e]
              01a1 1505  ld   [$05],y
              01a2 e0ff  jmp  y,$ff
              01a3 0035  ld   $35
              01a4 fc66  bra  sound1      1172  bra('sound1')                   #199
              01a5 191f  ld   [$1f],out   1173  ld([videoSync0],OUT)            #0 <New scan line start>
                                          1174
                                          1175  label('vBlankSample')
vBlankSample: 01a6 400f  ora  $0f         1176  ora(0x0f)                       #51 New sound sample is ready
              01a7 2114  anda [$14]       1177  anda([xoutMask])                #52
              01a8 c213  st   [$13]       1178  st([xout])                      #53
              01a9 c003  st   $03,[$03]   1179  st(sample, [sample])            #54 Reset for next sample
                                          1180
              01aa 00af  ld   $af         1181  runVcpu(199-55, '--C- line 3-39')#55 Application cycles (vBlank scan lines with sound sample update)
              01ab c21e  st   [$1e]
              01ac 1505  ld   [$05],y
              01ad e0ff  jmp  y,$ff
              01ae 0033  ld   $33
              01af fc66  bra  sound1      1182  bra('sound1')                   #199
              01b0 191f  ld   [$1f],out   1183  ld([videoSync0],OUT)            #0 <New scan line start>
                                          1184
                                          1185  #-----------------------------------------------------------------------
                                          1186
                                          1187  label('.vBlankLast#32')
.vBlankLast#32:
              01b1 e02e  jmp  y,$2e       1188  jmp(Y,'vBlankLast#34')          #32 Jump out of page for space reasons
                                          1189  #assert hi(controllerType) == hi(pc()) # Assume these share the high address
              01b2 1401  ld   $01,y       1190  ld(hi(pc()),Y)                  #33
                                          1191
                                          1192  label('vBlankLast#52')
                                          1193
                                          1194  # Respond to reset button (14 cycles)
                                          1195  # - ResetTimer decrements as long as just [Start] is pressed down
                                          1196  # - Reaching 0 (normal) or 128 (extended) triggers the soft reset sequence
                                          1197  # - Initial value is 128 (or 255 at boot), first decrement, then check
                                          1198  # - This starts vReset -> SYS_Reset_88 -> SYS_Exec_88 -> Reset.gcl -> Main.gcl
                                          1199  # - Main.gcl then recognizes extended presses if resetTimer is 0..127 ("paasei")
                                          1200  # - This requires a full cycle (4s) in the warm boot scenario
                                          1201  # - Or a half cycle (2s) when pressing [Select] down during hard reset
                                          1202  # - This furthermore requires >=1 frame (and <=128) to have passed between
                                          1203  #   reaching 128 and getting through Reset and the start of Main, while [Start]
                                          1204  #   was still pressed so the count reaches <128. Two reasonable expectations.
                                          1205  # - The unintended power-up scenarios of ROMv1 (pulling SER_DATA low, or
                                          1206  #   pressing [Select] together with another button) now don't trigger anymore.
                                          1207
vBlankLast#52:
              01b3 0111  ld   [$11]       1208  ld([buttonState])               #52 Check [Start] for soft reset
              01b4 60ef  xora $ef         1209  xora(~buttonStart)              #53
              01b5 ecbe  bne  .restart#56 1210  bne('.restart#56')              #54
              01b6 0112  ld   [$12]       1211  ld([resetTimer])                #55 As long as button pressed
              01b7 a001  suba $01         1212  suba(1)                         #56 ... count down the timer
              01b8 c212  st   [$12]       1213  st([resetTimer])                #57
              01b9 207f  anda $7f         1214  anda(127)                       #58
              01ba f0c6  beq  .restart#61 1215  beq('.restart#61')              #59 Reset at 0 (normal 2s) or 128 (extended 4s)
              01bb 00ee  ld   $ee         1216  ld((vReset&255)-2)              #60 Start force reset when hitting 0
              01bc fcc5  bra  .restart#63 1217  bra('.restart#63')              #61 ... otherwise do nothing yet
              01bd fcc4  bra  .restart#64 1218  bra('.restart#64')              #62
                                          1219  label('.restart#56')
.restart#56:  01be 0001  ld   $01         1220  wait(62-56)                     #56
              01bf ecbf  bne  $01bf
              01c0 a001  suba $01
              01c1 0200  nop
              01c2 0080  ld   $80         1221  ld(128)                         #62 Not pressed, reset the timer
              01c3 c212  st   [$12]       1222  st([resetTimer])                #63
                                          1223  label('.restart#64')
.restart#64:  01c4 fccb  bra  .restart#66 1224  bra('.restart#66')              #64
                                          1225  label('.restart#63')
.restart#63:  01c5 0200  nop              1226  nop()                           #63,65
                                          1227  label('.restart#61')
.restart#61:  01c6 c216  st   [$16]       1228  st([vPC])                       #61 Point vPC at vReset
              01c7 0001  ld   $01         1229  ld(vReset>>8)                   #62
              01c8 c217  st   [$17]       1230  st([vPC+1])                     #63
              01c9 0002  ld   $02         1231  ld(hi('ENTER'))                 #64 Set active interpreter to vCPU
              01ca c205  st   [$05]       1232  st([vCpuSelect])                #65
                                          1233  label('.restart#66')
                                          1234
                                          1235  # Switch video mode when (only) select is pressed (16 cycles)
                                          1236  # XXX We could make this a vCPU interrupt
.restart#66:  01cb 0111  ld   [$11]       1237  ld([buttonState])               #66 Check [Select] to switch modes
              01cc 60df  xora $df         1238  xora(~buttonSelect)             #67 Only trigger when just [Select] is pressed
              01cd ece2  bne  .select#70  1239  bne('.select#70')               #68
              01ce 010b  ld   [$0b]       1240  ld([videoModeC])                #69
              01cf e8d5  blt  .select#72  1241  bmi('.select#72')               #70 Branch when line C is off
              01d0 010a  ld   [$0a]       1242  ld([videoModeB])                #71 Rotate: Off->D->B->C
              01d1 c20b  st   [$0b]       1243  st([videoModeC])                #72
              01d2 010c  ld   [$0c]       1244  ld([videoModeD])                #73
              01d3 c20a  st   [$0a]       1245  st([videoModeB])                #74
              01d4 fcda  bra  .select#77  1246  bra('.select#77')               #75
                                          1247  label('.select#72')
.select#72:   01d5 00f6  ld   $f6         1248  ld('nopixels')                  #72,76
              01d6 000a  ld   $0a         1249  ld('pixels')                    #73 Reset: On->D->B->C
              01d7 c20b  st   [$0b]       1250  st([videoModeC])                #74
              01d8 c20a  st   [$0a]       1251  st([videoModeB])                #75
              01d9 0200  nop              1252  nop()                           #76
                                          1253  label('.select#77')
.select#77:   01da c20c  st   [$0c]       1254  st([videoModeD])                #77
              01db 0035  ld   $35         1255  wait(188-78)                    #78 Don't waste code space expanding runVcpu here
              01dc ecdc  bne  $01dc
              01dd a001  suba $01
              01de 0200  nop
                                          1256  # AC==255 now
              01df c211  st   [$11]       1257  st([buttonState])               #188
                                          1258  bra('vBlankEnd#191')            #189
              01e0 fcea  bra  vBlankEnd#191
              01e1 0000  ld   $00         1259  ld(0)                           #190
                                          1260  label('.select#70')
                                          1261
                                          1262  # Mitigation of runaway channel variable
.select#70:   01e2 0102  ld   [$02]       1263  ld([channel])                   #70 Normalize channel, for robustness
              01e3 2003  anda $03         1264  anda(0b00000011)                #71
              01e4 c202  st   [$02]       1265  st([channel])                   #72 Stop wild channel updates
                                          1266
              01e5 00ea  ld   $ea         1267  runVcpu(191-73, '---D line 40') #73 Application cycles (scan line 40)
              01e6 c21e  st   [$1e]
              01e7 1505  ld   [$05],y
              01e8 e0ff  jmp  y,$ff
              01e9 0026  ld   $26
                                          1268
                                          1269  # AC==0 now
                                          1270  label('vBlankEnd#191')
vBlankEnd#191:
              01ea 1401  ld   $01,y       1271  ld(videoTop_v5>>8,Y)            #191
              01eb 09f9  ld   [y,$f9]     1272  ld([Y,videoTop_v5])             #192
              01ec c209  st   [$09]       1273  st([videoY])                    #193
              01ed c21f  st   [$1f]       1274  st([frameX])                    #194
              01ee ecf1  bne  $01f1       1275  bne(pc()+3)                     #195
              01ef fcf2  bra  $01f2       1276  bra(pc()+3)                     #196
              01f0 0001  ld   $01         1277  ld('videoA')                    #197
              01f1 00ec  ld   $ec         1278  ld('videoF')                    #197(!)
              01f2 c20d  st   [$0d]       1279  st([nextVideo])                 #198
              01f3 0102  ld   [$02]       1280  ld([channel])                   #199 Advance to next sound channel
              01f4 2121  anda [$21]       1281  anda([channelMask])             #0 <New scan line start>
              01f5 8001  adda $01         1282  adda(1)                         #1
              01f6 1402  ld   $02,y       1283  ld(hi('sound2'),Y)              #2
              01f7 e0b1  jmp  y,$b1       1284  jmp(Y,'sound2')                 #3
              01f8 1880  ld   $80,out     1285  ld(syncBits^hSync,OUT)          #4 Start horizontal pulse
                                          1286
              01f9 0200  nop              1287  fillers(until=0xff)
              01fa 0200  nop
              01fb 0200  nop
              * 6 times
                                          1288
                                          1289  #-----------------------------------------------------------------------
                                          1290  # Return point for vCPU slices during visible screen area
                                          1291  #-----------------------------------------------------------------------
                                          1292
                                          1293  assert pc() == 0x1ff            # Enables runVcpu() to re-enter into the next page
              01ff fcae  bra  sound3      1294  bra('sound3')                   #200,0 <New scan line start>
                                          1295
                                          1296  #-----------------------------------------------------------------------
                                          1297  #
                                          1298  #  $0200 ROM page 2: Video loop visible scanlines
                                          1299  #
                                          1300  #-----------------------------------------------------------------------
                                          1301  align(0x100, size=0x100)
              0200 0102  ld   [$02]       1302  ld([channel])                   #1 Advance to next sound channel
                                          1303
                                          1304  # Back porch A: first of 4 repeated scan lines
                                          1305  # - Fetch next Yi and store it for retrieval in the next scan lines
                                          1306  # - Calculate Xi from dXi, but there is no cycle time left to store it as well
                                          1307  label('videoA')
videoA:       0201 00ca  ld   $ca         1308  ld('videoB')                    #29 1st scanline of 4 (always visible)
              0202 c20d  st   [$0d]       1309  st([nextVideo])                 #30
              0203 1401  ld   $01,y       1310  ld(videoTable>>8,Y)             #31
              0204 1109  ld   [$09],x     1311  ld([videoY],X)                  #32
              0205 0d00  ld   [y,x]       1312  ld([Y,X])                       #33
              0206 de00  st   [y,x++]     1313  st([Y,Xpp])                     #34 Just X++
              0207 c220  st   [$20]       1314  st([frameY])                    #35
              0208 0d00  ld   [y,x]       1315  ld([Y,X])                       #36
              0209 911f  adda [$1f],x     1316  adda([frameX],X)                #37
                                          1317  label('pixels')
pixels:       020a 1520  ld   [$20],y     1318  ld([frameY],Y)                  #38
              020b 00c0  ld   $c0         1319  ld(syncBits)                    #39
                                          1320
                                          1321  # Stream 160 pixels from memory location <Yi,Xi> onwards
                                          1322  # Superimpose the sync signal bits to be robust against misprogramming
                                          1323  for i in range(qqVgaWidth):
              020c 5d00  ora  [y,x++],out 1324    ora([Y,Xpp],OUT)              #40-199 Pixel burst
              020d 5d00  ora  [y,x++],out
              020e 5d00  ora  [y,x++],out
              * 160 times
              02ac 18c0  ld   $c0,out     1325  ld(syncBits,OUT)                #0 <New scan line start> Back to black
                                          1326
                                          1327  # Front porch
              02ad 0102  ld   [$02]       1328  ld([channel])                   #1 Advance to next sound channel
                                          1329  label('sound3')                 # Return from vCPU interpreter
sound3:       02ae 2121  anda [$21]       1330  anda([channelMask])             #2
              02af 8001  adda $01         1331  adda(1)                         #3
              02b0 1880  ld   $80,out     1332  ld(syncBits^hSync,OUT)          #4 Start horizontal pulse
                                          1333
                                          1334  # Horizontal sync and sound channel update for scanlines outside vBlank
                                          1335  label('sound2')
sound2:       02b1 d602  st   [$02],y     1336  st([channel],Y)                 #5
              02b2 007f  ld   $7f         1337  ld(0x7f)                        #6
              02b3 29fe  anda [y,$fe]     1338  anda([Y,oscL])                  #7
              02b4 89fc  adda [y,$fc]     1339  adda([Y,keyL])                  #8
              02b5 cafe  st   [y,$fe]     1340  st([Y,oscL])                    #9
              02b6 3080  anda $80,x       1341  anda(0x80,X)                    #10
              02b7 0500  ld   [x]         1342  ld([X])                         #11
              02b8 89ff  adda [y,$ff]     1343  adda([Y,oscH])                  #12
              02b9 89fd  adda [y,$fd]     1344  adda([Y,keyH])                  #13
              02ba caff  st   [y,$ff]     1345  st([Y,oscH] )                   #14
              02bb 20fc  anda $fc         1346  anda(0xfc)                      #15
              02bc 69fb  xora [y,$fb]     1347  xora([Y,wavX])                  #16
              02bd 1200  ld   ac,x        1348  ld(AC,X)                        #17
              02be 09fa  ld   [y,$fa]     1349  ld([Y,wavA])                    #18
              02bf 1407  ld   $07,y       1350  ld(soundTable>>8,Y)             #19
              02c0 8d00  adda [y,x]       1351  adda([Y,X])                     #20
              02c1 e8c4  blt  $02c4       1352  bmi(pc()+3)                     #21
              02c2 fcc5  bra  $02c5       1353  bra(pc()+3)                     #22
              02c3 203f  anda $3f         1354  anda(63)                        #23
              02c4 003f  ld   $3f         1355  ld(63)                          #23(!)
              02c5 8103  adda [$03]       1356  adda([sample])                  #24
              02c6 c203  st   [$03]       1357  st([sample])                    #25
                                          1358
              02c7 0113  ld   [$13]       1359  ld([xout])                      #26 Gets copied to XOUT
              02c8 fd0d  bra  [$0d]       1360  bra([nextVideo])                #27
              02c9 18c0  ld   $c0,out     1361  ld(syncBits,OUT)                #28 End horizontal pulse
                                          1362
                                          1363  # Back porch B: second of 4 repeated scan lines
                                          1364  # - Recompute Xi from dXi and store for retrieval in the next scan lines
                                          1365  label('videoB')
videoB:       02ca 00d3  ld   $d3         1366  ld('videoC')                    #29 2nd scanline of 4
              02cb c20d  st   [$0d]       1367  st([nextVideo])                 #30
              02cc 1401  ld   $01,y       1368  ld(videoTable>>8,Y)             #31
              02cd 0109  ld   [$09]       1369  ld([videoY])                    #32
              02ce 9001  adda $01,x       1370  adda(1,X)                       #33
              02cf 011f  ld   [$1f]       1371  ld([frameX])                    #34
              02d0 8d00  adda [y,x]       1372  adda([Y,X])                     #35
              02d1 fd0a  bra  [$0a]       1373  bra([videoModeB])               #36
              02d2 d21f  st   [$1f],x     1374  st([frameX],X)                  #37 Store in RAM and X
                                          1375
                                          1376  # Back porch C: third of 4 repeated scan lines
                                          1377  # - Nothing new to for video do as Yi and Xi are known,
                                          1378  # - This is the time to emit and reset the next sound sample
                                          1379  label('videoC')
videoC:       02d3 00dc  ld   $dc         1380  ld('videoD')                    #29 3rd scanline of 4
              02d4 c20d  st   [$0d]       1381  st([nextVideo])                 #30
              02d5 0103  ld   [$03]       1382  ld([sample])                    #31 New sound sample is ready (didn't fit in the audio loop)
              02d6 400f  ora  $0f         1383  ora(0x0f)                       #32
              02d7 2114  anda [$14]       1384  anda([xoutMask])                #33
              02d8 c213  st   [$13]       1385  st([xout])                      #34 Update [xout] with new sample (4 channels just updated)
              02d9 c003  st   $03,[$03]   1386  st(sample, [sample])            #35 Reset for next sample
              02da fd0b  bra  [$0b]       1387  bra([videoModeC])               #36
              02db 111f  ld   [$1f],x     1388  ld([frameX],X)                  #37
                                          1389
                                          1390  # Back porch D: last of 4 repeated scan lines
                                          1391  # - Calculate the next frame index
                                          1392  # - Decide if this is the last line or not
                                          1393  label('videoD')                 # Default video mode
videoD:       02dc 111f  ld   [$1f],x     1394  ld([frameX], X)                 #29 4th scanline of 4
              02dd 0109  ld   [$09]       1395  ld([videoY])                    #30
              02de a0ee  suba $ee         1396  suba((120-1)*2)                 #31
                                          1397  beq('.lastpixels#34')           #32
              02df f0e5  beq  .lastpixels#34
              02e0 80f0  adda $f0         1398  adda(120*2)                     #33 More pixel lines to go
              02e1 c209  st   [$09]       1399  st([videoY])                    #34
              02e2 0001  ld   $01         1400  ld('videoA')                    #35
              02e3 fd0c  bra  [$0c]       1401  bra([videoModeD])               #36
              02e4 c20d  st   [$0d]       1402  st([nextVideo])                 #37
                                          1403
                                          1404  label('.lastpixels#34')
                                          1405  if soundDiscontinuity == 1:
.lastpixels#34:
              02e5 c003  st   $03,[$03]   1406    st(sample, [sample])          #34 Sound continuity
                                          1407  else:
                                          1408    nop()                         #34
              02e6 00e9  ld   $e9         1409  ld('videoE')                    #35 No more pixel lines to go
              02e7 fd0c  bra  [$0c]       1410  bra([videoModeD])               #36
              02e8 c20d  st   [$0d]       1411  st([nextVideo])                 #37
                                          1412
                                          1413  # Back porch "E": after the last line
                                          1414  # - Go back and and enter vertical blank (program page 2)
                                          1415  label('videoE') # Exit visible area
videoE:       02e9 1401  ld   $01,y       1416  ld(hi('vBlankStart'),Y)         #29 Return to vertical blank interval
              02ea e004  jmp  y,$04       1417  jmp(Y,'vBlankStart')            #30
              02eb 00c0  ld   $c0         1418  ld(syncBits)                    #31
                                          1419
                                          1420  # Video mode that blacks out one or more pixel lines from the top of screen.
                                          1421  # This yields some speed, but also frees up screen memory for other purposes.
                                          1422  # Note: Sound output becomes choppier the more pixel lines are skipped
                                          1423  # Note: The vertical blank driver leaves 0x80 behind in [videoSync1]
                                          1424  label('videoF')
videoF:       02ec 0120  ld   [$20]       1425  ld([videoSync1])                #29 Completely black pixel line
              02ed 8080  adda $80         1426  adda(0x80)                      #30
              02ee d220  st   [$20],x     1427  st([videoSync1],X)              #31
              02ef 011f  ld   [$1f]       1428  ld([frameX])                    #32
              02f0 a500  suba [x]         1429  suba([X])                       #33 Decrements every two VGA scanlines
              02f1 f0f4  beq  .videoF#36  1430  beq('.videoF#36')               #34
              02f2 c21f  st   [$1f]       1431  st([frameX])                    #35
              02f3 fcf6  bra  nopixels    1432  bra('nopixels')                 #36
                                          1433  label('.videoF#36')
.videoF#36:   02f4 0001  ld   $01         1434  ld('videoA')                    #36,37 Transfer to visible screen area
              02f5 c20d  st   [$0d]       1435  st([nextVideo])                 #37
                                          1436  #
                                          1437  # Alternative for pixel burst: faster application mode
                                          1438  label('nopixels')
nopixels:     02f6 00ff  ld   $ff         1439  runVcpu(200-38, 'ABCD line 40-520',
              02f7 c21e  st   [$1e]
              02f8 1505  ld   [$05],y
              02f9 e0ff  jmp  y,$ff
              02fa 003c  ld   $3c
                                          1440    returnTo=0x1ff)               #38 Application interpreter (black scanlines)
                                          1441
                                          1442  #-----------------------------------------------------------------------
                                          1443  #
                                          1444  #  $0300 ROM page 3: Application interpreter primary page
                                          1445  #
                                          1446  #-----------------------------------------------------------------------
                                          1447
                                          1448  # Enter the timing-aware application interpreter (aka virtual CPU, vCPU)
                                          1449  #
                                          1450  # This routine will execute as many as possible instructions in the
                                          1451  # allotted time. When time runs out, it synchronizes such that the total
                                          1452  # duration matches the caller's request. Durations are counted in `ticks',
                                          1453  # which are multiples of 2 clock cycles.
                                          1454  #
                                          1455  # Synopsis: Use the runVcpu() macro as entry point
                                          1456
                                          1457  # We let 'ENTER' begin one word before the page boundary, for a bit extra
                                          1458  # precious space in the packed interpreter code page. Although ENTER's
                                          1459  # first instruction is bra() which normally doesn't cross page boundaries,
                                          1460  # in this case it will still jump into the right space, because branches
                                          1461  # from $xxFF land in the next page anyway.
                                          1462  while pc()&255 < 255:
              02fb 0200  nop              1463    nop()
              02fc 0200  nop
              02fd 0200  nop
              02fe 0200  nop
                                          1464  label('ENTER')
ENTER:        02ff fc03  bra  .next2      1465  bra('.next2')                   #0 Enter at '.next2' (so no startup overhead)
                                          1466  # --- Page boundary ---
                                          1467  align(0x100,size=0x100)
                                          1468  label('NEXTY')                  # Alternative for REENTER
NEXTY:        0300 1517  ld   [$17],y     1469  ld([vPC+1],Y)                   #1
                                          1470
                                          1471  # Fetch next instruction and execute it, but only if there are sufficient
                                          1472  # ticks left for the slowest instruction.
                                          1473  label('NEXT')
NEXT:         0301 8115  adda [$15]       1474  adda([vTicks])                  #0 Track elapsed ticks (actually counting down: AC<0)
              0302 e80b  blt  EXIT        1475  blt('EXIT')                     #1 Escape near time out
                                          1476  label('.next2')
.next2:       0303 c215  st   [$15]       1477  st([vTicks])                    #2
              0304 0116  ld   [$16]       1478  ld([vPC])                       #3 Advance vPC
              0305 8002  adda $02         1479  adda(2)                         #4
              0306 d216  st   [$16],x     1480  st([vPC],X)                     #5
              0307 0d00  ld   [y,x]       1481  ld([Y,X])                       #6 Fetch opcode (actually a branch target)
              0308 de00  st   [y,x++]     1482  st([Y,Xpp])                     #7 Just X++
              0309 fe00  bra  ac          1483  bra(AC)                         #8 Dispatch
              030a 0d00  ld   [y,x]       1484  ld([Y,X])                       #9 Prefetch operand
                                          1485
                                          1486  # Resync with video driver and transfer control
                                          1487  label('EXIT')
EXIT:         030b 800e  adda $0e         1488  adda(maxTicks)                  #3
                                          1489  label('RESYNC')
RESYNC:       030c e40c  bgt  RESYNC      1490  bgt(pc()&255)                   #4 Resync
              030d a001  suba $01         1491  suba(1)                         #5
              030e 1401  ld   $01,y       1492  ld(hi('vBlankStart'),Y)         #6
              030f e11e  jmp  y,[$1e]     1493  jmp(Y,[vReturn])                #7 To video driver
              0310 0000  ld   $00         1494  ld(0)                           #8 AC should be 0 already. Still..
                                          1495  assert vCPU_overhead ==          9
                                          1496
                                          1497  # Instruction LDWI: Load immediate word constant (vAC=D), 20 cycles
                                          1498  label('LDWI')
LDWI:         0311 c218  st   [$18]       1499  st([vAC])                       #10
              0312 de00  st   [y,x++]     1500  st([Y,Xpp])                     #11 Just X++
              0313 0d00  ld   [y,x]       1501  ld([Y,X])                       #12 Fetch second operand
              0314 c219  st   [$19]       1502  st([vAC+1])                     #13
              0315 0116  ld   [$16]       1503  ld([vPC])                       #14 Advance vPC one more
              0316 8001  adda $01         1504  adda(1)                         #15
              0317 c216  st   [$16]       1505  st([vPC])                       #16
              0318 00f6  ld   $f6         1506  ld(-20/2)                       #17
              0319 fc01  bra  NEXT        1507  bra('NEXT')                     #18
                                          1508  #dummy()                        #19 Overlap
                                          1509  #
                                          1510  # Instruction LD: Load byte from zero page (vAC=[D]), 22 cycles
                                          1511  label('LD')
LD:           031a 1200  ld   ac,x        1512  ld(AC,X)                        #10,19
              031b 0500  ld   [x]         1513  ld([X])                         #11
              031c 1404  ld   $04,y       1514  ld(hi('ld#15'),Y)               #12
              031d e013  jmp  y,$13       1515  jmp(Y,'ld#15')                  #13
              031e c218  st   [$18]       1516  st([vAC])                       #14
                                          1517
                                          1518  # Instruction CMPHS: Adjust high byte for signed compare (vACH=XXX), 28 cycles
                                          1519  label('CMPHS_v5')
CMPHS_v5:     031f 140b  ld   $0b,y       1520  ld(hi('cmphs#13'),Y)            #10
              0320 e0bc  jmp  y,$bc       1521  jmp(Y,'cmphs#13')               #11
                                          1522  #ld(AC,X)                       #12 Overlap
                                          1523  #
                                          1524  # Instruction LDW: Load word from zero page (vAC=[D]+256*[D+1]), 20 cycles
                                          1525  label('LDW')
LDW:          0321 1200  ld   ac,x        1526  ld(AC,X)                        #10,12
              0322 8001  adda $01         1527  adda(1)                         #11
              0323 c21d  st   [$1d]       1528  st([vTmp])                      #12 Address of high byte
              0324 0500  ld   [x]         1529  ld([X])                         #13
              0325 c218  st   [$18]       1530  st([vAC])                       #14
              0326 111d  ld   [$1d],x     1531  ld([vTmp],X)                    #15
              0327 0500  ld   [x]         1532  ld([X])                         #16
              0328 c219  st   [$19]       1533  st([vAC+1])                     #17
              0329 fc01  bra  NEXT        1534  bra('NEXT')                     #18
              032a 00f6  ld   $f6         1535  ld(-20/2)                       #19
                                          1536
                                          1537  # Instruction STW: Store word in zero page ([D],[D+1]=vAC&255,vAC>>8), 20 cycles
                                          1538  label('STW')
STW:          032b 1200  ld   ac,x        1539  ld(AC,X)                        #10,20
              032c 8001  adda $01         1540  adda(1)                         #11
              032d c21d  st   [$1d]       1541  st([vTmp])                      #12 Address of high byte
              032e 0118  ld   [$18]       1542  ld([vAC])                       #13
              032f c600  st   [x]         1543  st([X])                         #14
              0330 111d  ld   [$1d],x     1544  ld([vTmp],X)                    #15
              0331 0119  ld   [$19]       1545  ld([vAC+1])                     #16
              0332 c600  st   [x]         1546  st([X])                         #17
              0333 fc01  bra  NEXT        1547  bra('NEXT')                     #18
              0334 00f6  ld   $f6         1548  ld(-20/2)                       #19
                                          1549
                                          1550  # Instruction BCC: Test AC sign and branch conditionally, 28 cycles
                                          1551  label('BCC')
BCC:          0335 0119  ld   [$19]       1552  ld([vAC+1])                     #10 First inspect high byte of vAC
              0336 ec40  bne  .bcc#13     1553  bne('.bcc#13')                  #11
              0337 c21d  st   [$1d]       1554  st([vTmp])                      #12
              0338 0118  ld   [$18]       1555  ld([vAC])                       #13 Additionally inspect low byte of vAC
              0339 f043  beq  .bcc#16     1556  beq('.bcc#16')                  #14
              033a 0001  ld   $01         1557  ld(1)                           #15
              033b c21d  st   [$1d]       1558  st([vTmp])                      #16
              033c 0d00  ld   [y,x]       1559  ld([Y,X])                       #17 Operand is the conditional
                                          1560  label('.bcc#18')
.bcc#18:      033d fe00  bra  ac          1561  bra(AC)                         #18
              033e 011d  ld   [$1d]       1562  ld([vTmp])                      #19
                                          1563
                                          1564  # Conditional EQ: Branch if zero (if(vACL==0)vPCL=D)
                                          1565  label('EQ')
EQ:           033f ec45  bne  .bcc#22     1566  bne('.bcc#22')                  #20
                                          1567  label('.bcc#13')
.bcc#13:      0340 f048  beq  .bcc#23     1568  beq('.bcc#23')                  #21,13 AC=0 in EQ, AC!=0 from BCC... Overlap with BCC
              0341 0d00  ld   [y,x]       1569  ld([Y,X])                       #22,14 Overlap with BCC
                                          1570  #
                                          1571  # (continue BCC)
                                          1572  #label('.bcc#13')
                                          1573  #dummy()                        #13
                                          1574  #dummy()                        #14
              0342 0200  nop              1575  nop()                           #15
                                          1576  label('.bcc#16')
.bcc#16:      0343 fc3d  bra  .bcc#18     1577  bra('.bcc#18')                  #16
              0344 0d00  ld   [y,x]       1578  ld([Y,X])                       #17 Operand is the conditional
                                          1579  label('.bcc#22')
.bcc#22:      0345 0116  ld   [$16]       1580  ld([vPC])                       #22 False condition
              0346 fc4a  bra  .bcc#25     1581  bra('.bcc#25')                  #23
              0347 8001  adda $01         1582  adda(1)                         #24
                                          1583  label('.bcc#23')
.bcc#23:      0348 de00  st   [y,x++]     1584  st([Y,Xpp])                     #23 Just X++ True condition
              0349 0d00  ld   [y,x]       1585  ld([Y,X])                       #24
                                          1586  label('.bcc#25')
.bcc#25:      034a c216  st   [$16]       1587  st([vPC])                       #25
              034b fc01  bra  NEXT        1588  bra('NEXT')                     #26
              034c 00f2  ld   $f2         1589  ld(-28/2)                       #27
                                          1590
                                          1591  # Conditional GT: Branch if positive (if(vACL>0)vPCL=D)
                                          1592  label('GT')
GT:           034d f845  ble  .bcc#22     1593  ble('.bcc#22')                  #20
              034e e448  bgt  .bcc#23     1594  bgt('.bcc#23')                  #21
              034f 0d00  ld   [y,x]       1595  ld([Y,X])                       #22
                                          1596
                                          1597  # Conditional LT: Branch if negative (if(vACL<0)vPCL=D)
                                          1598  label('LT')
LT:           0350 f445  bge  .bcc#22     1599  bge('.bcc#22')                  #20
              0351 e848  blt  .bcc#23     1600  blt('.bcc#23')                  #21
              0352 0d00  ld   [y,x]       1601  ld([Y,X])                       #22
                                          1602
                                          1603  # Conditional GE: Branch if positive or zero (if(vACL>=0)vPCL=D)
                                          1604  label('GE')
GE:           0353 e845  blt  .bcc#22     1605  blt('.bcc#22')                  #20
              0354 f448  bge  .bcc#23     1606  bge('.bcc#23')                  #21
              0355 0d00  ld   [y,x]       1607  ld([Y,X])                       #22
                                          1608
                                          1609  # Conditional LE: Branch if negative or zero (if(vACL<=0)vPCL=D)
                                          1610  label('LE')
LE:           0356 e445  bgt  .bcc#22     1611  bgt('.bcc#22')                  #20
              0357 f848  ble  .bcc#23     1612  ble('.bcc#23')                  #21
              0358 0d00  ld   [y,x]       1613  ld([Y,X])                       #22
                                          1614
                                          1615  # Instruction LDI: Load immediate small positive constant (vAC=D), 16 cycles
                                          1616  label('LDI')
LDI:          0359 c218  st   [$18]       1617  st([vAC])                       #10
              035a 0000  ld   $00         1618  ld(0)                           #11
              035b c219  st   [$19]       1619  st([vAC+1])                     #12
              035c fc00  bra  NEXTY       1620  bra('NEXTY')                    #13
              035d 00f8  ld   $f8         1621  ld(-16/2)                       #14
                                          1622
                                          1623  # Instruction ST: Store byte in zero page ([D]=vAC&255), 16 cycles
                                          1624  label('ST')
ST:           035e 1200  ld   ac,x        1625  ld(AC,X)                        #10,15
              035f 0118  ld   [$18]       1626  ld([vAC])                       #11
              0360 c600  st   [x]         1627  st([X])                         #12
              0361 fc00  bra  NEXTY       1628  bra('NEXTY')                    #13
              0362 00f8  ld   $f8         1629  ld(-16/2)                       #14
                                          1630
                                          1631  # Instruction POP: Pop address from stack (vLR,vSP==[vSP]+256*[vSP+1],vSP+2), 26 cycles
                                          1632  label('POP')
POP:          0363 111c  ld   [$1c],x     1633  ld([vSP],X)                     #10,15
              0364 0500  ld   [x]         1634  ld([X])                         #11
              0365 c21a  st   [$1a]       1635  st([vLR])                       #12
              0366 011c  ld   [$1c]       1636  ld([vSP])                       #13
              0367 9001  adda $01,x       1637  adda(1,X)                       #14
              0368 0500  ld   [x]         1638  ld([X])                         #15
              0369 c21b  st   [$1b]       1639  st([vLR+1])                     #16
              036a 011c  ld   [$1c]       1640  ld([vSP])                       #17
              036b 8002  adda $02         1641  adda(2)                         #18
              036c c21c  st   [$1c]       1642  st([vSP])                       #19
                                          1643  label('.pop#20')
.pop#20:      036d 0116  ld   [$16]       1644  ld([vPC])                       #20
              036e a001  suba $01         1645  suba(1)                         #21
              036f c216  st   [$16]       1646  st([vPC])                       #22
              0370 fc00  bra  NEXTY       1647  bra('NEXTY')                    #23
              0371 00f3  ld   $f3         1648  ld(-26/2)                       #24
                                          1649
                                          1650  # Conditional NE: Branch if not zero (if(vACL!=0)vPCL=D)
                                          1651  label('NE')
NE:           0372 f045  beq  .bcc#22     1652  beq('.bcc#22')                  #20,25
              0373 ec48  bne  .bcc#23     1653  bne('.bcc#23')                  #21
              0374 0d00  ld   [y,x]       1654  ld([Y,X])                       #22
                                          1655
                                          1656  # Instruction PUSH: Push vLR on stack ([vSP-2],v[vSP-1],vSP=vLR&255,vLR>>8,vLR-2), 26 cycles
                                          1657  label('PUSH')
PUSH:         0375 011c  ld   [$1c]       1658  ld([vSP])                       #10
              0376 b001  suba $01,x       1659  suba(1,X)                       #11
              0377 011b  ld   [$1b]       1660  ld([vLR+1])                     #12
              0378 c600  st   [x]         1661  st([X])                         #13
              0379 011c  ld   [$1c]       1662  ld([vSP])                       #14
              037a a002  suba $02         1663  suba(2)                         #15
              037b d21c  st   [$1c],x     1664  st([vSP],X)                     #16
              037c 011a  ld   [$1a]       1665  ld([vLR])                       #17
              037d fc6d  bra  .pop#20     1666  bra('.pop#20')                  #18
              037e c600  st   [x]         1667  st([X])                         #19
                                          1668
                                          1669  # Instruction LUP: ROM lookup (vAC=ROM[vAC+D]), 26 cycles
                                          1670  label('LUP')
LUP:          037f 1519  ld   [$19],y     1671  ld([vAC+1],Y)                   #10
              0380 e0fb  jmp  y,$fb       1672  jmp(Y,251)                      #11 Trampoline offset
              0381 8118  adda [$18]       1673  adda([vAC])                     #12
                                          1674
                                          1675  # Instruction ANDI: Logical-AND with small constant (vAC&=D), 22 cycles
                                          1676  label('ANDI')
ANDI:         0382 1404  ld   $04,y       1677  ld(hi('andi#13'),Y)             #10
              0383 e011  jmp  y,$11       1678  jmp(Y,'andi#13')                #11
              0384 2118  anda [$18]       1679  anda([vAC])                     #12
                                          1680
                                          1681  # Instruction CALLI: Goto immediate address and remember vPC (vLR,vPC=vPC+3,$HHLL-2), 28 cycles
                                          1682  label('CALLI_v5')
CALLI_v5:     0385 140b  ld   $0b,y       1683  ld(hi('calli#13'),Y)            #10
              0386 e0b0  jmp  y,$b0       1684  jmp(Y,'calli#13')               #11
              0387 0116  ld   [$16]       1685  ld([vPC])                       #12
                                          1686
                                          1687  # Instruction ORI: Logical-OR with small constant (vAC|=D), 14 cycles
                                          1688  label('ORI')
ORI:          0388 4118  ora  [$18]       1689  ora([vAC])                      #10
              0389 c218  st   [$18]       1690  st([vAC])                       #11
              038a fc01  bra  NEXT        1691  bra('NEXT')                     #12
              038b 00f9  ld   $f9         1692  ld(-14/2)                       #13
                                          1693
                                          1694  # Instruction XORI: Logical-XOR with small constant (vAC^=D), 14 cycles
                                          1695  label('XORI')
XORI:         038c 6118  xora [$18]       1696  xora([vAC])                     #10
              038d c218  st   [$18]       1697  st([vAC])                       #11
              038e fc01  bra  NEXT        1698  bra('NEXT')                     #12
              038f 00f9  ld   $f9         1699  ld(-14/2)                       #13
                                          1700
                                          1701  # Instruction BRA: Branch unconditionally (vPC=(vPC&0xff00)+D), 14 cycles
                                          1702  label('BRA')
BRA:          0390 c216  st   [$16]       1703  st([vPC])                       #10
              0391 fc00  bra  NEXTY       1704  bra('NEXTY')                    #11
              0392 00f9  ld   $f9         1705  ld(-14/2)                       #12
                                          1706
                                          1707  # Instruction INC: Increment zero page byte ([D]++), 20 cycles
                                          1708  label('INC')
INC:          0393 1200  ld   ac,x        1709  ld(AC,X)                        #10,13
              0394 1404  ld   $04,y       1710  ld(hi('inc#14'),Y)              #11
              0395 e0e4  jmp  y,$e4       1711  jmp(Y,'inc#14')                 #12
              0396 0001  ld   $01         1712  ld(1)                           #13
                                          1713
                                          1714  # Instruction CMPHU: Adjust high byte for unsigned compare (vACH=XXX), 28 cycles
                                          1715  label('CMPHU_v5')
CMPHU_v5:     0397 140b  ld   $0b,y       1716  ld(hi('cmphu#13'),Y)            #10
              0398 e0c8  jmp  y,$c8       1717  jmp(Y,'cmphu#13')               #11
                                          1718  #ld(AC,X)                       #12 Overlap
                                          1719  #
                                          1720  # Instruction ADDW: Word addition with zero page (vAC+=[D]+256*[D+1]), 28 cycles
                                          1721  label('ADDW')
                                          1722  # The non-carry paths could be 26 cycles at the expense of (much) more code.
                                          1723  # But a smaller size is better so more instructions fit in this code page.
                                          1724  # 28 cycles is still 4.5 usec. The 6502 equivalent takes 20 cycles or 20 usec.
ADDW:         0399 1200  ld   ac,x        1725  ld(AC,X)                        #10,12 Address of low byte to be added
              039a 8001  adda $01         1726  adda(1)                         #11
              039b c21d  st   [$1d]       1727  st([vTmp])                      #12 Address of high byte to be added
              039c 0118  ld   [$18]       1728  ld([vAC])                       #13 Add the low bytes
              039d 8500  adda [x]         1729  adda([X])                       #14
              039e c218  st   [$18]       1730  st([vAC])                       #15 Store low result
              039f e8a3  blt  .addw#18    1731  bmi('.addw#18')                 #16 Now figure out if there was a carry
              03a0 a500  suba [x]         1732  suba([X])                       #17 Gets back the initial value of vAC
              03a1 fca5  bra  .addw#20    1733  bra('.addw#20')                 #18
              03a2 4500  ora  [x]         1734  ora([X])                        #19 Carry in bit 7
                                          1735  label('.addw#18')
.addw#18:     03a3 2500  anda [x]         1736  anda([X])                       #18 Carry in bit 7
              03a4 0200  nop              1737  nop()                           #19
                                          1738  label('.addw#20')
.addw#20:     03a5 3080  anda $80,x       1739  anda(0x80,X)                    #20 Move carry to bit 0
              03a6 0500  ld   [x]         1740  ld([X])                         #21
              03a7 8119  adda [$19]       1741  adda([vAC+1])                   #22 Add the high bytes with carry
              03a8 111d  ld   [$1d],x     1742  ld([vTmp],X)                    #23
              03a9 8500  adda [x]         1743  adda([X])                       #24
              03aa c219  st   [$19]       1744  st([vAC+1])                     #25 Store high result
              03ab fc01  bra  NEXT        1745  bra('NEXT')                     #26
              03ac 00f2  ld   $f2         1746  ld(-28/2)                       #27
                                          1747
                                          1748  # Instruction PEEK: Read byte from memory (vAC=[vAC]), 26 cycles
                                          1749  label('PEEK')
PEEK:         03ad 1404  ld   $04,y       1750  ld(hi('peek'),Y)                #10
              03ae e062  jmp  y,$62       1751  jmp(Y,'peek')                   #11
                                          1752  #ld([vPC])                      #12 Overlap
                                          1753  #
                                          1754  # Instruction SYS: Native call, <=256 cycles (<=128 ticks, in reality less)
                                          1755  #
                                          1756  # The 'SYS' vCPU instruction first checks the number of desired ticks given by
                                          1757  # the operand. As long as there are insufficient ticks available in the current
                                          1758  # time slice, the instruction will be retried. This will effectively wait for
                                          1759  # the next scan line if the current slice is almost out of time. Then a jump to
                                          1760  # native code is made. This code can do whatever it wants, but it must return
                                          1761  # to the 'REENTER' label when done. When returning, AC must hold (the negative
                                          1762  # of) the actual consumed number of whole ticks for the entire virtual
                                          1763  # instruction cycle (from NEXT to NEXT). This duration may not exceed the prior
                                          1764  # declared duration in the operand + 28 (or maxTicks). The operand specifies the
                                          1765  # (negative) of the maximum number of *extra* ticks that the native call will
                                          1766  # need. The GCL compiler automatically makes this calculation from gross number
                                          1767  # of cycles to excess number of ticks.
                                          1768  # SYS functions can modify vPC to implement repetition. For example to split
                                          1769  # up work into multiple chucks.
                                          1770  label('.sys#13')
.sys#13:      03af 0116  ld   [$16]       1771  ld([vPC])                       #13,12 Retry until sufficient time
              03b0 a002  suba $02         1772  suba(2)                         #14
              03b1 c216  st   [$16]       1773  st([vPC])                       #15
              03b2 fccb  bra  REENTER     1774  bra('REENTER')                  #16
              03b3 00f6  ld   $f6         1775  ld(-20/2)                       #17
                                          1776  label('SYS')
SYS:          03b4 8115  adda [$15]       1777  adda([vTicks])                  #10
              03b5 e8af  blt  .sys#13     1778  blt('.sys#13')                  #11
              03b6 1523  ld   [$23],y     1779  ld([sysFn+1],Y)                 #12
              03b7 e122  jmp  y,[$22]     1780  jmp(Y,[sysFn])                  #13
                                          1781  #dummy()                        #14 Overlap
                                          1782  #
                                          1783  # Instruction SUBW: Word subtract with zero page (AC-=[D]+256*[D+1]), 28 cycles
                                          1784  # All cases can be done in 26 cycles, but the code will become much larger
                                          1785  label('SUBW')
SUBW:         03b8 1200  ld   ac,x        1786  ld(AC,X)                        #10,14 Address of low byte to be subtracted
              03b9 8001  adda $01         1787  adda(1)                         #11
              03ba c21d  st   [$1d]       1788  st([vTmp])                      #12 Address of high byte to be subtracted
              03bb 0118  ld   [$18]       1789  ld([vAC])                       #13
              03bc e8c1  blt  .subw#16    1790  bmi('.subw#16')                 #14
              03bd a500  suba [x]         1791  suba([X])                       #15
              03be c218  st   [$18]       1792  st([vAC])                       #16 Store low result
              03bf fcc4  bra  .subw#19    1793  bra('.subw#19')                 #17
              03c0 4500  ora  [x]         1794  ora([X])                        #18 Carry in bit 7
                                          1795  label('.subw#16')
.subw#16:     03c1 c218  st   [$18]       1796  st([vAC])                       #16 Store low result
              03c2 2500  anda [x]         1797  anda([X])                       #17 Carry in bit 7
              03c3 0200  nop              1798  nop()                           #18
                                          1799  label('.subw#19')
.subw#19:     03c4 3080  anda $80,x       1800  anda(0x80,X)                    #19 Move carry to bit 0
              03c5 0119  ld   [$19]       1801  ld([vAC+1])                     #20
              03c6 a500  suba [x]         1802  suba([X])                       #21
              03c7 111d  ld   [$1d],x     1803  ld([vTmp],X)                    #22
              03c8 a500  suba [x]         1804  suba([X])                       #23
              03c9 c219  st   [$19]       1805  st([vAC+1])                     #24
                                          1806  label('REENTER_28')
REENTER_28:   03ca 00f2  ld   $f2         1807  ld(-28/2)                       #25
                                          1808  label('REENTER')
REENTER:      03cb fc01  bra  NEXT        1809  bra('NEXT')                     #26 Return from SYS calls
              03cc 1517  ld   [$17],y     1810  ld([vPC+1],Y)                   #27
                                          1811
                                          1812  # Instruction DEF: Define data or code (vAC,vPC=vPC+2,(vPC&0xff00)+D), 24 cycles
                                          1813  label('DEF')
DEF:          03cd 1404  ld   $04,y       1814  ld(hi('def#13'),Y)              #10
              03ce e007  jmp  y,$07       1815  jmp(Y,'def#13')                 #11
                                          1816  #st([vTmp])                     #12 Overlap
                                          1817  #
                                          1818  # Instruction CALL: Goto address and remember vPC (vLR,vPC=vPC+2,[D]+256*[D+1]-2), 26 cycles
                                          1819  label('CALL')
CALL:         03cf c21d  st   [$1d]       1820  st([vTmp])                      #10,12
              03d0 0116  ld   [$16]       1821  ld([vPC])                       #11
              03d1 8002  adda $02         1822  adda(2)                         #12 Point to instruction after CALL
              03d2 c21a  st   [$1a]       1823  st([vLR])                       #13
              03d3 0117  ld   [$17]       1824  ld([vPC+1])                     #14
              03d4 c21b  st   [$1b]       1825  st([vLR+1])                     #15
              03d5 111d  ld   [$1d],x     1826  ld([vTmp],X)                    #16
              03d6 0500  ld   [x]         1827  ld([X])                         #17
              03d7 a002  suba $02         1828  suba(2)                         #18 Because NEXT will add 2
              03d8 c216  st   [$16]       1829  st([vPC])                       #19
              03d9 011d  ld   [$1d]       1830  ld([vTmp])                      #20
              03da 9001  adda $01,x       1831  adda(1,X)                       #21
              03db 0500  ld   [x]         1832  ld([X])                         #22
              03dc d617  st   [$17],y     1833  st([vPC+1],Y)                   #23
              03dd fc01  bra  NEXT        1834  bra('NEXT')                     #24
              03de 00f3  ld   $f3         1835  ld(-26/2)                       #25
                                          1836
                                          1837  # Instruction ALLOC: Create or destroy stack frame (vSP+=D), 14 cycles
                                          1838  label('ALLOC')
ALLOC:        03df 811c  adda [$1c]       1839  adda([vSP])                     #10
              03e0 c21c  st   [$1c]       1840  st([vSP])                       #11
              03e1 fc01  bra  NEXT        1841  bra('NEXT')                     #12
              03e2 00f9  ld   $f9         1842  ld(-14/2)                       #13
                                          1843
                                          1844  # The instructions below are all implemented in the second code page. Jumping
                                          1845  # back and forth makes each 6 cycles slower, but it also saves space in the
                                          1846  # primary page for the instructions above. Most of them are in fact not very
                                          1847  # critical, as evidenced by the fact that they weren't needed for the first
                                          1848  # Gigatron applications (Snake, Racer, Mandelbrot, Loader). By providing them
                                          1849  # in this way, at least they don't need to be implemented as a SYS extension.
                                          1850
                                          1851  # Instruction ADDI: Add small positive constant (vAC+=D), 28 cycles
                                          1852  label('ADDI')
ADDI:         03e3 1404  ld   $04,y       1853  ld(hi('addi'),Y)                #10
              03e4 e018  jmp  y,$18       1854  jmp(Y,'addi')                   #11
              03e5 c21d  st   [$1d]       1855  st([vTmp])                      #12
                                          1856
                                          1857  # Instruction SUBI: Subtract small positive constant (vAC+=D), 28 cycles
                                          1858  label('SUBI')
SUBI:         03e6 1404  ld   $04,y       1859  ld(hi('subi'),Y)                #10
              03e7 e026  jmp  y,$26       1860  jmp(Y,'subi')                   #11
              03e8 c21d  st   [$1d]       1861  st([vTmp])                      #12
                                          1862
                                          1863  # Instruction LSLW: Logical shift left (vAC<<=1), 28 cycles
                                          1864  # Useful, because ADDW can't add vAC to itself. Also more compact.
                                          1865  label('LSLW')
LSLW:         03e9 1404  ld   $04,y       1866  ld(hi('lslw'),Y)                #10
              03ea e035  jmp  y,$35       1867  jmp(Y,'lslw')                   #11
              03eb 0118  ld   [$18]       1868  ld([vAC])                       #12
                                          1869
                                          1870  # Instruction STLW: Store word in stack frame ([vSP+D],[vSP+D+1]=vAC&255,vAC>>8), 26 cycles
                                          1871  label('STLW')
STLW:         03ec 1404  ld   $04,y       1872  ld(hi('stlw'),Y)                #10
              03ed e041  jmp  y,$41       1873  jmp(Y,'stlw')                   #11
                                          1874  #dummy()                        #12 Overlap
                                          1875  #
                                          1876  # Instruction LDLW: Load word from stack frame (vAC=[vSP+D]+256*[vSP+D+1]), 26 cycles
                                          1877  label('LDLW')
LDLW:         03ee 1404  ld   $04,y       1878  ld(hi('ldlw'),Y)                #10,12
              03ef e04c  jmp  y,$4c       1879  jmp(Y,'ldlw')                   #11
                                          1880  #dummy()                        #12 Overlap
                                          1881  #
                                          1882  # Instruction POKE: Write byte in memory ([[D+1],[D]]=vAC&255), 28 cycles
                                          1883  label('POKE')
POKE:         03f0 1404  ld   $04,y       1884  ld(hi('poke'),Y)                #10,12
              03f1 e057  jmp  y,$57       1885  jmp(Y,'poke')                   #11
              03f2 c21d  st   [$1d]       1886  st([vTmp])                      #12
                                          1887
                                          1888  # Instruction DOKE: Write word in memory ([[D+1],[D]],[[D+1],[D]+1]=vAC&255,vAC>>8), 28 cycles
                                          1889  label('DOKE')
DOKE:         03f3 1404  ld   $04,y       1890  ld(hi('doke'),Y)                #10
              03f4 e06d  jmp  y,$6d       1891  jmp(Y,'doke')                   #11
              03f5 c21d  st   [$1d]       1892  st([vTmp])                      #12
                                          1893
                                          1894  # Instruction DEEK: Read word from memory (vAC=[vAC]+256*[vAC+1]), 28 cycles
                                          1895  label('DEEK')
DEEK:         03f6 1404  ld   $04,y       1896  ld(hi('deek'),Y)                #10
              03f7 e07a  jmp  y,$7a       1897  jmp(Y,'deek')                   #11
                                          1898  #dummy()                        #12 Overlap
                                          1899  #
                                          1900  # Instruction ANDW: Word logical-AND with zero page (vAC&=[D]+256*[D+1]), 28 cycles
                                          1901  label('ANDW')
ANDW:         03f8 1404  ld   $04,y       1902  ld(hi('andw'),Y)                #10,12
              03f9 e086  jmp  y,$86       1903  jmp(Y,'andw')                   #11
                                          1904  #dummy()                        #12 Overlap
                                          1905  #
                                          1906  # Instruction ORW: Word logical-OR with zero page (vAC|=[D]+256*[D+1]), 28 cycles
                                          1907  label('ORW')
ORW:          03fa 1404  ld   $04,y       1908  ld(hi('orw'),Y)                 #10,12
              03fb e091  jmp  y,$91       1909  jmp(Y,'orw')                    #11
                                          1910  #dummy()                        #12 Overlap
                                          1911  #
                                          1912  # Instruction XORW: Word logical-XOR with zero page (vAC^=[D]+256*[D+1]), 26 cycles
                                          1913  label('XORW')
XORW:         03fc 1404  ld   $04,y       1914  ld(hi('xorw'),Y)                #10,12
              03fd e09c  jmp  y,$9c       1915  jmp(Y,'xorw')                   #11
              03fe c21d  st   [$1d]       1916  st([vTmp])                      #12
                                          1917  # We keep XORW 2 cycles faster than ANDW/ORW, because that
                                          1918  # can be useful for comparing numbers for equality a tiny
                                          1919  # bit faster than with SUBW
                                          1920
                                          1921  # Instruction RET: Function return (vPC=vLR-2), 16 cycles
                                          1922  label('RET')
RET:          03ff 011a  ld   [$1a]       1923  ld([vLR])                       #10
                                          1924  assert pc()&255 == 0
                                          1925
                                          1926  #-----------------------------------------------------------------------
                                          1927  #
                                          1928  #  $0400 ROM page 4: Application interpreter extension
                                          1929  #
                                          1930  #-----------------------------------------------------------------------
                                          1931  align(0x100, size=0x100)
                                          1932
                                          1933  # (Continue RET)
              0400 a002  suba $02         1934  suba(2)                         #11
              0401 c216  st   [$16]       1935  st([vPC])                       #12
              0402 011b  ld   [$1b]       1936  ld([vLR+1])                     #13
              0403 c217  st   [$17]       1937  st([vPC+1])                     #14
              0404 1403  ld   $03,y       1938  ld(hi('REENTER'),Y)             #15
              0405 e0cb  jmp  y,$cb       1939  jmp(Y,'REENTER')                #16
              0406 00f6  ld   $f6         1940  ld(-20/2)                       #17
                                          1941
                                          1942  # DEF implementation
                                          1943  label('def#13')
def#13:       0407 0116  ld   [$16]       1944  ld([vPC])                       #13
              0408 8002  adda $02         1945  adda(2)                         #14
              0409 c218  st   [$18]       1946  st([vAC])                       #15
              040a 0117  ld   [$17]       1947  ld([vPC+1])                     #16
              040b c219  st   [$19]       1948  st([vAC+1])                     #17
              040c 011d  ld   [$1d]       1949  ld([vTmp])                      #18
              040d c216  st   [$16]       1950  st([vPC])                       #19
              040e 1403  ld   $03,y       1951  ld(hi('NEXTY'),Y)               #20
              040f e000  jmp  y,$00       1952  jmp(Y,'NEXTY')                  #21
              0410 00f4  ld   $f4         1953  ld(-24/2)                       #22
                                          1954
                                          1955  # Clear vACH (continuation of ANDI and LD instructions)
                                          1956  label('andi#13')
andi#13:      0411 0200  nop              1957  nop()                           #13
              0412 c218  st   [$18]       1958  st([vAC])                       #14
                                          1959  #
                                          1960  label('ld#15')
ld#15:        0413 0000  ld   $00         1961  ld(0)                           #15 Clear high byte
              0414 c219  st   [$19]       1962  st([vAC+1])                     #16
              0415 1403  ld   $03,y       1963  ld(hi('REENTER'),Y)             #17
              0416 e0cb  jmp  y,$cb       1964  jmp(Y,'REENTER')                #18
              0417 00f5  ld   $f5         1965  ld(-22/2)                       #19
                                          1966
                                          1967  # ADDI implementation
                                          1968  label('addi')
addi:         0418 8118  adda [$18]       1969  adda([vAC])                     #13
              0419 c218  st   [$18]       1970  st([vAC])                       #14 Store low result
              041a e81e  blt  .addi#17    1971  bmi('.addi#17')                 #15 Now figure out if there was a carry
              041b a11d  suba [$1d]       1972  suba([vTmp])                    #16 Gets back the initial value of vAC
              041c fc20  bra  .addi#19    1973  bra('.addi#19')                 #17
              041d 411d  ora  [$1d]       1974  ora([vTmp])                     #18 Carry in bit 7
                                          1975  label('.addi#17')
.addi#17:     041e 211d  anda [$1d]       1976  anda([vTmp])                    #17 Carry in bit 7
              041f 0200  nop              1977  nop()                           #18
                                          1978  label('.addi#19')
.addi#19:     0420 3080  anda $80,x       1979  anda(0x80,X)                    #19 Move carry to bit 0
              0421 0500  ld   [x]         1980  ld([X])                         #20
              0422 8119  adda [$19]       1981  adda([vAC+1])                   #21 Add the high bytes with carry
              0423 1403  ld   $03,y       1982  ld(hi('REENTER_28'),Y)          #22
              0424 e0ca  jmp  y,$ca       1983  jmp(Y,'REENTER_28')             #23
              0425 c219  st   [$19]       1984  st([vAC+1])                     #24 Store high result
                                          1985
                                          1986  # SUBI implementation
                                          1987  label('subi')
subi:         0426 0118  ld   [$18]       1988  ld([vAC])                       #13
              0427 e82c  blt  .subi#16    1989  bmi('.subi#16')                 #14
              0428 a11d  suba [$1d]       1990  suba([vTmp])                    #15
              0429 c218  st   [$18]       1991  st([vAC])                       #16 Store low result
              042a fc2f  bra  .subi#19    1992  bra('.subi#19')                 #17
              042b 411d  ora  [$1d]       1993  ora([vTmp])                     #18 Carry in bit 7
                                          1994  label('.subi#16')
.subi#16:     042c c218  st   [$18]       1995  st([vAC])                       #16 Store low result
              042d 211d  anda [$1d]       1996  anda([vTmp])                    #17 Carry in bit 7
              042e 0200  nop              1997  nop()                           #18
                                          1998  label('.subi#19')
.subi#19:     042f 3080  anda $80,x       1999  anda(0x80,X)                    #19 Move carry to bit 0
              0430 0119  ld   [$19]       2000  ld([vAC+1])                     #20
              0431 a500  suba [x]         2001  suba([X])                       #21
              0432 1403  ld   $03,y       2002  ld(hi('REENTER_28'),Y)          #22
              0433 e0ca  jmp  y,$ca       2003  jmp(Y,'REENTER_28')             #23
              0434 c219  st   [$19]       2004  st([vAC+1])                     #24
                                          2005
                                          2006  # LSLW implementation
                                          2007  label('lslw')
lslw:         0435 3080  anda $80,x       2008  anda(128,X)                     #13
              0436 8118  adda [$18]       2009  adda([vAC])                     #14
              0437 c218  st   [$18]       2010  st([vAC])                       #15
              0438 0500  ld   [x]         2011  ld([X])                         #16
              0439 8119  adda [$19]       2012  adda([vAC+1])                   #17
              043a 8119  adda [$19]       2013  adda([vAC+1])                   #18
              043b c219  st   [$19]       2014  st([vAC+1])                     #19
              043c 0116  ld   [$16]       2015  ld([vPC])                       #20
              043d a001  suba $01         2016  suba(1)                         #21
              043e 1403  ld   $03,y       2017  ld(hi('REENTER_28'),Y)          #22
              043f e0ca  jmp  y,$ca       2018  jmp(Y,'REENTER_28')             #23
              0440 c216  st   [$16]       2019  st([vPC])                       #24
                                          2020
                                          2021  # STLW implementation
                                          2022  label('stlw')
stlw:         0441 811c  adda [$1c]       2023  adda([vSP])                     #13
              0442 c21d  st   [$1d]       2024  st([vTmp])                      #14
              0443 9001  adda $01,x       2025  adda(1,X)                       #15
              0444 0119  ld   [$19]       2026  ld([vAC+1])                     #16
              0445 c600  st   [x]         2027  st([X])                         #17
              0446 111d  ld   [$1d],x     2028  ld([vTmp],X)                    #18
              0447 0118  ld   [$18]       2029  ld([vAC])                       #19
              0448 c600  st   [x]         2030  st([X])                         #20
              0449 1403  ld   $03,y       2031  ld(hi('REENTER'),Y)             #21
              044a e0cb  jmp  y,$cb       2032  jmp(Y,'REENTER')                #22
              044b 00f3  ld   $f3         2033  ld(-26/2)                       #23
                                          2034
                                          2035  # LDLW implementation
                                          2036  label('ldlw')
ldlw:         044c 811c  adda [$1c]       2037  adda([vSP])                     #13
              044d c21d  st   [$1d]       2038  st([vTmp])                      #14
              044e 9001  adda $01,x       2039  adda(1,X)                       #15
              044f 0500  ld   [x]         2040  ld([X])                         #16
              0450 c219  st   [$19]       2041  st([vAC+1])                     #17
              0451 111d  ld   [$1d],x     2042  ld([vTmp],X)                    #18
              0452 0500  ld   [x]         2043  ld([X])                         #19
              0453 c218  st   [$18]       2044  st([vAC])                       #20
              0454 1403  ld   $03,y       2045  ld(hi('REENTER'),Y)             #21
              0455 e0cb  jmp  y,$cb       2046  jmp(Y,'REENTER')                #22
              0456 00f3  ld   $f3         2047  ld(-26/2)                       #23
                                          2048
                                          2049  # POKE implementation
                                          2050  label('poke')
poke:         0457 9001  adda $01,x       2051  adda(1,X)                       #13
              0458 0500  ld   [x]         2052  ld([X])                         #14
              0459 1600  ld   ac,y        2053  ld(AC,Y)                        #15
              045a 111d  ld   [$1d],x     2054  ld([vTmp],X)                    #16
              045b 0500  ld   [x]         2055  ld([X])                         #17
              045c 1200  ld   ac,x        2056  ld(AC,X)                        #18
              045d 0118  ld   [$18]       2057  ld([vAC])                       #19
              045e ce00  st   [y,x]       2058  st([Y,X])                       #20
              045f 1403  ld   $03,y       2059  ld(hi('REENTER'),Y)             #21
              0460 e0cb  jmp  y,$cb       2060  jmp(Y,'REENTER')                #22
              0461 00f3  ld   $f3         2061  ld(-26/2)                       #23
                                          2062
                                          2063  # PEEK implementation
                                          2064  label('peek')
peek:         0462 a001  suba $01         2065  suba(1)                         #13
              0463 c216  st   [$16]       2066  st([vPC])                       #14
              0464 1118  ld   [$18],x     2067  ld([vAC],X)                     #15
              0465 1519  ld   [$19],y     2068  ld([vAC+1],Y)                   #16
              0466 0d00  ld   [y,x]       2069  ld([Y,X])                       #17
              0467 c218  st   [$18]       2070  st([vAC])                       #18
                                          2071  label('lupReturn#19')           #Nice coincidence that lupReturn can be here
lupReturn#19: 0468 0000  ld   $00         2072  ld(0)                           #19
              0469 c219  st   [$19]       2073  st([vAC+1])                     #20
              046a 1403  ld   $03,y       2074  ld(hi('REENTER'),Y)             #21
              046b e0cb  jmp  y,$cb       2075  jmp(Y,'REENTER')                #22
              046c 00f3  ld   $f3         2076  ld(-26/2)                       #23
                                          2077
                                          2078  # DOKE implementation
                                          2079  label('doke')
doke:         046d 9001  adda $01,x       2080  adda(1,X)                       #13
              046e 0500  ld   [x]         2081  ld([X])                         #14
              046f 1600  ld   ac,y        2082  ld(AC,Y)                        #15
              0470 111d  ld   [$1d],x     2083  ld([vTmp],X)                    #16
              0471 0500  ld   [x]         2084  ld([X])                         #17
              0472 1200  ld   ac,x        2085  ld(AC,X)                        #18
              0473 0118  ld   [$18]       2086  ld([vAC])                       #19
              0474 de00  st   [y,x++]     2087  st([Y,Xpp])                     #20
              0475 0119  ld   [$19]       2088  ld([vAC+1])                     #21
              0476 ce00  st   [y,x]       2089  st([Y,X])                       #22 Incompatible with REENTER_28
              0477 1403  ld   $03,y       2090  ld(hi('REENTER'),Y)             #23
              0478 e0cb  jmp  y,$cb       2091  jmp(Y,'REENTER')                #24
              0479 00f2  ld   $f2         2092  ld(-28/2)                       #25
                                          2093
                                          2094  # DEEK implementation
                                          2095  label('deek')
deek:         047a 0116  ld   [$16]       2096  ld([vPC])                       #13
              047b a001  suba $01         2097  suba(1)                         #14
              047c c216  st   [$16]       2098  st([vPC])                       #15
              047d 1118  ld   [$18],x     2099  ld([vAC],X)                     #16
              047e 1519  ld   [$19],y     2100  ld([vAC+1],Y)                   #17
              047f 0d00  ld   [y,x]       2101  ld([Y,X])                       #18
              0480 de00  st   [y,x++]     2102  st([Y,Xpp])                     #19 Just X++
              0481 c218  st   [$18]       2103  st([vAC])                       #20
              0482 0d00  ld   [y,x]       2104  ld([Y,X])                       #21
              0483 1403  ld   $03,y       2105  ld(hi('REENTER_28'),Y)          #22
              0484 e0ca  jmp  y,$ca       2106  jmp(Y,'REENTER_28')             #23
              0485 c219  st   [$19]       2107  st([vAC+1])                     #24
                                          2108
                                          2109  # ANDW implementation
                                          2110  label('andw')
andw:         0486 c21d  st   [$1d]       2111  st([vTmp])                      #13
              0487 9001  adda $01,x       2112  adda(1,X)                       #14
              0488 0500  ld   [x]         2113  ld([X])                         #15
              0489 2119  anda [$19]       2114  anda([vAC+1])                   #16
              048a c219  st   [$19]       2115  st([vAC+1])                     #17
              048b 111d  ld   [$1d],x     2116  ld([vTmp],X)                    #18
              048c 0500  ld   [x]         2117  ld([X])                         #19
              048d 2118  anda [$18]       2118  anda([vAC])                     #20
              048e c218  st   [$18]       2119  st([vAC])                       #21
              048f 1403  ld   $03,y       2120  ld(hi('REENTER_28'),Y)          #22
              0490 e0ca  jmp  y,$ca       2121  jmp(Y,'REENTER_28')             #23
                                          2122  #dummy()                        #24 Overlap
                                          2123  #
                                          2124  # ORW implementation
                                          2125  label('orw')
orw:          0491 c21d  st   [$1d]       2126  st([vTmp])                      #13,24
              0492 9001  adda $01,x       2127  adda(1,X)                       #14
              0493 0500  ld   [x]         2128  ld([X])                         #15
              0494 4119  ora  [$19]       2129  ora([vAC+1])                    #16
              0495 c219  st   [$19]       2130  st([vAC+1])                     #17
              0496 111d  ld   [$1d],x     2131  ld([vTmp],X)                    #18
              0497 0500  ld   [x]         2132  ld([X])                         #19
              0498 4118  ora  [$18]       2133  ora([vAC])                      #20
              0499 c218  st   [$18]       2134  st([vAC])                       #21
              049a 1403  ld   $03,y       2135  ld(hi('REENTER_28'),Y)          #22
              049b e0ca  jmp  y,$ca       2136  jmp(Y,'REENTER_28')             #23
                                          2137  #dummy()                        #24 Overlap
                                          2138  #
                                          2139  # XORW implementation
                                          2140  label('xorw')
xorw:         049c 9001  adda $01,x       2141  adda(1,X)                       #13,24
              049d 0500  ld   [x]         2142  ld([X])                         #14
              049e 6119  xora [$19]       2143  xora([vAC+1])                   #15
              049f c219  st   [$19]       2144  st([vAC+1])                     #16
              04a0 111d  ld   [$1d],x     2145  ld([vTmp],X)                    #17
              04a1 0500  ld   [x]         2146  ld([X])                         #18
              04a2 6118  xora [$18]       2147  xora([vAC])                     #19
              04a3 c218  st   [$18]       2148  st([vAC])                       #20
              04a4 1403  ld   $03,y       2149  ld(hi('REENTER'),Y)             #21
              04a5 e0cb  jmp  y,$cb       2150  jmp(Y,'REENTER')                #22
              04a6 00f3  ld   $f3         2151  ld(-26/2)                       #23
                                          2152
                                          2153  #-----------------------------------------------------------------------
                                          2154  #
                                          2155  #  vCPU extension functions (for acceleration and compaction) follow below.
                                          2156  #
                                          2157  #  The naming convention is: SYS_<CamelCase>[_v<V>]_<N>
                                          2158  #
                                          2159  #  With <N> the maximum number of cycles the function will run
                                          2160  #  (counted from NEXT to NEXT). This is the same number that must
                                          2161  #  be passed to the 'SYS' vCPU instruction as operand, and it will
                                          2162  #  appear in the GCL code upon use.
                                          2163  #
                                          2164  #  If a SYS extension got introduced after ROM v1, the version number of
                                          2165  #  introduction is included in the name. This helps the programmer to be
                                          2166  #  reminded to verify the acutal ROM version and fail gracefully on older
                                          2167  #  ROMs than required. See also Docs/GT1-files.txt on using [romType].
                                          2168  #
                                          2169  #-----------------------------------------------------------------------
                                          2170
                                          2171  #-----------------------------------------------------------------------
                                          2172  # Extension SYS_Random_34: Update entropy and copy to vAC
                                          2173  #-----------------------------------------------------------------------
                                          2174
                                          2175  # This same algorithm runs automatically once per vertical blank.
                                          2176  # Use this function to get numbers at a higher rate.
                                          2177  #
                                          2178  # Variables:
                                          2179  #       vAC
                                          2180
                                          2181  label('SYS_Random_34')
SYS_Random_34:
              04a7 010e  ld   [$0e]       2182  ld([frameCount])                #15
              04a8 6107  xora [$07]       2183  xora([entropy+1])               #16
              04a9 610f  xora [$0f]       2184  xora([serialRaw])               #17
              04aa 8106  adda [$06]       2185  adda([entropy+0])               #18
              04ab c206  st   [$06]       2186  st([entropy+0])                 #19
              04ac c218  st   [$18]       2187  st([vAC+0])                     #20
              04ad 8108  adda [$08]       2188  adda([entropy+2])               #21
              04ae c208  st   [$08]       2189  st([entropy+2])                 #22
              04af e8b2  blt  .sysRnd0    2190  bmi('.sysRnd0')                 #23
              04b0 fcb3  bra  .sysRnd1    2191  bra('.sysRnd1')                 #24
              04b1 6053  xora $53         2192  xora(64+16+2+1)                 #25
                                          2193  label('.sysRnd0')
.sysRnd0:     04b2 606c  xora $6c         2194  xora(64+32+8+4)                 #25
                                          2195  label('.sysRnd1')
.sysRnd1:     04b3 8107  adda [$07]       2196  adda([entropy+1])               #26
              04b4 c207  st   [$07]       2197  st([entropy+1])                 #27
              04b5 c219  st   [$19]       2198  st([vAC+1])                     #28
              04b6 1403  ld   $03,y       2199  ld(hi('REENTER'),Y)             #29
              04b7 e0cb  jmp  y,$cb       2200  jmp(Y,'REENTER')                #30
              04b8 00ef  ld   $ef         2201  ld(-34/2)                       #31
                                          2202
                                          2203  label('SYS_LSRW7_30')
SYS_LSRW7_30: 04b9 0118  ld   [$18]       2204  ld([vAC])                       #15
              04ba 3080  anda $80,x       2205  anda(128,X)                     #16
              04bb 0119  ld   [$19]       2206  ld([vAC+1])                     #17
              04bc 8200  adda ac          2207  adda(AC)                        #18
              04bd 4500  ora  [x]         2208  ora([X])                        #19
              04be c218  st   [$18]       2209  st([vAC])                       #20
              04bf 0119  ld   [$19]       2210  ld([vAC+1])                     #21
              04c0 3080  anda $80,x       2211  anda(128,X)                     #22
              04c1 0500  ld   [x]         2212  ld([X])                         #23
              04c2 c219  st   [$19]       2213  st([vAC+1])                     #24
              04c3 1403  ld   $03,y       2214  ld(hi('REENTER'),Y)             #25
              04c4 e0cb  jmp  y,$cb       2215  jmp(Y,'REENTER')                #26
              04c5 00f1  ld   $f1         2216  ld(-30/2)                       #27
                                          2217
                                          2218  label('SYS_LSRW8_24')
SYS_LSRW8_24: 04c6 0119  ld   [$19]       2219  ld([vAC+1])                     #15
              04c7 c218  st   [$18]       2220  st([vAC])                       #16
              04c8 0000  ld   $00         2221  ld(0)                           #17
              04c9 c219  st   [$19]       2222  st([vAC+1])                     #18
              04ca 1403  ld   $03,y       2223  ld(hi('REENTER'),Y)             #19
              04cb e0cb  jmp  y,$cb       2224  jmp(Y,'REENTER')                #20
              04cc 00f4  ld   $f4         2225  ld(-24/2)                       #21
                                          2226
                                          2227  label('SYS_LSLW8_24')
SYS_LSLW8_24: 04cd 0118  ld   [$18]       2228  ld([vAC])                       #15
              04ce c219  st   [$19]       2229  st([vAC+1])                     #16
              04cf 0000  ld   $00         2230  ld(0)                           #17
              04d0 c218  st   [$18]       2231  st([vAC])                       #18
              04d1 1403  ld   $03,y       2232  ld(hi('REENTER'),Y)             #19
              04d2 e0cb  jmp  y,$cb       2233  jmp(Y,'REENTER')                #20
              04d3 00f4  ld   $f4         2234  ld(-24/2)                       #21
                                          2235
                                          2236  #-----------------------------------------------------------------------
                                          2237  # Extension SYS_Draw4_30
                                          2238  #-----------------------------------------------------------------------
                                          2239
                                          2240  # Draw 4 pixels on screen, horizontally next to each other
                                          2241  #
                                          2242  # Variables:
                                          2243  #       sysArgs[0:3]    Pixels (in)
                                          2244  #       sysArgs[4:5]    Position on screen (in)
                                          2245
                                          2246  label('SYS_Draw4_30')
SYS_Draw4_30: 04d4 1128  ld   [$28],x     2247  ld([sysArgs+4],X)               #15
              04d5 1529  ld   [$29],y     2248  ld([sysArgs+5],Y)               #16
              04d6 0124  ld   [$24]       2249  ld([sysArgs+0])                 #17
              04d7 de00  st   [y,x++]     2250  st([Y,Xpp])                     #18
              04d8 0125  ld   [$25]       2251  ld([sysArgs+1])                 #19
              04d9 de00  st   [y,x++]     2252  st([Y,Xpp])                     #20
              04da 0126  ld   [$26]       2253  ld([sysArgs+2])                 #21
              04db de00  st   [y,x++]     2254  st([Y,Xpp])                     #22
              04dc 0127  ld   [$27]       2255  ld([sysArgs+3])                 #23
              04dd de00  st   [y,x++]     2256  st([Y,Xpp])                     #24
              04de 1403  ld   $03,y       2257  ld(hi('REENTER'),Y)             #25
              04df e0cb  jmp  y,$cb       2258  jmp(Y,'REENTER')                #26
              04e0 00f1  ld   $f1         2259  ld(-30/2)                       #27
                                          2260
                                          2261  #-----------------------------------------------------------------------
                                          2262  # Extension SYS_VDrawBits_134:
                                          2263  #-----------------------------------------------------------------------
                                          2264
                                          2265  # Draw slice of a character, 8 pixels vertical
                                          2266  #
                                          2267  # Variables:
                                          2268  #       sysArgs[0]      Color 0 "background" (in)
                                          2269  #       sysArgs[1]      Color 1 "pen" (in)
                                          2270  #       sysArgs[2]      8 bits, highest bit first (in, changed)
                                          2271  #       sysArgs[4:5]    Position on screen (in)
                                          2272
                                          2273  label('SYS_VDrawBits_134')
SYS_VDrawBits_134:
              04e1 1412  ld   $12,y       2274  ld(hi('sys_VDrawBits'),Y)       #15
              04e2 e08f  jmp  y,$8f       2275  jmp(Y,'sys_VDrawBits')          #16
              04e3 1128  ld   [$28],x     2276  ld([sysArgs+4],X)               #17
                                          2277
                                          2278  #-----------------------------------------------------------------------
                                          2279
                                          2280  # INC implementation
                                          2281  label('inc#14')
inc#14:       04e4 8500  adda [x]         2282  adda([X])                       #14
              04e5 c600  st   [x]         2283  st([X])                         #15
              04e6 1403  ld   $03,y       2284  ld(hi('NEXTY'),Y)               #16
              04e7 e000  jmp  y,$00       2285  jmp(Y,'NEXTY')                  #17
              04e8 00f6  ld   $f6         2286  ld(-20/2)                       #18
                                          2287
                                          2288  # Interrupt handler:
                                          2289  #       ST   $xx        -> optionally store vCpuSelect
                                          2290  #       ... IRQ payload ...
                                          2291  # either:
                                          2292  #       LDWI $400
                                          2293  #       LUP  0          -> vRTI and don't switch interpreter (immediate resume)
                                          2294  # or:
                                          2295  #       LDWI $400
                                          2296  #       LUP  $xx        -> vRTI and switch interpreter type as stored in [$xx]
              04e9 0200  nop              2297  fillers(until=251-11)
              04ea 0200  nop
              04eb 0200  nop
              * 7 times
                                          2298  label('vRTI#15')
vRTI#15:      04f0 0130  ld   [$30]       2299  ld([0x30])                      #15 Continue with vCPU in the same timeslice (faster)
              04f1 c216  st   [$16]       2300  st([vPC])                       #16
              04f2 0131  ld   [$31]       2301  ld([0x31])                      #17
              04f3 c217  st   [$17]       2302  st([vPC+1])                     #18
              04f4 0132  ld   [$32]       2303  ld([0x32])                      #19
              04f5 c218  st   [$18]       2304  st([vAC])                       #20
              04f6 0133  ld   [$33]       2305  ld([0x33])                      #21
              04f7 c219  st   [$19]       2306  st([vAC+1])                     #22
              04f8 1403  ld   $03,y       2307  ld(hi('REENTER'),Y)             #23
              04f9 e0cb  jmp  y,$cb       2308  jmp(Y,'REENTER')                #24
              04fa 00f2  ld   $f2         2309  ld(-28/2)                       #25
                                          2310  # vRTI entry point
                                          2311  assert(pc()&255 == 251)         # The landing offset 251 for LUP trampoline is fixed
              04fb f0f0  beq  vRTI#15     2312  beq('vRTI#15')                  #13 vRTI sequence
              04fc 9001  adda $01,x       2313  adda(1,X)                       #14
              04fd 1412  ld   $12,y       2314  ld(hi('vRTI#18'),Y)             #15 Switch and wait for end of timeslice (slower)
              04fe e020  jmp  y,$20       2315  jmp(Y,'vRTI#18')                #16
              04ff c21d  st   [$1d]       2316  st([vTmp])                      #17
                                          2317
                                          2318  #-----------------------------------------------------------------------
                                          2319  #
                                          2320  #  $0500 ROM page 5-6: Shift table and code
                                          2321  #
                                          2322  #-----------------------------------------------------------------------
                                          2323
                                          2324  align(0x100, size=0x200)
                                          2325
                                          2326  # Lookup table for i>>n, with n in 1..6
                                          2327  # Indexing ix = i & ~b | (b-1), where b = 1<<(n-1)
                                          2328  #       ...
                                          2329  #       ld   <.ret
                                          2330  #       st   [vTmp]
                                          2331  #       ld   >shiftTable,y
                                          2332  #       <calculate ix>
                                          2333  #       jmp  y,ac
                                          2334  #       bra  $ff
                                          2335  # .ret: ...
                                          2336  #
                                          2337  # i >> 7 can be always be done with RAM: [i&128]
                                          2338  #       ...
                                          2339  #       anda $80,x
                                          2340  #       ld   [x]
                                          2341  #       ...
                                          2342
                                          2343  label('shiftTable')
                                          2344  shiftTable = pc()
                                          2345
                                          2346  for ix in range(255):
                                          2347    for n in range(1,7): # Find first zero
                                          2348      if ~ix & (1 << (n-1)):
                                          2349        break
                                          2350    pattern = ['x' if i<n else '1' if ix&(1<<i) else '0' for i in range(8)]
                                          2351    ld(ix>>n); C('0b%s >> %d' % (''.join(reversed(pattern)), n))
shiftTable:   0500 0000  ld   $00         ;0b0000000x >> 1
              0501 0000  ld   $00         ;0b000000xx >> 2
              0502 0001  ld   $01         ;0b0000001x >> 1
              0503 0000  ld   $00         ;0b00000xxx >> 3
              0504 0002  ld   $02         ;0b0000010x >> 1
              0505 0001  ld   $01         ;0b000001xx >> 2
              0506 0003  ld   $03         ;0b0000011x >> 1
              0507 0000  ld   $00         ;0b0000xxxx >> 4
              0508 0004  ld   $04         ;0b0000100x >> 1
              0509 0002  ld   $02         ;0b000010xx >> 2
              050a 0005  ld   $05         ;0b0000101x >> 1
              050b 0001  ld   $01         ;0b00001xxx >> 3
              050c 0006  ld   $06         ;0b0000110x >> 1
              050d 0003  ld   $03         ;0b000011xx >> 2
              050e 0007  ld   $07         ;0b0000111x >> 1
              050f 0000  ld   $00         ;0b000xxxxx >> 5
              0510 0008  ld   $08         ;0b0001000x >> 1
              0511 0004  ld   $04         ;0b000100xx >> 2
              0512 0009  ld   $09         ;0b0001001x >> 1
              0513 0002  ld   $02         ;0b00010xxx >> 3
              0514 000a  ld   $0a         ;0b0001010x >> 1
              0515 0005  ld   $05         ;0b000101xx >> 2
              0516 000b  ld   $0b         ;0b0001011x >> 1
              0517 0001  ld   $01         ;0b0001xxxx >> 4
              0518 000c  ld   $0c         ;0b0001100x >> 1
              0519 0006  ld   $06         ;0b000110xx >> 2
              051a 000d  ld   $0d         ;0b0001101x >> 1
              051b 0003  ld   $03         ;0b00011xxx >> 3
              051c 000e  ld   $0e         ;0b0001110x >> 1
              051d 0007  ld   $07         ;0b000111xx >> 2
              051e 000f  ld   $0f         ;0b0001111x >> 1
              051f 0000  ld   $00         ;0b00xxxxxx >> 6
              0520 0010  ld   $10         ;0b0010000x >> 1
              0521 0008  ld   $08         ;0b001000xx >> 2
              0522 0011  ld   $11         ;0b0010001x >> 1
              0523 0004  ld   $04         ;0b00100xxx >> 3
              0524 0012  ld   $12         ;0b0010010x >> 1
              0525 0009  ld   $09         ;0b001001xx >> 2
              0526 0013  ld   $13         ;0b0010011x >> 1
              0527 0002  ld   $02         ;0b0010xxxx >> 4
              0528 0014  ld   $14         ;0b0010100x >> 1
              0529 000a  ld   $0a         ;0b001010xx >> 2
              052a 0015  ld   $15         ;0b0010101x >> 1
              052b 0005  ld   $05         ;0b00101xxx >> 3
              052c 0016  ld   $16         ;0b0010110x >> 1
              052d 000b  ld   $0b         ;0b001011xx >> 2
              052e 0017  ld   $17         ;0b0010111x >> 1
              052f 0001  ld   $01         ;0b001xxxxx >> 5
              0530 0018  ld   $18         ;0b0011000x >> 1
              0531 000c  ld   $0c         ;0b001100xx >> 2
              0532 0019  ld   $19         ;0b0011001x >> 1
              0533 0006  ld   $06         ;0b00110xxx >> 3
              0534 001a  ld   $1a         ;0b0011010x >> 1
              0535 000d  ld   $0d         ;0b001101xx >> 2
              0536 001b  ld   $1b         ;0b0011011x >> 1
              0537 0003  ld   $03         ;0b0011xxxx >> 4
              0538 001c  ld   $1c         ;0b0011100x >> 1
              0539 000e  ld   $0e         ;0b001110xx >> 2
              053a 001d  ld   $1d         ;0b0011101x >> 1
              053b 0007  ld   $07         ;0b00111xxx >> 3
              053c 001e  ld   $1e         ;0b0011110x >> 1
              053d 000f  ld   $0f         ;0b001111xx >> 2
              053e 001f  ld   $1f         ;0b0011111x >> 1
              053f 0000  ld   $00         ;0b00xxxxxx >> 6
              0540 0020  ld   $20         ;0b0100000x >> 1
              0541 0010  ld   $10         ;0b010000xx >> 2
              0542 0021  ld   $21         ;0b0100001x >> 1
              0543 0008  ld   $08         ;0b01000xxx >> 3
              0544 0022  ld   $22         ;0b0100010x >> 1
              0545 0011  ld   $11         ;0b010001xx >> 2
              0546 0023  ld   $23         ;0b0100011x >> 1
              0547 0004  ld   $04         ;0b0100xxxx >> 4
              0548 0024  ld   $24         ;0b0100100x >> 1
              0549 0012  ld   $12         ;0b010010xx >> 2
              054a 0025  ld   $25         ;0b0100101x >> 1
              054b 0009  ld   $09         ;0b01001xxx >> 3
              054c 0026  ld   $26         ;0b0100110x >> 1
              054d 0013  ld   $13         ;0b010011xx >> 2
              054e 0027  ld   $27         ;0b0100111x >> 1
              054f 0002  ld   $02         ;0b010xxxxx >> 5
              0550 0028  ld   $28         ;0b0101000x >> 1
              0551 0014  ld   $14         ;0b010100xx >> 2
              0552 0029  ld   $29         ;0b0101001x >> 1
              0553 000a  ld   $0a         ;0b01010xxx >> 3
              0554 002a  ld   $2a         ;0b0101010x >> 1
              0555 0015  ld   $15         ;0b010101xx >> 2
              0556 002b  ld   $2b         ;0b0101011x >> 1
              0557 0005  ld   $05         ;0b0101xxxx >> 4
              0558 002c  ld   $2c         ;0b0101100x >> 1
              0559 0016  ld   $16         ;0b010110xx >> 2
              055a 002d  ld   $2d         ;0b0101101x >> 1
              055b 000b  ld   $0b         ;0b01011xxx >> 3
              055c 002e  ld   $2e         ;0b0101110x >> 1
              055d 0017  ld   $17         ;0b010111xx >> 2
              055e 002f  ld   $2f         ;0b0101111x >> 1
              055f 0001  ld   $01         ;0b01xxxxxx >> 6
              0560 0030  ld   $30         ;0b0110000x >> 1
              0561 0018  ld   $18         ;0b011000xx >> 2
              0562 0031  ld   $31         ;0b0110001x >> 1
              0563 000c  ld   $0c         ;0b01100xxx >> 3
              0564 0032  ld   $32         ;0b0110010x >> 1
              0565 0019  ld   $19         ;0b011001xx >> 2
              0566 0033  ld   $33         ;0b0110011x >> 1
              0567 0006  ld   $06         ;0b0110xxxx >> 4
              0568 0034  ld   $34         ;0b0110100x >> 1
              0569 001a  ld   $1a         ;0b011010xx >> 2
              056a 0035  ld   $35         ;0b0110101x >> 1
              056b 000d  ld   $0d         ;0b01101xxx >> 3
              056c 0036  ld   $36         ;0b0110110x >> 1
              056d 001b  ld   $1b         ;0b011011xx >> 2
              056e 0037  ld   $37         ;0b0110111x >> 1
              056f 0003  ld   $03         ;0b011xxxxx >> 5
              0570 0038  ld   $38         ;0b0111000x >> 1
              0571 001c  ld   $1c         ;0b011100xx >> 2
              0572 0039  ld   $39         ;0b0111001x >> 1
              0573 000e  ld   $0e         ;0b01110xxx >> 3
              0574 003a  ld   $3a         ;0b0111010x >> 1
              0575 001d  ld   $1d         ;0b011101xx >> 2
              0576 003b  ld   $3b         ;0b0111011x >> 1
              0577 0007  ld   $07         ;0b0111xxxx >> 4
              0578 003c  ld   $3c         ;0b0111100x >> 1
              0579 001e  ld   $1e         ;0b011110xx >> 2
              057a 003d  ld   $3d         ;0b0111101x >> 1
              057b 000f  ld   $0f         ;0b01111xxx >> 3
              057c 003e  ld   $3e         ;0b0111110x >> 1
              057d 001f  ld   $1f         ;0b011111xx >> 2
              057e 003f  ld   $3f         ;0b0111111x >> 1
              057f 0001  ld   $01         ;0b01xxxxxx >> 6
              0580 0040  ld   $40         ;0b1000000x >> 1
              0581 0020  ld   $20         ;0b100000xx >> 2
              0582 0041  ld   $41         ;0b1000001x >> 1
              0583 0010  ld   $10         ;0b10000xxx >> 3
              0584 0042  ld   $42         ;0b1000010x >> 1
              0585 0021  ld   $21         ;0b100001xx >> 2
              0586 0043  ld   $43         ;0b1000011x >> 1
              0587 0008  ld   $08         ;0b1000xxxx >> 4
              0588 0044  ld   $44         ;0b1000100x >> 1
              0589 0022  ld   $22         ;0b100010xx >> 2
              058a 0045  ld   $45         ;0b1000101x >> 1
              058b 0011  ld   $11         ;0b10001xxx >> 3
              058c 0046  ld   $46         ;0b1000110x >> 1
              058d 0023  ld   $23         ;0b100011xx >> 2
              058e 0047  ld   $47         ;0b1000111x >> 1
              058f 0004  ld   $04         ;0b100xxxxx >> 5
              0590 0048  ld   $48         ;0b1001000x >> 1
              0591 0024  ld   $24         ;0b100100xx >> 2
              0592 0049  ld   $49         ;0b1001001x >> 1
              0593 0012  ld   $12         ;0b10010xxx >> 3
              0594 004a  ld   $4a         ;0b1001010x >> 1
              0595 0025  ld   $25         ;0b100101xx >> 2
              0596 004b  ld   $4b         ;0b1001011x >> 1
              0597 0009  ld   $09         ;0b1001xxxx >> 4
              0598 004c  ld   $4c         ;0b1001100x >> 1
              0599 0026  ld   $26         ;0b100110xx >> 2
              059a 004d  ld   $4d         ;0b1001101x >> 1
              059b 0013  ld   $13         ;0b10011xxx >> 3
              059c 004e  ld   $4e         ;0b1001110x >> 1
              059d 0027  ld   $27         ;0b100111xx >> 2
              059e 004f  ld   $4f         ;0b1001111x >> 1
              059f 0002  ld   $02         ;0b10xxxxxx >> 6
              05a0 0050  ld   $50         ;0b1010000x >> 1
              05a1 0028  ld   $28         ;0b101000xx >> 2
              05a2 0051  ld   $51         ;0b1010001x >> 1
              05a3 0014  ld   $14         ;0b10100xxx >> 3
              05a4 0052  ld   $52         ;0b1010010x >> 1
              05a5 0029  ld   $29         ;0b101001xx >> 2
              05a6 0053  ld   $53         ;0b1010011x >> 1
              05a7 000a  ld   $0a         ;0b1010xxxx >> 4
              05a8 0054  ld   $54         ;0b1010100x >> 1
              05a9 002a  ld   $2a         ;0b101010xx >> 2
              05aa 0055  ld   $55         ;0b1010101x >> 1
              05ab 0015  ld   $15         ;0b10101xxx >> 3
              05ac 0056  ld   $56         ;0b1010110x >> 1
              05ad 002b  ld   $2b         ;0b101011xx >> 2
              05ae 0057  ld   $57         ;0b1010111x >> 1
              05af 0005  ld   $05         ;0b101xxxxx >> 5
              05b0 0058  ld   $58         ;0b1011000x >> 1
              05b1 002c  ld   $2c         ;0b101100xx >> 2
              05b2 0059  ld   $59         ;0b1011001x >> 1
              05b3 0016  ld   $16         ;0b10110xxx >> 3
              05b4 005a  ld   $5a         ;0b1011010x >> 1
              05b5 002d  ld   $2d         ;0b101101xx >> 2
              05b6 005b  ld   $5b         ;0b1011011x >> 1
              05b7 000b  ld   $0b         ;0b1011xxxx >> 4
              05b8 005c  ld   $5c         ;0b1011100x >> 1
              05b9 002e  ld   $2e         ;0b101110xx >> 2
              05ba 005d  ld   $5d         ;0b1011101x >> 1
              05bb 0017  ld   $17         ;0b10111xxx >> 3
              05bc 005e  ld   $5e         ;0b1011110x >> 1
              05bd 002f  ld   $2f         ;0b101111xx >> 2
              05be 005f  ld   $5f         ;0b1011111x >> 1
              05bf 0002  ld   $02         ;0b10xxxxxx >> 6
              05c0 0060  ld   $60         ;0b1100000x >> 1
              05c1 0030  ld   $30         ;0b110000xx >> 2
              05c2 0061  ld   $61         ;0b1100001x >> 1
              05c3 0018  ld   $18         ;0b11000xxx >> 3
              05c4 0062  ld   $62         ;0b1100010x >> 1
              05c5 0031  ld   $31         ;0b110001xx >> 2
              05c6 0063  ld   $63         ;0b1100011x >> 1
              05c7 000c  ld   $0c         ;0b1100xxxx >> 4
              05c8 0064  ld   $64         ;0b1100100x >> 1
              05c9 0032  ld   $32         ;0b110010xx >> 2
              05ca 0065  ld   $65         ;0b1100101x >> 1
              05cb 0019  ld   $19         ;0b11001xxx >> 3
              05cc 0066  ld   $66         ;0b1100110x >> 1
              05cd 0033  ld   $33         ;0b110011xx >> 2
              05ce 0067  ld   $67         ;0b1100111x >> 1
              05cf 0006  ld   $06         ;0b110xxxxx >> 5
              05d0 0068  ld   $68         ;0b1101000x >> 1
              05d1 0034  ld   $34         ;0b110100xx >> 2
              05d2 0069  ld   $69         ;0b1101001x >> 1
              05d3 001a  ld   $1a         ;0b11010xxx >> 3
              05d4 006a  ld   $6a         ;0b1101010x >> 1
              05d5 0035  ld   $35         ;0b110101xx >> 2
              05d6 006b  ld   $6b         ;0b1101011x >> 1
              05d7 000d  ld   $0d         ;0b1101xxxx >> 4
              05d8 006c  ld   $6c         ;0b1101100x >> 1
              05d9 0036  ld   $36         ;0b110110xx >> 2
              05da 006d  ld   $6d         ;0b1101101x >> 1
              05db 001b  ld   $1b         ;0b11011xxx >> 3
              05dc 006e  ld   $6e         ;0b1101110x >> 1
              05dd 0037  ld   $37         ;0b110111xx >> 2
              05de 006f  ld   $6f         ;0b1101111x >> 1
              05df 0003  ld   $03         ;0b11xxxxxx >> 6
              05e0 0070  ld   $70         ;0b1110000x >> 1
              05e1 0038  ld   $38         ;0b111000xx >> 2
              05e2 0071  ld   $71         ;0b1110001x >> 1
              05e3 001c  ld   $1c         ;0b11100xxx >> 3
              05e4 0072  ld   $72         ;0b1110010x >> 1
              05e5 0039  ld   $39         ;0b111001xx >> 2
              05e6 0073  ld   $73         ;0b1110011x >> 1
              05e7 000e  ld   $0e         ;0b1110xxxx >> 4
              05e8 0074  ld   $74         ;0b1110100x >> 1
              05e9 003a  ld   $3a         ;0b111010xx >> 2
              05ea 0075  ld   $75         ;0b1110101x >> 1
              05eb 001d  ld   $1d         ;0b11101xxx >> 3
              05ec 0076  ld   $76         ;0b1110110x >> 1
              05ed 003b  ld   $3b         ;0b111011xx >> 2
              05ee 0077  ld   $77         ;0b1110111x >> 1
              05ef 0007  ld   $07         ;0b111xxxxx >> 5
              05f0 0078  ld   $78         ;0b1111000x >> 1
              05f1 003c  ld   $3c         ;0b111100xx >> 2
              05f2 0079  ld   $79         ;0b1111001x >> 1
              05f3 001e  ld   $1e         ;0b11110xxx >> 3
              05f4 007a  ld   $7a         ;0b1111010x >> 1
              05f5 003d  ld   $3d         ;0b111101xx >> 2
              05f6 007b  ld   $7b         ;0b1111011x >> 1
              05f7 000f  ld   $0f         ;0b1111xxxx >> 4
              05f8 007c  ld   $7c         ;0b1111100x >> 1
              05f9 003e  ld   $3e         ;0b111110xx >> 2
              05fa 007d  ld   $7d         ;0b1111101x >> 1
              05fb 001f  ld   $1f         ;0b11111xxx >> 3
              05fc 007e  ld   $7e         ;0b1111110x >> 1
              05fd 003f  ld   $3f         ;0b111111xx >> 2
              05fe 007f  ld   $7f         ;0b1111111x >> 1
                                          2352
                                          2353  assert pc()&255 == 255
              05ff fd1d  bra  [$1d]       2354  bra([vTmp])                     # Jumps back into next page
                                          2355
                                          2356  label('SYS_LSRW1_48')
                                          2357  assert pc()&255 == 0            # First instruction on this page *must* be a nop
SYS_LSRW1_48: 0600 0200  nop              2358  nop()                           #15
              0601 1405  ld   $05,y       2359  ld(hi('shiftTable'),Y)          #16 Logical shift right 1 bit (X >> 1)
              0602 0008  ld   $08         2360  ld('.sysLsrw1a')                #17 Shift low byte
              0603 c21d  st   [$1d]       2361  st([vTmp])                      #18
              0604 0118  ld   [$18]       2362  ld([vAC])                       #19
              0605 20fe  anda $fe         2363  anda(0b11111110)                #20
              0606 e200  jmp  y,ac        2364  jmp(Y,AC)                       #21
              0607 fcff  bra  $ff         2365  bra(255)                        #22 bra shiftTable+255
                                          2366  label('.sysLsrw1a')
.sysLsrw1a:   0608 c218  st   [$18]       2367  st([vAC])                       #26
              0609 0119  ld   [$19]       2368  ld([vAC+1])                     #27 Transfer bit 8
              060a 2001  anda $01         2369  anda(1)                         #28
              060b 807f  adda $7f         2370  adda(127)                       #29
              060c 2080  anda $80         2371  anda(128)                       #30
              060d 4118  ora  [$18]       2372  ora([vAC])                      #31
              060e c218  st   [$18]       2373  st([vAC])                       #32
              060f 0015  ld   $15         2374  ld('.sysLsrw1b')                #33 Shift high byte
              0610 c21d  st   [$1d]       2375  st([vTmp])                      #34
              0611 0119  ld   [$19]       2376  ld([vAC+1])                     #35
              0612 20fe  anda $fe         2377  anda(0b11111110)                #36
              0613 e200  jmp  y,ac        2378  jmp(Y,AC)                       #37
              0614 fcff  bra  $ff         2379  bra(255)                        #38 bra shiftTable+255
                                          2380  label('.sysLsrw1b')
.sysLsrw1b:   0615 c219  st   [$19]       2381  st([vAC+1])                     #42
              0616 1403  ld   $03,y       2382  ld(hi('REENTER'),Y)             #43
              0617 e0cb  jmp  y,$cb       2383  jmp(Y,'REENTER')                #44
              0618 00e8  ld   $e8         2384  ld(-48/2)                       #45
                                          2385
                                          2386  label('SYS_LSRW2_52')
SYS_LSRW2_52: 0619 1405  ld   $05,y       2387  ld(hi('shiftTable'),Y)          #15 Logical shift right 2 bit (X >> 2)
              061a 0021  ld   $21         2388  ld('.sysLsrw2a')                #16 Shift low byte
              061b c21d  st   [$1d]       2389  st([vTmp])                      #17
              061c 0118  ld   [$18]       2390  ld([vAC])                       #18
              061d 20fc  anda $fc         2391  anda(0b11111100)                #19
              061e 4001  ora  $01         2392  ora( 0b00000001)                #20
              061f e200  jmp  y,ac        2393  jmp(Y,AC)                       #21
              0620 fcff  bra  $ff         2394  bra(255)                        #22 bra shiftTable+255
                                          2395  label('.sysLsrw2a')
.sysLsrw2a:   0621 c218  st   [$18]       2396  st([vAC])                       #26
              0622 0119  ld   [$19]       2397  ld([vAC+1])                     #27 Transfer bit 8:9
              0623 8200  adda ac          2398  adda(AC)                        #28
              0624 8200  adda ac          2399  adda(AC)                        #29
              0625 8200  adda ac          2400  adda(AC)                        #30
              0626 8200  adda ac          2401  adda(AC)                        #31
              0627 8200  adda ac          2402  adda(AC)                        #32
              0628 8200  adda ac          2403  adda(AC)                        #33
              0629 4118  ora  [$18]       2404  ora([vAC])                      #34
              062a c218  st   [$18]       2405  st([vAC])                       #35
              062b 0032  ld   $32         2406  ld('.sysLsrw2b')                #36 Shift high byte
              062c c21d  st   [$1d]       2407  st([vTmp])                      #37
              062d 0119  ld   [$19]       2408  ld([vAC+1])                     #38
              062e 20fc  anda $fc         2409  anda(0b11111100)                #39
              062f 4001  ora  $01         2410  ora( 0b00000001)                #40
              0630 e200  jmp  y,ac        2411  jmp(Y,AC)                       #41
              0631 fcff  bra  $ff         2412  bra(255)                        #42 bra shiftTable+255
                                          2413  label('.sysLsrw2b')
.sysLsrw2b:   0632 c219  st   [$19]       2414  st([vAC+1])                     #46
              0633 1403  ld   $03,y       2415  ld(hi('REENTER'),Y)             #47
              0634 e0cb  jmp  y,$cb       2416  jmp(Y,'REENTER')                #48
              0635 00e6  ld   $e6         2417  ld(-52/2)                       #49
                                          2418
                                          2419  label('SYS_LSRW3_52')
SYS_LSRW3_52: 0636 1405  ld   $05,y       2420  ld(hi('shiftTable'),Y)          #15 Logical shift right 3 bit (X >> 3)
              0637 003e  ld   $3e         2421  ld('.sysLsrw3a')                #16 Shift low byte
              0638 c21d  st   [$1d]       2422  st([vTmp])                      #17
              0639 0118  ld   [$18]       2423  ld([vAC])                       #18
              063a 20f8  anda $f8         2424  anda(0b11111000)                #19
              063b 4003  ora  $03         2425  ora( 0b00000011)                #20
              063c e200  jmp  y,ac        2426  jmp(Y,AC)                       #21
              063d fcff  bra  $ff         2427  bra(255)                        #22 bra shiftTable+255
                                          2428  label('.sysLsrw3a')
.sysLsrw3a:   063e c218  st   [$18]       2429  st([vAC])                       #26
              063f 0119  ld   [$19]       2430  ld([vAC+1])                     #27 Transfer bit 8:10
              0640 8200  adda ac          2431  adda(AC)                        #28
              0641 8200  adda ac          2432  adda(AC)                        #29
              0642 8200  adda ac          2433  adda(AC)                        #30
              0643 8200  adda ac          2434  adda(AC)                        #31
              0644 8200  adda ac          2435  adda(AC)                        #32
              0645 4118  ora  [$18]       2436  ora([vAC])                      #33
              0646 c218  st   [$18]       2437  st([vAC])                       #34
              0647 004e  ld   $4e         2438  ld('.sysLsrw3b')                #35 Shift high byte
              0648 c21d  st   [$1d]       2439  st([vTmp])                      #36
              0649 0119  ld   [$19]       2440  ld([vAC+1])                     #37
              064a 20f8  anda $f8         2441  anda(0b11111000)                #38
              064b 4003  ora  $03         2442  ora( 0b00000011)                #39
              064c e200  jmp  y,ac        2443  jmp(Y,AC)                       #40
              064d fcff  bra  $ff         2444  bra(255)                        #41 bra shiftTable+255
                                          2445  label('.sysLsrw3b')
.sysLsrw3b:   064e c219  st   [$19]       2446  st([vAC+1])                     #45
              064f 00e6  ld   $e6         2447  ld(-52/2)                       #46
              0650 1403  ld   $03,y       2448  ld(hi('REENTER'),Y)             #47
              0651 e0cb  jmp  y,$cb       2449  jmp(Y,'REENTER')                #48
                                          2450  #nop()                          #49
                                          2451
                                          2452  label('SYS_LSRW4_50')
SYS_LSRW4_50: 0652 1405  ld   $05,y       2453  ld(hi('shiftTable'),Y)          #15,49 Logical shift right 4 bit (X >> 4)
              0653 005a  ld   $5a         2454  ld('.sysLsrw4a')                #16 Shift low byte
              0654 c21d  st   [$1d]       2455  st([vTmp])                      #17
              0655 0118  ld   [$18]       2456  ld([vAC])                       #18
              0656 20f0  anda $f0         2457  anda(0b11110000)                #19
              0657 4007  ora  $07         2458  ora( 0b00000111)                #20
              0658 e200  jmp  y,ac        2459  jmp(Y,AC)                       #21
              0659 fcff  bra  $ff         2460  bra(255)                        #22 bra shiftTable+255
                                          2461  label('.sysLsrw4a')
.sysLsrw4a:   065a c218  st   [$18]       2462  st([vAC])                       #26
              065b 0119  ld   [$19]       2463  ld([vAC+1])                     #27 Transfer bit 8:11
              065c 8200  adda ac          2464  adda(AC)                        #28
              065d 8200  adda ac          2465  adda(AC)                        #29
              065e 8200  adda ac          2466  adda(AC)                        #30
              065f 8200  adda ac          2467  adda(AC)                        #31
              0660 4118  ora  [$18]       2468  ora([vAC])                      #32
              0661 c218  st   [$18]       2469  st([vAC])                       #33
              0662 0069  ld   $69         2470  ld('.sysLsrw4b')                #34 Shift high byte'
              0663 c21d  st   [$1d]       2471  st([vTmp])                      #35
              0664 0119  ld   [$19]       2472  ld([vAC+1])                     #36
              0665 20f0  anda $f0         2473  anda(0b11110000)                #37
              0666 4007  ora  $07         2474  ora( 0b00000111)                #38
              0667 e200  jmp  y,ac        2475  jmp(Y,AC)                       #39
              0668 fcff  bra  $ff         2476  bra(255)                        #40 bra shiftTable+255
                                          2477  label('.sysLsrw4b')
.sysLsrw4b:   0669 c219  st   [$19]       2478  st([vAC+1])                     #44
              066a 1403  ld   $03,y       2479  ld(hi('REENTER'),Y)             #45
              066b e0cb  jmp  y,$cb       2480  jmp(Y,'REENTER')                #46
              066c 00e7  ld   $e7         2481  ld(-50/2)                       #47
                                          2482
                                          2483  label('SYS_LSRW5_50')
SYS_LSRW5_50: 066d 1405  ld   $05,y       2484  ld(hi('shiftTable'),Y)          #15 Logical shift right 5 bit (X >> 5)
              066e 0075  ld   $75         2485  ld('.sysLsrw5a')                #16 Shift low byte
              066f c21d  st   [$1d]       2486  st([vTmp])                      #17
              0670 0118  ld   [$18]       2487  ld([vAC])                       #18
              0671 20e0  anda $e0         2488  anda(0b11100000)                #19
              0672 400f  ora  $0f         2489  ora( 0b00001111)                #20
              0673 e200  jmp  y,ac        2490  jmp(Y,AC)                       #21
              0674 fcff  bra  $ff         2491  bra(255)                        #22 bra shiftTable+255
                                          2492  label('.sysLsrw5a')
.sysLsrw5a:   0675 c218  st   [$18]       2493  st([vAC])                       #26
              0676 0119  ld   [$19]       2494  ld([vAC+1])                     #27 Transfer bit 8:13
              0677 8200  adda ac          2495  adda(AC)                        #28
              0678 8200  adda ac          2496  adda(AC)                        #29
              0679 8200  adda ac          2497  adda(AC)                        #30
              067a 4118  ora  [$18]       2498  ora([vAC])                      #31
              067b c218  st   [$18]       2499  st([vAC])                       #32
              067c 0083  ld   $83         2500  ld('.sysLsrw5b')                #33 Shift high byte
              067d c21d  st   [$1d]       2501  st([vTmp])                      #34
              067e 0119  ld   [$19]       2502  ld([vAC+1])                     #35
              067f 20e0  anda $e0         2503  anda(0b11100000)                #36
              0680 400f  ora  $0f         2504  ora( 0b00001111)                #37
              0681 e200  jmp  y,ac        2505  jmp(Y,AC)                       #38
              0682 fcff  bra  $ff         2506  bra(255)                        #39 bra shiftTable+255
                                          2507  label('.sysLsrw5b')
.sysLsrw5b:   0683 c219  st   [$19]       2508  st([vAC+1])                     #44
              0684 00e7  ld   $e7         2509  ld(-50/2)                       #45
              0685 1403  ld   $03,y       2510  ld(hi('REENTER'),Y)             #46
              0686 e0cb  jmp  y,$cb       2511  jmp(Y,'REENTER')                #47
                                          2512  #nop()                          #48
                                          2513
                                          2514  label('SYS_LSRW6_48')
SYS_LSRW6_48: 0687 1405  ld   $05,y       2515  ld(hi('shiftTable'),Y)          #15,44 Logical shift right 6 bit (X >> 6)
              0688 008f  ld   $8f         2516  ld('.sysLsrw6a')                #16 Shift low byte
              0689 c21d  st   [$1d]       2517  st([vTmp])                      #17
              068a 0118  ld   [$18]       2518  ld([vAC])                       #18
              068b 20c0  anda $c0         2519  anda(0b11000000)                #19
              068c 401f  ora  $1f         2520  ora( 0b00011111)                #20
              068d e200  jmp  y,ac        2521  jmp(Y,AC)                       #21
              068e fcff  bra  $ff         2522  bra(255)                        #22 bra shiftTable+255
                                          2523  label('.sysLsrw6a')
.sysLsrw6a:   068f c218  st   [$18]       2524  st([vAC])                       #26
              0690 0119  ld   [$19]       2525  ld([vAC+1])                     #27 Transfer bit 8:13
              0691 8200  adda ac          2526  adda(AC)                        #28
              0692 8200  adda ac          2527  adda(AC)                        #29
              0693 4118  ora  [$18]       2528  ora([vAC])                      #30
              0694 c218  st   [$18]       2529  st([vAC])                       #31
              0695 009c  ld   $9c         2530  ld('.sysLsrw6b')                #32 Shift high byte
              0696 c21d  st   [$1d]       2531  st([vTmp])                      #33
              0697 0119  ld   [$19]       2532  ld([vAC+1])                     #34
              0698 20c0  anda $c0         2533  anda(0b11000000)                #35
              0699 401f  ora  $1f         2534  ora( 0b00011111)                #36
              069a e200  jmp  y,ac        2535  jmp(Y,AC)                       #37
              069b fcff  bra  $ff         2536  bra(255)                        #38 bra shiftTable+255
                                          2537  label('.sysLsrw6b')
.sysLsrw6b:   069c c219  st   [$19]       2538  st([vAC+1])                     #42
              069d 1403  ld   $03,y       2539  ld(hi('REENTER'),Y)             #43
              069e e0cb  jmp  y,$cb       2540  jmp(Y,'REENTER')                #44
              069f 00e8  ld   $e8         2541  ld(-48/2)                       #45
                                          2542
                                          2543  label('SYS_LSLW4_46')
SYS_LSLW4_46: 06a0 1405  ld   $05,y       2544  ld(hi('shiftTable'),Y)          #15 Logical shift left 4 bit (X << 4)
              06a1 00ae  ld   $ae         2545  ld('.sysLsrl4')                 #16
              06a2 c21d  st   [$1d]       2546  st([vTmp])                      #17
              06a3 0119  ld   [$19]       2547  ld([vAC+1])                     #18
              06a4 8200  adda ac          2548  adda(AC)                        #19
              06a5 8200  adda ac          2549  adda(AC)                        #20
              06a6 8200  adda ac          2550  adda(AC)                        #21
              06a7 8200  adda ac          2551  adda(AC)                        #22
              06a8 c219  st   [$19]       2552  st([vAC+1])                     #23
              06a9 0118  ld   [$18]       2553  ld([vAC])                       #24
              06aa 20f0  anda $f0         2554  anda(0b11110000)                #25
              06ab 4007  ora  $07         2555  ora( 0b00000111)                #26
              06ac e200  jmp  y,ac        2556  jmp(Y,AC)                       #27
              06ad fcff  bra  $ff         2557  bra(255)                        #28 bra shiftTable+255
                                          2558  label('.sysLsrl4')
.sysLsrl4:    06ae 4119  ora  [$19]       2559  ora([vAC+1])                    #32
              06af c219  st   [$19]       2560  st([vAC+1])                     #33
              06b0 0118  ld   [$18]       2561  ld([vAC])                       #34
              06b1 8200  adda ac          2562  adda(AC)                        #35
              06b2 8200  adda ac          2563  adda(AC)                        #36
              06b3 8200  adda ac          2564  adda(AC)                        #37
              06b4 8200  adda ac          2565  adda(AC)                        #38
              06b5 c218  st   [$18]       2566  st([vAC])                       #39
              06b6 00e9  ld   $e9         2567  ld(-46/2)                       #40
              06b7 1403  ld   $03,y       2568  ld(hi('REENTER'),Y)             #41
              06b8 e0cb  jmp  y,$cb       2569  jmp(Y,'REENTER')                #42
                                          2570  #nop()                          #43
                                          2571
                                          2572  #-----------------------------------------------------------------------
                                          2573  # Extension SYS_Read3_40
                                          2574  #-----------------------------------------------------------------------
                                          2575
                                          2576  # Read 3 consecutive bytes from ROM
                                          2577  #
                                          2578  # Note: This function a bit obsolete, as it has very limited use. It's
                                          2579  #       effectively an application-specific SYS function for the Pictures
                                          2580  #       application from ROM v1. It requires the ROM data be organized
                                          2581  #       with trampoline3a and trampoline3b fragments, and their address
                                          2582  #       in ROM to be known. Better avoid using this.
                                          2583  #
                                          2584  # Variables:
                                          2585  #       sysArgs[0:2]    Bytes (out)
                                          2586  #       sysArgs[6:7]    ROM pointer (in)
                                          2587
                                          2588  label('SYS_Read3_40')
SYS_Read3_40: 06b9 152b  ld   [$2b],y     2589  ld([sysArgs+7],Y)               #15,32
              06ba e079  jmp  y,$79       2590  jmp(Y,128-7)                    #16 trampoline3a
              06bb 012a  ld   [$2a]       2591  ld([sysArgs+6])                 #17
                                          2592  label('txReturn')
txReturn:     06bc c226  st   [$26]       2593  st([sysArgs+2])                 #34
              06bd 1403  ld   $03,y       2594  ld(hi('REENTER'),Y)             #35
              06be e0cb  jmp  y,$cb       2595  jmp(Y,'REENTER')                #36
              06bf 00ec  ld   $ec         2596  ld(-40/2)                       #37
                                          2597
                                          2598  def trampoline3a():
                                          2599    """Read 3 bytes from ROM page"""
                                          2600    while pc()&255 < 128-7:
                                          2601      nop()
                                          2602    bra(AC)                       #18
                                          2603    C('Trampoline for page $%02x00 reading (entry)' % (pc()>>8))
                                          2604    bra(123)                      #19
                                          2605    st([sysArgs+0])               #21
                                          2606    ld([sysArgs+6])               #22
                                          2607    adda(1)                       #23
                                          2608    bra(AC)                       #24
                                          2609    bra(250)                      #25 trampoline3b
                                          2610    align(1, size=0x80)
                                          2611
                                          2612  def trampoline3b():
                                          2613    """Read 3 bytes from ROM page (continue)"""
                                          2614    while pc()&255 < 256-6:
                                          2615      nop()
                                          2616    st([sysArgs+1])               #27
                                          2617    C('Trampoline for page $%02x00 reading (continue)' % (pc()>>8))
                                          2618    ld([sysArgs+6])               #28
                                          2619    adda(2)                       #29
                                          2620    ld(hi('txReturn'),Y)          #30
                                          2621    bra(AC)                       #31
                                          2622    jmp(Y,'txReturn')             #32
                                          2623    align(1, size=0x100)
                                          2624
                                          2625  #-----------------------------------------------------------------------
                                          2626  # Extension SYS_Unpack_56
                                          2627  #-----------------------------------------------------------------------
                                          2628
                                          2629  # Unpack 3 bytes into 4 pixels
                                          2630  #
                                          2631  # Variables:
                                          2632  #       sysArgs[0:2]    Packed bytes (in)
                                          2633  #       sysArgs[0:3]    Pixels (out)
                                          2634
                                          2635  label('SYS_Unpack_56')
SYS_Unpack_56:
              06c0 1407  ld   $07,y       2636  ld(soundTable>>8,Y)             #15
              06c1 0126  ld   [$26]       2637  ld([sysArgs+2])                 #16 a[2]>>2
              06c2 5003  ora  $03,x       2638  ora(0x03,X)                     #17
              06c3 0d00  ld   [y,x]       2639  ld([Y,X])                       #18
              06c4 c227  st   [$27]       2640  st([sysArgs+3])                 #19 -> Pixel 3
                                          2641
              06c5 0126  ld   [$26]       2642  ld([sysArgs+2])                 #20 (a[2]&3)<<4
              06c6 2003  anda $03         2643  anda(0x03)                      #21
              06c7 8200  adda ac          2644  adda(AC)                        #22
              06c8 8200  adda ac          2645  adda(AC)                        #23
              06c9 8200  adda ac          2646  adda(AC)                        #24
              06ca 8200  adda ac          2647  adda(AC)                        #25
              06cb c226  st   [$26]       2648  st([sysArgs+2])                 #26
              06cc 0125  ld   [$25]       2649  ld([sysArgs+1])                 #27 | a[1]>>4
              06cd 5003  ora  $03,x       2650  ora(0x03,X)                     #28
              06ce 0d00  ld   [y,x]       2651  ld([Y,X])                       #29
              06cf 5003  ora  $03,x       2652  ora(0x03,X)                     #30
              06d0 0d00  ld   [y,x]       2653  ld([Y,X])                       #31
              06d1 4126  ora  [$26]       2654  ora([sysArgs+2])                #32
              06d2 c226  st   [$26]       2655  st([sysArgs+2])                 #33 -> Pixel 2
                                          2656
              06d3 0125  ld   [$25]       2657  ld([sysArgs+1])                 #34 (a[1]&15)<<2
              06d4 200f  anda $0f         2658  anda(0x0f)                      #35
              06d5 8200  adda ac          2659  adda(AC)                        #36
              06d6 8200  adda ac          2660  adda(AC)                        #37
              06d7 c225  st   [$25]       2661  st([sysArgs+1])                 #38
                                          2662
              06d8 0124  ld   [$24]       2663  ld([sysArgs+0])                 #39 | a[0]>>6
              06d9 5003  ora  $03,x       2664  ora(0x03,X)                     #40
              06da 0d00  ld   [y,x]       2665  ld([Y,X])                       #41
              06db 5003  ora  $03,x       2666  ora(0x03,X)                     #42
              06dc 0d00  ld   [y,x]       2667  ld([Y,X])                       #43
              06dd 5003  ora  $03,x       2668  ora(0x03,X)                     #44
              06de 0d00  ld   [y,x]       2669  ld([Y,X])                       #45
              06df 4125  ora  [$25]       2670  ora([sysArgs+1])                #46
              06e0 c225  st   [$25]       2671  st([sysArgs+1])                 #47 -> Pixel 1
                                          2672
              06e1 0124  ld   [$24]       2673  ld([sysArgs+0])                 #48 a[1]&63
              06e2 203f  anda $3f         2674  anda(0x3f)                      #49
              06e3 c224  st   [$24]       2675  st([sysArgs+0])                 #50 -> Pixel 0
                                          2676
              06e4 1403  ld   $03,y       2677  ld(hi('REENTER'),Y)             #51
              06e5 e0cb  jmp  y,$cb       2678  jmp(Y,'REENTER')                #52
              06e6 00e4  ld   $e4         2679  ld(-56/2)                       #53
                                          2680
                                          2681  #-----------------------------------------------------------------------
                                          2682  #       v6502 right shift instruction
                                          2683  #-----------------------------------------------------------------------
                                          2684
                                          2685  label('v6502_lsr#30')
v6502_lsr#30: 06e7 1525  ld   [$25],y     2686  ld([v6502_ADH],Y)               #30 Result
              06e8 ce00  st   [y,x]       2687  st([Y,X])                       #31
              06e9 c228  st   [$28]       2688  st([v6502_Qz])                  #32 Z flag
              06ea c229  st   [$29]       2689  st([v6502_Qn])                  #33 N flag
              06eb 140e  ld   $0e,y       2690  ld(hi('v6502_next'),Y)          #34
              06ec 00ed  ld   $ed         2691  ld(-38/2)                       #35
              06ed e020  jmp  y,$20       2692  jmp(Y,'v6502_next')             #36
                                          2693  #nop()                          #37 Overlap
                                          2694  #
                                          2695  label('v6502_ror#38')
v6502_ror#38: 06ee 1525  ld   [$25],y     2696  ld([v6502_ADH],Y)               #38,38 Result
              06ef 4119  ora  [$19]       2697  ora([v6502_BI])                 #39 Transfer bit 8
              06f0 ce00  st   [y,x]       2698  st([Y,X])                       #40
              06f1 c228  st   [$28]       2699  st([v6502_Qz])                  #41 Z flag
              06f2 c229  st   [$29]       2700  st([v6502_Qn])                  #42 N flag
              06f3 140e  ld   $0e,y       2701  ld(hi('v6502_next'),Y)          #43
              06f4 e020  jmp  y,$20       2702  jmp(Y,'v6502_next')             #44
              06f5 00e9  ld   $e9         2703  ld(-46/2)                       #45
                                          2704
                                          2705  #-----------------------------------------------------------------------
                                          2706  #       Reserved
                                          2707  #-----------------------------------------------------------------------
                                          2708
                                          2709  # XXX Reserve space for LSRW?
                                          2710
                                          2711  #-----------------------------------------------------------------------
                                          2712  #
                                          2713  #  $0700 ROM page 7-8: Gigatron font data
                                          2714  #
                                          2715  #-----------------------------------------------------------------------
                                          2716
              06f6 0200  nop              2717  align(0x100, size=0x100)
              06f7 0200  nop
              06f8 0200  nop
              * 10 times
                                          2718
                                          2719  label('font32up')
                                          2720  for ch in range(32, 32+50):
                                          2721    comment = 'Char %s' % repr(chr(ch))
                                          2722    for byte in font.font[ch-32]:
                                          2723      ld(byte)
font32up:     0700 0000  ld   $00         ;Char ' '
              0701 0000  ld   $00
              0702 0000  ld   $00
              * 5 times
              0705 0000  ld   $00         ;Char '!'
              0706 0000  ld   $00
              0707 00fa  ld   $fa
              0708 0000  ld   $00
              0709 0000  ld   $00
              070a 00a0  ld   $a0         ;Char '"'
              070b 00c0  ld   $c0
              070c 0000  ld   $00
              070d 00a0  ld   $a0
              070e 00c0  ld   $c0
              070f 0028  ld   $28         ;Char '#'
              0710 00fe  ld   $fe
              0711 0028  ld   $28
              0712 00fe  ld   $fe
              0713 0028  ld   $28
              0714 0024  ld   $24         ;Char '$'
              0715 0054  ld   $54
              0716 00fe  ld   $fe
              0717 0054  ld   $54
              0718 0048  ld   $48
              0719 00c4  ld   $c4         ;Char '%'
              071a 00c8  ld   $c8
              071b 0010  ld   $10
              071c 0026  ld   $26
              071d 0046  ld   $46
              071e 006c  ld   $6c         ;Char '&'
              071f 0092  ld   $92
              0720 006a  ld   $6a
              0721 0004  ld   $04
              0722 000a  ld   $0a
              0723 0000  ld   $00         ;Char "'"
              0724 00a0  ld   $a0
              0725 00c0  ld   $c0
              0726 0000  ld   $00
              0727 0000  ld   $00
              0728 0000  ld   $00         ;Char '('
              0729 0038  ld   $38
              072a 0044  ld   $44
              072b 0082  ld   $82
              072c 0000  ld   $00
              072d 0000  ld   $00         ;Char ')'
              072e 0082  ld   $82
              072f 0044  ld   $44
              0730 0038  ld   $38
              0731 0000  ld   $00
              0732 0028  ld   $28         ;Char '*'
              0733 0010  ld   $10
              0734 007c  ld   $7c
              0735 0010  ld   $10
              0736 0028  ld   $28
              0737 0010  ld   $10         ;Char '+'
              0738 0010  ld   $10
              0739 007c  ld   $7c
              073a 0010  ld   $10
              073b 0010  ld   $10
              073c 0000  ld   $00         ;Char ','
              073d 0005  ld   $05
              073e 0006  ld   $06
              073f 0000  ld   $00
              0740 0000  ld   $00
              0741 0010  ld   $10         ;Char '-'
              0742 0010  ld   $10
              0743 0010  ld   $10
              * 5 times
              0746 0000  ld   $00         ;Char '.'
              0747 0002  ld   $02
              0748 0002  ld   $02
              0749 0000  ld   $00
              074a 0000  ld   $00
              074b 0000  ld   $00         ;Char '/'
              074c 0006  ld   $06
              074d 0018  ld   $18
              074e 0060  ld   $60
              074f 0000  ld   $00
              0750 007c  ld   $7c         ;Char '0'
              0751 008a  ld   $8a
              0752 0092  ld   $92
              0753 00a2  ld   $a2
              0754 007c  ld   $7c
              0755 0022  ld   $22         ;Char '1'
              0756 0042  ld   $42
              0757 00fe  ld   $fe
              0758 0002  ld   $02
              0759 0002  ld   $02
              075a 0046  ld   $46         ;Char '2'
              075b 008a  ld   $8a
              075c 0092  ld   $92
              075d 0092  ld   $92
              075e 0062  ld   $62
              075f 0044  ld   $44         ;Char '3'
              0760 0082  ld   $82
              0761 0092  ld   $92
              0762 0092  ld   $92
              0763 006c  ld   $6c
              0764 0018  ld   $18         ;Char '4'
              0765 0028  ld   $28
              0766 0048  ld   $48
              0767 00fe  ld   $fe
              0768 0008  ld   $08
              0769 00e4  ld   $e4         ;Char '5'
              076a 00a2  ld   $a2
              076b 00a2  ld   $a2
              076c 00a2  ld   $a2
              076d 009c  ld   $9c
              076e 003c  ld   $3c         ;Char '6'
              076f 0052  ld   $52
              0770 0092  ld   $92
              0771 0092  ld   $92
              0772 000c  ld   $0c
              0773 0080  ld   $80         ;Char '7'
              0774 008e  ld   $8e
              0775 0090  ld   $90
              0776 00a0  ld   $a0
              0777 00c0  ld   $c0
              0778 006c  ld   $6c         ;Char '8'
              0779 0092  ld   $92
              077a 0092  ld   $92
              077b 0092  ld   $92
              077c 006c  ld   $6c
              077d 0060  ld   $60         ;Char '9'
              077e 0092  ld   $92
              077f 0092  ld   $92
              0780 0094  ld   $94
              0781 0078  ld   $78
              0782 0000  ld   $00         ;Char ':'
              0783 0024  ld   $24
              0784 0024  ld   $24
              0785 0000  ld   $00
              0786 0000  ld   $00
              0787 0000  ld   $00         ;Char ';'
              0788 0025  ld   $25
              0789 0026  ld   $26
              078a 0000  ld   $00
              078b 0000  ld   $00
              078c 0010  ld   $10         ;Char '<'
              078d 0028  ld   $28
              078e 0044  ld   $44
              078f 0082  ld   $82
              0790 0000  ld   $00
              0791 0028  ld   $28         ;Char '='
              0792 0028  ld   $28
              0793 0028  ld   $28
              * 5 times
              0796 0000  ld   $00         ;Char '>'
              0797 0082  ld   $82
              0798 0044  ld   $44
              0799 0028  ld   $28
              079a 0010  ld   $10
              079b 0040  ld   $40         ;Char '?'
              079c 0080  ld   $80
              079d 008a  ld   $8a
              079e 0090  ld   $90
              079f 0060  ld   $60
              07a0 007c  ld   $7c         ;Char '@'
              07a1 0082  ld   $82
              07a2 00ba  ld   $ba
              07a3 00aa  ld   $aa
              07a4 0078  ld   $78
              07a5 003e  ld   $3e         ;Char 'A'
              07a6 0048  ld   $48
              07a7 0088  ld   $88
              07a8 0048  ld   $48
              07a9 003e  ld   $3e
              07aa 00fe  ld   $fe         ;Char 'B'
              07ab 0092  ld   $92
              07ac 0092  ld   $92
              07ad 0092  ld   $92
              07ae 006c  ld   $6c
              07af 007c  ld   $7c         ;Char 'C'
              07b0 0082  ld   $82
              07b1 0082  ld   $82
              07b2 0082  ld   $82
              07b3 0044  ld   $44
              07b4 00fe  ld   $fe         ;Char 'D'
              07b5 0082  ld   $82
              07b6 0082  ld   $82
              07b7 0044  ld   $44
              07b8 0038  ld   $38
              07b9 00fe  ld   $fe         ;Char 'E'
              07ba 0092  ld   $92
              07bb 0092  ld   $92
              07bc 0092  ld   $92
              07bd 0082  ld   $82
              07be 00fe  ld   $fe         ;Char 'F'
              07bf 0090  ld   $90
              07c0 0090  ld   $90
              07c1 0090  ld   $90
              07c2 0080  ld   $80
              07c3 007c  ld   $7c         ;Char 'G'
              07c4 0082  ld   $82
              07c5 0082  ld   $82
              07c6 0092  ld   $92
              07c7 005c  ld   $5c
              07c8 00fe  ld   $fe         ;Char 'H'
              07c9 0010  ld   $10
              07ca 0010  ld   $10
              07cb 0010  ld   $10
              07cc 00fe  ld   $fe
              07cd 0000  ld   $00         ;Char 'I'
              07ce 0082  ld   $82
              07cf 00fe  ld   $fe
              07d0 0082  ld   $82
              07d1 0000  ld   $00
              07d2 0004  ld   $04         ;Char 'J'
              07d3 0002  ld   $02
              07d4 0082  ld   $82
              07d5 00fc  ld   $fc
              07d6 0080  ld   $80
              07d7 00fe  ld   $fe         ;Char 'K'
              07d8 0010  ld   $10
              07d9 0028  ld   $28
              07da 0044  ld   $44
              07db 0082  ld   $82
              07dc 00fe  ld   $fe         ;Char 'L'
              07dd 0002  ld   $02
              07de 0002  ld   $02
              07df 0002  ld   $02
              07e0 0002  ld   $02
              07e1 00fe  ld   $fe         ;Char 'M'
              07e2 0040  ld   $40
              07e3 0030  ld   $30
              07e4 0040  ld   $40
              07e5 00fe  ld   $fe
              07e6 00fe  ld   $fe         ;Char 'N'
              07e7 0020  ld   $20
              07e8 0010  ld   $10
              07e9 0008  ld   $08
              07ea 00fe  ld   $fe
              07eb 007c  ld   $7c         ;Char 'O'
              07ec 0082  ld   $82
              07ed 0082  ld   $82
              07ee 0082  ld   $82
              07ef 007c  ld   $7c
              07f0 00fe  ld   $fe         ;Char 'P'
              07f1 0090  ld   $90
              07f2 0090  ld   $90
              07f3 0090  ld   $90
              07f4 0060  ld   $60
              07f5 007c  ld   $7c         ;Char 'Q'
              07f6 0082  ld   $82
              07f7 008a  ld   $8a
              07f8 0084  ld   $84
              07f9 007a  ld   $7a
                                          2724      comment = C(comment)
                                          2725
              07fa 0200  nop              2726  trampoline()
              07fb fe00  bra  ac          ;+-----------------------------------+
              07fc fcfd  bra  $07fd       ;|                                   |
              07fd 1404  ld   $04,y       ;| Trampoline for page $0700 lookups |
              07fe e068  jmp  y,$68       ;|                                   |
              07ff c218  st   [$18]       ;+-----------------------------------+
                                          2727
                                          2728  #-----------------------------------------------------------------------
                                          2729
                                          2730  align(0x100, size=0x100)
                                          2731
                                          2732  label('font82up')
                                          2733  for ch in range(32+50, 132):
                                          2734    comment = 'Char %s' % repr(chr(ch))
                                          2735    for byte in font.font[ch-32]:
                                          2736      ld(byte)
font82up:     0800 00fe  ld   $fe         ;Char 'R'
              0801 0090  ld   $90
              0802 0098  ld   $98
              0803 0094  ld   $94
              0804 0062  ld   $62
              0805 0062  ld   $62         ;Char 'S'
              0806 0092  ld   $92
              0807 0092  ld   $92
              0808 0092  ld   $92
              0809 000c  ld   $0c
              080a 0080  ld   $80         ;Char 'T'
              080b 0080  ld   $80
              080c 00fe  ld   $fe
              080d 0080  ld   $80
              080e 0080  ld   $80
              080f 00fc  ld   $fc         ;Char 'U'
              0810 0002  ld   $02
              0811 0002  ld   $02
              0812 0002  ld   $02
              0813 00fc  ld   $fc
              0814 00f0  ld   $f0         ;Char 'V'
              0815 000c  ld   $0c
              0816 0002  ld   $02
              0817 000c  ld   $0c
              0818 00f0  ld   $f0
              0819 00fe  ld   $fe         ;Char 'W'
              081a 0004  ld   $04
              081b 0018  ld   $18
              081c 0004  ld   $04
              081d 00fe  ld   $fe
              081e 00c6  ld   $c6         ;Char 'X'
              081f 0028  ld   $28
              0820 0010  ld   $10
              0821 0028  ld   $28
              0822 00c6  ld   $c6
              0823 00e0  ld   $e0         ;Char 'Y'
              0824 0010  ld   $10
              0825 000e  ld   $0e
              0826 0010  ld   $10
              0827 00e0  ld   $e0
              0828 0086  ld   $86         ;Char 'Z'
              0829 008a  ld   $8a
              082a 0092  ld   $92
              082b 00a2  ld   $a2
              082c 00c2  ld   $c2
              082d 0000  ld   $00         ;Char '['
              082e 00fe  ld   $fe
              082f 0082  ld   $82
              0830 0082  ld   $82
              0831 0000  ld   $00
              0832 0000  ld   $00         ;Char '\\'
              0833 0060  ld   $60
              0834 0018  ld   $18
              0835 0006  ld   $06
              0836 0000  ld   $00
              0837 0000  ld   $00         ;Char ']'
              0838 0082  ld   $82
              0839 0082  ld   $82
              083a 00fe  ld   $fe
              083b 0000  ld   $00
              083c 0020  ld   $20         ;Char '^'
              083d 0040  ld   $40
              083e 0080  ld   $80
              083f 0040  ld   $40
              0840 0020  ld   $20
              0841 0002  ld   $02         ;Char '_'
              0842 0002  ld   $02
              0843 0002  ld   $02
              * 5 times
              0846 0000  ld   $00         ;Char '`'
              0847 0000  ld   $00
              0848 00c0  ld   $c0
              0849 00a0  ld   $a0
              084a 0000  ld   $00
              084b 0004  ld   $04         ;Char 'a'
              084c 002a  ld   $2a
              084d 002a  ld   $2a
              084e 002a  ld   $2a
              084f 001e  ld   $1e
              0850 00fe  ld   $fe         ;Char 'b'
              0851 0022  ld   $22
              0852 0022  ld   $22
              0853 0022  ld   $22
              0854 001c  ld   $1c
              0855 001c  ld   $1c         ;Char 'c'
              0856 0022  ld   $22
              0857 0022  ld   $22
              0858 0022  ld   $22
              0859 0002  ld   $02
              085a 001c  ld   $1c         ;Char 'd'
              085b 0022  ld   $22
              085c 0022  ld   $22
              085d 0022  ld   $22
              085e 00fe  ld   $fe
              085f 001c  ld   $1c         ;Char 'e'
              0860 002a  ld   $2a
              0861 002a  ld   $2a
              0862 002a  ld   $2a
              0863 0018  ld   $18
              0864 0010  ld   $10         ;Char 'f'
              0865 007e  ld   $7e
              0866 0090  ld   $90
              0867 0080  ld   $80
              0868 0040  ld   $40
              0869 0018  ld   $18         ;Char 'g'
              086a 0025  ld   $25
              086b 0025  ld   $25
              086c 0025  ld   $25
              086d 001e  ld   $1e
              086e 00fe  ld   $fe         ;Char 'h'
              086f 0020  ld   $20
              0870 0020  ld   $20
              0871 0020  ld   $20
              0872 001e  ld   $1e
              0873 0000  ld   $00         ;Char 'i'
              0874 0022  ld   $22
              0875 00be  ld   $be
              0876 0002  ld   $02
              0877 0000  ld   $00
              0878 0002  ld   $02         ;Char 'j'
              0879 0001  ld   $01
              087a 0021  ld   $21
              087b 00be  ld   $be
              087c 0000  ld   $00
              087d 00fe  ld   $fe         ;Char 'k'
              087e 0008  ld   $08
              087f 0018  ld   $18
              0880 0024  ld   $24
              0881 0002  ld   $02
              0882 0000  ld   $00         ;Char 'l'
              0883 0082  ld   $82
              0884 00fe  ld   $fe
              0885 0002  ld   $02
              0886 0000  ld   $00
              0887 003e  ld   $3e         ;Char 'm'
              0888 0020  ld   $20
              0889 001c  ld   $1c
              088a 0020  ld   $20
              088b 001e  ld   $1e
              088c 003e  ld   $3e         ;Char 'n'
              088d 0010  ld   $10
              088e 0020  ld   $20
              088f 0020  ld   $20
              0890 001e  ld   $1e
              0891 001c  ld   $1c         ;Char 'o'
              0892 0022  ld   $22
              0893 0022  ld   $22
              0894 0022  ld   $22
              0895 001c  ld   $1c
              0896 003f  ld   $3f         ;Char 'p'
              0897 0024  ld   $24
              0898 0024  ld   $24
              0899 0024  ld   $24
              089a 0018  ld   $18
              089b 0018  ld   $18         ;Char 'q'
              089c 0024  ld   $24
              089d 0024  ld   $24
              089e 0024  ld   $24
              089f 003f  ld   $3f
              08a0 003e  ld   $3e         ;Char 'r'
              08a1 0010  ld   $10
              08a2 0020  ld   $20
              08a3 0020  ld   $20
              08a4 0010  ld   $10
              08a5 0012  ld   $12         ;Char 's'
              08a6 002a  ld   $2a
              08a7 002a  ld   $2a
              08a8 002a  ld   $2a
              08a9 0004  ld   $04
              08aa 0020  ld   $20         ;Char 't'
              08ab 00fc  ld   $fc
              08ac 0022  ld   $22
              08ad 0002  ld   $02
              08ae 0004  ld   $04
              08af 003c  ld   $3c         ;Char 'u'
              08b0 0002  ld   $02
              08b1 0002  ld   $02
              08b2 0004  ld   $04
              08b3 003e  ld   $3e
              08b4 0038  ld   $38         ;Char 'v'
              08b5 0004  ld   $04
              08b6 0002  ld   $02
              08b7 0004  ld   $04
              08b8 0038  ld   $38
              08b9 003c  ld   $3c         ;Char 'w'
              08ba 0002  ld   $02
              08bb 000c  ld   $0c
              08bc 0002  ld   $02
              08bd 003c  ld   $3c
              08be 0022  ld   $22         ;Char 'x'
              08bf 0014  ld   $14
              08c0 0008  ld   $08
              08c1 0014  ld   $14
              08c2 0022  ld   $22
              08c3 0038  ld   $38         ;Char 'y'
              08c4 0005  ld   $05
              08c5 0005  ld   $05
              08c6 0005  ld   $05
              08c7 003e  ld   $3e
              08c8 0022  ld   $22         ;Char 'z'
              08c9 0026  ld   $26
              08ca 002a  ld   $2a
              08cb 0032  ld   $32
              08cc 0022  ld   $22
              08cd 0010  ld   $10         ;Char '{'
              08ce 006c  ld   $6c
              08cf 0082  ld   $82
              08d0 0082  ld   $82
              08d1 0000  ld   $00
              08d2 0000  ld   $00         ;Char '|'
              08d3 0000  ld   $00
              08d4 00fe  ld   $fe
              08d5 0000  ld   $00
              08d6 0000  ld   $00
              08d7 0000  ld   $00         ;Char '}'
              08d8 0082  ld   $82
              08d9 0082  ld   $82
              08da 006c  ld   $6c
              08db 0010  ld   $10
              08dc 0040  ld   $40         ;Char '~'
              08dd 0080  ld   $80
              08de 0040  ld   $40
              08df 0020  ld   $20
              08e0 0040  ld   $40
              08e1 00fe  ld   $fe         ;Char '\x7f'
              08e2 00fe  ld   $fe
              08e3 00fe  ld   $fe
              * 5 times
              08e6 0010  ld   $10         ;Char '\x80'
              08e7 0038  ld   $38
              08e8 0054  ld   $54
              08e9 0010  ld   $10
              08ea 0010  ld   $10
              08eb 0010  ld   $10         ;Char '\x81'
              08ec 0020  ld   $20
              08ed 007c  ld   $7c
              08ee 0020  ld   $20
              08ef 0010  ld   $10
              08f0 0010  ld   $10         ;Char '\x82'
              08f1 0010  ld   $10
              08f2 0054  ld   $54
              08f3 0038  ld   $38
              08f4 0010  ld   $10
              08f5 0010  ld   $10         ;Char '\x83'
              08f6 0008  ld   $08
              08f7 007c  ld   $7c
              08f8 0008  ld   $08
              08f9 0010  ld   $10
                                          2737      comment = C(comment)
                                          2738
              08fa 0200  nop              2739  trampoline()
              08fb fe00  bra  ac          ;+-----------------------------------+
              08fc fcfd  bra  $08fd       ;|                                   |
              08fd 1404  ld   $04,y       ;| Trampoline for page $0800 lookups |
              08fe e068  jmp  y,$68       ;|                                   |
              08ff c218  st   [$18]       ;+-----------------------------------+
                                          2740
                                          2741  #-----------------------------------------------------------------------
                                          2742  #
                                          2743  #  $0900 ROM page 9: Key table for music
                                          2744  #
                                          2745  #-----------------------------------------------------------------------
                                          2746
                                          2747  align(0x100, size=0x100)
                                          2748  notes = 'CCDDEFFGGAAB'
                                          2749  sampleRate = cpuClock / 200.0 / 4
                                          2750  label('notesTable')
notesTable:   0900 0000  ld   $00         2751  ld(0)
              0901 0000  ld   $00         2752  ld(0)
                                          2753  for i in range(0, 250, 2):
                                          2754    j = i//2-1
                                          2755    freq = 440.0*2.0**((j-57)/12.0)
                                          2756    if j>=0 and freq <= sampleRate/2.0:
                                          2757      key = int(round(32768 * freq / sampleRate))
                                          2758      octave, note = j//12, notes[j%12]
                                          2759      sharp = '-' if notes[j%12-1] != note else '#'
                                          2760      comment = '%s%s%s (%0.1f Hz)' % (note, sharp, octave, freq)
                                          2761      ld(key&127); C(comment); ld(key>>7)
              0902 0045  ld   $45         ;C-0 (16.4 Hz)
              0903 0000  ld   $00
              0904 0049  ld   $49         ;C#0 (17.3 Hz)
              0905 0000  ld   $00
              0906 004d  ld   $4d         ;D-0 (18.4 Hz)
              0907 0000  ld   $00
              0908 0052  ld   $52         ;D#0 (19.4 Hz)
              0909 0000  ld   $00
              090a 0056  ld   $56         ;E-0 (20.6 Hz)
              090b 0000  ld   $00
              090c 005c  ld   $5c         ;F-0 (21.8 Hz)
              090d 0000  ld   $00
              090e 0061  ld   $61         ;F#0 (23.1 Hz)
              090f 0000  ld   $00
              0910 0067  ld   $67         ;G-0 (24.5 Hz)
              0911 0000  ld   $00
              0912 006d  ld   $6d         ;G#0 (26.0 Hz)
              0913 0000  ld   $00
              0914 0073  ld   $73         ;A-0 (27.5 Hz)
              0915 0000  ld   $00
              0916 007a  ld   $7a         ;A#0 (29.1 Hz)
              0917 0000  ld   $00
              0918 0001  ld   $01         ;B-0 (30.9 Hz)
              0919 0001  ld   $01
              091a 0009  ld   $09         ;C-1 (32.7 Hz)
              091b 0001  ld   $01
              091c 0011  ld   $11         ;C#1 (34.6 Hz)
              091d 0001  ld   $01
              091e 001a  ld   $1a         ;D-1 (36.7 Hz)
              091f 0001  ld   $01
              0920 0023  ld   $23         ;D#1 (38.9 Hz)
              0921 0001  ld   $01
              0922 002d  ld   $2d         ;E-1 (41.2 Hz)
              0923 0001  ld   $01
              0924 0037  ld   $37         ;F-1 (43.7 Hz)
              0925 0001  ld   $01
              0926 0042  ld   $42         ;F#1 (46.2 Hz)
              0927 0001  ld   $01
              0928 004e  ld   $4e         ;G-1 (49.0 Hz)
              0929 0001  ld   $01
              092a 005a  ld   $5a         ;G#1 (51.9 Hz)
              092b 0001  ld   $01
              092c 0067  ld   $67         ;A-1 (55.0 Hz)
              092d 0001  ld   $01
              092e 0074  ld   $74         ;A#1 (58.3 Hz)
              092f 0001  ld   $01
              0930 0003  ld   $03         ;B-1 (61.7 Hz)
              0931 0002  ld   $02
              0932 0012  ld   $12         ;C-2 (65.4 Hz)
              0933 0002  ld   $02
              0934 0023  ld   $23         ;C#2 (69.3 Hz)
              0935 0002  ld   $02
              0936 0034  ld   $34         ;D-2 (73.4 Hz)
              0937 0002  ld   $02
              0938 0046  ld   $46         ;D#2 (77.8 Hz)
              0939 0002  ld   $02
              093a 005a  ld   $5a         ;E-2 (82.4 Hz)
              093b 0002  ld   $02
              093c 006e  ld   $6e         ;F-2 (87.3 Hz)
              093d 0002  ld   $02
              093e 0004  ld   $04         ;F#2 (92.5 Hz)
              093f 0003  ld   $03
              0940 001b  ld   $1b         ;G-2 (98.0 Hz)
              0941 0003  ld   $03
              0942 0033  ld   $33         ;G#2 (103.8 Hz)
              0943 0003  ld   $03
              0944 004d  ld   $4d         ;A-2 (110.0 Hz)
              0945 0003  ld   $03
              0946 0069  ld   $69         ;A#2 (116.5 Hz)
              0947 0003  ld   $03
              0948 0006  ld   $06         ;B-2 (123.5 Hz)
              0949 0004  ld   $04
              094a 0025  ld   $25         ;C-3 (130.8 Hz)
              094b 0004  ld   $04
              094c 0045  ld   $45         ;C#3 (138.6 Hz)
              094d 0004  ld   $04
              094e 0068  ld   $68         ;D-3 (146.8 Hz)
              094f 0004  ld   $04
              0950 000c  ld   $0c         ;D#3 (155.6 Hz)
              0951 0005  ld   $05
              0952 0033  ld   $33         ;E-3 (164.8 Hz)
              0953 0005  ld   $05
              0954 005c  ld   $5c         ;F-3 (174.6 Hz)
              0955 0005  ld   $05
              0956 0008  ld   $08         ;F#3 (185.0 Hz)
              0957 0006  ld   $06
              0958 0036  ld   $36         ;G-3 (196.0 Hz)
              0959 0006  ld   $06
              095a 0067  ld   $67         ;G#3 (207.7 Hz)
              095b 0006  ld   $06
              095c 001b  ld   $1b         ;A-3 (220.0 Hz)
              095d 0007  ld   $07
              095e 0052  ld   $52         ;A#3 (233.1 Hz)
              095f 0007  ld   $07
              0960 000c  ld   $0c         ;B-3 (246.9 Hz)
              0961 0008  ld   $08
              0962 0049  ld   $49         ;C-4 (261.6 Hz)
              0963 0008  ld   $08
              0964 000b  ld   $0b         ;C#4 (277.2 Hz)
              0965 0009  ld   $09
              0966 0050  ld   $50         ;D-4 (293.7 Hz)
              0967 0009  ld   $09
              0968 0019  ld   $19         ;D#4 (311.1 Hz)
              0969 000a  ld   $0a
              096a 0067  ld   $67         ;E-4 (329.6 Hz)
              096b 000a  ld   $0a
              096c 0039  ld   $39         ;F-4 (349.2 Hz)
              096d 000b  ld   $0b
              096e 0010  ld   $10         ;F#4 (370.0 Hz)
              096f 000c  ld   $0c
              0970 006c  ld   $6c         ;G-4 (392.0 Hz)
              0971 000c  ld   $0c
              0972 004e  ld   $4e         ;G#4 (415.3 Hz)
              0973 000d  ld   $0d
              0974 0035  ld   $35         ;A-4 (440.0 Hz)
              0975 000e  ld   $0e
              0976 0023  ld   $23         ;A#4 (466.2 Hz)
              0977 000f  ld   $0f
              0978 0017  ld   $17         ;B-4 (493.9 Hz)
              0979 0010  ld   $10
              097a 0013  ld   $13         ;C-5 (523.3 Hz)
              097b 0011  ld   $11
              097c 0015  ld   $15         ;C#5 (554.4 Hz)
              097d 0012  ld   $12
              097e 001f  ld   $1f         ;D-5 (587.3 Hz)
              097f 0013  ld   $13
              0980 0032  ld   $32         ;D#5 (622.3 Hz)
              0981 0014  ld   $14
              0982 004d  ld   $4d         ;E-5 (659.3 Hz)
              0983 0015  ld   $15
              0984 0072  ld   $72         ;F-5 (698.5 Hz)
              0985 0016  ld   $16
              0986 0020  ld   $20         ;F#5 (740.0 Hz)
              0987 0018  ld   $18
              0988 0058  ld   $58         ;G-5 (784.0 Hz)
              0989 0019  ld   $19
              098a 001c  ld   $1c         ;G#5 (830.6 Hz)
              098b 001b  ld   $1b
              098c 006b  ld   $6b         ;A-5 (880.0 Hz)
              098d 001c  ld   $1c
              098e 0046  ld   $46         ;A#5 (932.3 Hz)
              098f 001e  ld   $1e
              0990 002f  ld   $2f         ;B-5 (987.8 Hz)
              0991 0020  ld   $20
              0992 0025  ld   $25         ;C-6 (1046.5 Hz)
              0993 0022  ld   $22
              0994 002a  ld   $2a         ;C#6 (1108.7 Hz)
              0995 0024  ld   $24
              0996 003f  ld   $3f         ;D-6 (1174.7 Hz)
              0997 0026  ld   $26
              0998 0064  ld   $64         ;D#6 (1244.5 Hz)
              0999 0028  ld   $28
              099a 001a  ld   $1a         ;E-6 (1318.5 Hz)
              099b 002b  ld   $2b
              099c 0063  ld   $63         ;F-6 (1396.9 Hz)
              099d 002d  ld   $2d
              099e 003f  ld   $3f         ;F#6 (1480.0 Hz)
              099f 0030  ld   $30
              09a0 0031  ld   $31         ;G-6 (1568.0 Hz)
              09a1 0033  ld   $33
              09a2 0038  ld   $38         ;G#6 (1661.2 Hz)
              09a3 0036  ld   $36
              09a4 0056  ld   $56         ;A-6 (1760.0 Hz)
              09a5 0039  ld   $39
              09a6 000d  ld   $0d         ;A#6 (1864.7 Hz)
              09a7 003d  ld   $3d
              09a8 005e  ld   $5e         ;B-6 (1975.5 Hz)
              09a9 0040  ld   $40
              09aa 004b  ld   $4b         ;C-7 (2093.0 Hz)
              09ab 0044  ld   $44
              09ac 0055  ld   $55         ;C#7 (2217.5 Hz)
              09ad 0048  ld   $48
              09ae 007e  ld   $7e         ;D-7 (2349.3 Hz)
              09af 004c  ld   $4c
              09b0 0048  ld   $48         ;D#7 (2489.0 Hz)
              09b1 0051  ld   $51
              09b2 0034  ld   $34         ;E-7 (2637.0 Hz)
              09b3 0056  ld   $56
              09b4 0046  ld   $46         ;F-7 (2793.8 Hz)
              09b5 005b  ld   $5b
              09b6 007f  ld   $7f         ;F#7 (2960.0 Hz)
              09b7 0060  ld   $60
              09b8 0061  ld   $61         ;G-7 (3136.0 Hz)
              09b9 0066  ld   $66
              09ba 006f  ld   $6f         ;G#7 (3322.4 Hz)
              09bb 006c  ld   $6c
              09bc 002c  ld   $2c         ;A-7 (3520.0 Hz)
              09bd 0073  ld   $73
              09be 001a  ld   $1a         ;A#7 (3729.3 Hz)
              09bf 007a  ld   $7a
                                          2762
              09c0 0200  nop              2763  trampoline()
              09c1 0200  nop
              09c2 0200  nop
              * 59 times
              09fb fe00  bra  ac          ;+-----------------------------------+
              09fc fcfd  bra  $09fd       ;|                                   |
              09fd 1404  ld   $04,y       ;| Trampoline for page $0900 lookups |
              09fe e068  jmp  y,$68       ;|                                   |
              09ff c218  st   [$18]       ;+-----------------------------------+
                                          2764
                                          2765  #-----------------------------------------------------------------------
                                          2766  #
                                          2767  #  $0a00 ROM page 10: Inversion table
                                          2768  #
                                          2769  #-----------------------------------------------------------------------
                                          2770
                                          2771  align(0x100, size=0x100)
                                          2772  label('invTable')
                                          2773
                                          2774  # Unit 64, table offset 16 (=1/4), value offset 1: (x+16)*(y+1) == 64*64 - e
                                          2775  for i in range(251):
invTable:     0a00 00ff  ld   $ff         2776    ld(4096//(i+16)-1)
              0a01 00ef  ld   $ef
              0a02 00e2  ld   $e2
              0a03 00d6  ld   $d6
              0a04 00cb  ld   $cb
              0a05 00c2  ld   $c2
              0a06 00b9  ld   $b9
              0a07 00b1  ld   $b1
              0a08 00a9  ld   $a9
              0a09 00a2  ld   $a2
              0a0a 009c  ld   $9c
              0a0b 0096  ld   $96
              0a0c 0091  ld   $91
              0a0d 008c  ld   $8c
              0a0e 0087  ld   $87
              0a0f 0083  ld   $83
              0a10 007f  ld   $7f
              0a11 007b  ld   $7b
              0a12 0077  ld   $77
              0a13 0074  ld   $74
              0a14 0070  ld   $70
              0a15 006d  ld   $6d
              0a16 006a  ld   $6a
              0a17 0068  ld   $68
              0a18 0065  ld   $65
              0a19 0062  ld   $62
              0a1a 0060  ld   $60
              0a1b 005e  ld   $5e
              0a1c 005c  ld   $5c
              0a1d 005a  ld   $5a
              0a1e 0058  ld   $58
              0a1f 0056  ld   $56
              0a20 0054  ld   $54
              0a21 0052  ld   $52
              0a22 0050  ld   $50
              0a23 004f  ld   $4f
              0a24 004d  ld   $4d
              0a25 004c  ld   $4c
              0a26 004a  ld   $4a
              0a27 0049  ld   $49
              0a28 0048  ld   $48
              0a29 0046  ld   $46
              0a2a 0045  ld   $45
              0a2b 0044  ld   $44
              0a2c 0043  ld   $43
              0a2d 0042  ld   $42
              0a2e 0041  ld   $41
              0a2f 0040  ld   $40
              0a30 003f  ld   $3f
              0a31 003e  ld   $3e
              0a32 003d  ld   $3d
              0a33 003c  ld   $3c
              0a34 003b  ld   $3b
              0a35 003a  ld   $3a
              0a36 0039  ld   $39
              0a37 0038  ld   $38
              0a38 0037  ld   $37
              0a39 0037  ld   $37
              0a3a 0036  ld   $36
              0a3b 0035  ld   $35
              0a3c 0034  ld   $34
              0a3d 0034  ld   $34
              0a3e 0033  ld   $33
              0a3f 0032  ld   $32
              0a40 0032  ld   $32
              0a41 0031  ld   $31
              0a42 0030  ld   $30
              0a43 0030  ld   $30
              0a44 002f  ld   $2f
              0a45 002f  ld   $2f
              0a46 002e  ld   $2e
              0a47 002e  ld   $2e
              0a48 002d  ld   $2d
              0a49 002d  ld   $2d
              0a4a 002c  ld   $2c
              0a4b 002c  ld   $2c
              0a4c 002b  ld   $2b
              0a4d 002b  ld   $2b
              0a4e 002a  ld   $2a
              0a4f 002a  ld   $2a
              0a50 0029  ld   $29
              0a51 0029  ld   $29
              0a52 0028  ld   $28
              0a53 0028  ld   $28
              0a54 0027  ld   $27
              0a55 0027  ld   $27
              0a56 0027  ld   $27
              0a57 0026  ld   $26
              0a58 0026  ld   $26
              0a59 0026  ld   $26
              0a5a 0025  ld   $25
              0a5b 0025  ld   $25
              0a5c 0024  ld   $24
              0a5d 0024  ld   $24
              0a5e 0024  ld   $24
              0a5f 0023  ld   $23
              0a60 0023  ld   $23
              0a61 0023  ld   $23
              0a62 0022  ld   $22
              0a63 0022  ld   $22
              0a64 0022  ld   $22
              0a65 0022  ld   $22
              0a66 0021  ld   $21
              0a67 0021  ld   $21
              0a68 0021  ld   $21
              0a69 0020  ld   $20
              0a6a 0020  ld   $20
              0a6b 0020  ld   $20
              0a6c 0020  ld   $20
              0a6d 001f  ld   $1f
              0a6e 001f  ld   $1f
              0a6f 001f  ld   $1f
              0a70 001f  ld   $1f
              0a71 001e  ld   $1e
              0a72 001e  ld   $1e
              0a73 001e  ld   $1e
              0a74 001e  ld   $1e
              0a75 001d  ld   $1d
              0a76 001d  ld   $1d
              0a77 001d  ld   $1d
              0a78 001d  ld   $1d
              0a79 001c  ld   $1c
              0a7a 001c  ld   $1c
              0a7b 001c  ld   $1c
              * 5 times
              0a7e 001b  ld   $1b
              0a7f 001b  ld   $1b
              0a80 001b  ld   $1b
              * 5 times
              0a83 001a  ld   $1a
              0a84 001a  ld   $1a
              0a85 001a  ld   $1a
              * 5 times
              0a88 0019  ld   $19
              0a89 0019  ld   $19
              0a8a 0019  ld   $19
              * 6 times
              0a8e 0018  ld   $18
              0a8f 0018  ld   $18
              0a90 0018  ld   $18
              * 6 times
              0a94 0017  ld   $17
              0a95 0017  ld   $17
              0a96 0017  ld   $17
              * 7 times
              0a9b 0016  ld   $16
              0a9c 0016  ld   $16
              0a9d 0016  ld   $16
              * 8 times
              0aa3 0015  ld   $15
              0aa4 0015  ld   $15
              0aa5 0015  ld   $15
              * 8 times
              0aab 0014  ld   $14
              0aac 0014  ld   $14
              0aad 0014  ld   $14
              * 9 times
              0ab4 0013  ld   $13
              0ab5 0013  ld   $13
              0ab6 0013  ld   $13
              * 9 times
              0abd 0012  ld   $12
              0abe 0012  ld   $12
              0abf 0012  ld   $12
              * 11 times
              0ac8 0011  ld   $11
              0ac9 0011  ld   $11
              0aca 0011  ld   $11
              * 12 times
              0ad4 0010  ld   $10
              0ad5 0010  ld   $10
              0ad6 0010  ld   $10
              * 13 times
              0ae1 000f  ld   $0f
              0ae2 000f  ld   $0f
              0ae3 000f  ld   $0f
              * 16 times
              0af1 000e  ld   $0e
              0af2 000e  ld   $0e
              0af3 000e  ld   $0e
              * 10 times
                                          2777
                                          2778  trampoline()
              0afb fe00  bra  ac          ;+-----------------------------------+
              0afc fcfd  bra  $0afd       ;|                                   |
              0afd 1404  ld   $04,y       ;| Trampoline for page $0a00 lookups |
              0afe e068  jmp  y,$68       ;|                                   |
              0aff c218  st   [$18]       ;+-----------------------------------+
                                          2779
                                          2780  #-----------------------------------------------------------------------
                                          2781  #
                                          2782  #  $0d00 ROM page 11: More SYS functions
                                          2783  #
                                          2784  #-----------------------------------------------------------------------
                                          2785
                                          2786  align(0x100, size=0x100)
                                          2787
                                          2788  #-----------------------------------------------------------------------
                                          2789  # Extension SYS_SetMode_v2_80
                                          2790  #-----------------------------------------------------------------------
                                          2791
                                          2792  # Set video mode to 0 to 3 black scanlines per pixel line.
                                          2793  #
                                          2794  # Mainly for making the MODE command available in Tiny BASIC, so that
                                          2795  # the user can experiment. It's adviced to refrain from using
                                          2796  # SYS_SetMode_v2_80 in regular applications. Video mode is a deeply
                                          2797  # personal preference, and the programmer shouldn't overrule the user
                                          2798  # in that choice. The Gigatron philisophy is that the end user has
                                          2799  # the final say on what happens on the system, not the application,
                                          2800  # even if that implies a degraded performance. This doesn't mean that
                                          2801  # all applications must work well in all video modes: mode 1 is still
                                          2802  # the default. If an application really doesn't work at all in that
                                          2803  # mode, it's acceptable to change mode once after loading.
                                          2804  #
                                          2805  # There's no "SYS_GetMode" function.
                                          2806  #
                                          2807  # Variables:
                                          2808  #       vAC bit 0:1     Mode:
                                          2809  #                         0      "ABCD" -> Full mode (slowest)
                                          2810  #                         1      "ABC-" -> Default mode after reset
                                          2811  #                         2      "A-C-" -> at67's mode
                                          2812  #                         3      "A---" -> HGM's mode
                                          2813  #       vAC bit 2:15    Ignored bits and should be 0
                                          2814  #
                                          2815  # Special values (ROM v4):
                                          2816  #       vAC = 1975      Zombie mode (no video signals, no input,
                                          2817  #                        no blinkenlights).
                                          2818  #       vAC = -1        Leave zombie mode and restore previous mode.
                                          2819
                                          2820  # Actual duration is <80 cycles, but keep some room for future extensions
                                          2821  label('SYS_SetMode_v2_80')
SYS_SetMode_v2_80:
              0b00 140b  ld   $0b,y       2822  ld(hi('sys_SetMode'),Y)         #15
              0b01 e054  jmp  y,$54       2823  jmp(Y,'sys_SetMode')            #16
              0b02 011e  ld   [$1e]       2824  ld([vReturn])                   #17
                                          2825
                                          2826  #-----------------------------------------------------------------------
                                          2827  # Extension SYS_SetMemory_v2_54
                                          2828  #-----------------------------------------------------------------------
                                          2829
                                          2830  # SYS function for setting 1..256 bytes
                                          2831  #
                                          2832  # sysArgs[0]   Copy count (in, changed)
                                          2833  # sysArgs[1]   Copy value (in)
                                          2834  # sysArgs[2:3] Destination address (in, changed)
                                          2835  #
                                          2836  # Sets up to 8 bytes per invocation before restarting itself through vCPU.
                                          2837  # Doesn't wrap around page boundary. Can run 3 times per 148-cycle time slice.
                                          2838  # All combined that gives a 300% speedup over ROMv4 and before.
                                          2839
                                          2840  label('SYS_SetMemory_v2_54')
SYS_SetMemory_v2_54:
              0b03 0124  ld   [$24]       2841  ld([sysArgs+0])                 #15
                                          2842  bra('sys_SetMemory#18')         #16
              0b04 fc18  bra  sys_SetMemory#18
              0b05 1126  ld   [$26],x     2843  ld([sysArgs+2],X)               #17
                                          2844
                                          2845  #-----------------------------------------------------------------------
                                          2846  # Extension SYS_SendSerial1_v3_80
                                          2847  #-----------------------------------------------------------------------
                                          2848
                                          2849  # SYS function for sending data over serial controller port using
                                          2850  # pulse width modulation of the vertical sync signal.
                                          2851  #
                                          2852  # Variables:
                                          2853  #       sysArgs[0:1]    Source address               (in, changed)
                                          2854  #       sysArgs[2]      Start bit mask (typically 1) (in, changed)
                                          2855  #       sysArgs[3]      Number of send frames X      (in, changed)
                                          2856  #
                                          2857  # The sending will abort if input data is detected on the serial port.
                                          2858  # Returns 0 in case of all bits sent, or <>0 in case of abort
                                          2859  #
                                          2860  # This modulates the next upcoming X vertical pulses with the supplied
                                          2861  # data. A zero becomes a 7 line vPulse, a one will be 9 lines.
                                          2862  # After that, the vPulse width falls back to 8 lines (idle).
                                          2863
                                          2864  label('SYS_SendSerial1_v3_80')
SYS_SendSerial1_v3_80:
              0b06 0109  ld   [$09]       2865  ld([videoY])                    #15
                                          2866  bra('sys_SendSerial1')          #16
              0b07 fc83  bra  sys_SendSerial1
              0b08 60b3  xora $b3         2867  xora(videoYline0)               #17 First line of vertical blank
                                          2868
                                          2869  #-----------------------------------------------------------------------
                                          2870  # Extension SYS_ExpanderControl_v4_40
                                          2871  #-----------------------------------------------------------------------
                                          2872
                                          2873  # Sets the I/O and RAM expander's control register
                                          2874  #
                                          2875  # Variables:
                                          2876  #       vAC bit 2       Device enable /SS0
                                          2877  #           bit 3       Device enable /SS1
                                          2878  #           bit 4       Device enable /SS2
                                          2879  #           bit 5       Device enable /SS3
                                          2880  #           bit 6       Banking B0
                                          2881  #           bit 7       Banking B1
                                          2882  #           bit 15      Data out MOSI
                                          2883  #       sysArgs[7]      Cache for control state (written to)
                                          2884  #
                                          2885  # Intended for prototyping, and probably too low-level for most applications
                                          2886  # Still there's a safeguard: it's not possible to disable RAM using this
                                          2887
                                          2888  label('SYS_ExpanderControl_v4_40')
SYS_ExpanderControl_v4_40:
              0b09 140c  ld   $0c,y       2889  ld(hi('sys_ExpanderControl'),Y) #15
              0b0a e0fb  jmp  y,$fb       2890  jmp(Y,'sys_ExpanderControl')    #16
              0b0b 00fc  ld   $fc         2891  ld(0b11111100)                  #17 Safety (SCLK=0)
                                          2892  #    ^^^^^^^^
                                          2893  #    |||||||`-- SCLK
                                          2894  #    ||||||`--- Not connected
                                          2895  #    |||||`---- /SS0
                                          2896  #    ||||`----- /SS1
                                          2897  #    |||`------ /SS2
                                          2898  #    ||`------- /SS3
                                          2899  #    |`-------- B0
                                          2900  #    `--------- B1
                                          2901
                                          2902  #-----------------------------------------------------------------------
                                          2903  # Extension SYS_Run6502_v4_80
                                          2904  #-----------------------------------------------------------------------
                                          2905
                                          2906  # Transfer control to v6502
                                          2907  #
                                          2908  # Calling 6502 code from vCPU goes (only) through this SYS function.
                                          2909  # Directly modifying the vCpuSelect variable is unreliable. The
                                          2910  # control transfer is immediate, without waiting for the current
                                          2911  # time slice to end or first returning to vCPU.
                                          2912  #
                                          2913  # vCPU code and v6502 code can interoperate without much hassle:
                                          2914  # - The v6502 program counter is vLR, and v6502 doesn't touch vPC
                                          2915  # - Returning to vCPU is with the BRK instruction
                                          2916  # - BRK doesn't dump process state on the stack
                                          2917  # - vCPU can save/restore the vLR with PUSH/POP
                                          2918  # - Stacks are shared, vAC is shared
                                          2919  # - vAC can indicate what the v6502 code wants. vAC+1 will be cleared
                                          2920  # - Alternative is to leave a word in sysArgs[6:7] (v6502 X and Y registers)
                                          2921  # - Another way is to set vPC before BRK, and vCPU will continue there(+2)
                                          2922  #
                                          2923  # Calling v6502 code from vCPU looks like this:
                                          2924  #       LDWI  SYS_Run6502_v4_80
                                          2925  #       STW   sysFn
                                          2926  #       LDWI  $6502_start_address
                                          2927  #       STW   vLR
                                          2928  #       SYS   80
                                          2929  #
                                          2930  # Variables:
                                          2931  #       vAC             Accumulator
                                          2932  #       vLR             Program Counter
                                          2933  #       vSP             Stack Pointer (+1)
                                          2934  #       sysArgs[6]      Index Register X
                                          2935  #       sysArgs[7]      Index Register Y
                                          2936  # For info:
                                          2937  #       sysArgs[0:1]    Address Register, free to clobber
                                          2938  #       sysArgs[2]      Instruction Register, free to clobber
                                          2939  #       sysArgs[3:5]    Flags, don't touch
                                          2940  #
                                          2941  # Implementation details::
                                          2942  #
                                          2943  #  The time to reserve for this transition is the maximum time
                                          2944  #  between NEXT and v6502_check. This is
                                          2945  #       SYS call duration + 2*v6502_maxTicks + (v6502_overhead - vCPU_overhead)
                                          2946  #     = 22 + 28 + (11 - 9) = 62 cycles.
                                          2947  #  So reserving 80 cycles is future proof. This isn't overhead, as it includes
                                          2948  #  the fetching of the first 6502 opcode and its operands..
                                          2949  #
                                          2950  #                      0            10                 28=0         9
                                          2951  #    ---+----+---------+------------+------------------+-----------+---
                                          2952  # video | nop| runVcpu |   ENTER    | At least one ins |   EXIT    | video
                                          2953  #    ---+----+---------+------------+------------------+-----------+---
                                          2954  #        sync  prelude  ENTER-to-ins    ins-to-NEXT     NEXT-to-video
                                          2955  #       |<-->|
                                          2956  #        0/1 |<------->|
                                          2957  #                 5    |<----------------------------->|
                                          2958  #          runVCpu_overhead           28               |<--------->|
                                          2959  #                                 2*maxTicks                 9
                                          2960  #                                                      vCPU_overhead
                                          2961  #
                                          2962  #                      0                21                    38=0       11
                                          2963  #    ---+----+---------+----------------+--------------------+-----------+---
                                          2964  # video | nop| runVcpu |   v6502_ENTER  | At least one fetch |v6502_exitB| video
                                          2965  #    ---+----+---------+----------------+--------------------+-----------+---
                                          2966  #        sync  prelude   enter-to-fetch     fetch-to-check    check-to-video
                                          2967  #       |<-->|
                                          2968  #        0/1 |<------->|
                                          2969  #                 5    |<----------------------------------->|
                                          2970  #          runVcpu_overhead           38                     |<--------->|
                                          2971  #                              2*v6520_maxTicks                    11
                                          2972  #                                                            v6502_overhead
                                          2973
                                          2974  label('SYS_Run6502_v4_80')
SYS_Run6502_v4_80:
              0b0c 140d  ld   $0d,y       2975  ld(hi('sys_v6502'),Y)           #15
              0b0d e07f  jmp  y,$7f       2976  jmp(Y,'sys_v6502')              #16
              0b0e 000d  ld   $0d         2977  ld(hi('v6502_ENTER'))           #17 Activate v6502
                                          2978
                                          2979  #-----------------------------------------------------------------------
                                          2980  # Extension SYS_ResetWaveforms_v4_50
                                          2981  #-----------------------------------------------------------------------
                                          2982
                                          2983  # soundTable[4x+0] = sawtooth, to be modified into metallic/noise
                                          2984  # soundTable[4x+1] = pulse
                                          2985  # soundTable[4x+2] = triangle
                                          2986  # soundTable[4x+3] = sawtooth, also useful to right shift 2 bits
                                          2987
                                          2988  label('SYS_ResetWaveforms_v4_50')
SYS_ResetWaveforms_v4_50:
              0b0f 1412  ld   $12,y       2989  ld(hi('sys_ResetWaveforms'),Y)  #15 Initial setup of waveforms. [vAC+0]=i
              0b10 e0ae  jmp  y,$ae       2990  jmp(Y,'sys_ResetWaveforms')     #16
              0b11 1407  ld   $07,y       2991  ld(soundTable>>8,Y)             #17
                                          2992
                                          2993  #-----------------------------------------------------------------------
                                          2994  # Extension SYS_ShuffleNoise_v4_46
                                          2995  #-----------------------------------------------------------------------
                                          2996
                                          2997  # Use simple 6-bits variation of RC4 to permutate waveform 0 in soundTable
                                          2998
                                          2999  label('SYS_ShuffleNoise_v4_46')
SYS_ShuffleNoise_v4_46:
              0b12 1412  ld   $12,y       3000  ld(hi('sys_ShuffleNoise'),Y)    #15 Shuffle soundTable[4i+0]. [vAC+0]=4j, [vAC+1]=4i
              0b13 e0cf  jmp  y,$cf       3001  jmp(Y,'sys_ShuffleNoise')       #16
              0b14 1407  ld   $07,y       3002  ld(soundTable>>8,Y)             #17
                                          3003
                                          3004  #-----------------------------------------------------------------------
                                          3005  # Extension SYS_SpiExchangeBytes_v4_134
                                          3006  #-----------------------------------------------------------------------
                                          3007
                                          3008  # Send AND receive 1..256 bytes over SPI interface
                                          3009
                                          3010  # Variables:
                                          3011  #       sysArgs[0]      Page index start, for both send/receive (in, changed)
                                          3012  #       sysArgs[1]      Memory page for send data (in)
                                          3013  #       sysArgs[2]      Page index stop (in)
                                          3014  #       sysArgs[3]      Memory page for receive data (in)
                                          3015  #       sysArgs[4]      Scratch (changed)
                                          3016
                                          3017  label('SYS_SpiExchangeBytes_v4_134')
SYS_SpiExchangeBytes_v4_134:
              0b15 140d  ld   $0d,y       3018  ld(hi('sys_SpiExchangeBytes'),Y)#15
              0b16 e009  jmp  y,$09       3019  jmp(Y,'sys_SpiExchangeBytes')   #16
              0b17 1401  ld   $01,y       3020  ld(hi(ctrlBits),Y)              #17 Control state as saved by SYS_ExpanderControl
                                          3021
                                          3022  #-----------------------------------------------------------------------
                                          3023  #  Implementations
                                          3024  #-----------------------------------------------------------------------
                                          3025
                                          3026  # SYS_SetMemory_54 implementation
                                          3027  label('sys_SetMemory#18')
sys_SetMemory#18:
              0b18 1527  ld   [$27],y     3028  ld([sysArgs+3],Y)               #18
              0b19 f83c  ble  .sysSb#21   3029  ble('.sysSb#21')                #19 Enter fast lane if >=128 or at 0 (-> 256)
              0b1a a008  suba $08         3030  suba(8)                         #20
              0b1b f43e  bge  .sysSb#23   3031  bge('.sysSb#23')                #21 Or when >=8
              0b1c c224  st   [$24]       3032  st([sysArgs+0])                 #22
              0b1d 2004  anda $04         3033  anda(4)                         #23
              0b1e f025  beq  .sysSb#26   3034  beq('.sysSb#26')                #24
              0b1f 0125  ld   [$25]       3035  ld([sysArgs+1])                 #25 Set 4 pixels
              0b20 de00  st   [y,x++]     3036  st([Y,Xpp])                     #26
              0b21 de00  st   [y,x++]     3037  st([Y,Xpp])                     #27
              0b22 de00  st   [y,x++]     3038  st([Y,Xpp])                     #28
              0b23 fc28  bra  .sysSb#31   3039  bra('.sysSb#31')                #29
              0b24 de00  st   [y,x++]     3040  st([Y,Xpp])                     #30
                                          3041  label('.sysSb#26')
.sysSb#26:    0b25 0001  ld   $01         3042  wait(31-26)                     #26
              0b26 ec26  bne  $0b26
              0b27 a001  suba $01
                                          3043  label('.sysSb#31')
.sysSb#31:    0b28 0124  ld   [$24]       3044  ld([sysArgs+0])                 #31
              0b29 2002  anda $02         3045  anda(2)                         #32
              0b2a f02f  beq  .sysSb#35   3046  beq('.sysSb#35')                #33
              0b2b 0125  ld   [$25]       3047  ld([sysArgs+1])                 #34 Set 2 pixels
              0b2c de00  st   [y,x++]     3048  st([Y,Xpp])                     #35
              0b2d fc32  bra  .sysSb#38   3049  bra('.sysSb#38')                #36
              0b2e de00  st   [y,x++]     3050  st([Y,Xpp])                     #37
                                          3051  label('.sysSb#35')
.sysSb#35:    0b2f 0200  nop              3052  wait(38-35)                     #35
              0b30 0200  nop
              0b31 0200  nop
                                          3053  label('.sysSb#38')
.sysSb#38:    0b32 0124  ld   [$24]       3054  ld([sysArgs+0])                 #38
              0b33 2001  anda $01         3055  anda(1)                         #39
              0b34 f037  beq  $0b37       3056  beq(pc()+3)                     #40
              0b35 fc38  bra  $0b38       3057  bra(pc()+3)                     #41
              0b36 0125  ld   [$25]       3058  ld([sysArgs+1])                 #42 Set 1 pixel
              0b37 0d00  ld   [y,x]       3059  ld([Y,X])                       #42(!) No change
              0b38 ce00  st   [y,x]       3060  st([Y,X])                       #43
              0b39 1403  ld   $03,y       3061  ld(hi('NEXTY'),Y)               #44 Return
              0b3a e000  jmp  y,$00       3062  jmp(Y,'NEXTY')                  #45 All done
              0b3b 00e8  ld   $e8         3063  ld(-48/2)                       #46
                                          3064  label('.sysSb#21')
.sysSb#21:    0b3c 0200  nop              3065  nop()                           #21
              0b3d c224  st   [$24]       3066  st([sysArgs+0])                 #22
                                          3067  label('.sysSb#23')
.sysSb#23:    0b3e 0125  ld   [$25]       3068  ld([sysArgs+1])                 #23 Set 8 pixels
              0b3f de00  st   [y,x++]     3069  st([Y,Xpp])                     #24
              0b40 de00  st   [y,x++]     3070  st([Y,Xpp])                     #25
              0b41 de00  st   [y,x++]     3071  st([Y,Xpp])                     #26
              0b42 de00  st   [y,x++]     3072  st([Y,Xpp])                     #27
              0b43 de00  st   [y,x++]     3073  st([Y,Xpp])                     #28
              0b44 de00  st   [y,x++]     3074  st([Y,Xpp])                     #29
              0b45 de00  st   [y,x++]     3075  st([Y,Xpp])                     #30
              0b46 de00  st   [y,x++]     3076  st([Y,Xpp])                     #31
              0b47 0126  ld   [$26]       3077  ld([sysArgs+2])                 #32 Advance write pointer
              0b48 8008  adda $08         3078  adda(8)                         #33
              0b49 c226  st   [$26]       3079  st([sysArgs+2])                 #34
              0b4a 0124  ld   [$24]       3080  ld([sysArgs+0])                 #35
              0b4b f04e  beq  $0b4e       3081  beq(pc()+3)                     #36
              0b4c fc4f  bra  $0b4f       3082  bra(pc()+3)                     #37
              0b4d 00fe  ld   $fe         3083  ld(-2)                          #38 Self-restart when more to do
              0b4e 0000  ld   $00         3084  ld(0)                           #38(!)
              0b4f 8116  adda [$16]       3085  adda([vPC])                     #39
              0b50 c216  st   [$16]       3086  st([vPC])                       #40
              0b51 1403  ld   $03,y       3087  ld(hi('REENTER'),Y)             #41
              0b52 e0cb  jmp  y,$cb       3088  jmp(Y,'REENTER')                #42
              0b53 00e9  ld   $e9         3089  ld(-46/2)                       #43
                                          3090
                                          3091  # SYS_SetMode_80 implementation
                                          3092  label('sys_SetMode')
sys_SetMode:  0b54 ec57  bne  $0b57       3093  bne(pc()+3)                     #18
              0b55 fc57  bra  $0b57       3094  bra(pc()+2)                     #19
              0b56 0003  ld   $03         3095  ld('startVideo')                #20 First enable video if disabled
              0b57 c21e  st   [$1e]       3096  st([vReturn])                   #20,21
              0b58 0119  ld   [$19]       3097  ld([vAC+1])                     #22
              0b59 f063  beq  .sysSm#25   3098  beq('.sysSm#25')                #23
              0b5a 1403  ld   $03,y       3099  ld(hi('REENTER'),Y)             #24
              0b5b 6118  xora [$18]       3100  xora([vAC])                     #25
              0b5c 60b0  xora $b0         3101  xora((1975>>8)^(1975&255))      #26 Poor man\'s 1975 detection
              0b5d ec60  bne  $0b60       3102  bne(pc()+3)                     #27
              0b5e fc61  bra  $0b61       3103  bra(pc()+3)                     #28
                                          3104  assert videoZ == 0x0100
              0b5f c21e  st   [$1e]       3105  st([vReturn])                   #29 DISABLE video/audio/serial/etc
              0b60 0200  nop              3106  nop()                           #29(!) Ignore and return
              0b61 e0cb  jmp  y,$cb       3107  jmp(Y,'REENTER')                #30
              0b62 00ef  ld   $ef         3108  ld(-34/2)                       #31
                                          3109  label('.sysSm#25')
.sysSm#25:    0b63 0118  ld   [$18]       3110  ld([vAC])                       #25 Mode 0,1,2,3
              0b64 2003  anda $03         3111  anda(3)                         #26
              0b65 8068  adda $68         3112  adda('.sysSm#30')               #27
              0b66 fe00  bra  ac          3113  bra(AC)                         #28
              0b67 fc6c  bra  .sysSm#31   3114  bra('.sysSm#31')                #29
                                          3115  label('.sysSm#30')
.sysSm#30:    0b68 000a  ld   $0a         3116  ld('pixels')                    #30 videoB lines
              0b69 000a  ld   $0a         3117  ld('pixels')                    #30
              0b6a 00f6  ld   $f6         3118  ld('nopixels')                  #30
              0b6b 00f6  ld   $f6         3119  ld('nopixels')                  #30
                                          3120  label('.sysSm#31')
.sysSm#31:    0b6c c20a  st   [$0a]       3121  st([videoModeB])                #31
              0b6d 0118  ld   [$18]       3122  ld([vAC])                       #32
              0b6e 2003  anda $03         3123  anda(3)                         #33
              0b6f 8072  adda $72         3124  adda('.sysSm#37')               #34
              0b70 fe00  bra  ac          3125  bra(AC)                         #35
              0b71 fc76  bra  .sysSm#38   3126  bra('.sysSm#38')                #36
                                          3127  label('.sysSm#37')
.sysSm#37:    0b72 000a  ld   $0a         3128  ld('pixels')                    #37 videoC lines
              0b73 000a  ld   $0a         3129  ld('pixels')                    #37
              0b74 000a  ld   $0a         3130  ld('pixels')                    #37
              0b75 00f6  ld   $f6         3131  ld('nopixels')                  #37
                                          3132  label('.sysSm#38')
.sysSm#38:    0b76 c20b  st   [$0b]       3133  st([videoModeC])                #38
              0b77 0118  ld   [$18]       3134  ld([vAC])                       #39
              0b78 2003  anda $03         3135  anda(3)                         #40
              0b79 807c  adda $7c         3136  adda('.sysSm#44')               #41
              0b7a fe00  bra  ac          3137  bra(AC)                         #42
              0b7b fc80  bra  .sysSm#45   3138  bra('.sysSm#45')                #43
                                          3139  label('.sysSm#44')
.sysSm#44:    0b7c 000a  ld   $0a         3140  ld('pixels')                    #44 videoD lines
              0b7d 00f6  ld   $f6         3141  ld('nopixels')                  #44
              0b7e 00f6  ld   $f6         3142  ld('nopixels')                  #44
              0b7f 00f6  ld   $f6         3143  ld('nopixels')                  #44
                                          3144  label('.sysSm#45')
.sysSm#45:    0b80 c20c  st   [$0c]       3145  st([videoModeD])                #45
              0b81 e0cb  jmp  y,$cb       3146  jmp(Y,'REENTER')                #46
              0b82 00e7  ld   $e7         3147  ld(-50/2)                       #47
                                          3148
                                          3149  # SYS_SendSerial1_v3_80 implementation
                                          3150  label('sys_SendSerial1')
sys_SendSerial1:
              0b83 f08a  beq  .sysSs#20   3151  beq('.sysSs#20')                #18
              0b84 1124  ld   [$24],x     3152  ld([sysArgs+0],X)               #19
              0b85 0116  ld   [$16]       3153  ld([vPC])                       #20 Wait for vBlank
              0b86 a002  suba $02         3154  suba(2)                         #21
              0b87 1403  ld   $03,y       3155  ld(hi('REENTER_28'),Y)          #22
              0b88 e0ca  jmp  y,$ca       3156  jmp(Y,'REENTER_28')             #23
              0b89 c216  st   [$16]       3157  st([vPC])                       #24
                                          3158  label('.sysSs#20')
.sysSs#20:    0b8a 1525  ld   [$25],y     3159  ld([sysArgs+1],Y)               #20 Synchronized with vBlank
              0b8b 0d00  ld   [y,x]       3160  ld([Y,X])                       #21 Copy next bit
              0b8c 2126  anda [$26]       3161  anda([sysArgs+2])               #22
              0b8d ec90  bne  $0b90       3162  bne(pc()+3)                     #23
              0b8e fc91  bra  $0b91       3163  bra(pc()+3)                     #24
              0b8f 000e  ld   $0e         3164  ld(7*2)                         #25
              0b90 0012  ld   $12         3165  ld(9*2)                         #25
              0b91 c20d  st   [$0d]       3166  st([videoPulse])                #26
              0b92 0126  ld   [$26]       3167  ld([sysArgs+2])                 #27 Rotate input bit
              0b93 8200  adda ac          3168  adda(AC)                        #28
              0b94 ec97  bne  $0b97       3169  bne(pc()+3)                     #29
              0b95 fc97  bra  $0b97       3170  bra(pc()+2)                     #30
              0b96 0001  ld   $01         3171  ld(1)                           #31
              0b97 c226  st   [$26]       3172  st([sysArgs+2])                 #31,32 (must be idempotent)
              0b98 2001  anda $01         3173  anda(1)                         #33 Optionally increment pointer
              0b99 8124  adda [$24]       3174  adda([sysArgs+0])               #34
              0b9a d224  st   [$24],x     3175  st([sysArgs+0],X)               #35
              0b9b 0127  ld   [$27]       3176  ld([sysArgs+3])                 #36 Frame counter
              0b9c a001  suba $01         3177  suba(1)                         #37
              0b9d f0ac  beq  .sysSs#40   3178  beq('.sysSs#40')                #38
              0b9e 1403  ld   $03,y       3179  ld(hi('REENTER'),Y)             #39
              0b9f c227  st   [$27]       3180  st([sysArgs+3])                 #40
              0ba0 010f  ld   [$0f]       3181  ld([serialRaw])                 #41 Test for anything being sent back
              0ba1 60ff  xora $ff         3182  xora(255)                       #42
              0ba2 f0a7  beq  .sysSs#45   3183  beq('.sysSs#45')                #43
              0ba3 c218  st   [$18]       3184  st([vAC])                       #44 Abort after key press with non-zero error
              0ba4 c219  st   [$19]       3185  st([vAC+1])                     #45
              0ba5 e0cb  jmp  y,$cb       3186  jmp(Y,'REENTER')                #46
              0ba6 00e7  ld   $e7         3187  ld(-50/2)                       #47
                                          3188  label('.sysSs#45')
.sysSs#45:    0ba7 0116  ld   [$16]       3189  ld([vPC])                       #45 Continue sending bits
              0ba8 a002  suba $02         3190  suba(2)                         #46
              0ba9 c216  st   [$16]       3191  st([vPC])                       #47
              0baa e0cb  jmp  y,$cb       3192  jmp(Y,'REENTER')                #48
              0bab 00e6  ld   $e6         3193  ld(-52/2)                       #49
                                          3194  label('.sysSs#40')
.sysSs#40:    0bac c218  st   [$18]       3195  st([vAC])                       #40 Stop sending bits, no error
              0bad c219  st   [$19]       3196  st([vAC+1])                     #41
              0bae e0cb  jmp  y,$cb       3197  jmp(Y,'REENTER')                #42
              0baf 00e9  ld   $e9         3198  ld(-46/2)                       #43
                                          3199
                                          3200  # CALLI implementation (vCPU instruction)
                                          3201  label('calli#13')
calli#13:     0bb0 8003  adda $03         3202  adda(3)                         #13,43
              0bb1 c21a  st   [$1a]       3203  st([vLR])                       #14
              0bb2 0117  ld   [$17]       3204  ld([vPC+1])                     #15
              0bb3 d61b  st   [$1b],y     3205  st([vLR+1],Y)                   #16
              0bb4 0d00  ld   [y,x]       3206  ld([Y,X])                       #17
              0bb5 de00  st   [y,x++]     3207  st([Y,Xpp])                     #18 Just X++
              0bb6 a002  suba $02         3208  suba(2)                         #19
              0bb7 c216  st   [$16]       3209  st([vPC])                       #20
              0bb8 0d00  ld   [y,x]       3210  ld([Y,X])                       #21
              0bb9 1403  ld   $03,y       3211  ld(hi('REENTER_28'),Y)          #22
              0bba e0ca  jmp  y,$ca       3212  jmp(Y,'REENTER_28')             #23
              0bbb c217  st   [$17]       3213  st([vPC+1])                     #24
                                          3214
                                          3215  # -------------------------------------------------------------
                                          3216  # vCPU instructions for comparisons between two 16-bit operands
                                          3217  # -------------------------------------------------------------
                                          3218  #
                                          3219  # vCPU's conditional branching (BCC) always compares vAC against 0,
                                          3220  # treating vAC as a two's complement 16-bit number. When we need to
                                          3221  # compare two arbitrary numnbers we normally first take their difference
                                          3222  # with SUBW.  However, when this difference is too large, the subtraction
                                          3223  # overflows and we get the wrong outcome. To get it right over the
                                          3224  # entire range, an elaborate sequence is needed. TinyBASIC uses this
                                          3225  # blurp for its relational operators. (It compares stack variable $02
                                          3226  # with zero page variable $3a.)
                                          3227  #
                                          3228  #       0461  ee 02            LDLW  $02
                                          3229  #       0463  fc 3a            XORW  $3a
                                          3230  #       0465  35 53 6a         BGE   $046c
                                          3231  #       0468  ee 02            LDLW  $02
                                          3232  #       046a  90 6e            BRA   $0470
                                          3233  #       046c  ee 02            LDLW  $02
                                          3234  #       046e  b8 3a            SUBW  $3a
                                          3235  #       0470  35 56 73         BLE   $0475
                                          3236  #
                                          3237  # The CMPHS and CMPHU instructions were introduced to simplify this.
                                          3238  # They inspect both operands to see if there is an overflow risk. If
                                          3239  # so, they modify vAC such that their difference gets smaller, while
                                          3240  # preserving the relation between the two operands. After that, the
                                          3241  # SUBW instruction can't overflow and we achieve a correct comparison.
                                          3242  # Use CMPHS for signed comparisons and CMPHU for unsigned. With these,
                                          3243  # the sequence above becomes:
                                          3244  #
                                          3245  #       0461  ee 02            LDLW  $02
                                          3246  #       0463  1f 3b            CMPHS $3b        Note: high byte of operand
                                          3247  #       0465  b8 3a            SUBW  $3a
                                          3248  #       0467  35 56 73         BLE   $0475
                                          3249  #
                                          3250  # CMPHS/CMPHU don't make much sense other than in combination with
                                          3251  # SUBW. These modify vACH, if needed, as given in the following table:
                                          3252  #
                                          3253  #       vACH  varH  |     vACH
                                          3254  #       bit7  bit7  | CMPHS  CMPHU
                                          3255  #       ---------------------------
                                          3256  #         0     0   |  vACH   vACH      no change needed
                                          3257  #         0     1   | varH+1 varH-1     narrowing the range
                                          3258  #         1     0   | varH-1 varH+1     narrowing the range
                                          3259  #         1     1   |  vACH   vACH      no change needed
                                          3260  #       ---------------------------
                                          3261
                                          3262  # CMPHS implementation (vCPU instruction)
                                          3263  label('cmphs#13')
cmphs#13:     0bbc 1403  ld   $03,y       3264  ld(hi('REENTER'),Y)             #13
              0bbd 0500  ld   [x]         3265  ld([X])                         #14
              0bbe 6119  xora [$19]       3266  xora([vAC+1])                   #15
              0bbf f4d0  bge  .cmphu#18   3267  bpl('.cmphu#18')                #16 Skip if same sign
              0bc0 0119  ld   [$19]       3268  ld([vAC+1])                     #17
              0bc1 e8c4  blt  $0bc4       3269  bmi(pc()+3)                     #18
              0bc2 fcc5  bra  .cmphs#21   3270  bra(pc()+3)                     #19
                                          3271  label('.cmphs#20')
.cmphs#20:    0bc3 0001  ld   $01         3272  ld(+1)                          #20    vAC < variable
              0bc4 00ff  ld   $ff         3273  ld(-1)                          #20(!) vAC > variable
                                          3274  label('.cmphs#21')
.cmphs#21:    0bc5 8500  adda [x]         3275  adda([X])                       #21
              0bc6 c219  st   [$19]       3276  st([vAC+1])                     #22
              0bc7 e0ca  jmp  y,$ca       3277  jmp(Y,'REENTER_28')             #23
                                          3278  #dummy()                        #24 Overlap
                                          3279  #
                                          3280  # CMPHS implementation (vCPU instruction)
                                          3281  label('cmphu#13')
cmphu#13:     0bc8 1403  ld   $03,y       3282  ld(hi('REENTER'),Y)             #13,24
              0bc9 0500  ld   [x]         3283  ld([X])                         #14
              0bca 6119  xora [$19]       3284  xora([vAC+1])                   #15
              0bcb f4d0  bge  .cmphu#18   3285  bpl('.cmphu#18')                #16 Skip if same sign
              0bcc 0119  ld   [$19]       3286  ld([vAC+1])                     #17
              0bcd e8c3  blt  .cmphs#20   3287  bmi('.cmphs#20')                #18
              0bce fcc5  bra  .cmphs#21   3288  bra('.cmphs#21')                #19
              0bcf 00ff  ld   $ff         3289  ld(-1)                          #20    vAC > variable
                                          3290
                                          3291  # No-operation for CMPHS/CMPHU when high bits are equal
                                          3292  label('.cmphu#18')
.cmphu#18:    0bd0 e0cb  jmp  y,$cb       3293  jmp(Y,'REENTER')                #18
              0bd1 00f5  ld   $f5         3294  ld(-22/2)                       #19
                                          3295
                                          3296  #-----------------------------------------------------------------------
                                          3297  #
                                          3298  #  $0c00 ROM page 12: More SYS functions (sprites)
                                          3299  #
                                          3300  #       Page 1: vertical blank interval
                                          3301  #       Page 2: visible scanlines
                                          3302  #
                                          3303  #-----------------------------------------------------------------------
                                          3304
              0bd2 0200  nop              3305  align(0x100, size=0x100)
              0bd3 0200  nop
              0bd4 0200  nop
              * 46 times
                                          3306
                                          3307  #-----------------------------------------------------------------------
                                          3308  # Extension SYS_Sprite6_v3_64
                                          3309  # Extension SYS_Sprite6x_v3_64
                                          3310  # Extension SYS_Sprite6y_v3_64
                                          3311  # Extension SYS_Sprite6xy_v3_64
                                          3312  #-----------------------------------------------------------------------
                                          3313
                                          3314  # Blit sprite in screen memory
                                          3315  #
                                          3316  # Variables
                                          3317  #       vAC             Destination address in screen
                                          3318  #       sysArgs[0:1]    Source address of 6xY pixels (colors 0..63) terminated
                                          3319  #                       by negative byte value N (typically N = -Y)
                                          3320  #       sysArgs[2:7]    Scratch (user as copy buffer)
                                          3321  #
                                          3322  # This SYS function draws a sprite of 6 pixels wide and Y pixels high.
                                          3323  # The pixel data is read sequentually from RAM, in horizontal chunks
                                          3324  # of 6 pixels at a time, and then written to the screen through the
                                          3325  # destination pointer (each chunk underneath the previous), thus
                                          3326  # drawing a 6xY stripe. Pixel values should be non-negative. The first
                                          3327  # negative byte N after a chunk signals the end of the sprite data.
                                          3328  # So the sprite's height Y is determined by the source data and is
                                          3329  # therefore flexible. This negative byte value, typically N == -Y,
                                          3330  # is then used to adjust the destination pointer's high byte, to make
                                          3331  # it easier to draw sprites wider than 6 pixels: just repeat the SYS
                                          3332  # call for as many 6-pixel wide stripes you need. All arguments are
                                          3333  # already left in place to facilitate this. After one call, the source
                                          3334  # pointer will point past that source data, effectively:
                                          3335  #       src += Y * 6 + 1
                                          3336  # The destination pointer will have been adjusted as:
                                          3337  #       dst += (Y + N) * 256 + 6
                                          3338  # (With arithmetic wrapping around on the same memory page)
                                          3339  #
                                          3340  # Y is only limited by source memory, not by CPU cycles. The
                                          3341  # implementation is such that the SYS function self-repeats, each
                                          3342  # time drawing the next 6-pixel chunk. It can typically draw 12
                                          3343  # pixels per scanline this way.
                                          3344
                                          3345  label('SYS_Sprite6_v3_64')
                                          3346
SYS_Sprite6_v3_64:
              0c00 1124  ld   [$24],x     3347  ld([sysArgs+0],X)               #15 Pixel data source address
              0c01 1525  ld   [$25],y     3348  ld([sysArgs+1],Y)               #16
              0c02 0d00  ld   [y,x]       3349  ld([Y,X])                       #17 Next pixel or stop
              0c03 f411  bge  .sysDpx0    3350  bpl('.sysDpx0')                 #18
              0c04 de00  st   [y,x++]     3351  st([Y,Xpp])                     #19 Just X++
                                          3352
              0c05 8119  adda [$19]       3353  adda([vAC+1])                   #20 Adjust dst for convenience
              0c06 c219  st   [$19]       3354  st([vAC+1])                     #21
              0c07 0118  ld   [$18]       3355  ld([vAC])                       #22
              0c08 8006  adda $06         3356  adda(6)                         #23
              0c09 c218  st   [$18]       3357  st([vAC])                       #24
              0c0a 0124  ld   [$24]       3358  ld([sysArgs+0])                 #25 Adjust src for convenience
              0c0b 8001  adda $01         3359  adda(1)                         #26
              0c0c c224  st   [$24]       3360  st([sysArgs+0])                 #27
              0c0d 0200  nop              3361  nop()                           #28
              0c0e 1403  ld   $03,y       3362  ld(hi('REENTER'),Y)             #29 Normal exit (no self-repeat)
              0c0f e0cb  jmp  y,$cb       3363  jmp(Y,'REENTER')                #30
              0c10 00ef  ld   $ef         3364  ld(-34/2)                       #31
                                          3365
                                          3366  label('.sysDpx0')
.sysDpx0:     0c11 c226  st   [$26]       3367  st([sysArgs+2])                 #20 Gobble 6 pixels into buffer
              0c12 0d00  ld   [y,x]       3368  ld([Y,X])                       #21
              0c13 de00  st   [y,x++]     3369  st([Y,Xpp])                     #22 Just X++
              0c14 c227  st   [$27]       3370  st([sysArgs+3])                 #23
              0c15 0d00  ld   [y,x]       3371  ld([Y,X])                       #24
              0c16 de00  st   [y,x++]     3372  st([Y,Xpp])                     #25 Just X++
              0c17 c228  st   [$28]       3373  st([sysArgs+4])                 #26
              0c18 0d00  ld   [y,x]       3374  ld([Y,X])                       #27
              0c19 de00  st   [y,x++]     3375  st([Y,Xpp])                     #28 Just X++
              0c1a c229  st   [$29]       3376  st([sysArgs+5])                 #29
              0c1b 0d00  ld   [y,x]       3377  ld([Y,X])                       #30
              0c1c de00  st   [y,x++]     3378  st([Y,Xpp])                     #31 Just X++
              0c1d c22a  st   [$2a]       3379  st([sysArgs+6])                 #32
              0c1e 0d00  ld   [y,x]       3380  ld([Y,X])                       #33
              0c1f de00  st   [y,x++]     3381  st([Y,Xpp])                     #34 Just X++
              0c20 c22b  st   [$2b]       3382  st([sysArgs+7])                 #35
                                          3383
              0c21 1118  ld   [$18],x     3384  ld([vAC],X)                     #36 Screen memory destination address
              0c22 1519  ld   [$19],y     3385  ld([vAC+1],Y)                   #37
              0c23 0126  ld   [$26]       3386  ld([sysArgs+2])                 #38 Write 6 pixels
              0c24 de00  st   [y,x++]     3387  st([Y,Xpp])                     #39
              0c25 0127  ld   [$27]       3388  ld([sysArgs+3])                 #40
              0c26 de00  st   [y,x++]     3389  st([Y,Xpp])                     #41
              0c27 0128  ld   [$28]       3390  ld([sysArgs+4])                 #42
              0c28 de00  st   [y,x++]     3391  st([Y,Xpp])                     #43
              0c29 0129  ld   [$29]       3392  ld([sysArgs+5])                 #44
              0c2a de00  st   [y,x++]     3393  st([Y,Xpp])                     #45
              0c2b 012a  ld   [$2a]       3394  ld([sysArgs+6])                 #46
              0c2c de00  st   [y,x++]     3395  st([Y,Xpp])                     #47
              0c2d 012b  ld   [$2b]       3396  ld([sysArgs+7])                 #48
              0c2e de00  st   [y,x++]     3397  st([Y,Xpp])                     #49
                                          3398
              0c2f 0124  ld   [$24]       3399  ld([sysArgs+0])                 #50 src += 6
              0c30 8006  adda $06         3400  adda(6)                         #51
              0c31 c224  st   [$24]       3401  st([sysArgs+0])                 #52
              0c32 0119  ld   [$19]       3402  ld([vAC+1])                     #53 dst += 256
              0c33 8001  adda $01         3403  adda(1)                         #54
              0c34 c219  st   [$19]       3404  st([vAC+1])                     #55
                                          3405
              0c35 0116  ld   [$16]       3406  ld([vPC])                       #56 Self-repeating SYS call
              0c36 a002  suba $02         3407  suba(2)                         #57
              0c37 c216  st   [$16]       3408  st([vPC])                       #58
              0c38 1403  ld   $03,y       3409  ld(hi('REENTER'),Y)             #59
              0c39 e0cb  jmp  y,$cb       3410  jmp(Y,'REENTER')                #60
              0c3a 00e0  ld   $e0         3411  ld(-64/2)                       #61
                                          3412
              0c3b 0200  nop              3413  align(64)
              0c3c 0200  nop
              0c3d 0200  nop
              * 5 times
                                          3414  label('SYS_Sprite6x_v3_64')
                                          3415
SYS_Sprite6x_v3_64:
              0c40 1124  ld   [$24],x     3416  ld([sysArgs+0],X)               #15 Pixel data source address
              0c41 1525  ld   [$25],y     3417  ld([sysArgs+1],Y)               #16
              0c42 0d00  ld   [y,x]       3418  ld([Y,X])                       #17 Next pixel or stop
              0c43 f451  bge  .sysDpx1    3419  bpl('.sysDpx1')                 #18
              0c44 de00  st   [y,x++]     3420  st([Y,Xpp])                     #19 Just X++
                                          3421
              0c45 8119  adda [$19]       3422  adda([vAC+1])                   #20 Adjust dst for convenience
              0c46 c219  st   [$19]       3423  st([vAC+1])                     #21
              0c47 0118  ld   [$18]       3424  ld([vAC])                       #22
              0c48 a006  suba $06         3425  suba(6)                         #23
              0c49 c218  st   [$18]       3426  st([vAC])                       #24
              0c4a 0124  ld   [$24]       3427  ld([sysArgs+0])                 #25 Adjust src for convenience
              0c4b 8001  adda $01         3428  adda(1)                         #26
              0c4c c224  st   [$24]       3429  st([sysArgs+0])                 #27
              0c4d 0200  nop              3430  nop()                           #28
              0c4e 1403  ld   $03,y       3431  ld(hi('REENTER'),Y)             #29 Normal exit (no self-repeat)
              0c4f e0cb  jmp  y,$cb       3432  jmp(Y,'REENTER')                #30
              0c50 00ef  ld   $ef         3433  ld(-34/2)                       #31
                                          3434
                                          3435  label('.sysDpx1')
.sysDpx1:     0c51 c22b  st   [$2b]       3436  st([sysArgs+7])                 #20 Gobble 6 pixels into buffer (backwards)
              0c52 0d00  ld   [y,x]       3437  ld([Y,X])                       #21
              0c53 de00  st   [y,x++]     3438  st([Y,Xpp])                     #22 Just X++
              0c54 c22a  st   [$2a]       3439  st([sysArgs+6])                 #23
              0c55 0d00  ld   [y,x]       3440  ld([Y,X])                       #24
              0c56 de00  st   [y,x++]     3441  st([Y,Xpp])                     #25 Just X++
              0c57 c229  st   [$29]       3442  st([sysArgs+5])                 #26
              0c58 0d00  ld   [y,x]       3443  ld([Y,X])                       #27
              0c59 de00  st   [y,x++]     3444  st([Y,Xpp])                     #28 Just X++
              0c5a c228  st   [$28]       3445  st([sysArgs+4])                 #29
              0c5b 0d00  ld   [y,x]       3446  ld([Y,X])                       #30
              0c5c de00  st   [y,x++]     3447  st([Y,Xpp])                     #31 Just X++
              0c5d c227  st   [$27]       3448  st([sysArgs+3])                 #32
              0c5e 0d00  ld   [y,x]       3449  ld([Y,X])                       #33
              0c5f de00  st   [y,x++]     3450  st([Y,Xpp])                     #34 Just X++
                                          3451
              0c60 1118  ld   [$18],x     3452  ld([vAC],X)                     #35 Screen memory destination address
              0c61 1519  ld   [$19],y     3453  ld([vAC+1],Y)                   #36
              0c62 de00  st   [y,x++]     3454  st([Y,Xpp])                     #37 Write 6 pixels
              0c63 0127  ld   [$27]       3455  ld([sysArgs+3])                 #38
              0c64 de00  st   [y,x++]     3456  st([Y,Xpp])                     #39
              0c65 0128  ld   [$28]       3457  ld([sysArgs+4])                 #40
              0c66 de00  st   [y,x++]     3458  st([Y,Xpp])                     #41
              0c67 0129  ld   [$29]       3459  ld([sysArgs+5])                 #42
              0c68 de00  st   [y,x++]     3460  st([Y,Xpp])                     #43
              0c69 012a  ld   [$2a]       3461  ld([sysArgs+6])                 #44
              0c6a de00  st   [y,x++]     3462  st([Y,Xpp])                     #45
              0c6b 012b  ld   [$2b]       3463  ld([sysArgs+7])                 #46
              0c6c de00  st   [y,x++]     3464  st([Y,Xpp])                     #47
                                          3465
              0c6d 0124  ld   [$24]       3466  ld([sysArgs+0])                 #48 src += 6
              0c6e 8006  adda $06         3467  adda(6)                         #49
              0c6f c224  st   [$24]       3468  st([sysArgs+0])                 #50
              0c70 0119  ld   [$19]       3469  ld([vAC+1])                     #51 dst += 256
              0c71 8001  adda $01         3470  adda(1)                         #52
              0c72 c219  st   [$19]       3471  st([vAC+1])                     #53
                                          3472
              0c73 0116  ld   [$16]       3473  ld([vPC])                       #54 Self-repeating SYS call
              0c74 a002  suba $02         3474  suba(2)                         #55
              0c75 c216  st   [$16]       3475  st([vPC])                       #56
              0c76 1403  ld   $03,y       3476  ld(hi('REENTER'),Y)             #57
              0c77 e0cb  jmp  y,$cb       3477  jmp(Y,'REENTER')                #58
              0c78 00e1  ld   $e1         3478  ld(-62/2)                       #59
                                          3479
              0c79 0200  nop              3480  align(64)
              0c7a 0200  nop
              0c7b 0200  nop
              * 7 times
                                          3481  label('SYS_Sprite6y_v3_64')
                                          3482
SYS_Sprite6y_v3_64:
              0c80 1124  ld   [$24],x     3483  ld([sysArgs+0],X)               #15 Pixel data source address
              0c81 1525  ld   [$25],y     3484  ld([sysArgs+1],Y)               #16
              0c82 0d00  ld   [y,x]       3485  ld([Y,X])                       #17 Next pixel or stop
              0c83 f493  bge  .sysDpx2    3486  bpl('.sysDpx2')                 #18
              0c84 de00  st   [y,x++]     3487  st([Y,Xpp])                     #19 Just X++
                                          3488
              0c85 60ff  xora $ff         3489  xora(255)                       #20 Adjust dst for convenience
              0c86 8001  adda $01         3490  adda(1)                         #21
              0c87 8119  adda [$19]       3491  adda([vAC+1])                   #22
              0c88 c219  st   [$19]       3492  st([vAC+1])                     #23
              0c89 0118  ld   [$18]       3493  ld([vAC])                       #24
              0c8a 8006  adda $06         3494  adda(6)                         #25
              0c8b c218  st   [$18]       3495  st([vAC])                       #26
              0c8c 0124  ld   [$24]       3496  ld([sysArgs+0])                 #27 Adjust src for convenience
              0c8d 8001  adda $01         3497  adda(1)                         #28
              0c8e c224  st   [$24]       3498  st([sysArgs+0])                 #29
              0c8f 0200  nop              3499  nop()                           #30
              0c90 1403  ld   $03,y       3500  ld(hi('REENTER'),Y)             #31 Normal exit (no self-repeat)
              0c91 e0cb  jmp  y,$cb       3501  jmp(Y,'REENTER')                #32
              0c92 00ee  ld   $ee         3502  ld(-36/2)                       #33
                                          3503
                                          3504  label('.sysDpx2')
.sysDpx2:     0c93 c226  st   [$26]       3505  st([sysArgs+2])                 #20 Gobble 6 pixels into buffer
              0c94 0d00  ld   [y,x]       3506  ld([Y,X])                       #21
              0c95 de00  st   [y,x++]     3507  st([Y,Xpp])                     #22 Just X++
              0c96 c227  st   [$27]       3508  st([sysArgs+3])                 #23
              0c97 0d00  ld   [y,x]       3509  ld([Y,X])                       #24
              0c98 de00  st   [y,x++]     3510  st([Y,Xpp])                     #25 Just X++
              0c99 c228  st   [$28]       3511  st([sysArgs+4])                 #26
              0c9a 0d00  ld   [y,x]       3512  ld([Y,X])                       #27
              0c9b de00  st   [y,x++]     3513  st([Y,Xpp])                     #28 Just X++
              0c9c c229  st   [$29]       3514  st([sysArgs+5])                 #29
              0c9d 0d00  ld   [y,x]       3515  ld([Y,X])                       #30
              0c9e de00  st   [y,x++]     3516  st([Y,Xpp])                     #31 Just X++
              0c9f c22a  st   [$2a]       3517  st([sysArgs+6])                 #32
              0ca0 0d00  ld   [y,x]       3518  ld([Y,X])                       #33
              0ca1 de00  st   [y,x++]     3519  st([Y,Xpp])                     #34 Just X++
              0ca2 c22b  st   [$2b]       3520  st([sysArgs+7])                 #35
                                          3521
              0ca3 1118  ld   [$18],x     3522  ld([vAC],X)                     #36 Screen memory destination address
              0ca4 1519  ld   [$19],y     3523  ld([vAC+1],Y)                   #37
              0ca5 0126  ld   [$26]       3524  ld([sysArgs+2])                 #38 Write 6 pixels
              0ca6 de00  st   [y,x++]     3525  st([Y,Xpp])                     #39
              0ca7 0127  ld   [$27]       3526  ld([sysArgs+3])                 #40
              0ca8 de00  st   [y,x++]     3527  st([Y,Xpp])                     #41
              0ca9 0128  ld   [$28]       3528  ld([sysArgs+4])                 #42
              0caa de00  st   [y,x++]     3529  st([Y,Xpp])                     #43
              0cab 0129  ld   [$29]       3530  ld([sysArgs+5])                 #44
              0cac de00  st   [y,x++]     3531  st([Y,Xpp])                     #45
              0cad 012a  ld   [$2a]       3532  ld([sysArgs+6])                 #46
              0cae de00  st   [y,x++]     3533  st([Y,Xpp])                     #47
              0caf 012b  ld   [$2b]       3534  ld([sysArgs+7])                 #48
              0cb0 de00  st   [y,x++]     3535  st([Y,Xpp])                     #49
                                          3536
              0cb1 0124  ld   [$24]       3537  ld([sysArgs+0])                 #50 src += 6
              0cb2 8006  adda $06         3538  adda(6)                         #51
              0cb3 c224  st   [$24]       3539  st([sysArgs+0])                 #52
              0cb4 0119  ld   [$19]       3540  ld([vAC+1])                     #53 dst -= 256
              0cb5 a001  suba $01         3541  suba(1)                         #54
              0cb6 c219  st   [$19]       3542  st([vAC+1])                     #55
                                          3543
              0cb7 0116  ld   [$16]       3544  ld([vPC])                       #56 Self-repeating SYS call
              0cb8 a002  suba $02         3545  suba(2)                         #57
              0cb9 c216  st   [$16]       3546  st([vPC])                       #58
              0cba 1403  ld   $03,y       3547  ld(hi('REENTER'),Y)             #59
              0cbb e0cb  jmp  y,$cb       3548  jmp(Y,'REENTER')                #60
              0cbc 00e0  ld   $e0         3549  ld(-64/2)                       #61
                                          3550
              0cbd 0200  nop              3551  align(64)
              0cbe 0200  nop
              0cbf 0200  nop
                                          3552  label('SYS_Sprite6xy_v3_64')
                                          3553
SYS_Sprite6xy_v3_64:
              0cc0 1124  ld   [$24],x     3554  ld([sysArgs+0],X)               #15 Pixel data source address
              0cc1 1525  ld   [$25],y     3555  ld([sysArgs+1],Y)               #16
              0cc2 0d00  ld   [y,x]       3556  ld([Y,X])                       #17 Next pixel or stop
              0cc3 f4d3  bge  .sysDpx3    3557  bpl('.sysDpx3')                 #18
              0cc4 de00  st   [y,x++]     3558  st([Y,Xpp])                     #19 Just X++
                                          3559
              0cc5 60ff  xora $ff         3560  xora(255)                       #20 Adjust dst for convenience
              0cc6 8001  adda $01         3561  adda(1)                         #21
              0cc7 8119  adda [$19]       3562  adda([vAC+1])                   #22
              0cc8 c219  st   [$19]       3563  st([vAC+1])                     #23
              0cc9 0118  ld   [$18]       3564  ld([vAC])                       #24
              0cca a006  suba $06         3565  suba(6)                         #25
              0ccb c218  st   [$18]       3566  st([vAC])                       #26
              0ccc 0124  ld   [$24]       3567  ld([sysArgs+0])                 #27 Adjust src for convenience
              0ccd 8001  adda $01         3568  adda(1)                         #28
              0cce c224  st   [$24]       3569  st([sysArgs+0])                 #29
              0ccf 0200  nop              3570  nop()                           #30
              0cd0 1403  ld   $03,y       3571  ld(hi('REENTER'),Y)             #31 Normal exit (no self-repeat)
              0cd1 e0cb  jmp  y,$cb       3572  jmp(Y,'REENTER')                #32
              0cd2 00ee  ld   $ee         3573  ld(-36/2)                       #33
                                          3574
                                          3575  label('.sysDpx3')
.sysDpx3:     0cd3 c22b  st   [$2b]       3576  st([sysArgs+7])                 #20 Gobble 6 pixels into buffer (backwards)
              0cd4 0d00  ld   [y,x]       3577  ld([Y,X])                       #21
              0cd5 de00  st   [y,x++]     3578  st([Y,Xpp])                     #22 Just X++
              0cd6 c22a  st   [$2a]       3579  st([sysArgs+6])                 #23
              0cd7 0d00  ld   [y,x]       3580  ld([Y,X])                       #24
              0cd8 de00  st   [y,x++]     3581  st([Y,Xpp])                     #25 Just X++
              0cd9 c229  st   [$29]       3582  st([sysArgs+5])                 #26
              0cda 0d00  ld   [y,x]       3583  ld([Y,X])                       #27
              0cdb de00  st   [y,x++]     3584  st([Y,Xpp])                     #28 Just X++
              0cdc c228  st   [$28]       3585  st([sysArgs+4])                 #29
              0cdd 0d00  ld   [y,x]       3586  ld([Y,X])                       #30
              0cde de00  st   [y,x++]     3587  st([Y,Xpp])                     #31 Just X++
              0cdf c227  st   [$27]       3588  st([sysArgs+3])                 #32
              0ce0 0d00  ld   [y,x]       3589  ld([Y,X])                       #33
              0ce1 de00  st   [y,x++]     3590  st([Y,Xpp])                     #34 Just X++
                                          3591
              0ce2 1118  ld   [$18],x     3592  ld([vAC],X)                     #35 Screen memory destination address
              0ce3 1519  ld   [$19],y     3593  ld([vAC+1],Y)                   #36
              0ce4 de00  st   [y,x++]     3594  st([Y,Xpp])                     #37 Write 6 pixels
              0ce5 0127  ld   [$27]       3595  ld([sysArgs+3])                 #38
              0ce6 de00  st   [y,x++]     3596  st([Y,Xpp])                     #39
              0ce7 0128  ld   [$28]       3597  ld([sysArgs+4])                 #40
              0ce8 de00  st   [y,x++]     3598  st([Y,Xpp])                     #41
              0ce9 0129  ld   [$29]       3599  ld([sysArgs+5])                 #42
              0cea de00  st   [y,x++]     3600  st([Y,Xpp])                     #43
              0ceb 012a  ld   [$2a]       3601  ld([sysArgs+6])                 #44
              0cec de00  st   [y,x++]     3602  st([Y,Xpp])                     #45
              0ced 012b  ld   [$2b]       3603  ld([sysArgs+7])                 #46
              0cee de00  st   [y,x++]     3604  st([Y,Xpp])                     #47
                                          3605
              0cef 0124  ld   [$24]       3606  ld([sysArgs+0])                 #48 src += 6
              0cf0 8006  adda $06         3607  adda(6)                         #49
              0cf1 c224  st   [$24]       3608  st([sysArgs+0])                 #50
              0cf2 0119  ld   [$19]       3609  ld([vAC+1])                     #51 dst -= 256
              0cf3 a001  suba $01         3610  suba(1)                         #52
              0cf4 c219  st   [$19]       3611  st([vAC+1])                     #53
                                          3612
              0cf5 0116  ld   [$16]       3613  ld([vPC])                       #54 Self-repeating SYS call
              0cf6 a002  suba $02         3614  suba(2)                         #55
              0cf7 c216  st   [$16]       3615  st([vPC])                       #56
              0cf8 1403  ld   $03,y       3616  ld(hi('REENTER'),Y)             #57
              0cf9 e0cb  jmp  y,$cb       3617  jmp(Y,'REENTER')                #58
              0cfa 00e1  ld   $e1         3618  ld(-62/2)                       #59
                                          3619
                                          3620  #-----------------------------------------------------------------------
                                          3621
                                          3622  label('sys_ExpanderControl')
                                          3623
sys_ExpanderControl:
              0cfb 2118  anda [$18]       3624  anda([vAC])                     #18
              0cfc d218  st   [$18],x     3625  st([vAC],X)                     #19
              0cfd 1401  ld   $01,y       3626  ld(hi(ctrlBits),Y)              #20
              0cfe caf8  st   [y,$f8]     3627  st([Y,ctrlBits])                #21 Set control variable
              0cff 1519  ld   [$19],y     3628  ld([vAC+1],Y)                   #22 MOSI (A15)
              0d00 cd00  ctrl y,x         3629  ctrl(Y,X)                       #23 Try set the expander control register
                                          3630
              0d01 0127  ld   [$27]       3631  ld([sysArgs+3])                 #24 Prepare for SYS_SpiExchangeBytes
                                          3632  assert pc()&255 < 255-3         # Beware of page crossing: asm.py won't warn
              0d02 ec05  bne  $0d05       3633  bne(pc()+3)                     #25
              0d03 fc05  bra  $0d05       3634  bra(pc()+2)                     #26
              0d04 0125  ld   [$25]       3635  ld([sysArgs+1])                 #27
              0d05 c227  st   [$27]       3636  st([sysArgs+3])                 #27,28 (must be idempotent)
                                          3637
              0d06 1403  ld   $03,y       3638  ld(hi('REENTER'),Y)             #29
              0d07 e0cb  jmp  y,$cb       3639  jmp(Y,'REENTER')                #30
              0d08 00ef  ld   $ef         3640  ld(-34/2)                       #31
                                          3641
                                          3642  #-----------------------------------------------------------------------
                                          3643
                                          3644  label('sys_SpiExchangeBytes')
                                          3645
sys_SpiExchangeBytes:
              0d09 09f8  ld   [y,$f8]     3646  ld([Y,ctrlBits])                #18
              0d0a c228  st   [$28]       3647  st([sysArgs+4])                 #19
                                          3648
              0d0b 1124  ld   [$24],x     3649  ld([sysArgs+0],X)               #20 Fetch byte to send
              0d0c 1525  ld   [$25],y     3650  ld([sysArgs+1],Y)               #21
              0d0d 0d00  ld   [y,x]       3651  ld([Y,X])                       #22
                                          3652
                                          3653  for i in range(8):
                                          3654    st([vTmp],Y);C('Bit %d'%(7-i))#23+i*12
              0d0e d61d  st   [$1d],y     ;Bit 7
              0d0f 1128  ld   [$28],x     3655    ld([sysArgs+4],X)             #24+i*12
              0d10 dd00  ctrl y,x++       3656    ctrl(Y,Xpp)                   #25+i*12 Set MOSI
              0d11 dd00  ctrl y,x++       3657    ctrl(Y,Xpp)                   #26+i*12 Raise SCLK, disable RAM!
              0d12 0100  ld   [$00]       3658    ld([0])                       #27+i*12 Get MISO
              0d13 200f  anda $0f         3659    anda(0b00001111)              #28+i*12 This is why R1 as pull-DOWN is simpler
              0d14 f017  beq  $0d17       3660    beq(pc()+3)                   #29+i*12
              0d15 fc17  bra  $0d17       3661    bra(pc()+2)                   #30+i*12
              0d16 0001  ld   $01         3662    ld(1)                         #31+i*12
              0d17 cd00  ctrl y,x         3663    ctrl(Y,X)                     #32+i*12,29+i*12 (Must be idempotent) Lower SCLK
              0d18 811d  adda [$1d]       3664    adda([vTmp])                  #33+i*12 Shift
              0d19 811d  adda [$1d]       3665    adda([vTmp])                  #34+i*12
              0d1a d61d  st   [$1d],y     ;Bit 6
              0d1b 1128  ld   [$28],x
              0d1c dd00  ctrl y,x++
              0d1d dd00  ctrl y,x++
              0d1e 0100  ld   [$00]
              0d1f 200f  anda $0f
              0d20 f023  beq  $0d23
              0d21 fc23  bra  $0d23
              0d22 0001  ld   $01
              0d23 cd00  ctrl y,x
              0d24 811d  adda [$1d]
              0d25 811d  adda [$1d]
              0d26 d61d  st   [$1d],y     ;Bit 5
              0d27 1128  ld   [$28],x
              0d28 dd00  ctrl y,x++
              0d29 dd00  ctrl y,x++
              0d2a 0100  ld   [$00]
              0d2b 200f  anda $0f
              0d2c f02f  beq  $0d2f
              0d2d fc2f  bra  $0d2f
              0d2e 0001  ld   $01
              0d2f cd00  ctrl y,x
              0d30 811d  adda [$1d]
              0d31 811d  adda [$1d]
              0d32 d61d  st   [$1d],y     ;Bit 4
              0d33 1128  ld   [$28],x
              0d34 dd00  ctrl y,x++
              0d35 dd00  ctrl y,x++
              0d36 0100  ld   [$00]
              0d37 200f  anda $0f
              0d38 f03b  beq  $0d3b
              0d39 fc3b  bra  $0d3b
              0d3a 0001  ld   $01
              0d3b cd00  ctrl y,x
              0d3c 811d  adda [$1d]
              0d3d 811d  adda [$1d]
              0d3e d61d  st   [$1d],y     ;Bit 3
              0d3f 1128  ld   [$28],x
              0d40 dd00  ctrl y,x++
              0d41 dd00  ctrl y,x++
              0d42 0100  ld   [$00]
              0d43 200f  anda $0f
              0d44 f047  beq  $0d47
              0d45 fc47  bra  $0d47
              0d46 0001  ld   $01
              0d47 cd00  ctrl y,x
              0d48 811d  adda [$1d]
              0d49 811d  adda [$1d]
              0d4a d61d  st   [$1d],y     ;Bit 2
              0d4b 1128  ld   [$28],x
              0d4c dd00  ctrl y,x++
              0d4d dd00  ctrl y,x++
              0d4e 0100  ld   [$00]
              0d4f 200f  anda $0f
              0d50 f053  beq  $0d53
              0d51 fc53  bra  $0d53
              0d52 0001  ld   $01
              0d53 cd00  ctrl y,x
              0d54 811d  adda [$1d]
              0d55 811d  adda [$1d]
              0d56 d61d  st   [$1d],y     ;Bit 1
              0d57 1128  ld   [$28],x
              0d58 dd00  ctrl y,x++
              0d59 dd00  ctrl y,x++
              0d5a 0100  ld   [$00]
              0d5b 200f  anda $0f
              0d5c f05f  beq  $0d5f
              0d5d fc5f  bra  $0d5f
              0d5e 0001  ld   $01
              0d5f cd00  ctrl y,x
              0d60 811d  adda [$1d]
              0d61 811d  adda [$1d]
              0d62 d61d  st   [$1d],y     ;Bit 0
              0d63 1128  ld   [$28],x
              0d64 dd00  ctrl y,x++
              0d65 dd00  ctrl y,x++
              0d66 0100  ld   [$00]
              0d67 200f  anda $0f
              0d68 f06b  beq  $0d6b
              0d69 fc6b  bra  $0d6b
              0d6a 0001  ld   $01
              0d6b cd00  ctrl y,x
              0d6c 811d  adda [$1d]
              0d6d 811d  adda [$1d]
                                          3666
              0d6e 1124  ld   [$24],x     3667  ld([sysArgs+0],X)               #119 Store received byte
              0d6f 1527  ld   [$27],y     3668  ld([sysArgs+3],Y)               #120
              0d70 ce00  st   [y,x]       3669  st([Y,X])                       #121
                                          3670
              0d71 0124  ld   [$24]       3671  ld([sysArgs+0])                 #122 Advance pointer
              0d72 8001  adda $01         3672  adda(1)                         #123
              0d73 c224  st   [$24]       3673  st([sysArgs+0])                 #124
                                          3674
              0d74 6126  xora [$26]       3675  xora([sysArgs+2])               #125 Reached end?
              0d75 f07c  beq  .sysSpi#128 3676  beq('.sysSpi#128')              #126
                                          3677
              0d76 0116  ld   [$16]       3678  ld([vPC])                       #127 Self-repeating SYS call
              0d77 a002  suba $02         3679  suba(2)                         #128
              0d78 c216  st   [$16]       3680  st([vPC])                       #129
              0d79 1403  ld   $03,y       3681  ld(hi('NEXTY'),Y)               #130
              0d7a e000  jmp  y,$00       3682  jmp(Y,'NEXTY')                  #131
              0d7b 00bd  ld   $bd         3683  ld(-134/2)                      #132
                                          3684
                                          3685  label('.sysSpi#128')
.sysSpi#128:  0d7c 1403  ld   $03,y       3686  ld(hi('NEXTY'),Y)               #128 Continue program
              0d7d e000  jmp  y,$00       3687  jmp(Y,'NEXTY')                  #129
              0d7e 00be  ld   $be         3688  ld(-132/2)                      #130
                                          3689
                                          3690  #-----------------------------------------------------------------------
                                          3691
                                          3692  label('sys_v6502')
                                          3693
sys_v6502:    0d7f d605  st   [$05],y     3694  st([vCpuSelect],Y)              #18 Activate v6502
              0d80 00f5  ld   $f5         3695  ld(-22/2)                       #19
              0d81 e0ff  jmp  y,$ff       3696  jmp(Y,'v6502_ENTER')            #20 Transfer control in the same time slice
              0d82 8115  adda [$15]       3697  adda([vTicks])                  #21
                                          3698  assert (38 - 22)//2 >= v6502_adjust
                                          3699
                                          3700  #-----------------------------------------------------------------------
                                          3701  #       MOS 6502 emulator
                                          3702  #-----------------------------------------------------------------------
                                          3703
                                          3704  # Some quirks:
                                          3705  # - Stack in zero page instead of page 1
                                          3706  # - No interrupts
                                          3707  # - No decimal mode (may never be added). D flag is emulated but ignored.
                                          3708  # - BRK switches back to running 16-bits vCPU
                                          3709  # - Illegal opcodes map to BRK, but can read ghost operands before trapping
                                          3710  # - Illegal opcode $ff won't be trapped and cause havoc instead
                                          3711
                                          3712  # Big things TODO:
                                          3713  # XXX Tuning, put most frequent instructions in the primary page
                                          3714
                                          3715  label('v6502_ror')
                                          3716  assert v6502_Cflag == 1
v6502_ror:    0d83 1525  ld   [$25],y     3717  ld([v6502_ADH],Y)               #12
              0d84 00fc  ld   $fc         3718  ld(-46//2+v6502_maxTicks)       #13 Is there enough time for the excess ticks?
              0d85 8115  adda [$15]       3719  adda([vTicks])                  #14
              0d86 e89a  blt  .recheck17  3720  blt('.recheck17')               #15
              0d87 0127  ld   [$27]       3721  ld([v6502_P])                   #16 Transfer C to "bit 8"
              0d88 2001  anda $01         3722  anda(1)                         #17
              0d89 807f  adda $7f         3723  adda(127)                       #18
              0d8a 2080  anda $80         3724  anda(128)                       #19
              0d8b c219  st   [$19]       3725  st([v6502_BI])                  #20 The real 6502 wouldn't use BI for this
              0d8c 0127  ld   [$27]       3726  ld([v6502_P])                   #21 Transfer bit 0 to C
              0d8d 20fe  anda $fe         3727  anda(~1)                        #22
              0d8e c227  st   [$27]       3728  st([v6502_P])                   #23
              0d8f 0d00  ld   [y,x]       3729  ld([Y,X])                       #24
              0d90 2001  anda $01         3730  anda(1)                         #25
              0d91 4127  ora  [$27]       3731  ora([v6502_P])                  #26
              0d92 c227  st   [$27]       3732  st([v6502_P])                   #27
              0d93 00ee  ld   $ee         3733  ld('v6502_ror#38')              #28 Shift table lookup
              0d94 c21d  st   [$1d]       3734  st([vTmp])                      #29
              0d95 0d00  ld   [y,x]       3735  ld([Y,X])                       #30
              0d96 20fe  anda $fe         3736  anda(~1)                        #31
              0d97 1405  ld   $05,y       3737  ld(hi('shiftTable'),Y)          #32
              0d98 e200  jmp  y,ac        3738  jmp(Y,AC)                       #33
              0d99 fcff  bra  $ff         3739  bra(255)                        #34 bra shiftTable+255
                                          3740  label('.recheck17')
.recheck17:   0d9a 140e  ld   $0e,y       3741  ld(hi('v6502_check'),Y)         #17 Go back to time check before dispatch
              0d9b e0f2  jmp  y,$f2       3742  jmp(Y,'v6502_check')            #18
              0d9c 00f6  ld   $f6         3743  ld(-20/2)                       #19
                                          3744
                                          3745  label('v6502_lsr')
                                          3746  assert v6502_Cflag == 1
v6502_lsr:    0d9d 1525  ld   [$25],y     3747  ld([v6502_ADH],Y)               #12
              0d9e 0127  ld   [$27]       3748  ld([v6502_P])                   #13 Transfer bit 0 to C
              0d9f 20fe  anda $fe         3749  anda(~1)                        #14
              0da0 c227  st   [$27]       3750  st([v6502_P])                   #15
              0da1 0d00  ld   [y,x]       3751  ld([Y,X])                       #16
              0da2 2001  anda $01         3752  anda(1)                         #17
              0da3 4127  ora  [$27]       3753  ora([v6502_P])                  #18
              0da4 c227  st   [$27]       3754  st([v6502_P])                   #19
              0da5 00e7  ld   $e7         3755  ld('v6502_lsr#30')              #20 Shift table lookup
              0da6 c21d  st   [$1d]       3756  st([vTmp])                      #21
              0da7 0d00  ld   [y,x]       3757  ld([Y,X])                       #22
              0da8 20fe  anda $fe         3758  anda(~1)                        #23
              0da9 1405  ld   $05,y       3759  ld(hi('shiftTable'),Y)          #24
              0daa e200  jmp  y,ac        3760  jmp(Y,AC)                       #25
              0dab fcff  bra  $ff         3761  bra(255)                        #26 bra shiftTable+255
                                          3762
                                          3763  label('v6502_rol')
                                          3764  assert v6502_Cflag == 1
v6502_rol:    0dac 1525  ld   [$25],y     3765  ld([v6502_ADH],Y)               #12
              0dad 0d00  ld   [y,x]       3766  ld([Y,X])                       #13
              0dae 2080  anda $80         3767  anda(0x80)                      #14
              0daf c21d  st   [$1d]       3768  st([v6502_Tmp])                 #15
              0db0 0127  ld   [$27]       3769  ld([v6502_P])                   #16
              0db1 2001  anda $01         3770  anda(1)                         #17
                                          3771  label('.rol#18')
.rol#18:      0db2 8d00  adda [y,x]       3772  adda([Y,X])                     #18
              0db3 8d00  adda [y,x]       3773  adda([Y,X])                     #19
              0db4 ce00  st   [y,x]       3774  st([Y,X])                       #20
              0db5 c228  st   [$28]       3775  st([v6502_Qz])                  #21 Z flag
              0db6 c229  st   [$29]       3776  st([v6502_Qn])                  #22 N flag
              0db7 0127  ld   [$27]       3777  ld([v6502_P])                   #23 C Flag
              0db8 20fe  anda $fe         3778  anda(~1)                        #24
              0db9 111d  ld   [$1d],x     3779  ld([v6502_Tmp],X)               #25
              0dba 4500  ora  [x]         3780  ora([X])                        #26
              0dbb c227  st   [$27]       3781  st([v6502_P])                   #27
              0dbc 140e  ld   $0e,y       3782  ld(hi('v6502_next'),Y)          #28
              0dbd 00f0  ld   $f0         3783  ld(-32/2)                       #29
              0dbe e020  jmp  y,$20       3784  jmp(Y,'v6502_next')             #30
                                          3785  #nop()                          #31 Overlap
                                          3786  #
                                          3787  label('v6502_asl')
v6502_asl:    0dbf 1525  ld   [$25],y     3788  ld([v6502_ADH],Y)               #12,32
              0dc0 0d00  ld   [y,x]       3789  ld([Y,X])                       #13
              0dc1 2080  anda $80         3790  anda(0x80)                      #14
              0dc2 c21d  st   [$1d]       3791  st([v6502_Tmp])                 #15
              0dc3 fcb2  bra  .rol#18     3792  bra('.rol#18')                  #16
              0dc4 0000  ld   $00         3793  ld(0)                           #17
                                          3794
                                          3795  label('v6502_jmp1')
v6502_jmp1:   0dc5 0200  nop              3796  nop()                           #12
              0dc6 0124  ld   [$24]       3797  ld([v6502_ADL])                 #13
              0dc7 c21a  st   [$1a]       3798  st([v6502_PCL])                 #14
              0dc8 0125  ld   [$25]       3799  ld([v6502_ADH])                 #15
              0dc9 c21b  st   [$1b]       3800  st([v6502_PCH])                 #16
              0dca 140e  ld   $0e,y       3801  ld(hi('v6502_next'),Y)          #17
              0dcb e020  jmp  y,$20       3802  jmp(Y,'v6502_next')             #18
              0dcc 00f6  ld   $f6         3803  ld(-20/2)                       #19
                                          3804
                                          3805  label('v6502_jmp2')
v6502_jmp2:   0dcd 0200  nop              3806  nop()                           #12
              0dce 1525  ld   [$25],y     3807  ld([v6502_ADH],Y)               #13
              0dcf 0d00  ld   [y,x]       3808  ld([Y,X])                       #14
              0dd0 de00  st   [y,x++]     3809  st([Y,Xpp])                     #15 (Just X++) Wrap around: bug compatible with NMOS
              0dd1 c21a  st   [$1a]       3810  st([v6502_PCL])                 #16
              0dd2 0d00  ld   [y,x]       3811  ld([Y,X])                       #17
              0dd3 c21b  st   [$1b]       3812  st([v6502_PCH])                 #18
              0dd4 140e  ld   $0e,y       3813  ld(hi('v6502_next'),Y)          #19
              0dd5 e020  jmp  y,$20       3814  jmp(Y,'v6502_next')             #20
              0dd6 00f5  ld   $f5         3815  ld(-22/2)                       #21
                                          3816
                                          3817  label('v6502_pla')
v6502_pla:    0dd7 011c  ld   [$1c]       3818  ld([v6502_S])                   #12
              0dd8 1200  ld   ac,x        3819  ld(AC,X)                        #13
              0dd9 8001  adda $01         3820  adda(1)                         #14
              0dda c21c  st   [$1c]       3821  st([v6502_S])                   #15
              0ddb 0500  ld   [x]         3822  ld([X])                         #16
              0ddc c218  st   [$18]       3823  st([v6502_A])                   #17
              0ddd c228  st   [$28]       3824  st([v6502_Qz])                  #18 Z flag
              0dde c229  st   [$29]       3825  st([v6502_Qn])                  #19 N flag
              0ddf 140e  ld   $0e,y       3826  ld(hi('v6502_next'),Y)          #20
              0de0 00f4  ld   $f4         3827  ld(-24/2)                       #21
              0de1 e020  jmp  y,$20       3828  jmp(Y,'v6502_next')             #22
                                          3829  #nop()                          #23 Overlap
                                          3830  #
                                          3831  label('v6502_pha')
v6502_pha:    0de2 140e  ld   $0e,y       3832  ld(hi('v6502_next'),Y)          #12,24
              0de3 011c  ld   [$1c]       3833  ld([v6502_S])                   #13
              0de4 a001  suba $01         3834  suba(1)                         #14
              0de5 d21c  st   [$1c],x     3835  st([v6502_S],X)                 #15
              0de6 0118  ld   [$18]       3836  ld([v6502_A])                   #16
              0de7 c600  st   [x]         3837  st([X])                         #17
              0de8 e020  jmp  y,$20       3838  jmp(Y,'v6502_next')             #18
              0de9 00f6  ld   $f6         3839  ld(-20/2)                       #19
                                          3840
                                          3841  label('v6502_brk')
v6502_brk:    0dea 0002  ld   $02         3842  ld(hi('ENTER'))                 #12 Switch to vCPU
              0deb c205  st   [$05]       3843  st([vCpuSelect])                #13
                                          3844  assert v6502_A == vAC
              0dec 0000  ld   $00         3845  ld(0)                           #14
              0ded c219  st   [$19]       3846  st([vAC+1])                     #15
              0dee 1403  ld   $03,y       3847  ld(hi('REENTER'),Y)             #16 Switch in the current time slice
              0def 00fb  ld   $fb         3848  ld(-22//2+v6502_adjust)         #17
              0df0 e0cb  jmp  y,$cb       3849  jmp(Y,'REENTER')                #18
              0df1 0200  nop              3850  nop()                           #19
                                          3851
                                          3852  # All interpreter entry points must share the same page offset, because
                                          3853  # this offset is hard-coded as immediate operand in the video driver.
                                          3854  # The Gigatron's original vCPU's 'ENTER' label is already at $2ff, so we
                                          3855  # just use $dff for 'v6502_ENTER'. v6502 actually has two entry points.
                                          3856  # The other is 'v6502_RESUME' at $10ff. It is used for instructions
                                          3857  # that were fetched but not yet executed. Allowing the split gives finer
                                          3858  # granulariy, and hopefully more throughput for the simpler instructions.
                                          3859  # (There is no "overhead" for allowing instruction splitting, because
                                          3860  #  both emulation phases must administer [vTicks] anyway.)
                                          3861  while pc()&255 < 255:
              0df2 0200  nop              3862    nop()
              0df3 0200  nop
              0df4 0200  nop
              * 13 times
                                          3863  label('v6502_ENTER')
v6502_ENTER:  0dff fc22  bra  v6502_next2 3864  bra('v6502_next2')              #0 v6502 primary entry point
                                          3865  # --- Page boundary ---
              0e00 a006  suba $06         3866  suba(v6502_adjust)              #1,19 Adjust for vCPU/v6520 timing differences
                                          3867
                                          3868  #19 Addressing modes
                                          3869  (   'v6502_mode0'  ); bra('v6502_modeIZX'); bra('v6502_modeIMM'); bra('v6502_modeILL') # $00 xxx000xx
              0e01 fce0  bra  v6502_modeIZX
              0e02 fc42  bra  v6502_modeIMM
              0e03 fc58  bra  v6502_modeIMP
                                          3870  bra('v6502_modeZP');  bra('v6502_modeZP');  bra('v6502_modeZP');  bra('v6502_modeILL') # $04 xxx001xx
              0e04 fc5d  bra  v6502_modeZP
              0e05 fc5d  bra  v6502_modeZP
              0e06 fc5d  bra  v6502_modeZP
              0e07 fc58  bra  v6502_modeIMP
                                          3871  bra('v6502_modeIMP'); bra('v6502_modeIMM'); bra('v6502_modeACC'); bra('v6502_modeILL') # $08 xxx010xx
              0e08 fc58  bra  v6502_modeIMP
              0e09 fc42  bra  v6502_modeIMM
              0e0a fc52  bra  v6502_modeACC
              0e0b fc58  bra  v6502_modeIMP
                                          3872  bra('v6502_modeABS'); bra('v6502_modeABS'); bra('v6502_modeABS'); bra('v6502_modeILL') # $0c xxx011xx
              0e0c fc78  bra  v6502_modeABS
              0e0d fc78  bra  v6502_modeABS
              0e0e fc78  bra  v6502_modeABS
              0e0f fc58  bra  v6502_modeIMP
                                          3873  bra('v6502_modeREL'); bra('v6502_modeIZY'); bra('v6502_modeIMM'); bra('v6502_modeILL') # $10 xxx100xx
              0e10 fccf  bra  v6502_modeREL
              0e11 fcab  bra  v6502_modeIZY
              0e12 fc42  bra  v6502_modeIMM
              0e13 fc58  bra  v6502_modeIMP
                                          3874  bra('v6502_modeZPX'); bra('v6502_modeZPX'); bra('v6502_modeZPX'); bra('v6502_modeILL') # $14 xxx101xx
              0e14 fc5b  bra  v6502_modeZPX
              0e15 fc5b  bra  v6502_modeZPX
              0e16 fc5b  bra  v6502_modeZPX
              0e17 fc58  bra  v6502_modeIMP
                                          3875  bra('v6502_modeIMP'); bra('v6502_modeABY'); bra('v6502_modeIMP'); bra('v6502_modeILL') # $18 xxx110xx
              0e18 fc58  bra  v6502_modeIMP
              0e19 fc7b  bra  v6502_modeABY
              0e1a fc58  bra  v6502_modeIMP
              0e1b fc58  bra  v6502_modeIMP
                                          3876  bra('v6502_modeABX'); bra('v6502_modeABX'); bra('v6502_modeABX'); bra('v6502_modeILL') # $1c xxx111xx
              0e1c fc7a  bra  v6502_modeABX
              0e1d fc7a  bra  v6502_modeABX
              0e1e fc7a  bra  v6502_modeABX
              0e1f fc58  bra  v6502_modeIMP
                                          3877
                                          3878  # Special encoding cases for emulator:
                                          3879  #     $00 BRK -         but gets mapped to #$DD      handled in v6502_mode0
                                          3880  #     $20 JSR $DDDD     but gets mapped to #$DD      handled in v6502_mode0 and v6502_JSR
                                          3881  #     $40 RTI -         but gets mapped to #$DD      handled in v6502_mode0
                                          3882  #     $60 RTS -         but gets mapped to #$DD      handled in v6502_mode0
                                          3883  #     $6C JMP ($DDDD)   but gets mapped to $DDDD     handled in v6502_JMP2
                                          3884  #     $96 STX $DD,Y     but gets mapped to $DD,X     handled in v6502_STX2
                                          3885  #     $B6 LDX $DD,Y     but gets mapped to $DD,X     handled in v6502_LDX2
                                          3886  #     $BE LDX $DDDD,Y   but gets mapped to $DDDD,X   handled in v6502_modeABX
                                          3887
                                          3888  label('v6502_next')
v6502_next:   0e20 8115  adda [$15]       3889  adda([vTicks])                  #0
                                          3890  blt('v6502_exitBefore')         #1 No more ticks
              0e21 e83a  blt  v6502_exitBefore
                                          3891  label('v6502_next2')
v6502_next2:  0e22 c215  st   [$15]       3892  st([vTicks])                    #2
                                          3893  #
                                          3894  # Fetch opcode
              0e23 111a  ld   [$1a],x     3895  ld([v6502_PCL],X)               #3
              0e24 151b  ld   [$1b],y     3896  ld([v6502_PCH],Y)               #4
              0e25 0d00  ld   [y,x]       3897  ld([Y,X])                       #5 Fetch IR
              0e26 c226  st   [$26]       3898  st([v6502_IR])                  #6
              0e27 011a  ld   [$1a]       3899  ld([v6502_PCL])                 #7 PC++
              0e28 8001  adda $01         3900  adda(1)                         #8
              0e29 d21a  st   [$1a],x     3901  st([v6502_PCL],X)               #9
              0e2a f02d  beq  $0e2d       3902  beq(pc()+3)                     #10
              0e2b fc2e  bra  $0e2e       3903  bra(pc()+3)                     #11
              0e2c 0000  ld   $00         3904  ld(0)                           #12
              0e2d 0001  ld   $01         3905  ld(1)                           #12(!)
              0e2e 811b  adda [$1b]       3906  adda([v6502_PCH])               #13
              0e2f d61b  st   [$1b],y     3907  st([v6502_PCH],Y)               #14
                                          3908  #
                                          3909  # Get addressing mode and fetch operands
              0e30 0126  ld   [$26]       3910  ld([v6502_IR])                  #15 Get addressing mode
              0e31 201f  anda $1f         3911  anda(31)                        #16
              0e32 fe00  bra  ac          3912  bra(AC)                         #17
              0e33 fc34  bra  .next20     3913  bra('.next20')                  #18
                                          3914  # (jump table)                  #19
                                          3915  label('.next20')
.next20:      0e34 0d00  ld   [y,x]       3916  ld([Y,X])                       #20 Fetch L
                                          3917  # Most opcodes branch away at this point, but IR & 31 == 0 falls through
                                          3918  #
                                          3919  # Implicit Mode for  BRK JSR RTI RTS (<  0x80) -- 26 cycles
                                          3920  # Immediate Mode for LDY CPY CPX     (>= 0x80) -- 36 cycles
                                          3921  label('v6502_mode0')
v6502_mode0:  0e35 0126  ld   [$26]       3922  ld([v6502_IR])                  #21 'xxx0000'
              0e36 e845  blt  .imm24      3923  bmi('.imm24')                   #22
              0e37 011b  ld   [$1b]       3924  ld([v6502_PCH])                 #23
              0e38 fcf2  bra  v6502_check 3925  bra('v6502_check')              #24
              0e39 00f3  ld   $f3         3926  ld(-26/2)                       #25
                                          3927
                                          3928  # Resync with video driver. At this point we're returning BEFORE
                                          3929  # fetching and executing the next instruction.
                                          3930  label('v6502_exitBefore')
v6502_exitBefore:
              0e3a 8013  adda $13         3931  adda(v6502_maxTicks)            #3 Exit BEFORE fetch
              0e3b e43b  bgt  $0e3b       3932  bgt(pc()&255)                   #4 Resync
              0e3c a001  suba $01         3933  suba(1)                         #5
              0e3d 000d  ld   $0d         3934  ld(hi('v6502_ENTER'))           #6 Set entry point to before 'fetch'
              0e3e c205  st   [$05]       3935  st([vCpuSelect])                #7
              0e3f 1401  ld   $01,y       3936  ld(hi('vBlankStart'),Y)         #8
              0e40 e11e  jmp  y,[$1e]     3937  jmp(Y,[vReturn])                #9 To video driver
              0e41 0000  ld   $00         3938  ld(0)                           #10
                                          3939  assert v6502_overhead ==         11
                                          3940
                                          3941  # Immediate Mode: #$FF -- 36 cycles
                                          3942  label('v6502_modeIMM')
v6502_modeIMM:
              0e42 0200  nop              3943  nop()                           #21 Wait for v6502_mode0 to join
              0e43 0200  nop              3944  nop()                           #22
              0e44 011b  ld   [$1b]       3945  ld([v6502_PCH])                 #23 Copy PC
                                          3946  label('.imm24')
.imm24:       0e45 c225  st   [$25]       3947  st([v6502_ADH])                 #24
              0e46 011a  ld   [$1a]       3948  ld([v6502_PCL])                 #25
              0e47 d224  st   [$24],x     3949  st([v6502_ADL],X)               #26
              0e48 8001  adda $01         3950  adda(1)                         #27 PC++
              0e49 c21a  st   [$1a]       3951  st([v6502_PCL])                 #28
              0e4a f04d  beq  $0e4d       3952  beq(pc()+3)                     #29
              0e4b fc4e  bra  $0e4e       3953  bra(pc()+3)                     #30
              0e4c 0000  ld   $00         3954  ld(0)                           #31
              0e4d 0001  ld   $01         3955  ld(1)                           #31(!)
              0e4e 811b  adda [$1b]       3956  adda([v6502_PCH])               #32
              0e4f c21b  st   [$1b]       3957  st([v6502_PCH])                 #33
              0e50 fcf2  bra  v6502_check 3958  bra('v6502_check')              #34
              0e51 00ee  ld   $ee         3959  ld(-36/2)                       #35
                                          3960
                                          3961  # Accumulator Mode: ROL ROR LSL ASR -- 28 cycles
                                          3962  label('v6502_modeACC')
v6502_modeACC:
              0e52 0018  ld   $18         3963  ld(v6502_A&255)                 #21 Address of AC
              0e53 d224  st   [$24],x     3964  st([v6502_ADL],X)               #22
              0e54 0000  ld   $00         3965  ld(v6502_A>>8)                  #23
              0e55 c225  st   [$25]       3966  st([v6502_ADH])                 #24
              0e56 00f2  ld   $f2         3967  ld(-28/2)                       #25
              0e57 fcf2  bra  v6502_check 3968  bra('v6502_check')              #26
                                          3969  #nop()                          #27 Overlap
                                          3970  #
                                          3971  # Implied Mode: no operand -- 24 cycles
                                          3972  label('v6502_modeILL')
                                          3973  label('v6502_modeIMP')
v6502_modeILL:
v6502_modeIMP:
              0e58 0200  nop              3974  nop()                           #21,27
              0e59 fcf2  bra  v6502_check 3975  bra('v6502_check')              #22
              0e5a 00f4  ld   $f4         3976  ld(-24/2)                       #23
                                          3977
                                          3978  # Zero Page Modes: $DD $DD,X $DD,Y -- 36 cycles
                                          3979  label('v6502_modeZPX')
v6502_modeZPX:
              0e5b fc5f  bra  .zp23       3980  bra('.zp23')                    #21
              0e5c 812a  adda [$2a]       3981  adda([v6502_X])                 #22
                                          3982  label('v6502_modeZP')
v6502_modeZP: 0e5d fc5f  bra  .zp23       3983  bra('.zp23')                    #21
              0e5e 0200  nop              3984  nop()                           #22
                                          3985  label('.zp23')
.zp23:        0e5f d224  st   [$24],x     3986  st([v6502_ADL],X)               #23
              0e60 0000  ld   $00         3987  ld(0)                           #24 H=0
              0e61 c225  st   [$25]       3988  st([v6502_ADH])                 #25
              0e62 0001  ld   $01         3989  ld(1)                           #26 PC++
              0e63 811a  adda [$1a]       3990  adda([v6502_PCL])               #27
              0e64 c21a  st   [$1a]       3991  st([v6502_PCL])                 #28
              0e65 f068  beq  $0e68       3992  beq(pc()+3)                     #29
              0e66 fc69  bra  $0e69       3993  bra(pc()+3)                     #30
              0e67 0000  ld   $00         3994  ld(0)                           #31
              0e68 0001  ld   $01         3995  ld(1)                           #31(!)
              0e69 811b  adda [$1b]       3996  adda([v6502_PCH])               #32
              0e6a c21b  st   [$1b]       3997  st([v6502_PCH])                 #33
              0e6b fcf2  bra  v6502_check 3998  bra('v6502_check')              #34
              0e6c 00ee  ld   $ee         3999  ld(-36/2)                       #35
                                          4000
                                          4001  # Possible retry loop for modeABS and modeIZY. Because these need
                                          4002  # more time than the v6502_maxTicks of 38 Gigatron cycles, we may
                                          4003  # have to restart them after the next horizontal pulse.
                                          4004  label('.retry28')
.retry28:     0e6d f070  beq  $0e70       4005  beq(pc()+3)                     #28,37 PC--
              0e6e fc71  bra  $0e71       4006  bra(pc()+3)                     #29
              0e6f 0000  ld   $00         4007  ld(0)                           #30
              0e70 00ff  ld   $ff         4008  ld(-1)                          #30(!)
              0e71 811b  adda [$1b]       4009  adda([v6502_PCH])               #31
              0e72 c21b  st   [$1b]       4010  st([v6502_PCH])                 #32
              0e73 011a  ld   [$1a]       4011  ld([v6502_PCL])                 #33
              0e74 a001  suba $01         4012  suba(1)                         #34
              0e75 c21a  st   [$1a]       4013  st([v6502_PCL])                 #35
              0e76 fc20  bra  v6502_next  4014  bra('v6502_next')               #36 Retry until sufficient time
              0e77 00ed  ld   $ed         4015  ld(-38/2)                       #37
                                          4016
                                          4017  # Absolute Modes: $DDDD $DDDD,X $DDDD,Y -- 64 cycles
                                          4018  label('v6502_modeABS')
v6502_modeABS:
              0e78 fc7d  bra  .abs23      4019  bra('.abs23')                   #21
              0e79 0000  ld   $00         4020  ld(0)                           #22
                                          4021  label('v6502_modeABX')
v6502_modeABX:
              0e7a fc7d  bra  .abs23      4022  bra('.abs23')                   #21
                                          4023  label('v6502_modeABY')
v6502_modeABY:
              0e7b 012a  ld   [$2a]       4024  ld([v6502_X])                   #21,22
              0e7c 012b  ld   [$2b]       4025  ld([v6502_Y])                   #22
                                          4026  label('.abs23')
.abs23:       0e7d c224  st   [$24]       4027  st([v6502_ADL])                 #23
              0e7e 00f3  ld   $f3         4028  ld(-64//2+v6502_maxTicks)       #24 Is there enough time for the excess ticks?
              0e7f 8115  adda [$15]       4029  adda([vTicks])                  #25
              0e80 e86d  blt  .retry28    4030  blt('.retry28')                 #26
              0e81 011a  ld   [$1a]       4031  ld([v6502_PCL])                 #27
              0e82 0126  ld   [$26]       4032  ld([v6502_IR])                  #28 Special case $BE: LDX $DDDD,Y (we got X in ADL)
              0e83 60be  xora $be         4033  xora(0xbe)                      #29
              0e84 f087  beq  $0e87       4034  beq(pc()+3)                     #30
              0e85 fc88  bra  $0e88       4035  bra(pc()+3)                     #31
              0e86 0124  ld   [$24]       4036  ld([v6502_ADL])                 #32
              0e87 012b  ld   [$2b]       4037  ld([v6502_Y])                   #32(!)
              0e88 8d00  adda [y,x]       4038  adda([Y,X])                     #33 Fetch and add L
              0e89 c224  st   [$24]       4039  st([v6502_ADL])                 #34
              0e8a e88e  blt  .abs37      4040  bmi('.abs37')                   #35 Carry?
              0e8b ad00  suba [y,x]       4041  suba([Y,X])                     #36 Gets back original operand
              0e8c fc90  bra  .abs39      4042  bra('.abs39')                   #37
              0e8d 4d00  ora  [y,x]       4043  ora([Y,X])                      #38 Carry in bit 7
                                          4044  label('.abs37')
.abs37:       0e8e 2d00  anda [y,x]       4045  anda([Y,X])                     #37 Carry in bit 7
              0e8f 0200  nop              4046  nop()                           #38
                                          4047  label('.abs39')
.abs39:       0e90 3080  anda $80,x       4048  anda(0x80,X)                    #39 Move carry to bit 0
              0e91 0500  ld   [x]         4049  ld([X])                         #40
              0e92 c225  st   [$25]       4050  st([v6502_ADH])                 #41
              0e93 011a  ld   [$1a]       4051  ld([v6502_PCL])                 #42 PC++
              0e94 8001  adda $01         4052  adda(1)                         #43
              0e95 d21a  st   [$1a],x     4053  st([v6502_PCL],X)               #44
              0e96 f099  beq  $0e99       4054  beq(pc()+3)                     #45
              0e97 fc9a  bra  $0e9a       4055  bra(pc()+3)                     #46
              0e98 0000  ld   $00         4056  ld(0)                           #47
              0e99 0001  ld   $01         4057  ld(1)                           #47(!)
              0e9a 811b  adda [$1b]       4058  adda([v6502_PCH])               #48
              0e9b d61b  st   [$1b],y     4059  st([v6502_PCH],Y)               #49
              0e9c 0d00  ld   [y,x]       4060  ld([Y,X])                       #50 Fetch H
              0e9d 8125  adda [$25]       4061  adda([v6502_ADH])               #51
              0e9e c225  st   [$25]       4062  st([v6502_ADH])                 #52
              0e9f 011a  ld   [$1a]       4063  ld([v6502_PCL])                 #53 PC++
              0ea0 8001  adda $01         4064  adda(1)                         #54
              0ea1 c21a  st   [$1a]       4065  st([v6502_PCL])                 #55
              0ea2 f0a5  beq  $0ea5       4066  beq(pc()+3)                     #56
              0ea3 fca6  bra  $0ea6       4067  bra(pc()+3)                     #57
              0ea4 0000  ld   $00         4068  ld(0)                           #58
              0ea5 0001  ld   $01         4069  ld(1)                           #58(!)
              0ea6 811b  adda [$1b]       4070  adda([v6502_PCH])               #59
              0ea7 c21b  st   [$1b]       4071  st([v6502_PCH])                 #60
              0ea8 1124  ld   [$24],x     4072  ld([v6502_ADL],X)               #61
              0ea9 fcf2  bra  v6502_check 4073  bra('v6502_check')              #62
              0eaa 00e0  ld   $e0         4074  ld(-64/2)                       #63
                                          4075
                                          4076  # Indirect Indexed Mode: ($DD),Y -- 54 cycles
                                          4077  label('v6502_modeIZY')
v6502_modeIZY:
              0eab 1200  ld   ac,x        4078  ld(AC,X)                        #21 $DD
              0eac 1400  ld   $00,y       4079  ld(0,Y)                         #22 $00DD
              0ead 00f8  ld   $f8         4080  ld(-54//2+v6502_maxTicks)       #23 Is there enough time for the excess ticks?
              0eae 8115  adda [$15]       4081  adda([vTicks])                  #24
              0eaf 0200  nop              4082  nop()                           #25
              0eb0 e86d  blt  .retry28    4083  blt('.retry28')                 #26
              0eb1 011a  ld   [$1a]       4084  ld([v6502_PCL])                 #27
              0eb2 8001  adda $01         4085  adda(1)                         #28 PC++
              0eb3 c21a  st   [$1a]       4086  st([v6502_PCL])                 #29
              0eb4 f0b7  beq  $0eb7       4087  beq(pc()+3)                     #30
              0eb5 fcb8  bra  $0eb8       4088  bra(pc()+3)                     #31
              0eb6 0000  ld   $00         4089  ld(0)                           #32
              0eb7 0001  ld   $01         4090  ld(1)                           #32(!)
              0eb8 811b  adda [$1b]       4091  adda([v6502_PCH])               #33
              0eb9 c21b  st   [$1b]       4092  st([v6502_PCH])                 #34
              0eba 0d00  ld   [y,x]       4093  ld([Y,X])                       #35 Read word from zero-page
              0ebb de00  st   [y,x++]     4094  st([Y,Xpp])                     #36 (Just X++) Wrap-around is correct
              0ebc c224  st   [$24]       4095  st([v6502_ADL])                 #37
              0ebd 0d00  ld   [y,x]       4096  ld([Y,X])                       #38
              0ebe c225  st   [$25]       4097  st([v6502_ADH])                 #39
              0ebf 012b  ld   [$2b]       4098  ld([v6502_Y])                   #40 Add Y
              0ec0 8124  adda [$24]       4099  adda([v6502_ADL])               #41
              0ec1 c224  st   [$24]       4100  st([v6502_ADL])                 #42
              0ec2 e8c6  blt  .izy45      4101  bmi('.izy45')                   #43 Carry?
              0ec3 a12b  suba [$2b]       4102  suba([v6502_Y])                 #44 Gets back original operand
              0ec4 fcc8  bra  .izy47      4103  bra('.izy47')                   #45
              0ec5 412b  ora  [$2b]       4104  ora([v6502_Y])                  #46 Carry in bit 7
                                          4105  label('.izy45')
.izy45:       0ec6 212b  anda [$2b]       4106  anda([v6502_Y])                 #45 Carry in bit 7
              0ec7 0200  nop              4107  nop()                           #46
                                          4108  label('.izy47')
.izy47:       0ec8 3080  anda $80,x       4109  anda(0x80,X)                    #47 Move carry to bit 0
              0ec9 0500  ld   [x]         4110  ld([X])                         #48
              0eca 8125  adda [$25]       4111  adda([v6502_ADH])               #49
              0ecb c225  st   [$25]       4112  st([v6502_ADH])                 #50
              0ecc 1124  ld   [$24],x     4113  ld([v6502_ADL],X)               #51
              0ecd fcf2  bra  v6502_check 4114  bra('v6502_check')              #52
              0ece 00e5  ld   $e5         4115  ld(-54/2)                       #53
                                          4116
                                          4117  # Relative Mode: BEQ BNE BPL BMI BCC BCS BVC BVS -- 36 cycles
                                          4118  label('v6502_modeREL')
v6502_modeREL:
              0ecf d224  st   [$24],x     4119  st([v6502_ADL],X)               #21 Offset (Only needed for branch)
              0ed0 e8d3  blt  $0ed3       4120  bmi(pc()+3)                     #22 Sign extend
              0ed1 fcd4  bra  $0ed4       4121  bra(pc()+3)                     #23
              0ed2 0000  ld   $00         4122  ld(0)                           #24
              0ed3 00ff  ld   $ff         4123  ld(255)                         #24(!)
              0ed4 c225  st   [$25]       4124  st([v6502_ADH])                 #25
              0ed5 011a  ld   [$1a]       4125  ld([v6502_PCL])                 #26 PC++ (Needed for both cases)
              0ed6 8001  adda $01         4126  adda(1)                         #27
              0ed7 c21a  st   [$1a]       4127  st([v6502_PCL])                 #28
              0ed8 f0db  beq  $0edb       4128  beq(pc()+3)                     #29
              0ed9 fcdc  bra  $0edc       4129  bra(pc()+3)                     #30
              0eda 0000  ld   $00         4130  ld(0)                           #31
              0edb 0001  ld   $01         4131  ld(1)                           #31(!)
              0edc 811b  adda [$1b]       4132  adda([v6502_PCH])               #32
              0edd c21b  st   [$1b]       4133  st([v6502_PCH])                 #33
              0ede fcf2  bra  v6502_check 4134  bra('v6502_check')              #34
              0edf 00ee  ld   $ee         4135  ld(-36/2)                       #53
                                          4136
                                          4137  # Indexed Indirect Mode: ($DD,X) -- 38 cycles
                                          4138  label('v6502_modeIZX')
v6502_modeIZX:
              0ee0 812a  adda [$2a]       4139  adda([v6502_X])                 #21 Add X
              0ee1 c21d  st   [$1d]       4140  st([v6502_Tmp])                 #22
              0ee2 9001  adda $01,x       4141  adda(1,X)                       #23 Read word from zero-page
              0ee3 0500  ld   [x]         4142  ld([X])                         #24
              0ee4 c225  st   [$25]       4143  st([v6502_ADH])                 #25
              0ee5 111d  ld   [$1d],x     4144  ld([v6502_Tmp],X)               #26
              0ee6 0500  ld   [x]         4145  ld([X])                         #27
              0ee7 d224  st   [$24],x     4146  st([v6502_ADL],X)               #28
              0ee8 011a  ld   [$1a]       4147  ld([v6502_PCL])                 #29 PC++
              0ee9 8001  adda $01         4148  adda(1)                         #30
              0eea c21a  st   [$1a]       4149  st([v6502_PCL])                 #31
              0eeb f0ee  beq  $0eee       4150  beq(pc()+3)                     #32
              0eec fcef  bra  $0eef       4151  bra(pc()+3)                     #33
              0eed 0000  ld   $00         4152  ld(0)                           #34
              0eee 0001  ld   $01         4153  ld(1)                           #34(!)
              0eef 811b  adda [$1b]       4154  adda([v6502_PCH])               #35
              0ef0 c21b  st   [$1b]       4155  st([v6502_PCH])                 #36
              0ef1 00ed  ld   $ed         4156  ld(-38/2)                       #37 !!! Fall through to v6502_check !!!
                                          4157  #
                                          4158  # Update elapsed time for the addressing mode processing.
                                          4159  # Then check if we can immediately execute this instruction.
                                          4160  # Otherwise transfer control to the video driver.
                                          4161  label('v6502_check')
v6502_check:  0ef2 8115  adda [$15]       4162  adda([vTicks])                  #0
                                          4163  blt('v6502_exitAfter')          #1 No more ticks
              0ef3 e8f8  blt  v6502_exitAfter
              0ef4 c215  st   [$15]       4164  st([vTicks])                    #2
              0ef5 140f  ld   $0f,y       4165  ld(hi('v6502_execute'),Y)       #3
              0ef6 e126  jmp  y,[$26]     4166  jmp(Y,[v6502_IR])               #4
              0ef7 fcff  bra  $ff         4167  bra(255)                        #5
                                          4168
                                          4169  # Otherwise resync with video driver. At this point we're returning AFTER
                                          4170  # addressing mode decoding, but before executing the instruction.
                                          4171  label('v6502_exitAfter')
v6502_exitAfter:
              0ef8 8013  adda $13         4172  adda(v6502_maxTicks)            #3 Exit AFTER fetch
              0ef9 e4f9  bgt  $0ef9       4173  bgt(pc()&255)                   #4 Resync
              0efa a001  suba $01         4174  suba(1)                         #5
              0efb 0010  ld   $10         4175  ld(hi('v6502_RESUME'))          #6 Set entry point to before 'execute'
              0efc c205  st   [$05]       4176  st([vCpuSelect])                #7
              0efd 1401  ld   $01,y       4177  ld(hi('vBlankStart'),Y)         #8
              0efe e11e  jmp  y,[$1e]     4178  jmp(Y,[vReturn])                #9 To video driver
              0eff 0000  ld   $00         4179  ld(0)                           #10
                                          4180  assert v6502_overhead ==         11
                                          4181
                                          4182  align(0x100,size=0x100)
                                          4183  label('v6502_execute')
                                          4184  # This page works as a 255-entry (0..254) jump table for 6502 opcodes.
                                          4185  # Jumping into this page must have 'bra 255' in the branch delay slot
                                          4186  # in order to get out again and dispatch to the right continuation.
                                          4187  # X must hold [v6502_ADL],
                                          4188  # Y will hold hi('v6502_execute'),
                                          4189  # A will be loaded with the code offset (this is skipped at offset $ff)
v6502_execute:
              0f00 00fd  ld   $fd         4190  ld('v6502_BRK'); ld('v6502_ORA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $00
              0f01 0089  ld   $89
              0f02 00fd  ld   $fd
              0f03 00fd  ld   $fd
              0f04 00fd  ld   $fd         4191  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f05 0089  ld   $89
              0f06 00f1  ld   $f1
              0f07 00fd  ld   $fd
              0f08 00f3  ld   $f3         4192  ld('v6502_PHP'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f09 0089  ld   $89
              0f0a 00f1  ld   $f1
              0f0b 00fd  ld   $fd
              0f0c 00fd  ld   $fd         4193  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f0d 0089  ld   $89
              0f0e 00f1  ld   $f1
              0f0f 00fd  ld   $fd
              0f10 003f  ld   $3f         4194  ld('v6502_BPL'); ld('v6502_ORA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $10
              0f11 0089  ld   $89
              0f12 00fd  ld   $fd
              0f13 00fd  ld   $fd
              0f14 00fd  ld   $fd         4195  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f15 0089  ld   $89
              0f16 00f1  ld   $f1
              0f17 00fd  ld   $fd
              0f18 0036  ld   $36         4196  ld('v6502_CLC'); ld('v6502_ORA'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f19 0089  ld   $89
              0f1a 00fd  ld   $fd
              0f1b 00fd  ld   $fd
              0f1c 00fd  ld   $fd         4197  ld('v6502_ILL'); ld('v6502_ORA'); ld('v6502_ASL'); ld('v6502_ILL') #6
              0f1d 0089  ld   $89
              0f1e 00f1  ld   $f1
              0f1f 00fd  ld   $fd
              0f20 009a  ld   $9a         4198  ld('v6502_JSR'); ld('v6502_AND'); ld('v6502_ILL'); ld('v6502_ILL') #6 $20
              0f21 0085  ld   $85
              0f22 00fd  ld   $fd
              0f23 00fd  ld   $fd
              0f24 00f5  ld   $f5         4199  ld('v6502_BIT'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f25 0085  ld   $85
              0f26 00f7  ld   $f7
              0f27 00fd  ld   $fd
              0f28 00f9  ld   $f9         4200  ld('v6502_PLP'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f29 0085  ld   $85
              0f2a 00f7  ld   $f7
              0f2b 00fd  ld   $fd
              0f2c 00f5  ld   $f5         4201  ld('v6502_BIT'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f2d 0085  ld   $85
              0f2e 00f7  ld   $f7
              0f2f 00fd  ld   $fd
              0f30 0042  ld   $42         4202  ld('v6502_BMI'); ld('v6502_AND'); ld('v6502_ILL'); ld('v6502_ILL') #6 $30
              0f31 0085  ld   $85
              0f32 00fd  ld   $fd
              0f33 00fd  ld   $fd
              0f34 00fd  ld   $fd         4203  ld('v6502_ILL'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f35 0085  ld   $85
              0f36 00f7  ld   $f7
              0f37 00fd  ld   $fd
              0f38 0038  ld   $38         4204  ld('v6502_SEC'); ld('v6502_AND'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f39 0085  ld   $85
              0f3a 00fd  ld   $fd
              0f3b 00fd  ld   $fd
              0f3c 00fd  ld   $fd         4205  ld('v6502_ILL'); ld('v6502_AND'); ld('v6502_ROL'); ld('v6502_ILL') #6
              0f3d 0085  ld   $85
              0f3e 00f7  ld   $f7
              0f3f 00fd  ld   $fd
              0f40 00d3  ld   $d3         4206  ld('v6502_RTI'); ld('v6502_EOR'); ld('v6502_ILL'); ld('v6502_ILL') #6 $40
              0f41 008c  ld   $8c
              0f42 00fd  ld   $fd
              0f43 00fd  ld   $fd
              0f44 00fd  ld   $fd         4207  ld('v6502_ILL'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f45 008c  ld   $8c
              0f46 00d7  ld   $d7
              0f47 00fd  ld   $fd
              0f48 00d9  ld   $d9         4208  ld('v6502_PHA'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f49 008c  ld   $8c
              0f4a 00d7  ld   $d7
              0f4b 00fd  ld   $fd
              0f4c 0096  ld   $96         4209  ld('v6502_JMP1');ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f4d 008c  ld   $8c
              0f4e 00d7  ld   $d7
              0f4f 00fd  ld   $fd
              0f50 0045  ld   $45         4210  ld('v6502_BVC'); ld('v6502_EOR'); ld('v6502_ILL'); ld('v6502_ILL') #6 $50
              0f51 008c  ld   $8c
              0f52 00fd  ld   $fd
              0f53 00fd  ld   $fd
              0f54 00fd  ld   $fd         4211  ld('v6502_ILL'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f55 008c  ld   $8c
              0f56 00d7  ld   $d7
              0f57 00fd  ld   $fd
              0f58 00db  ld   $db         4212  ld('v6502_CLI'); ld('v6502_EOR'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f59 008c  ld   $8c
              0f5a 00fd  ld   $fd
              0f5b 00fd  ld   $fd
              0f5c 00fd  ld   $fd         4213  ld('v6502_ILL'); ld('v6502_EOR'); ld('v6502_LSR'); ld('v6502_ILL') #6
              0f5d 008c  ld   $8c
              0f5e 00d7  ld   $d7
              0f5f 00fd  ld   $fd
              0f60 00dd  ld   $dd         4214  ld('v6502_RTS'); ld('v6502_ADC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $60
              0f61 0001  ld   $01
              0f62 00fd  ld   $fd
              0f63 00fd  ld   $fd
              0f64 00fd  ld   $fd         4215  ld('v6502_ILL'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f65 0001  ld   $01
              0f66 00d5  ld   $d5
              0f67 00fd  ld   $fd
              0f68 00df  ld   $df         4216  ld('v6502_PLA'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f69 0001  ld   $01
              0f6a 00d5  ld   $d5
              0f6b 00fd  ld   $fd
              0f6c 0098  ld   $98         4217  ld('v6502_JMP2');ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f6d 0001  ld   $01
              0f6e 00d5  ld   $d5
              0f6f 00fd  ld   $fd
              0f70 0049  ld   $49         4218  ld('v6502_BVS'); ld('v6502_ADC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $70
              0f71 0001  ld   $01
              0f72 00fd  ld   $fd
              0f73 00fd  ld   $fd
              0f74 00fd  ld   $fd         4219  ld('v6502_ILL'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f75 0001  ld   $01
              0f76 00d5  ld   $d5
              0f77 00fd  ld   $fd
              0f78 00e1  ld   $e1         4220  ld('v6502_SEI'); ld('v6502_ADC'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f79 0001  ld   $01
              0f7a 00fd  ld   $fd
              0f7b 00fd  ld   $fd
              0f7c 00fd  ld   $fd         4221  ld('v6502_ILL'); ld('v6502_ADC'); ld('v6502_ROR'); ld('v6502_ILL') #6
              0f7d 0001  ld   $01
              0f7e 00d5  ld   $d5
              0f7f 00fd  ld   $fd
              0f80 00fd  ld   $fd         4222  ld('v6502_ILL'); ld('v6502_STA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $80
              0f81 00c1  ld   $c1
              0f82 00fd  ld   $fd
              0f83 00fd  ld   $fd
              0f84 00c7  ld   $c7         4223  ld('v6502_STY'); ld('v6502_STA'); ld('v6502_STX'); ld('v6502_ILL') #6
              0f85 00c1  ld   $c1
              0f86 00c3  ld   $c3
              0f87 00fd  ld   $fd
              0f88 007f  ld   $7f         4224  ld('v6502_DEY'); ld('v6502_ILL'); ld('v6502_TXA'); ld('v6502_ILL') #6
              0f89 00fd  ld   $fd
              0f8a 00cd  ld   $cd
              0f8b 00fd  ld   $fd
              0f8c 00c7  ld   $c7         4225  ld('v6502_STY'); ld('v6502_STA'); ld('v6502_STX'); ld('v6502_ILL') #6
              0f8d 00c1  ld   $c1
              0f8e 00c3  ld   $c3
              0f8f 00fd  ld   $fd
              0f90 004d  ld   $4d         4226  ld('v6502_BCC'); ld('v6502_STA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $90
              0f91 00c1  ld   $c1
              0f92 00fd  ld   $fd
              0f93 00fd  ld   $fd
              0f94 00c7  ld   $c7         4227  ld('v6502_STY'); ld('v6502_STA'); ld('v6502_STX2');ld('v6502_ILL') #6
              0f95 00c1  ld   $c1
              0f96 00c5  ld   $c5
              0f97 00fd  ld   $fd
              0f98 00cf  ld   $cf         4228  ld('v6502_TYA'); ld('v6502_STA'); ld('v6502_TXS'); ld('v6502_ILL') #6
              0f99 00c1  ld   $c1
              0f9a 00e3  ld   $e3
              0f9b 00fd  ld   $fd
              0f9c 00fd  ld   $fd         4229  ld('v6502_ILL'); ld('v6502_STA'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0f9d 00c1  ld   $c1
              0f9e 00fd  ld   $fd
              0f9f 00fd  ld   $fd
              0fa0 00bf  ld   $bf         4230  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6 $A0
              0fa1 00b9  ld   $b9
              0fa2 00bb  ld   $bb
              0fa3 00fd  ld   $fd
              0fa4 00bf  ld   $bf         4231  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6
              0fa5 00b9  ld   $b9
              0fa6 00bb  ld   $bb
              0fa7 00fd  ld   $fd
              0fa8 00cb  ld   $cb         4232  ld('v6502_TAY'); ld('v6502_LDA'); ld('v6502_TAX'); ld('v6502_ILL') #6
              0fa9 00b9  ld   $b9
              0faa 00c9  ld   $c9
              0fab 00fd  ld   $fd
              0fac 00bf  ld   $bf         4233  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6
              0fad 00b9  ld   $b9
              0fae 00bb  ld   $bb
              0faf 00fd  ld   $fd
              0fb0 0051  ld   $51         4234  ld('v6502_BCS'); ld('v6502_LDA'); ld('v6502_ILL'); ld('v6502_ILL') #6 $B0
              0fb1 00b9  ld   $b9
              0fb2 00fd  ld   $fd
              0fb3 00fd  ld   $fd
              0fb4 00bf  ld   $bf         4235  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX2');ld('v6502_ILL') #6
              0fb5 00b9  ld   $b9
              0fb6 00bd  ld   $bd
              0fb7 00fd  ld   $fd
              0fb8 00d1  ld   $d1         4236  ld('v6502_CLV'); ld('v6502_LDA'); ld('v6502_TSX'); ld('v6502_ILL') #6
              0fb9 00b9  ld   $b9
              0fba 00e5  ld   $e5
              0fbb 00fd  ld   $fd
              0fbc 00bf  ld   $bf         4237  ld('v6502_LDY'); ld('v6502_LDA'); ld('v6502_LDX'); ld('v6502_ILL') #6
              0fbd 00b9  ld   $b9
              0fbe 00bb  ld   $bb
              0fbf 00fd  ld   $fd
              0fc0 00e7  ld   $e7         4238  ld('v6502_CPY'); ld('v6502_CMP'); ld('v6502_ILL'); ld('v6502_ILL') #6 $C0
              0fc1 00e9  ld   $e9
              0fc2 00fd  ld   $fd
              0fc3 00fd  ld   $fd
              0fc4 00e7  ld   $e7         4239  ld('v6502_CPY'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fc5 00e9  ld   $e9
              0fc6 00eb  ld   $eb
              0fc7 00fd  ld   $fd
              0fc8 007b  ld   $7b         4240  ld('v6502_INY'); ld('v6502_CMP'); ld('v6502_DEX'); ld('v6502_ILL') #6
              0fc9 00e9  ld   $e9
              0fca 0077  ld   $77
              0fcb 00fd  ld   $fd
              0fcc 00e7  ld   $e7         4241  ld('v6502_CPY'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fcd 00e9  ld   $e9
              0fce 00eb  ld   $eb
              0fcf 00fd  ld   $fd
              0fd0 0055  ld   $55         4242  ld('v6502_BNE'); ld('v6502_CMP'); ld('v6502_ILL'); ld('v6502_ILL') #6 $D0
              0fd1 00e9  ld   $e9
              0fd2 00fd  ld   $fd
              0fd3 00fd  ld   $fd
              0fd4 00fd  ld   $fd         4243  ld('v6502_ILL'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fd5 00e9  ld   $e9
              0fd6 00eb  ld   $eb
              0fd7 00fd  ld   $fd
              0fd8 00ed  ld   $ed         4244  ld('v6502_CLD'); ld('v6502_CMP'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0fd9 00e9  ld   $e9
              0fda 00fd  ld   $fd
              0fdb 00fd  ld   $fd
              0fdc 00fd  ld   $fd         4245  ld('v6502_ILL'); ld('v6502_CMP'); ld('v6502_DEC'); ld('v6502_ILL') #6
              0fdd 00e9  ld   $e9
              0fde 00eb  ld   $eb
              0fdf 00fd  ld   $fd
              0fe0 00ef  ld   $ef         4246  ld('v6502_CPX'); ld('v6502_SBC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $E0
              0fe1 0029  ld   $29
              0fe2 00fd  ld   $fd
              0fe3 00fd  ld   $fd
              0fe4 00ef  ld   $ef         4247  ld('v6502_CPX'); ld('v6502_SBC'); ld('v6502_INC'); ld('v6502_ILL') #6
              0fe5 0029  ld   $29
              0fe6 00b7  ld   $b7
              0fe7 00fd  ld   $fd
              0fe8 006c  ld   $6c         4248  ld('v6502_INX'); ld('v6502_SBC'); ld('v6502_NOP'); ld('v6502_ILL') #6
              0fe9 0029  ld   $29
              0fea 0083  ld   $83
              0feb 00fd  ld   $fd
              0fec 00ef  ld   $ef         4249  ld('v6502_CPX'); ld('v6502_SBC'); ld('v6502_INC'); ld('v6502_ILL') #6
              0fed 0029  ld   $29
              0fee 00b7  ld   $b7
              0fef 00fd  ld   $fd
              0ff0 0058  ld   $58         4250  ld('v6502_BEQ'); ld('v6502_SBC'); ld('v6502_ILL'); ld('v6502_ILL') #6 $F0
              0ff1 0029  ld   $29
              0ff2 00fd  ld   $fd
              0ff3 00fd  ld   $fd
              0ff4 00fd  ld   $fd         4251  ld('v6502_ILL'); ld('v6502_SBC'); ld('v6502_INC'); ld('v6502_ILL') #6
              0ff5 0029  ld   $29
              0ff6 00b7  ld   $b7
              0ff7 00fd  ld   $fd
              0ff8 00fb  ld   $fb         4252  ld('v6502_SED'); ld('v6502_SBC'); ld('v6502_ILL'); ld('v6502_ILL') #6
              0ff9 0029  ld   $29
              0ffa 00fd  ld   $fd
              0ffb 00fd  ld   $fd
              0ffc 00fd  ld   $fd         4253  ld('v6502_ILL'); ld('v6502_SBC'); ld('v6502_INC')                  #6
              0ffd 0029  ld   $29
              0ffe 00b7  ld   $b7
              0fff fe00  bra  ac          4254  bra(AC)                         #6,7 Dispatch into next page
                                          4255  # --- Page boundary ---
                                          4256  align(0x100,size=0x100)
              1000 140e  ld   $0e,y       4257  ld(hi('v6502_next'),Y)          #8 Handy for instructions that don't clobber Y
                                          4258
                                          4259  label('v6502_ADC')
                                          4260  assert pc()&255 == 1
                                          4261  assert v6502_Cflag == 1
                                          4262  assert v6502_Vemu == 128
v6502_ADC:    1001 1525  ld   [$25],y     4263  ld([v6502_ADH],Y)               #9 Must be at page offset 1, so A=1
              1002 2127  anda [$27]       4264  anda([v6502_P])                 #10 Carry in (AC=1 because lo('v6502_ADC')=1)
              1003 8118  adda [$18]       4265  adda([v6502_A])                 #11 Sum
              1004 f020  beq  .adc14      4266  beq('.adc14')                   #12 Danger zone for dropping a carry
              1005 8d00  adda [y,x]       4267  adda([Y,X])                     #13
              1006 c228  st   [$28]       4268  st([v6502_Qz])                  #14 Z flag, don't overwrite left-hand side (A) yet
              1007 c229  st   [$29]       4269  st([v6502_Qn])                  #15 N flag
              1008 6118  xora [$18]       4270  xora([v6502_A])                 #16 V flag, (Q^A) & (B^Q) & 0x80
              1009 c218  st   [$18]       4271  st([v6502_A])                   #17
              100a 0d00  ld   [y,x]       4272  ld([Y,X])                       #18
              100b 6128  xora [$28]       4273  xora([v6502_Qz])                #19
              100c 2118  anda [$18]       4274  anda([v6502_A])                 #20
              100d 2080  anda $80         4275  anda(0x80)                      #21
              100e c21d  st   [$1d]       4276  st([v6502_Tmp])                 #22
              100f 0128  ld   [$28]       4277  ld([v6502_Qz])                  #23 Update A
              1010 c218  st   [$18]       4278  st([v6502_A])                   #24
              1011 e815  blt  .adc27      4279  bmi('.adc27')                   #25 C flag
              1012 ad00  suba [y,x]       4280  suba([Y,X])                     #26
              1013 fc17  bra  .adc29      4281  bra('.adc29')                   #27
              1014 4d00  ora  [y,x]       4282  ora([Y,X])                      #28
                                          4283  label('.adc27')
.adc27:       1015 2d00  anda [y,x]       4284  anda([Y,X])                     #27
              1016 0200  nop              4285  nop()                           #28
                                          4286  label('.adc29')
.adc29:       1017 3080  anda $80,x       4287  anda(0x80,X)                    #29
              1018 0127  ld   [$27]       4288  ld([v6502_P])                   #30 Update P
              1019 207e  anda $7e         4289  anda(~v6502_Vemu&~v6502_Cflag)  #31
              101a 4500  ora  [x]         4290  ora([X])                        #32
              101b 411d  ora  [$1d]       4291  ora([v6502_Tmp])                #33
              101c c227  st   [$27]       4292  st([v6502_P])                   #34
              101d 140e  ld   $0e,y       4293  ld(hi('v6502_next'),Y)          #35
              101e e020  jmp  y,$20       4294  jmp(Y,'v6502_next')             #36
              101f 00ed  ld   $ed         4295  ld(-38/2)                       #37
                                          4296  # Cin=1, A=$FF, B=$DD --> Result=$DD, Cout=1, V=0
                                          4297  # Cin=0, A=$00, B=$DD --> Result=$DD, Cout=0, V=0
                                          4298  label('.adc14')
.adc14:       1020 c218  st   [$18]       4299  st([v6502_A])                   #14 Special case
              1021 c228  st   [$28]       4300  st([v6502_Qz])                  #15 Z flag
              1022 c229  st   [$29]       4301  st([v6502_Qn])                  #16 N flag
              1023 0127  ld   [$27]       4302  ld([v6502_P])                   #17
              1024 207f  anda $7f         4303  anda(0x7f)                      #18 V=0, keep C
              1025 c227  st   [$27]       4304  st([v6502_P])                   #19
              1026 140e  ld   $0e,y       4305  ld(hi('v6502_next'),Y)          #20
              1027 00f4  ld   $f4         4306  ld(-24/2)                       #21
              1028 e020  jmp  y,$20       4307  jmp(Y,'v6502_next')             #22
                                          4308  #nop()                          #23 Overlap
                                          4309  #
                                          4310  label('v6502_SBC')
                                          4311  # No matter how hard we try, v6502_SBC always comes out a lot clumsier
                                          4312  # than v6502_ADC. And that one already barely fits in 38 cycles and is
                                          4313  # hard to follow. So we use a hack: transmorph our SBC into an ADC with
                                          4314  # inverted operand, and then dispatch again. Simple and effective.
v6502_SBC:    1029 1525  ld   [$25],y     4315  ld([v6502_ADH],Y)               #9,24
              102a 0d00  ld   [y,x]       4316  ld([Y,X])                       #10
              102b 60ff  xora $ff         4317  xora(255)                       #11 Invert right-hand side operand
              102c c219  st   [$19]       4318  st([v6502_BI])                  #12 Park modified operand for v6502_ADC
              102d 0019  ld   $19         4319  ld(v6502_BI&255)                #13 Address of BI
              102e d224  st   [$24],x     4320  st([v6502_ADL],X)               #14
              102f 0000  ld   $00         4321  ld(v6502_BI>>8)                 #15
              1030 c225  st   [$25]       4322  st([v6502_ADH])                 #16
              1031 0069  ld   $69         4323  ld(0x69)                        #17 ADC #$xx (Any ADC opcode will do)
              1032 c226  st   [$26]       4324  st([v6502_IR])                  #18
              1033 140e  ld   $0e,y       4325  ld(hi('v6502_check'),Y)         #20 Go back to time check before dispatch
              1034 e0f2  jmp  y,$f2       4326  jmp(Y,'v6502_check')            #20
              1035 00f5  ld   $f5         4327  ld(-22/2)                       #21
                                          4328
                                          4329  # Carry calculation table
                                          4330  #   L7 R7 C7   RX UC SC
                                          4331  #   -- -- -- | -- -- --
                                          4332  #    0  0  0 |  0  0  0
                                          4333  #    0  0  1 |  0  0  0
                                          4334  #    1  0  0 |  0  1 +1
                                          4335  #    1  0  1 |  0  0  0
                                          4336  #    0  1  0 | -1  1  0
                                          4337  #    0  1  1 | -1  0 -1
                                          4338  #    1  1  0 | -1  1  0
                                          4339  #    1  1  1 | -1  1  0
                                          4340  #   -- -- -- | -- -- --
                                          4341  #    ^  ^  ^    ^  ^  ^
                                          4342  #    |  |  |    |  |  `--- Carry of unsigned L + signed R: SC = RX + UC
                                          4343  #    |  |  |    |  `----- Carry of unsigned L + unsigned R: UC = C7 ? L7&R7 : L7|R7
                                          4344  #    |  |  |    `------- Sign extension of signed R
                                          4345  #    |  |  `--------- MSB of unextended L + R
                                          4346  #    |  `----------- MSB of right operand R
                                          4347  #    `------------- MSB of left operand L
                                          4348
                                          4349  label('v6502_CLC')
v6502_CLC:    1036 0127  ld   [$27]       4350  ld([v6502_P])                   #9
              1037 fc3b  bra  .sec12      4351  bra('.sec12')                   #10
                                          4352  label('v6502_SEC')
v6502_SEC:    1038 20fe  anda $fe         4353  anda(~v6502_Cflag)              #9,11 Overlap
              1039 0127  ld   [$27]       4354  ld([v6502_P])                   #10
              103a 4001  ora  $01         4355  ora(v6502_Cflag)                #11
                                          4356  label('.sec12')
.sec12:       103b c227  st   [$27]       4357  st([v6502_P])                   #12
              103c 0200  nop              4358  nop()                           #13
                                          4359  label('.next14')
.next14:      103d e020  jmp  y,$20       4360  jmp(Y,'v6502_next')             #14
              103e 00f8  ld   $f8         4361  ld(-16/2)                       #15
                                          4362
                                          4363  label('v6502_BPL')
v6502_BPL:    103f 0129  ld   [$29]       4364  ld([v6502_Qn])                  #9
              1040 e875  blt  .next12     4365  bmi('.next12')                  #10
              1041 f45b  bge  .branch13   4366  bpl('.branch13')                #11
                                          4367  #nop()                          #12 Overlap
                                          4368  label('v6502_BMI')
v6502_BMI:    1042 0129  ld   [$29]       4369  ld([v6502_Qn])                  #9,12
              1043 f475  bge  .next12     4370  bpl('.next12')                  #10
              1044 e85b  blt  .branch13   4371  bmi('.branch13')                #11
                                          4372  #nop()                          #12 Overlap
                                          4373  label('v6502_BVC')
v6502_BVC:    1045 0127  ld   [$27]       4374  ld([v6502_P])                   #9,12
              1046 2080  anda $80         4375  anda(v6502_Vemu)                #10
              1047 f05b  beq  .branch13   4376  beq('.branch13')                #11
              1048 ec3d  bne  .next14     4377  bne('.next14')                  #12
                                          4378  #nop()                          #13 Overlap
                                          4379  label('v6502_BVS')
v6502_BVS:    1049 0127  ld   [$27]       4380  ld([v6502_P])                   #9,13
              104a 2080  anda $80         4381  anda(v6502_Vemu)                #10
              104b ec5b  bne  .branch13   4382  bne('.branch13')                #11
              104c f03d  beq  .next14     4383  beq('.next14')                  #12
                                          4384  #nop()                          #13 Overlap
                                          4385  label('v6502_BCC')
v6502_BCC:    104d 0127  ld   [$27]       4386  ld([v6502_P])                   #9,13
              104e 2001  anda $01         4387  anda(v6502_Cflag)               #10
              104f f05b  beq  .branch13   4388  beq('.branch13')                #11
              1050 ec3d  bne  .next14     4389  bne('.next14')                  #12
                                          4390  #nop()                          #13 Overlap
                                          4391  label('v6502_BCS')
v6502_BCS:    1051 0127  ld   [$27]       4392  ld([v6502_P])                   #9,13
              1052 2001  anda $01         4393  anda(v6502_Cflag)               #10
              1053 ec5b  bne  .branch13   4394  bne('.branch13')                #11
              1054 f03d  beq  .next14     4395  beq('.next14')                  #12
                                          4396  #nop()                          #13 Overlap
                                          4397  label('v6502_BNE')
v6502_BNE:    1055 0128  ld   [$28]       4398  ld([v6502_Qz])                  #9,13
              1056 f075  beq  .next12     4399  beq('.next12')                  #10
              1057 ec5b  bne  .branch13   4400  bne('.branch13')                #11
                                          4401  #nop()                          #12 Overlap
                                          4402  label('v6502_BEQ')
v6502_BEQ:    1058 0128  ld   [$28]       4403  ld([v6502_Qz])                  #9,12
              1059 ec75  bne  .next12     4404  bne('.next12')                  #10
              105a f05b  beq  .branch13   4405  beq('.branch13')                #11
                                          4406  #nop()                          #12 Overlap
                                          4407  label('.branch13')
.branch13:    105b 0124  ld   [$24]       4408  ld([v6502_ADL])                 #13,12 PC + offset
              105c 811a  adda [$1a]       4409  adda([v6502_PCL])               #14
              105d c21a  st   [$1a]       4410  st([v6502_PCL])                 #15
              105e e862  blt  .bra0       4411  bmi('.bra0')                    #16 Carry
              105f a124  suba [$24]       4412  suba([v6502_ADL])               #17
              1060 fc64  bra  .bra1       4413  bra('.bra1')                    #18
              1061 4124  ora  [$24]       4414  ora([v6502_ADL])                #19
                                          4415  label('.bra0')
.bra0:        1062 2124  anda [$24]       4416  anda([v6502_ADL])               #18
              1063 0200  nop              4417  nop()                           #19
                                          4418  label('.bra1')
.bra1:        1064 3080  anda $80,x       4419  anda(0x80,X)                    #20
              1065 0500  ld   [x]         4420  ld([X])                         #21
              1066 8125  adda [$25]       4421  adda([v6502_ADH])               #22
              1067 811b  adda [$1b]       4422  adda([v6502_PCH])               #23
              1068 c21b  st   [$1b]       4423  st([v6502_PCH])                 #24
              1069 0200  nop              4424  nop()                           #25
              106a e020  jmp  y,$20       4425  jmp(Y,'v6502_next')             #26
              106b 00f2  ld   $f2         4426  ld(-28/2)                       #27
                                          4427
                                          4428  label('v6502_INX')
v6502_INX:    106c 0200  nop              4429  nop()                           #9
              106d 012a  ld   [$2a]       4430  ld([v6502_X])                   #10
              106e 8001  adda $01         4431  adda(1)                         #11
              106f c22a  st   [$2a]       4432  st([v6502_X])                   #12
                                          4433  label('.inx13')
.inx13:       1070 c228  st   [$28]       4434  st([v6502_Qz])                  #13 Z flag
              1071 c229  st   [$29]       4435  st([v6502_Qn])                  #14 N flag
              1072 00f7  ld   $f7         4436  ld(-18/2)                       #15
              1073 e020  jmp  y,$20       4437  jmp(Y,'v6502_next')             #16
              1074 0200  nop              4438  nop()                           #17
                                          4439
                                          4440  label('.next12')
.next12:      1075 e020  jmp  y,$20       4441  jmp(Y,'v6502_next')             #12
              1076 00f9  ld   $f9         4442  ld(-14/2)                       #13
                                          4443
                                          4444  label('v6502_DEX')
v6502_DEX:    1077 012a  ld   [$2a]       4445  ld([v6502_X])                   #9
              1078 a001  suba $01         4446  suba(1)                         #10
              1079 fc70  bra  .inx13      4447  bra('.inx13')                   #11
              107a c22a  st   [$2a]       4448  st([v6502_X])                   #12
                                          4449
                                          4450  label('v6502_INY')
v6502_INY:    107b 012b  ld   [$2b]       4451  ld([v6502_Y])                   #9
              107c 8001  adda $01         4452  adda(1)                         #10
              107d fc70  bra  .inx13      4453  bra('.inx13')                   #11
              107e c22b  st   [$2b]       4454  st([v6502_Y])                   #12
                                          4455
                                          4456  label('v6502_DEY')
v6502_DEY:    107f 012b  ld   [$2b]       4457  ld([v6502_Y])                   #9
              1080 a001  suba $01         4458  suba(1)                         #10
              1081 fc70  bra  .inx13      4459  bra('.inx13')                   #11
              1082 c22b  st   [$2b]       4460  st([v6502_Y])                   #12
                                          4461
                                          4462  label('v6502_NOP')
v6502_NOP:    1083 00fa  ld   $fa         4463  ld(-12/2)                       #9
              1084 e020  jmp  y,$20       4464  jmp(Y,'v6502_next')             #10
                                          4465  #nop()                          #11 Overlap
                                          4466  #
                                          4467  label('v6502_AND')
v6502_AND:    1085 1525  ld   [$25],y     4468  ld([v6502_ADH],Y)               #9,11
              1086 0118  ld   [$18]       4469  ld([v6502_A])                   #10
              1087 fc90  bra  .eor13      4470  bra('.eor13')                   #11
              1088 2d00  anda [y,x]       4471  anda([Y,X])                     #12
                                          4472
                                          4473  label('v6502_ORA')
v6502_ORA:    1089 1525  ld   [$25],y     4474  ld([v6502_ADH],Y)               #9
              108a 0118  ld   [$18]       4475  ld([v6502_A])                   #10
              108b fc90  bra  .eor13      4476  bra('.eor13')                   #11
                                          4477  label('v6502_EOR')
v6502_EOR:    108c 4d00  ora  [y,x]       4478  ora([Y,X])                      #12,9
                                          4479  #
                                          4480  #label('v6502_EOR')
                                          4481  #nop()                          #9 Overlap
              108d 1525  ld   [$25],y     4482  ld([v6502_ADH],Y)               #10
              108e 0118  ld   [$18]       4483  ld([v6502_A])                   #11
              108f 6d00  xora [y,x]       4484  xora([Y,X])                     #12
                                          4485  label('.eor13')
.eor13:       1090 c218  st   [$18]       4486  st([v6502_A])                   #13
              1091 c228  st   [$28]       4487  st([v6502_Qz])                  #14 Z flag
              1092 c229  st   [$29]       4488  st([v6502_Qn])                  #15 N flag
              1093 140e  ld   $0e,y       4489  ld(hi('v6502_next'),Y)          #16
              1094 00f6  ld   $f6         4490  ld(-20/2)                       #17
              1095 e020  jmp  y,$20       4491  jmp(Y,'v6502_next')             #18
                                          4492  #nop()                          #19 Overlap
                                          4493  #
                                          4494  label('v6502_JMP1')
v6502_JMP1:   1096 140d  ld   $0d,y       4495  ld(hi('v6502_jmp1'),Y)          #9,19 JMP $DDDD
              1097 e0c5  jmp  y,$c5       4496  jmp(Y,'v6502_jmp1')             #10
                                          4497  #nop()                          #11 Overlap
                                          4498  label('v6502_JMP2')
v6502_JMP2:   1098 140d  ld   $0d,y       4499  ld(hi('v6502_jmp2'),Y)          #9 JMP ($DDDD)
              1099 e0cd  jmp  y,$cd       4500  jmp(Y,'v6502_jmp2')             #10
                                          4501  #nop()                          #11 Overlap
                                          4502  label('v6502_JSR')
v6502_JSR:    109a 011c  ld   [$1c]       4503  ld([v6502_S])                   #9,11
              109b a002  suba $02         4504  suba(2)                         #10
              109c d21c  st   [$1c],x     4505  st([v6502_S],X)                 #11
              109d 1400  ld   $00,y       4506  ld(v6502_Stack>>8,Y)            #12
              109e 011b  ld   [$1b]       4507  ld([v6502_PCH])                 #13 Let ADL,ADH point to L operand
              109f c225  st   [$25]       4508  st([v6502_ADH])                 #14
              10a0 011a  ld   [$1a]       4509  ld([v6502_PCL])                 #15
              10a1 c224  st   [$24]       4510  st([v6502_ADL])                 #16
              10a2 8001  adda $01         4511  adda(1)                         #17 Push ++PC
              10a3 c21a  st   [$1a]       4512  st([v6502_PCL])                 #18 Let PCL,PCH point to H operand
              10a4 de00  st   [y,x++]     4513  st([Y,Xpp])                     #19
              10a5 f0a8  beq  $10a8       4514  beq(pc()+3)                     #20
              10a6 fca9  bra  $10a9       4515  bra(pc()+3)                     #21
              10a7 0000  ld   $00         4516  ld(0)                           #22
              10a8 0001  ld   $01         4517  ld(1)                           #22(!)
              10a9 811b  adda [$1b]       4518  adda([v6502_PCH])               #23
              10aa c21b  st   [$1b]       4519  st([v6502_PCH])                 #24
              10ab ce00  st   [y,x]       4520  st([Y,X])                       #25
              10ac 1124  ld   [$24],x     4521  ld([v6502_ADL],X)               #26 Fetch L
              10ad 1525  ld   [$25],y     4522  ld([v6502_ADH],Y)               #27
              10ae 0d00  ld   [y,x]       4523  ld([Y,X])                       #28
              10af 111a  ld   [$1a],x     4524  ld([v6502_PCL],X)               #29 Fetch H
              10b0 c21a  st   [$1a]       4525  st([v6502_PCL])                 #30
              10b1 151b  ld   [$1b],y     4526  ld([v6502_PCH],Y)               #31
              10b2 0d00  ld   [y,x]       4527  ld([Y,X])                       #32
              10b3 c21b  st   [$1b]       4528  st([v6502_PCH])                 #33
              10b4 140e  ld   $0e,y       4529  ld(hi('v6502_next'),Y)          #34
              10b5 00ed  ld   $ed         4530  ld(-38/2)                       #35
              10b6 e020  jmp  y,$20       4531  jmp(Y,'v6502_next')             #36
                                          4532  #nop()                          #37 Overlap
                                          4533  #
                                          4534  label('v6502_INC')
v6502_INC:    10b7 1411  ld   $11,y       4535  ld(hi('v6502_inc'),Y)           #9,37
              10b8 e00e  jmp  y,$0e       4536  jmp(Y,'v6502_inc')              #10
                                          4537  #nop()                          #11 Overlap
                                          4538  label('v6502_LDA')
v6502_LDA:    10b9 1411  ld   $11,y       4539  ld(hi('v6502_lda'),Y)           #9,11
              10ba e018  jmp  y,$18       4540  jmp(Y,'v6502_lda')              #10
                                          4541  #nop()                          #11 Overlap
                                          4542  label('v6502_LDX')
v6502_LDX:    10bb 1411  ld   $11,y       4543  ld(hi('v6502_ldx'),Y)           #9,11
              10bc e022  jmp  y,$22       4544  jmp(Y,'v6502_ldx')              #10
                                          4545  #nop()                          #11 Overlap
                                          4546  label('v6502_LDX2')
v6502_LDX2:   10bd 1411  ld   $11,y       4547  ld(hi('v6502_ldx2'),Y)          #9,11
              10be e02a  jmp  y,$2a       4548  jmp(Y,'v6502_ldx2')             #10
                                          4549  #nop()                          #11 Overlap
                                          4550  label('v6502_LDY')
v6502_LDY:    10bf 1411  ld   $11,y       4551  ld(hi('v6502_ldy'),Y)           #9,11
              10c0 e026  jmp  y,$26       4552  jmp(Y,'v6502_ldy')              #10
                                          4553  #nop()                          #11 Overlap
                                          4554  label('v6502_STA')
v6502_STA:    10c1 1411  ld   $11,y       4555  ld(hi('v6502_sta'),Y)           #9,11
              10c2 e034  jmp  y,$34       4556  jmp(Y,'v6502_sta')              #10
                                          4557  #nop()                          #11 Overlap
                                          4558  label('v6502_STX')
v6502_STX:    10c3 1411  ld   $11,y       4559  ld(hi('v6502_stx'),Y)           #9,11
              10c4 e03a  jmp  y,$3a       4560  jmp(Y,'v6502_stx')              #10
                                          4561  #nop()                          #11 Overlap
                                          4562  label('v6502_STX2')
v6502_STX2:   10c5 1411  ld   $11,y       4563  ld(hi('v6502_stx2'),Y)          #9,11
              10c6 e040  jmp  y,$40       4564  jmp(Y,'v6502_stx2')             #10
                                          4565  #nop()                          #11 Overlap
                                          4566  label('v6502_STY')
v6502_STY:    10c7 1411  ld   $11,y       4567  ld(hi('v6502_sty'),Y)           #9,11
              10c8 e048  jmp  y,$48       4568  jmp(Y,'v6502_sty')              #10
                                          4569  #nop()                          #11 Overlap
                                          4570  label('v6502_TAX')
v6502_TAX:    10c9 1411  ld   $11,y       4571  ld(hi('v6502_tax'),Y)           #9,11
              10ca e04d  jmp  y,$4d       4572  jmp(Y,'v6502_tax')              #10
                                          4573  #nop()                          #11 Overlap
                                          4574  label('v6502_TAY')
v6502_TAY:    10cb 1411  ld   $11,y       4575  ld(hi('v6502_tay'),Y)           #9,11
              10cc e062  jmp  y,$62       4576  jmp(Y,'v6502_tay')              #10
                                          4577  #nop()                          #11 Overlap
                                          4578  label('v6502_TXA')
v6502_TXA:    10cd 1411  ld   $11,y       4579  ld(hi('v6502_txa'),Y)           #9,11
              10ce e065  jmp  y,$65       4580  jmp(Y,'v6502_txa')              #10
                                          4581  #nop()                          #11 Overlap
                                          4582  label('v6502_TYA')
v6502_TYA:    10cf 1411  ld   $11,y       4583  ld(hi('v6502_tya'),Y)           #9,11
              10d0 e068  jmp  y,$68       4584  jmp(Y,'v6502_tya')              #10
                                          4585  #nop()                          #11 Overlap
                                          4586  label('v6502_CLV')
v6502_CLV:    10d1 1411  ld   $11,y       4587  ld(hi('v6502_clv'),Y)           #9,11
              10d2 e076  jmp  y,$76       4588  jmp(Y,'v6502_clv')              #10
                                          4589  #nop()                          #11 Overlap
                                          4590  label('v6502_RTI')
v6502_RTI:    10d3 1411  ld   $11,y       4591  ld(hi('v6502_rti'),Y)           #9,11
              10d4 e0e4  jmp  y,$e4       4592  jmp(Y,'v6502_rti')              #10
                                          4593  #nop()                          #11 Overlap
                                          4594  label('v6502_ROR')
v6502_ROR:    10d5 140d  ld   $0d,y       4595  ld(hi('v6502_ror'),Y)           #9,11
              10d6 e083  jmp  y,$83       4596  jmp(Y,'v6502_ror')              #10
                                          4597  #nop()                          #11 Overlap
                                          4598  label('v6502_LSR')
v6502_LSR:    10d7 140d  ld   $0d,y       4599  ld(hi('v6502_lsr'),Y)           #9,11
              10d8 e09d  jmp  y,$9d       4600  jmp(Y,'v6502_lsr')              #10
                                          4601  #nop()                          #11 Overlap
                                          4602  label('v6502_PHA')
v6502_PHA:    10d9 140d  ld   $0d,y       4603  ld(hi('v6502_pha'),Y)           #9,11
              10da e0e2  jmp  y,$e2       4604  jmp(Y,'v6502_pha')              #10
                                          4605  #nop()                          #11 Overlap
                                          4606  label('v6502_CLI')
v6502_CLI:    10db 1411  ld   $11,y       4607  ld(hi('v6502_cli'),Y)           #9,11
              10dc e06b  jmp  y,$6b       4608  jmp(Y,'v6502_cli')              #10
                                          4609  #nop()                          #11 Overlap
                                          4610  label('v6502_RTS')
v6502_RTS:    10dd 1411  ld   $11,y       4611  ld(hi('v6502_rts'),Y)           #9,11
              10de e08f  jmp  y,$8f       4612  jmp(Y,'v6502_rts')              #10
                                          4613  #nop()                          #11 Overlap
                                          4614  label('v6502_PLA')
v6502_PLA:    10df 140d  ld   $0d,y       4615  ld(hi('v6502_pla'),Y)           #9,11
              10e0 e0d7  jmp  y,$d7       4616  jmp(Y,'v6502_pla')              #10
                                          4617  #nop()                          #11 Overlap
                                          4618  label('v6502_SEI')
v6502_SEI:    10e1 1411  ld   $11,y       4619  ld(hi('v6502_sei'),Y)           #9,11
              10e2 e06e  jmp  y,$6e       4620  jmp(Y,'v6502_sei')              #10
                                          4621  #nop()                          #11 Overlap
                                          4622  label('v6502_TXS')
v6502_TXS:    10e3 1411  ld   $11,y       4623  ld(hi('v6502_txs'),Y)           #9,11
              10e4 e05e  jmp  y,$5e       4624  jmp(Y,'v6502_txs')              #10
                                          4625  #nop()                          #11 Overlap
                                          4626  label('v6502_TSX')
v6502_TSX:    10e5 1411  ld   $11,y       4627  ld(hi('v6502_tsx'),Y)           #9,11
              10e6 e054  jmp  y,$54       4628  jmp(Y,'v6502_tsx')              #10
                                          4629  #nop()                          #11 Overlap
                                          4630  label('v6502_CPY')
v6502_CPY:    10e7 1411  ld   $11,y       4631  ld(hi('v6502_cpy'),Y)           #9,11
              10e8 e0bd  jmp  y,$bd       4632  jmp(Y,'v6502_cpy')              #10
                                          4633  #nop()                          #11 Overlap
                                          4634  label('v6502_CMP')
v6502_CMP:    10e9 1411  ld   $11,y       4635  ld(hi('v6502_cmp'),Y)           #9,11
              10ea e0be  jmp  y,$be       4636  jmp(Y,'v6502_cmp')              #10
                                          4637  #nop()                          #11 Overlap
                                          4638  label('v6502_DEC')
v6502_DEC:    10eb 1411  ld   $11,y       4639  ld(hi('v6502_dec'),Y)           #9,11
              10ec e005  jmp  y,$05       4640  jmp(Y,'v6502_dec')              #10
                                          4641  #nop()                          #11 Overlap
                                          4642  label('v6502_CLD')
v6502_CLD:    10ed 1411  ld   $11,y       4643  ld(hi('v6502_cld'),Y)           #9,11
              10ee e071  jmp  y,$71       4644  jmp(Y,'v6502_cld')              #10
                                          4645  #nop()                          #11 Overlap
                                          4646  label('v6502_CPX')
v6502_CPX:    10ef 1411  ld   $11,y       4647  ld(hi('v6502_cpx'),Y)           #9,11
              10f0 e0bb  jmp  y,$bb       4648  jmp(Y,'v6502_cpx')              #10
                                          4649  #nop()                          #11 Overlap
                                          4650  label('v6502_ASL')
v6502_ASL:    10f1 140d  ld   $0d,y       4651  ld(hi('v6502_asl'),Y)           #9,11
              10f2 e0bf  jmp  y,$bf       4652  jmp(Y,'v6502_asl')              #10
                                          4653  #nop()                          #11 Overlap
                                          4654  label('v6502_PHP')
v6502_PHP:    10f3 1411  ld   $11,y       4655  ld(hi('v6502_php'),Y)           #9,11
              10f4 e0a2  jmp  y,$a2       4656  jmp(Y,'v6502_php')              #10
                                          4657  #nop()                          #11 Overlap
                                          4658  label('v6502_BIT')
v6502_BIT:    10f5 1411  ld   $11,y       4659  ld(hi('v6502_bit'),Y)           #9
              10f6 e07d  jmp  y,$7d       4660  jmp(Y,'v6502_bit')              #10
                                          4661  #nop()                          #11 Overlap
                                          4662  label('v6502_ROL')
v6502_ROL:    10f7 140d  ld   $0d,y       4663  ld(hi('v6502_rol'),Y)           #9
              10f8 e0ac  jmp  y,$ac       4664  jmp(Y,'v6502_rol')              #10
                                          4665  #nop()                          #11 Overlap
                                          4666  label('v6502_PLP')
v6502_PLP:    10f9 1411  ld   $11,y       4667  ld(hi('v6502_plp'),Y)           #9
              10fa e0d4  jmp  y,$d4       4668  jmp(Y,'v6502_plp')              #10
                                          4669  #nop()                          #11 Overlap
                                          4670  label('v6502_SED')              # Decimal mode not implemented
v6502_SED:    10fb 1411  ld   $11,y       4671  ld(hi('v6502_sed'),Y)           #9,11
              10fc e074  jmp  y,$74       4672  jmp(Y,'v6502_sed')              #10
                                          4673  #nop()                          #11 Overlap
                                          4674  label('v6502_ILL') # All illegal opcodes map to BRK, except $FF which will crash
                                          4675  label('v6502_BRK')
v6502_ILL:
v6502_BRK:    10fd 140d  ld   $0d,y       4676  ld(hi('v6502_brk'),Y)           #9
              10fe e0ea  jmp  y,$ea       4677  jmp(Y,'v6502_brk')              #10
                                          4678  #nop()                          #11 Overlap
                                          4679
                                          4680  while pc()&255 < 255:
                                          4681    nop()
                                          4682
                                          4683  # `v6502_RESUME' is the interpreter's secondary entry point for when
                                          4684  # the opcode and operands were already fetched, just before the last hPulse.
                                          4685  # It must be at $xxff, prefably somewhere in v6502's own code pages.
                                          4686  label('v6502_RESUME')
                                          4687  assert (pc()&255) == 255
v6502_RESUME: 10ff a006  suba $06         4688  suba(v6502_adjust)              #0,11 v6502 secondary entry point
                                          4689  # --- Page boundary ---
                                          4690  align(0x100,size=0x200)
              1100 c215  st   [$15]       4691  st([vTicks])                    #1
              1101 1124  ld   [$24],x     4692  ld([v6502_ADL],X)               #2
              1102 140f  ld   $0f,y       4693  ld(hi('v6502_execute'),Y)       #3
              1103 e126  jmp  y,[$26]     4694  jmp(Y,[v6502_IR])               #4
              1104 fcff  bra  $ff         4695  bra(255)                        #5
                                          4696
                                          4697  label('v6502_dec')
v6502_dec:    1105 1525  ld   [$25],y     4698  ld([v6502_ADH],Y)               #12
              1106 0d00  ld   [y,x]       4699  ld([Y,X])                       #13
              1107 a001  suba $01         4700  suba(1)                         #14
              1108 ce00  st   [y,x]       4701  st([Y,X])                       #15
              1109 c228  st   [$28]       4702  st([v6502_Qz])                  #16 Z flag
              110a c229  st   [$29]       4703  st([v6502_Qn])                  #17 N flag
              110b 140e  ld   $0e,y       4704  ld(hi('v6502_next'),Y)          #18
              110c 00f5  ld   $f5         4705  ld(-22/2)                       #19
              110d e020  jmp  y,$20       4706  jmp(Y,'v6502_next')             #20
                                          4707  #nop()                          #21 Overlap
                                          4708  #
                                          4709  label('v6502_inc')
v6502_inc:    110e 1525  ld   [$25],y     4710  ld([v6502_ADH],Y)               #12,22
              110f 0d00  ld   [y,x]       4711  ld([Y,X])                       #13
              1110 8001  adda $01         4712  adda(1)                         #14
              1111 ce00  st   [y,x]       4713  st([Y,X])                       #15
              1112 c228  st   [$28]       4714  st([v6502_Qz])                  #16 Z flag
              1113 c229  st   [$29]       4715  st([v6502_Qn])                  #17 N flag
              1114 140e  ld   $0e,y       4716  ld(hi('v6502_next'),Y)          #18
              1115 00f5  ld   $f5         4717  ld(-22/2)                       #19
              1116 e020  jmp  y,$20       4718  jmp(Y,'v6502_next')             #20
              1117 0200  nop              4719  nop()                           #21
                                          4720
                                          4721  label('v6502_lda')
v6502_lda:    1118 0200  nop              4722  nop()                           #12
              1119 1525  ld   [$25],y     4723  ld([v6502_ADH],Y)               #13
              111a 0d00  ld   [y,x]       4724  ld([Y,X])                       #14
              111b c218  st   [$18]       4725  st([v6502_A])                   #15
                                          4726  label('.lda16')
.lda16:       111c c228  st   [$28]       4727  st([v6502_Qz])                  #16 Z flag
              111d c229  st   [$29]       4728  st([v6502_Qn])                  #17 N flag
              111e 0200  nop              4729  nop()                           #18
              111f 140e  ld   $0e,y       4730  ld(hi('v6502_next'),Y)          #19
              1120 e020  jmp  y,$20       4731  jmp(Y,'v6502_next')             #20
              1121 00f5  ld   $f5         4732  ld(-22/2)                       #21
                                          4733
                                          4734  label('v6502_ldx')
v6502_ldx:    1122 1525  ld   [$25],y     4735  ld([v6502_ADH],Y)               #12
              1123 0d00  ld   [y,x]       4736  ld([Y,X])                       #13
              1124 fc1c  bra  .lda16      4737  bra('.lda16')                   #14
              1125 c22a  st   [$2a]       4738  st([v6502_X])                   #15
                                          4739
                                          4740  label('v6502_ldy')
v6502_ldy:    1126 1525  ld   [$25],y     4741  ld([v6502_ADH],Y)               #12
              1127 0d00  ld   [y,x]       4742  ld([Y,X])                       #13
              1128 fc1c  bra  .lda16      4743  bra('.lda16')                   #14
              1129 c22b  st   [$2b]       4744  st([v6502_Y])                   #15
                                          4745
                                          4746  label('v6502_ldx2')
v6502_ldx2:   112a 0124  ld   [$24]       4747  ld([v6502_ADL])                 #12 Special case $B6: LDX $DD,Y
              112b a12a  suba [$2a]       4748  suba([v6502_X])                 #13 Undo X offset
              112c 912b  adda [$2b],x     4749  adda([v6502_Y],X)               #14 Apply Y instead
              112d 0500  ld   [x]         4750  ld([X])                         #15
              112e c22a  st   [$2a]       4751  st([v6502_X])                   #16
              112f c228  st   [$28]       4752  st([v6502_Qz])                  #17 Z flag
              1130 c229  st   [$29]       4753  st([v6502_Qn])                  #18 N flag
              1131 140e  ld   $0e,y       4754  ld(hi('v6502_next'),Y)          #19
              1132 e020  jmp  y,$20       4755  jmp(Y,'v6502_next')             #20
              1133 00f5  ld   $f5         4756  ld(-22/2)                       #21
                                          4757
                                          4758  label('v6502_sta')
v6502_sta:    1134 1525  ld   [$25],y     4759  ld([v6502_ADH],Y)               #12
              1135 0118  ld   [$18]       4760  ld([v6502_A])                   #13
              1136 ce00  st   [y,x]       4761  st([Y,X])                       #14
              1137 140e  ld   $0e,y       4762  ld(hi('v6502_next'),Y)          #15
              1138 e020  jmp  y,$20       4763  jmp(Y,'v6502_next')             #16
              1139 00f7  ld   $f7         4764  ld(-18/2)                       #17
                                          4765
                                          4766  label('v6502_stx')
v6502_stx:    113a 1525  ld   [$25],y     4767  ld([v6502_ADH],Y)               #12
              113b 012a  ld   [$2a]       4768  ld([v6502_X])                   #13
              113c ce00  st   [y,x]       4769  st([Y,X])                       #14
              113d 140e  ld   $0e,y       4770  ld(hi('v6502_next'),Y)          #15
              113e e020  jmp  y,$20       4771  jmp(Y,'v6502_next')             #16
              113f 00f7  ld   $f7         4772  ld(-18/2)                       #17
                                          4773
                                          4774  label('v6502_stx2')
v6502_stx2:   1140 0124  ld   [$24]       4775  ld([v6502_ADL])                 #12 Special case $96: STX $DD,Y
              1141 a12a  suba [$2a]       4776  suba([v6502_X])                 #13 Undo X offset
              1142 912b  adda [$2b],x     4777  adda([v6502_Y],X)               #14 Apply Y instead
              1143 012a  ld   [$2a]       4778  ld([v6502_X])                   #15
              1144 c600  st   [x]         4779  st([X])                         #16
              1145 140e  ld   $0e,y       4780  ld(hi('v6502_next'),Y)          #17
              1146 e020  jmp  y,$20       4781  jmp(Y,'v6502_next')             #18
              1147 00f6  ld   $f6         4782  ld(-20/2)                       #19
                                          4783
                                          4784  label('v6502_sty')
v6502_sty:    1148 1525  ld   [$25],y     4785  ld([v6502_ADH],Y)               #12
              1149 012b  ld   [$2b]       4786  ld([v6502_Y])                   #13
              114a ce00  st   [y,x]       4787  st([Y,X])                       #14
              114b 140e  ld   $0e,y       4788  ld(hi('v6502_next'),Y)          #15
              114c e020  jmp  y,$20       4789  jmp(Y,'v6502_next')             #16
                                          4790  label('v6502_tax')
v6502_tax:    114d 00f7  ld   $f7         4791  ld(-18/2)                       #17,12
                                          4792  #
                                          4793  #label('v6502_tax')
                                          4794  #nop()                          #12 Overlap
              114e 0118  ld   [$18]       4795  ld([v6502_A])                   #13
              114f c22a  st   [$2a]       4796  st([v6502_X])                   #14
                                          4797  label('.tax15')
.tax15:       1150 c228  st   [$28]       4798  st([v6502_Qz])                  #15 Z flag
              1151 c229  st   [$29]       4799  st([v6502_Qn])                  #16 N flag
              1152 140e  ld   $0e,y       4800  ld(hi('v6502_next'),Y)          #17
              1153 e020  jmp  y,$20       4801  jmp(Y,'v6502_next')             #18
                                          4802  label('v6502_tsx')
v6502_tsx:    1154 00f6  ld   $f6         4803  ld(-20/2)                       #19
                                          4804  #
                                          4805  #label('v6502_tsx')
                                          4806  #nop()                          #12 Overlap
              1155 011c  ld   [$1c]       4807  ld([v6502_S])                   #13
              1156 a001  suba $01         4808  suba(1)                         #14 Shift down on export
              1157 c22a  st   [$2a]       4809  st([v6502_X])                   #15
                                          4810  label('.tsx16')
.tsx16:       1158 c228  st   [$28]       4811  st([v6502_Qz])                  #16 Z flag
              1159 c229  st   [$29]       4812  st([v6502_Qn])                  #17 N flag
              115a 0200  nop              4813  nop()                           #18
              115b 140e  ld   $0e,y       4814  ld(hi('v6502_next'),Y)          #19
              115c e020  jmp  y,$20       4815  jmp(Y,'v6502_next')             #20
              115d 00f5  ld   $f5         4816  ld(-22/2)                       #21
                                          4817
                                          4818  label('v6502_txs')
v6502_txs:    115e 012a  ld   [$2a]       4819  ld([v6502_X])                   #12
              115f 8001  adda $01         4820  adda(1)                         #13 Shift up on import
              1160 fc58  bra  .tsx16      4821  bra('.tsx16')                   #14
              1161 c21c  st   [$1c]       4822  st([v6502_S])                   #15
                                          4823
                                          4824  label('v6502_tay')
v6502_tay:    1162 0118  ld   [$18]       4825  ld([v6502_A])                   #12
              1163 fc50  bra  .tax15      4826  bra('.tax15')                   #13
              1164 c22b  st   [$2b]       4827  st([v6502_Y])                   #14
                                          4828
                                          4829  label('v6502_txa')
v6502_txa:    1165 012a  ld   [$2a]       4830  ld([v6502_X])                   #12
              1166 fc50  bra  .tax15      4831  bra('.tax15')                   #13
              1167 c218  st   [$18]       4832  st([v6502_A])                   #14
                                          4833
                                          4834  label('v6502_tya')
v6502_tya:    1168 012b  ld   [$2b]       4835  ld([v6502_Y])                   #12
              1169 fc50  bra  .tax15      4836  bra('.tax15')                   #13
              116a c218  st   [$18]       4837  st([v6502_A])                   #14
                                          4838
                                          4839  label('v6502_cli')
v6502_cli:    116b 0127  ld   [$27]       4840  ld([v6502_P])                   #12
              116c fc79  bra  .clv15      4841  bra('.clv15')                   #13
              116d 20fb  anda $fb         4842  anda(~v6502_Iflag)              #14
                                          4843
                                          4844  label('v6502_sei')
v6502_sei:    116e 0127  ld   [$27]       4845  ld([v6502_P])                   #12
              116f fc79  bra  .clv15      4846  bra('.clv15')                   #13
              1170 4004  ora  $04         4847  ora(v6502_Iflag)                #14
                                          4848
                                          4849  label('v6502_cld')
v6502_cld:    1171 0127  ld   [$27]       4850  ld([v6502_P])                   #12
              1172 fc79  bra  .clv15      4851  bra('.clv15')                   #13
              1173 20f7  anda $f7         4852  anda(~v6502_Dflag)              #14
                                          4853
                                          4854  label('v6502_sed')
v6502_sed:    1174 0127  ld   [$27]       4855  ld([v6502_P])                   #12
              1175 fc79  bra  .clv15      4856  bra('.clv15')                   #13
                                          4857  label('v6502_clv')
v6502_clv:    1176 4008  ora  $08         4858  ora(v6502_Dflag)                #14,12 Overlap
                                          4859  #
                                          4860  #label('v6502_clv')
                                          4861  #nop()                          #12
              1177 0127  ld   [$27]       4862  ld([v6502_P])                   #13
              1178 207f  anda $7f         4863  anda(~v6502_Vemu)               #14
                                          4864  label('.clv15')
.clv15:       1179 c227  st   [$27]       4865  st([v6502_P])                   #15
              117a 140e  ld   $0e,y       4866  ld(hi('v6502_next'),Y)          #16
              117b 00f6  ld   $f6         4867  ld(-20/2)                       #17
              117c e020  jmp  y,$20       4868  jmp(Y,'v6502_next')             #18
                                          4869  label('v6502_bit')
v6502_bit:    117d 0200  nop              4870  nop()                           #19,12
                                          4871  #
                                          4872  #label('v6502_bit')
                                          4873  #nop()                          #12 Overlap
              117e 1124  ld   [$24],x     4874  ld([v6502_ADL],X)               #13
              117f 1525  ld   [$25],y     4875  ld([v6502_ADH],Y)               #14
              1180 0d00  ld   [y,x]       4876  ld([Y,X])                       #15
              1181 c229  st   [$29]       4877  st([v6502_Qn])                  #16 N flag
              1182 2118  anda [$18]       4878  anda([v6502_A])                 #17 This is a reason we keep N and Z in separate bytes
              1183 c228  st   [$28]       4879  st([v6502_Qz])                  #18 Z flag
              1184 0127  ld   [$27]       4880  ld([v6502_P])                   #19
              1185 207f  anda $7f         4881  anda(~v6502_Vemu)               #20
              1186 c227  st   [$27]       4882  st([v6502_P])                   #21
              1187 0d00  ld   [y,x]       4883  ld([Y,X])                       #22
              1188 8200  adda ac          4884  adda(AC)                        #23
              1189 2080  anda $80         4885  anda(v6502_Vemu)                #24
              118a 4127  ora  [$27]       4886  ora([v6502_P])                  #25
              118b c227  st   [$27]       4887  st([v6502_P])                   #26 Update V
              118c 140e  ld   $0e,y       4888  ld(hi('v6502_next'),Y)          #27
              118d e020  jmp  y,$20       4889  jmp(Y,'v6502_next')             #28
              118e 00f1  ld   $f1         4890  ld(-30/2)                       #29
                                          4891
                                          4892  label('v6502_rts')
v6502_rts:    118f 011c  ld   [$1c]       4893  ld([v6502_S])                   #12
              1190 1200  ld   ac,x        4894  ld(AC,X)                        #13
              1191 8002  adda $02         4895  adda(2)                         #14
              1192 c21c  st   [$1c]       4896  st([v6502_S])                   #15
              1193 1400  ld   $00,y       4897  ld(0,Y)                         #16
              1194 0d00  ld   [y,x]       4898  ld([Y,X])                       #17
              1195 de00  st   [y,x++]     4899  st([Y,Xpp])                     #18 Just X++
              1196 8001  adda $01         4900  adda(1)                         #19
              1197 c21a  st   [$1a]       4901  st([v6502_PCL])                 #20
              1198 f09b  beq  $119b       4902  beq(pc()+3)                     #21
              1199 fc9c  bra  $119c       4903  bra(pc()+3)                     #22
              119a 0000  ld   $00         4904  ld(0)                           #23
              119b 0001  ld   $01         4905  ld(1)                           #23(!)
              119c 8d00  adda [y,x]       4906  adda([Y,X])                     #24
              119d c21b  st   [$1b]       4907  st([v6502_PCH])                 #25
              119e 0200  nop              4908  nop()                           #26
              119f 140e  ld   $0e,y       4909  ld(hi('v6502_next'),Y)          #27
              11a0 e020  jmp  y,$20       4910  jmp(Y,'v6502_next')             #28
              11a1 00f1  ld   $f1         4911  ld(-30/2)                       #29
                                          4912
                                          4913  label('v6502_php')
v6502_php:    11a2 011c  ld   [$1c]       4914  ld([v6502_S])                   #12
              11a3 a001  suba $01         4915  suba(1)                         #13
              11a4 d21c  st   [$1c],x     4916  st([v6502_S],X)                 #14
              11a5 0127  ld   [$27]       4917  ld([v6502_P])                   #15
              11a6 20bd  anda $bd         4918  anda(~v6502_Vflag&~v6502_Zflag) #16 Keep Vemu,B,D,I,C
              11a7 f4aa  bge  $11aa       4919  bpl(pc()+3)                     #17 V to bit 6 and clear N
              11a8 fcaa  bra  $11aa       4920  bra(pc()+2)                     #18
              11a9 60c0  xora $c0         4921  xora(v6502_Vflag^v6502_Vemu)    #19
              11aa c600  st   [x]         4922  st([X])                         #19,20
              11ab 0128  ld   [$28]       4923  ld([v6502_Qz])                  #21 Z flag
              11ac f0af  beq  $11af       4924  beq(pc()+3)                     #22
              11ad fcb0  bra  $11b0       4925  bra(pc()+3)                     #23
              11ae 0000  ld   $00         4926  ld(0)                           #24
              11af 0002  ld   $02         4927  ld(v6502_Zflag)                 #24(!)
              11b0 4500  ora  [x]         4928  ora([X])                        #25
              11b1 c600  st   [x]         4929  st([X])                         #26
              11b2 0129  ld   [$29]       4930  ld([v6502_Qn])                  #27 N flag
              11b3 2080  anda $80         4931  anda(0x80)                      #28
              11b4 4500  ora  [x]         4932  ora([X])                        #29
              11b5 4020  ora  $20         4933  ora(v6502_Uflag)                #30 Unused bit
              11b6 c600  st   [x]         4934  st([X])                         #31
              11b7 0200  nop              4935  nop()                           #32
              11b8 140e  ld   $0e,y       4936  ld(hi('v6502_next'),Y)          #33
              11b9 e020  jmp  y,$20       4937  jmp(Y,'v6502_next')             #34
              11ba 00ee  ld   $ee         4938  ld(-36/2)                       #35
                                          4939
                                          4940  label('v6502_cpx')
v6502_cpx:    11bb fcc0  bra  .cmp14      4941  bra('.cmp14')                   #12
              11bc 012a  ld   [$2a]       4942  ld([v6502_X])                   #13
                                          4943
                                          4944  label('v6502_cpy')
v6502_cpy:    11bd fcc0  bra  .cmp14      4945  bra('.cmp14')                   #12
                                          4946  label('v6502_cmp')
v6502_cmp:    11be 012b  ld   [$2b]       4947  ld([v6502_Y])                   #13,12
                                          4948  #
                                          4949  #label('v6502_cmp')             #12 Overlap
                                          4950  assert v6502_Cflag == 1
              11bf 0118  ld   [$18]       4951  ld([v6502_A])                   #13
                                          4952  label('.cmp14')
.cmp14:       11c0 1525  ld   [$25],y     4953  ld([v6502_ADH],Y)               #14
              11c1 e8c7  blt  .cmp17      4954  bmi('.cmp17')                   #15 Carry?
              11c2 ad00  suba [y,x]       4955  suba([Y,X])                     #16
              11c3 c228  st   [$28]       4956  st([v6502_Qz])                  #17 Z flag
              11c4 c229  st   [$29]       4957  st([v6502_Qn])                  #18 N flag
              11c5 fccb  bra  .cmp21      4958  bra('.cmp21')                   #19
              11c6 4d00  ora  [y,x]       4959  ora([Y,X])                      #20
                                          4960  label('.cmp17')
.cmp17:       11c7 c228  st   [$28]       4961  st([v6502_Qz])                  #17 Z flag
              11c8 c229  st   [$29]       4962  st([v6502_Qn])                  #18 N flag
              11c9 2d00  anda [y,x]       4963  anda([Y,X])                     #19
              11ca 0200  nop              4964  nop()                           #20
                                          4965  label('.cmp21')
.cmp21:       11cb 6080  xora $80         4966  xora(0x80)                      #21
              11cc 3080  anda $80,x       4967  anda(0x80,X)                    #22 Move carry to bit 0
              11cd 0127  ld   [$27]       4968  ld([v6502_P])                   #23 C flag
              11ce 20fe  anda $fe         4969  anda(~1)                        #24
              11cf 4500  ora  [x]         4970  ora([X])                        #25
              11d0 c227  st   [$27]       4971  st([v6502_P])                   #26
              11d1 140e  ld   $0e,y       4972  ld(hi('v6502_next'),Y)          #27
              11d2 e020  jmp  y,$20       4973  jmp(Y,'v6502_next')             #28
              11d3 00f1  ld   $f1         4974  ld(-30/2)                       #29
                                          4975
                                          4976  label('v6502_plp')
                                          4977  assert v6502_Nflag == 128
                                          4978  assert 2*v6502_Vflag == v6502_Vemu
v6502_plp:    11d4 011c  ld   [$1c]       4979  ld([v6502_S])                   #12
              11d5 1200  ld   ac,x        4980  ld(AC,X)                        #13
              11d6 8001  adda $01         4981  adda(1)                         #14
              11d7 c21c  st   [$1c]       4982  st([v6502_S])                   #15
              11d8 0500  ld   [x]         4983  ld([X])                         #16
              11d9 c229  st   [$29]       4984  st([v6502_Qn])                  #17 N flag
              11da 2002  anda $02         4985  anda(v6502_Zflag)               #18
              11db 6002  xora $02         4986  xora(v6502_Zflag)               #19
              11dc c228  st   [$28]       4987  st([v6502_Qz])                  #20 Z flag
              11dd 0500  ld   [x]         4988  ld([X])                         #21
              11de 207f  anda $7f         4989  anda(~v6502_Vemu)               #22 V to bit 7
              11df 8040  adda $40         4990  adda(v6502_Vflag)               #23
              11e0 c227  st   [$27]       4991  st([v6502_P])                   #24 All other flags
              11e1 140e  ld   $0e,y       4992  ld(hi('v6502_next'),Y)          #25
              11e2 e020  jmp  y,$20       4993  jmp(Y,'v6502_next')             #26
              11e3 00f2  ld   $f2         4994  ld(-28/2)                       #27
                                          4995
                                          4996  label('v6502_rti')
v6502_rti:    11e4 011c  ld   [$1c]       4997  ld([v6502_S])                   #12
              11e5 1200  ld   ac,x        4998  ld(AC,X)                        #13
              11e6 8003  adda $03         4999  adda(3)                         #14
              11e7 c21c  st   [$1c]       5000  st([v6502_S])                   #15
              11e8 0500  ld   [x]         5001  ld([X])                         #16
              11e9 c229  st   [$29]       5002  st([v6502_Qn])                  #17 N flag
              11ea 2002  anda $02         5003  anda(v6502_Zflag)               #18
              11eb 6002  xora $02         5004  xora(v6502_Zflag)               #19
              11ec c228  st   [$28]       5005  st([v6502_Qz])                  #20 Z flag
              11ed 1400  ld   $00,y       5006  ld(0,Y)                         #21
              11ee 0d00  ld   [y,x]       5007  ld([Y,X])                       #22
              11ef de00  st   [y,x++]     5008  st([Y,Xpp])                     #23 Just X++
              11f0 207f  anda $7f         5009  anda(~v6502_Vemu)               #24 V to bit 7
              11f1 8040  adda $40         5010  adda(v6502_Vflag)               #25
              11f2 c227  st   [$27]       5011  st([v6502_P])                   #26 All other flags
              11f3 0d00  ld   [y,x]       5012  ld([Y,X])                       #27
              11f4 de00  st   [y,x++]     5013  st([Y,Xpp])                     #28 Just X++
              11f5 c21a  st   [$1a]       5014  st([v6502_PCL])                 #29
              11f6 0d00  ld   [y,x]       5015  ld([Y,X])                       #30
              11f7 c21b  st   [$1b]       5016  st([v6502_PCH])                 #31
              11f8 0200  nop              5017  nop()                           #32
              11f9 140e  ld   $0e,y       5018  ld(hi('v6502_next'),Y)          #33
              11fa e020  jmp  y,$20       5019  jmp(Y,'v6502_next')             #34
              11fb 00ee  ld   $ee         5020  ld(-36/2)                       #35
                                          5021
                                          5022  #-----------------------------------------------------------------------
                                          5023  #       Extended vertical blank logic: interrupts
                                          5024  #-----------------------------------------------------------------------
              11fc 0200  nop              5025  align(0x100)
              11fd 0200  nop
              11fe 0200  nop
              11ff 0200  nop
                                          5026
                                          5027  # Check if an IRQ handler is defined
                                          5028  label('vBlankFirst#78')
vBlankFirst#78:
              1200 09f6  ld   [y,$f6]     5029  ld([Y,vIRQ_v5])                 #78
              1201 49f7  ora  [y,$f7]     5030  ora([Y,vIRQ_v5+1])              #79
                                          5031  bne('vBlankFirst#82')           #80
              1202 ec09  bne  vBlankFirst#82
              1203 0116  ld   [$16]       5032  ld([vPC])                       #81
              1204 0055  ld   $55         5033  runVcpu(186-82-extra,           #82 Application cycles (scan line 0)
              1205 c21e  st   [$1e]
              1206 1505  ld   [$05],y
              1207 e0ff  jmp  y,$ff
              1208 001f  ld   $1f
                                          5034      '---D line 0 timeout but no irq',
                                          5035      returnTo='vBlankFirst#186')
                                          5036
                                          5037  label('vBlankFirst#82')
vBlankFirst#82:
              1209 c230  st   [$30]       5038  st([0x30])                      #82 Save vPC
              120a 0117  ld   [$17]       5039  ld([vPC+1])                     #83
              120b c231  st   [$31]       5040  st([0x31])                      #84
              120c 0118  ld   [$18]       5041  ld([vAC])                       #85 Save vAC
              120d c232  st   [$32]       5042  st([0x32])                      #86
              120e 0119  ld   [$19]       5043  ld([vAC+1])                     #87
              120f c233  st   [$33]       5044  st([0x33])                      #88
              1210 09f6  ld   [y,$f6]     5045  ld([Y,vIRQ_v5])                 #89 Set vPC to vIRQ
              1211 a002  suba $02         5046  suba(2)                         #90
              1212 c216  st   [$16]       5047  st([vPC])                       #91
              1213 09f7  ld   [y,$f7]     5048  ld([Y,vIRQ_v5+1])               #92
              1214 c217  st   [$17]       5049  st([vPC+1])                     #93
              1215 0105  ld   [$05]       5050  ld([vCpuSelect])                #94 Handler must save this if needed
              1216 c219  st   [$19]       5051  st([vAC+1])                     #95
              1217 0000  ld   $00         5052  ld(0)                           #96
              1218 c218  st   [$18]       5053  st([vAC])                       #97
              1219 0002  ld   $02         5054  ld(hi('ENTER'))                 #98 Set vCpuSelect to ENTER (=regular vCPU)
              121a c205  st   [$05]       5055  st([vCpuSelect])                #99
              121b 0055  ld   $55         5056  runVcpu(186-100-extra,          #100 Application cycles (scan line 0)
              121c c21e  st   [$1e]
              121d 1505  ld   [$05],y
              121e e0ff  jmp  y,$ff
              121f 0016  ld   $16
                                          5057      '---D line 0 timeout with irq',
                                          5058      returnTo='vBlankFirst#186')
                                          5059
                                          5060  # vIRQ sequence WITH interpreter switch
                                          5061  label('vRTI#18')
vRTI#18:      1220 0500  ld   [x]         5062  ld([X])                         #18
              1221 c205  st   [$05]       5063  st([vCpuSelect])                #19
              1222 0130  ld   [$30]       5064  ld([0x30])                      #20
              1223 c216  st   [$16]       5065  st([vPC])                       #21
              1224 0131  ld   [$31]       5066  ld([0x31])                      #22
              1225 c217  st   [$17]       5067  st([vPC+1])                     #23
              1226 0132  ld   [$32]       5068  ld([0x32])                      #24
              1227 c218  st   [$18]       5069  st([vAC])                       #25
              1228 0133  ld   [$33]       5070  ld([0x33])                      #26
              1229 c219  st   [$19]       5071  st([vAC+1])                     #27
              122a 0200  nop              5072  nop()                           #0
              122b 1403  ld   $03,y       5073  ld(hi('RESYNC'),Y)              #1
              122c e00c  jmp  y,$0c       5074  jmp(Y,'RESYNC')                 #2
              122d 0115  ld   [$15]       5075  ld([vTicks])                    #3
                                          5076
                                          5077  # Entered last line of vertical blank (line 40)
                                          5078  label('vBlankLast#34')
                                          5079
                                          5080  #-----------------------------------------------------------------------
                                          5081  #       Extended vertical blank logic: game controller decoding
                                          5082  #-----------------------------------------------------------------------
                                          5083
                                          5084  # Game controller types
                                          5085  # TypeA: Based on 74LS165 shift register (not supported)
                                          5086  # TypeB: Based on CD4021B shift register (standard)
                                          5087  # TypeC: Based on priority encoder
                                          5088  #
                                          5089  # Notes:
                                          5090  # - TypeA was only used during development and first beta test, before ROM v1
                                          5091  # - TypeB appears as type A with negative logic levels
                                          5092  # - TypeB is the game controller type that comes with the original kit and ROM v1
                                          5093  # - TypeB is mimicked by BabelFish / Pluggy McPlugface
                                          5094  # - TypeB requires a prolonged /SER_LATCH, therefore vPulse is 8 scanlines, not 2
                                          5095  # - TypeB and TypeC can be sampled in the same scanline
                                          5096  # - TypeA is 1 scanline shifted as it looks at a different edge (XXX up or down?)
                                          5097  # - TypeC gives incomplete information: lower buttons overshadow higher ones
                                          5098  #
                                          5099  #       TypeC    Alias    Button TypeB
                                          5100  #       00000000  ^@   -> Right  11111110
                                          5101  #       00000001  ^A   -> Left   11111101
                                          5102  #       00000011  ^C   -> Down   11111011
                                          5103  #       00000111  ^G   -> Up     11110111
                                          5104  #       00001111  ^O   -> Start  11101111
                                          5105  #       00011111  ^_   -> Select 11011111
                                          5106  #       00111111  ?    -> B      10111111
                                          5107  #       01111111  DEL  -> A      01111111
                                          5108  #       11111111       -> (None) 11111111
                                          5109  #
                                          5110  #       Conversion formula:
                                          5111  #               f(x) := 254 - x
                                          5112
                                          5113  # Detect controller TypeC codes
vBlankLast#34:
              122e 010f  ld   [$0f]       5114  ld([serialRaw])                 #34 if serialRaw in [0,1,3,7,15,31,63,127,255]
              122f 8001  adda $01         5115  adda(1)                         #35
              1230 210f  anda [$0f]       5116  anda([serialRaw])               #36
              1231 ec42  bne  .buttons#39 5117  bne('.buttons#39')              #37
                                          5118
                                          5119  # TypeC
              1232 010f  ld   [$0f]       5120  ld([serialRaw])                 #38 [TypeC] if serialRaw < serialLast
              1233 8001  adda $01         5121  adda(1)                         #39
              1234 2110  anda [$10]       5122  anda([serialLast])              #40
              1235 ec39  bne  .buttons#43 5123  bne('.buttons#43')              #41
              1236 00fe  ld   $fe         5124  ld(254)                         #42 then clear the selected bit
              1237 0200  nop              5125  nop()                           #43
              1238 fc3c  bra  .buttons#46 5126  bra('.buttons#46')              #44
                                          5127  label('.buttons#43')
.buttons#43:  1239 a10f  suba [$0f]       5128  suba([serialRaw])               #43,45
              123a 2111  anda [$11]       5129  anda([buttonState])             #44
              123b c211  st   [$11]       5130  st([buttonState])               #45
                                          5131  label('.buttons#46')
.buttons#46:  123c 010f  ld   [$0f]       5132  ld([serialRaw])                 #46 Set the lower bits
              123d 4111  ora  [$11]       5133  ora([buttonState])              #47
                                          5134  label('.buttons#48')
.buttons#48:  123e c211  st   [$11]       5135  st([buttonState])               #48
              123f 010f  ld   [$0f]       5136  ld([serialRaw])                 #49 Update serialLast for next pass
              1240 e0b3  jmp  y,$b3       5137  jmp(Y,'vBlankLast#52')          #50
              1241 c210  st   [$10]       5138  st([serialLast])                #51
                                          5139
                                          5140  # TypeB
                                          5141  # pChange = pNew & ~pOld
                                          5142  # nChange = nNew | ~nOld {DeMorgan}
                                          5143  label('.buttons#39')
.buttons#39:  1242 00ff  ld   $ff         5144  ld(255)                         #39 [TypeB] Bitwise edge-filter to detect button presses
              1243 6110  xora [$10]       5145  xora([serialLast])              #40
              1244 410f  ora  [$0f]       5146  ora([serialRaw])                #41 Catch button-press events
              1245 2111  anda [$11]       5147  anda([buttonState])             #42 Keep active button presses
              1246 410f  ora  [$0f]       5148  ora([serialRaw])                #43
              1247 0200  nop              5149  nop()                           #44
              1248 0200  nop              5150  nop()                           #45
              1249 fc3e  bra  .buttons#48 5151  bra('.buttons#48')              #46
              124a 0200  nop              5152  nop()                           #47
                                          5153
                                          5154
                                          5155  #-----------------------------------------------------------------------
                                          5156  #       More SYS functions
                                          5157  #-----------------------------------------------------------------------
                                          5158
                                          5159  # SYS_Exec_88 implementation
                                          5160  label('sys_Exec')
sys_Exec:     124b d617  st   [$17],y     5161  st([vPC+1],Y)                   #18 Clear vPCH and Y
              124c 011c  ld   [$1c]       5162  ld([vSP])                       #19 Place ROM loader below current stack pointer
              124d a037  suba $37         5163  suba(53+2)                      #20 (AC -> *+0) One extra word for PUSH
              124e d21d  st   [$1d],x     5164  st([vTmp],X)                    #21
              124f 80fe  adda $fe         5165  adda(-2)                        #22 (AC -> *-2)
              1250 c216  st   [$16]       5166  st([vPC])                       #23
                                          5167  # Start of manually compiled vCPU section
              1251 dc75  st   $75,[y,x++] 5168  st('PUSH',    [Y,Xpp])          #24 *+0
              1252 dccf  st   $cf,[y,x++] 5169  st('CALL',    [Y,Xpp])          #25 *+26 Fetch first byte
              1253 8023  adda $23         5170  adda(33-(-2))                   #26 (AC -> *+33)
              1254 de00  st   [y,x++]     5171  st(           [Y,Xpp])          #27 *+27
              1255 dc5e  st   $5e,[y,x++] 5172  st('ST',      [Y,Xpp])          #28 *+3 Chunk copy loop
              1256 dc27  st   $27,[y,x++] 5173  st(sysArgs+3, [Y,Xpp])          #29 *+4 High-address comes first
              1257 dccf  st   $cf,[y,x++] 5174  st('CALL',    [Y,Xpp])          #30 *+5
              1258 de00  st   [y,x++]     5175  st(           [Y,Xpp])          #31 *+6
              1259 dc5e  st   $5e,[y,x++] 5176  st('ST',      [Y,Xpp])          #32 *+7
              125a dc26  st   $26,[y,x++] 5177  st(sysArgs+2, [Y,Xpp])          #33 *+8 Then the low address
              125b dccf  st   $cf,[y,x++] 5178  st('CALL',    [Y,Xpp])          #34 *+9
              125c de00  st   [y,x++]     5179  st(           [Y,Xpp])          #35 *+10
              125d dc5e  st   $5e,[y,x++] 5180  st('ST',      [Y,Xpp])          #36 *+11 Byte copy loop
              125e dc28  st   $28,[y,x++] 5181  st(sysArgs+4, [Y,Xpp])          #37 *+12 Byte count (0 means 256)
              125f dccf  st   $cf,[y,x++] 5182  st('CALL',    [Y,Xpp])          #38 *+13
              1260 de00  st   [y,x++]     5183  st(           [Y,Xpp])          #39 *+14
              1261 dcf0  st   $f0,[y,x++] 5184  st('POKE',    [Y,Xpp])          #40 *+15
              1262 dc26  st   $26,[y,x++] 5185  st(sysArgs+2, [Y,Xpp])          #41 *+16
              1263 dc93  st   $93,[y,x++] 5186  st('INC',     [Y,Xpp])          #42 *+17
              1264 dc26  st   $26,[y,x++] 5187  st(sysArgs+2, [Y,Xpp])          #43 *+18
              1265 dc1a  st   $1a,[y,x++] 5188  st('LD',      [Y,Xpp])          #44 *+19
              1266 dc28  st   $28,[y,x++] 5189  st(sysArgs+4, [Y,Xpp])          #45 *+20
              1267 dce6  st   $e6,[y,x++] 5190  st('SUBI',    [Y,Xpp])          #46 *+21
              1268 dc01  st   $01,[y,x++] 5191  st(1,         [Y,Xpp])          #47 *+22
              1269 dc35  st   $35,[y,x++] 5192  st('BCC',     [Y,Xpp])          #48 *+23
              126a dc72  st   $72,[y,x++] 5193  st('NE',      [Y,Xpp])          #49 *+24
              126b 80e8  adda $e8         5194  adda(11-2-33)                   #50 (AC -> *+9)
              126c de00  st   [y,x++]     5195  st(           [Y,Xpp])          #51 *+25
              126d dccf  st   $cf,[y,x++] 5196  st('CALL',    [Y,Xpp])          #52 *+26 Go to next block
              126e 8018  adda $18         5197  adda(33-9)                      #53 (AC -> *+33)
              126f de00  st   [y,x++]     5198  st(           [Y,Xpp])          #54 *+27
              1270 dc35  st   $35,[y,x++] 5199  st('BCC',     [Y,Xpp])          #55 *+28
              1271 dc72  st   $72,[y,x++] 5200  st('NE',      [Y,Xpp])          #56 *+29
              1272 80e0  adda $e0         5201  adda(3-2-33)                    #57 (AC -> *+1)
              1273 de00  st   [y,x++]     5202  st(           [Y,Xpp])          #58 *+30
              1274 dc63  st   $63,[y,x++] 5203  st('POP',     [Y,Xpp])          #59 *+31 End
              1275 dcff  st   $ff,[y,x++] 5204  st('RET',     [Y,Xpp])          #60 *+32
                                          5205  # Pointer constant pointing to the routine below (for use by CALL)
              1276 8022  adda $22         5206  adda(35-1)                      #61 (AC -> *+35)
              1277 de00  st   [y,x++]     5207  st(           [Y,Xpp])          #62 *+33
              1278 dc00  st   $00,[y,x++] 5208  st(0,         [Y,Xpp])          #63 *+34
                                          5209  # Routine to read next byte from ROM and advance read pointer
              1279 dc1a  st   $1a,[y,x++] 5210  st('LD',      [Y,Xpp])          #64 *+35 Test for end of ROM table
              127a dc24  st   $24,[y,x++] 5211  st(sysArgs+0, [Y,Xpp])          #65 *+36
              127b dc8c  st   $8c,[y,x++] 5212  st('XORI',    [Y,Xpp])          #66 *+37
              127c dcfb  st   $fb,[y,x++] 5213  st(251,       [Y,Xpp])          #67 *+38
              127d dc35  st   $35,[y,x++] 5214  st('BCC',     [Y,Xpp])          #68 *+39
              127e dc72  st   $72,[y,x++] 5215  st('NE',      [Y,Xpp])          #69 *+40
              127f 8009  adda $09         5216  adda(46-2-35)                   #70 (AC -> *+44)
              1280 de00  st   [y,x++]     5217  st(           [Y,Xpp])          #71 *+41
              1281 dc5e  st   $5e,[y,x++] 5218  st('ST',      [Y,Xpp])          #72 *+42 Wrap to next ROM page
              1282 dc24  st   $24,[y,x++] 5219  st(sysArgs+0, [Y,Xpp])          #73 *+43
              1283 dc93  st   $93,[y,x++] 5220  st('INC',     [Y,Xpp])          #74 *+44
              1284 dc25  st   $25,[y,x++] 5221  st(sysArgs+1, [Y,Xpp])          #75 *+45
              1285 dc21  st   $21,[y,x++] 5222  st('LDW',     [Y,Xpp])          #76 *+46 Read next byte from ROM table
              1286 dc24  st   $24,[y,x++] 5223  st(sysArgs+0, [Y,Xpp])          #77 *+47
              1287 dc7f  st   $7f,[y,x++] 5224  st('LUP',     [Y,Xpp])          #78 *+48
              1288 dc00  st   $00,[y,x++] 5225  st(0,         [Y,Xpp])          #79 *+49
              1289 dc93  st   $93,[y,x++] 5226  st('INC',     [Y,Xpp])          #80 *+50 Increment read pointer
              128a dc24  st   $24,[y,x++] 5227  st(sysArgs+0, [Y,Xpp])          #81 *+51
              128b dcff  st   $ff,[y,x++] 5228  st('RET',     [Y,Xpp])          #82 *+52 Return
                                          5229  # Return to interpreter
              128c 1403  ld   $03,y       5230  ld(hi('REENTER'),Y)             #83
              128d e0cb  jmp  y,$cb       5231  jmp(Y,'REENTER')                #84
              128e 00d4  ld   $d4         5232  ld(-88/2)                       #85
                                          5233
                                          5234  # SYS_VDrawBits_134 implementation
                                          5235  label('sys_VDrawBits')
sys_VDrawBits:
              128f 0000  ld   $00         5236  ld(0)                           #18
                                          5237  label('.sysVdb0')
.sysVdb0:     1290 c21d  st   [$1d]       5238  st([vTmp])                      #19+i*25
              1291 9529  adda [$29],y     5239  adda([sysArgs+5],Y)             #20+i*25 Y=[sysPos+1]+[vTmp]
              1292 0126  ld   [$26]       5240  ld([sysArgs+2])                 #21+i*25 Select color
              1293 e896  blt  $1296       5241  bmi(pc()+3)                     #22+i*25
              1294 fc97  bra  $1297       5242  bra(pc()+3)                     #23+i*25
              1295 0124  ld   [$24]       5243  ld([sysArgs+0])                 #24+i*25
              1296 0125  ld   [$25]       5244  ld([sysArgs+1])                 #24+i*25(!)
              1297 ce00  st   [y,x]       5245  st([Y,X])                       #25+i*25 Draw pixel
              1298 0126  ld   [$26]       5246  ld([sysArgs+2])                 #26+i*25 Shift byte left
              1299 8200  adda ac          5247  adda(AC)                        #27+i*25
              129a c226  st   [$26]       5248  st([sysArgs+2])                 #28+i*25
              129b 011d  ld   [$1d]       5249  ld([vTmp])                      #29+i*25 Unrolled loop (once)
              129c 8129  adda [$29]       5250  adda([sysArgs+5])               #31+i*25
              129d 9401  adda $01,y       5251  adda(1,Y)                       #30+i*25 Y=[sysPos+1]+[vTmp]+1
              129e 0126  ld   [$26]       5252  ld([sysArgs+2])                 #32+i*25 Select color
              129f e8a2  blt  $12a2       5253  bmi(pc()+3)                     #33+i*25
              12a0 fca3  bra  $12a3       5254  bra(pc()+3)                     #34+i*25
              12a1 0124  ld   [$24]       5255  ld([sysArgs+0])                 #35+i*25
              12a2 0125  ld   [$25]       5256  ld([sysArgs+1])                 #35+i*25(!)
              12a3 ce00  st   [y,x]       5257  st([Y,X])                       #36+i*25 Draw pixel
              12a4 0126  ld   [$26]       5258  ld([sysArgs+2])                 #37+i*25 Shift byte left
              12a5 8200  adda ac          5259  adda(AC)                        #38+i*25
              12a6 c226  st   [$26]       5260  st([sysArgs+2])                 #39+i*25
              12a7 011d  ld   [$1d]       5261  ld([vTmp])                      #40+i*25 Loop counter
              12a8 a006  suba $06         5262  suba(6)                         #41+i*25
              12a9 ec90  bne  .sysVdb0    5263  bne('.sysVdb0')                 #42+i*25
              12aa 8008  adda $08         5264  adda(8)                         #43+i*25 Steps of 2
              12ab 1403  ld   $03,y       5265  ld(hi('REENTER'),Y)             #119
              12ac e0cb  jmp  y,$cb       5266  jmp(Y,'REENTER')                #120
              12ad 00c2  ld   $c2         5267  ld(-124/2)                      #121
                                          5268
                                          5269  # SYS_ResetWaveforms_v4_50 implementation
                                          5270  label('sys_ResetWaveforms')
sys_ResetWaveforms:
              12ae 0118  ld   [$18]       5271  ld([vAC+0])                     #18 X=4i
              12af 8200  adda ac          5272  adda(AC)                        #19
              12b0 9200  adda ac,x        5273  adda(AC,X)                      #20
              12b1 0118  ld   [$18]       5274  ld([vAC+0])                     #21
              12b2 de00  st   [y,x++]     5275  st([Y,Xpp])                     #22 Sawtooth: T[4i+0] = i
              12b3 2020  anda $20         5276  anda(0x20)                      #23 Triangle: T[4i+1] = 2i if i<32 else 127-2i
              12b4 ecb7  bne  $12b7       5277  bne(pc()+3)                     #24
              12b5 0118  ld   [$18]       5278  ld([vAC+0])                     #25
              12b6 fcb9  bra  $12b9       5279  bra(pc()+3)                     #26
              12b7 8118  adda [$18]       5280  adda([vAC+0])                   #26,27
              12b8 607f  xora $7f         5281  xora(127)                       #27
              12b9 de00  st   [y,x++]     5282  st([Y,Xpp])                     #28
              12ba 0118  ld   [$18]       5283  ld([vAC+0])                     #29 Pulse: T[4i+2] = 0 if i<32 else 63
              12bb 2020  anda $20         5284  anda(0x20)                      #30
              12bc ecbf  bne  $12bf       5285  bne(pc()+3)                     #31
              12bd fcc0  bra  $12c0       5286  bra(pc()+3)                     #32
              12be 0000  ld   $00         5287  ld(0)                           #33
              12bf 003f  ld   $3f         5288  ld(63)                          #33(!)
              12c0 de00  st   [y,x++]     5289  st([Y,Xpp])                     #34
              12c1 0118  ld   [$18]       5290  ld([vAC+0])                     #35 Sawtooth: T[4i+3] = i
              12c2 ce00  st   [y,x]       5291  st([Y,X])                       #36
              12c3 8001  adda $01         5292  adda(1)                         #37 i += 1
              12c4 c218  st   [$18]       5293  st([vAC+0])                     #38
              12c5 6040  xora $40         5294  xora(64)                        #39 For 64 iterations
              12c6 f0c9  beq  $12c9       5295  beq(pc()+3)                     #40
              12c7 fcca  bra  $12ca       5296  bra(pc()+3)                     #41
              12c8 00fe  ld   $fe         5297  ld(-2)                          #42
              12c9 0000  ld   $00         5298  ld(0)                           #42(!)
              12ca 8116  adda [$16]       5299  adda([vPC])                     #43
              12cb c216  st   [$16]       5300  st([vPC])                       #44
              12cc 1403  ld   $03,y       5301  ld(hi('REENTER'),Y)             #45
              12cd e0cb  jmp  y,$cb       5302  jmp(Y,'REENTER')                #46
              12ce 00e7  ld   $e7         5303  ld(-50/2)                       #47
                                          5304
                                          5305  # SYS_ShuffleNoise_v4_46 implementation
                                          5306  label('sys_ShuffleNoise')
sys_ShuffleNoise:
              12cf 1118  ld   [$18],x     5307  ld([vAC+0],X)                   #18 tmp = T[4j]
              12d0 0d00  ld   [y,x]       5308  ld([Y,X])                       #19
              12d1 c21d  st   [$1d]       5309  st([vTmp])                      #20
              12d2 1119  ld   [$19],x     5310  ld([vAC+1],X)                   #21 T[4j] = T[4i]
              12d3 0d00  ld   [y,x]       5311  ld([Y,X])                       #22
              12d4 1118  ld   [$18],x     5312  ld([vAC+0],X)                   #23
              12d5 ce00  st   [y,x]       5313  st([Y,X])                       #24
              12d6 8200  adda ac          5314  adda(AC)                        #25 j += T[4i]
              12d7 8200  adda ac          5315  adda(AC,)                       #26
              12d8 8118  adda [$18]       5316  adda([vAC+0])                   #27
              12d9 c218  st   [$18]       5317  st([vAC+0])                     #28
              12da 1119  ld   [$19],x     5318  ld([vAC+1],X)                   #29 T[4i] = tmp
              12db 011d  ld   [$1d]       5319  ld([vTmp])                      #30
              12dc ce00  st   [y,x]       5320  st([Y,X])                       #31
              12dd 0119  ld   [$19]       5321  ld([vAC+1])                     #32 i += 1
              12de 8004  adda $04         5322  adda(4)                         #33
              12df c219  st   [$19]       5323  st([vAC+1])                     #34
              12e0 f0e3  beq  $12e3       5324  beq(pc()+3)                     #35 For 64 iterations
              12e1 fce4  bra  $12e4       5325  bra(pc()+3)                     #36
              12e2 00fe  ld   $fe         5326  ld(-2)                          #37
              12e3 0000  ld   $00         5327  ld(0)                           #37(!)
              12e4 8116  adda [$16]       5328  adda([vPC])                     #38
              12e5 c216  st   [$16]       5329  st([vPC])                       #39
              12e6 1403  ld   $03,y       5330  ld(hi('NEXTY'),Y)               #40
              12e7 e000  jmp  y,$00       5331  jmp(Y,'NEXTY')                  #41
              12e8 00ea  ld   $ea         5332  ld(-44/2)                       #42
                                          5333
                                          5334  # SYS_LoadBytes_DEVROM_XXX implementation
                                          5335  label('sys_LoadBytes')
sys_LoadBytes:
              12e9 0030  ld   $30         5336  ld(0x30)                        # Target address
              12ea c225  st   [$25]       5337  st([sysArgs+1])                 #
              12eb 011a  ld   [$1a]       5338  ld([vLR+0])                     # Source address
              12ec d224  st   [$24],x     5339  st([sysArgs+0],X)               #
              12ed 0d00  ld   [y,x]       5340  ld([Y,X])                       # Byte count
                                          5341  label('.slb1')                  #
.slb1:        12ee c226  st   [$26]       5342  st([sysArgs+2])                 #
                                          5343
              12ef 0124  ld   [$24]       5344  ld([sysArgs+0])                 # Advance source address
              12f0 8001  adda $01         5345  adda(1)                         #
              12f1 d224  st   [$24],x     5346  st([sysArgs+0],X)               #
                                          5347
              12f2 0d00  ld   [y,x]       5348  ld([Y,X])                       # Copy byte
              12f3 1125  ld   [$25],x     5349  ld([sysArgs+1],X)               #
              12f4 c600  st   [x]         5350  st([X])                         #
                                          5351
              12f5 0125  ld   [$25]       5352  ld([sysArgs+1])                 # Advance target address
              12f6 8001  adda $01         5353  adda(1)                         #
              12f7 c225  st   [$25]       5354  st([sysArgs+1])                 #
                                          5355
              12f8 0126  ld   [$26]       5356  ld([sysArgs+2])                 # Decrement byte count and loop
              12f9 ecee  bne  .slb1       5357  bne('.slb1')                    #
              12fa a001  suba $01         5358  suba(1)                         #
                                          5359
                                          5360  # XXX Unfinished
                                          5361
                                          5362  #-----------------------------------------------------------------------
                                          5363  #
                                          5364  #  End of core
                                          5365  #
                                          5366  #-----------------------------------------------------------------------
                                          5367  disableListing()
              12fb 0200  nop              ;5 fillers
              12fc 0200  nop
              12fd 0200  nop
              12fe 0200  nop
              12ff 0200  nop              ;+-----------------------------------+
                                          ;| SYS_Loader_vX.py                  |
                                          ;+-----------------------------------+
SYS_Loader_vX:
SYS_LoaderNextByteIn_32:
              1300 0109  ld   [$09]
              1301 6127  xora [$27]
              1302 ec0f  bne  .sysNbi#19
              1303 1124  ld   [$24],x
              1304 1525  ld   [$25],y
              1305 0300  ld   in
              1306 ce00  st   [y,x]
              1307 8126  adda [$26]
              1308 c226  st   [$26]
              1309 0124  ld   [$24]
              130a 8001  adda $01
              130b c224  st   [$24]
              130c 1403  ld   $03,y
              130d e0cb  jmp  y,$cb
              130e 00f0  ld   $f0
.sysNbi#19:   130f 0116  ld   [$16]
              1310 a002  suba $02
              1311 c216  st   [$16]
              1312 1403  ld   $03,y
              1313 e000  jmp  y,$00
              1314 00f3  ld   $f3
SYS_LoaderProcessInput_64:
              1315 1525  ld   [$25],y
              1316 0126  ld   [$26]
              1317 ec3c  bne  .sysPi#19
              1318 0124  ld   [$24]
              1319 b041  suba $41,x
              131a 0d00  ld   [y,x]
              131b de00  st   [y,x++]     ;Just X++
              131c 604c  xora $4c
              131d ec40  bne  .sysPi#25
              131e 0d00  ld   [y,x]       ;Valid command
              131f de00  st   [y,x++]     ;Just X++
              1320 203f  anda $3f
              1321 c228  st   [$28]
              1322 8d00  adda [y,x]
              1323 8001  adda $01
              1324 20fe  anda $fe
              1325 c21d  st   [$1d]
              1326 0d00  ld   [y,x]
              1327 de00  st   [y,x++]     ;Just X++
              1328 c229  st   [$29]
              1329 0d00  ld   [y,x]
              132a de00  st   [y,x++]     ;Just X++
              132b c22a  st   [$2a]
              132c a001  suba $01
              132d 20fc  anda $fc
              132e 411d  ora  [$1d]
              132f c21d  st   [$1d]
              1330 0128  ld   [$28]
              1331 ec45  bne  .sysPi#45
              1332 0129  ld   [$29]       ;Execute
              1333 c21a  st   [$1a]
              1334 a002  suba $02
              1335 c216  st   [$16]
              1336 012a  ld   [$2a]
              1337 c217  st   [$17]
              1338 c21b  st   [$1b]
              1339 1403  ld   $03,y
              133a e0cb  jmp  y,$cb
              133b 00e4  ld   $e4
.sysPi#19:    133c 0001  ld   $01         ;Wait 6 cycles
              133d ec3d  bne  $133d
              133e a001  suba $01
              133f 0200  nop              ;Invalid checksum
.sysPi#25:    1340 0067  ld   $67         ;Unknown command
              1341 c226  st   [$26]
              1342 1403  ld   $03,y
              1343 e0cb  jmp  y,$cb
              1344 00f0  ld   $f0
.sysPi#45:    1345 011d  ld   [$1d]       ;Loading data
              1346 ec49  bne  $1349
              1347 fc4a  bra  $134a
              1348 00fc  ld   $fc         ;Unsafe
              1349 00ff  ld   $ff         ;Safe
              134a 2121  anda [$21]
              134b c221  st   [$21]
              134c 0124  ld   [$24]
              134d b001  suba $01,x
              134e 0d00  ld   [y,x]
              134f c226  st   [$26]
              1350 1403  ld   $03,y
              1351 e0cb  jmp  y,$cb
              1352 00e2  ld   $e2
SYS_LoaderPayloadCopy_34:
              1353 0128  ld   [$28]
              1354 f061  beq  .sysCc#18
              1355 a001  suba $01
              1356 c228  st   [$28]
              1357 1124  ld   [$24],x
              1358 1525  ld   [$25],y
              1359 0d00  ld   [y,x]
              135a 1129  ld   [$29],x
              135b 152a  ld   [$2a],y
              135c ce00  st   [y,x]
              135d 0129  ld   [$29]
              135e 8001  adda $01
              135f c229  st   [$29]
              1360 fc65  bra  .sysCc#30
.sysCc#18:    1361 1403  ld   $03,y
              1362 0004  ld   $04         ;Wait 11 cycles
              1363 ec63  bne  $1363
              1364 a001  suba $01
.sysCc#30:    1365 e0cb  jmp  y,$cb
              1366 00ef  ld   $ef         ;End of SYS_Loader_vX.py, size 103
                                          ;+-----------------------------------+
                                          ;| Apps/Loader/Loader_v4.gcl         |
                                          ;+-----------------------------------+
              1367 dc00  st   $00,[y,x++] ;'\x00'
              1368 dc00  st   $00,[y,x++] ;'\x00'
              1369 dc00  st   $00,[y,x++] ;'\x00'
              136a dc00  st   $00,[y,x++] ;'\x00'
              136b dc00  st   $00,[y,x++] ;'\x00'
              136c dc00  st   $00,[y,x++] ;'\x00'
              136d dc00  st   $00,[y,x++] ;'\x00'
              136e dc00  st   $00,[y,x++] ;'\x00'
              136f 0000  ld   $00
              1370 c218  st   [$18]
              1371 0000  ld   $00
              1372 1423  ld   $23,y
              1373 e09b  jmp  y,$9b
              1374 c219  st   [$19]
Loader:       1375 0002  ld   $02         ;| RAM segment address (high byte first)
              1376 0000  ld   $00         ;|
              1377 0095  ld   $95         ;| Length (1..256)
              1378 00cd  ld   $cd         ;0200 DEF
              1379 0043  ld   $43
              137a 00e6  ld   $e6         ;0202 SUBI
              137b 0052  ld   $52
              137c 0035  ld   $35         ;0204 BCC
              137d 0053  ld   $53         ;0205 GE
              137e 000e  ld   $0e
              137f 00e3  ld   $e3         ;0207 ADDI
              1380 0032  ld   $32
              1381 002b  ld   $2b         ;0209 STW
              1382 0030  ld   $30         ;0209 'i'
              1383 0011  ld   $11         ;020b LDWI
              1384 0000  ld   $00
              1385 0007  ld   $07
              1386 0090  ld   $90         ;020e BRA
              1387 0013  ld   $13
              1388 002b  ld   $2b         ;0210 STW
              1389 0030  ld   $30         ;0210 'i'
              138a 0011  ld   $11         ;0212 LDWI
              138b 0000  ld   $00
              138c 0008  ld   $08
              138d 002b  ld   $2b         ;0215 STW
              138e 0032  ld   $32         ;0215 'j'
              138f 0021  ld   $21         ;0217 LDW
              1390 0030  ld   $30         ;0217 'i'
              1391 00e9  ld   $e9         ;0219 LSLW
              1392 00e9  ld   $e9         ;021a LSLW
              1393 0099  ld   $99         ;021b ADDW
              1394 0030  ld   $30         ;021b 'i'
              1395 0099  ld   $99         ;021d ADDW
              1396 0032  ld   $32         ;021d 'j'
              1397 002b  ld   $2b         ;021f STW
              1398 0032  ld   $32         ;021f 'j'
              1399 0021  ld   $21         ;0221 LDW
              139a 0034  ld   $34         ;0221 'Pos'
              139b 002b  ld   $2b         ;0223 STW
              139c 0028  ld   $28
              139d 00e3  ld   $e3         ;0225 ADDI
              139e 0006  ld   $06
              139f 002b  ld   $2b         ;0227 STW
              13a0 0034  ld   $34         ;0227 'Pos'
              13a1 0059  ld   $59         ;0229 LDI
              13a2 0005  ld   $05
              13a3 002b  ld   $2b         ;022b STW
              13a4 0030  ld   $30         ;022b 'i'
              13a5 0021  ld   $21         ;022d LDW
              13a6 0032  ld   $32         ;022d 'j'
              13a7 007f  ld   $7f         ;022f LUP
              13a8 0000  ld   $00
              13a9 005e  ld   $5e         ;0231 ST
              13aa 0026  ld   $26
              13ab 00b4  ld   $b4         ;0233 SYS
              13ac 00cb  ld   $cb
              13ad 0093  ld   $93         ;0235 INC
              13ae 0032  ld   $32         ;0235 'j'
              13af 0093  ld   $93         ;0237 INC
              13b0 0028  ld   $28
              13b1 0021  ld   $21         ;0239 LDW
              13b2 0030  ld   $30         ;0239 'i'
              13b3 00e6  ld   $e6         ;023b SUBI
              13b4 0001  ld   $01
              13b5 0035  ld   $35         ;023d BCC
              13b6 004d  ld   $4d         ;023e GT
              13b7 0029  ld   $29
              13b8 005e  ld   $5e         ;0240 ST
              13b9 0026  ld   $26
              13ba 00b4  ld   $b4         ;0242 SYS
              13bb 00cb  ld   $cb
              13bc 00ff  ld   $ff         ;0244 RET
              13bd 002b  ld   $2b         ;0245 STW
              13be 0036  ld   $36         ;0245 'PrintChar'
              13bf 0011  ld   $11         ;0247 LDWI
              13c0 00e1  ld   $e1
              13c1 0004  ld   $04
              13c2 002b  ld   $2b         ;024a STW
              13c3 0022  ld   $22         ;024a '_sysFn'
              13c4 0011  ld   $11         ;024c LDWI
              13c5 0020  ld   $20
              13c6 000f  ld   $0f
              13c7 002b  ld   $2b         ;024f STW
              13c8 0024  ld   $24         ;024f '_sysArgs0'
              13c9 0011  ld   $11         ;0251 LDWI
              13ca 0006  ld   $06
              13cb 0050  ld   $50
              13cc 002b  ld   $2b         ;0254 STW
              13cd 0034  ld   $34         ;0254 'Pos'
              13ce 00cd  ld   $cd         ;0256 DEF
              13cf 0065  ld   $65
              13d0 0020  ld   $20         ;0258 ' '
              13d1 0052  ld   $52         ;0259 'R'
              13d2 0065  ld   $65         ;025a 'e'
              13d3 0061  ld   $61         ;025b 'a'
              13d4 0064  ld   $64         ;025c 'd'
              13d5 0079  ld   $79         ;025d 'y'
              13d6 0020  ld   $20         ;025e ' '
              13d7 0074  ld   $74         ;025f 't'
              13d8 006f  ld   $6f         ;0260 'o'
              13d9 0020  ld   $20         ;0261 ' '
              13da 006c  ld   $6c         ;0262 'l'
              13db 006f  ld   $6f         ;0263 'o'
              13dc 0061  ld   $61         ;0264 'a'
              13dd 0064  ld   $64         ;0265 'd'
              13de 0000  ld   $00         ;0266 0
              13df 002b  ld   $2b         ;0267 STW
              13e0 0038  ld   $38         ;0267 'Text'
              13e1 0021  ld   $21         ;0269 LDW
              13e2 0038  ld   $38         ;0269 'Text'
              13e3 00ad  ld   $ad         ;026b PEEK
              13e4 0035  ld   $35         ;026c BCC
              13e5 003f  ld   $3f         ;026d EQ
              13e6 0073  ld   $73
              13e7 0093  ld   $93         ;026f INC
              13e8 0038  ld   $38         ;026f 'Text'
              13e9 00cf  ld   $cf         ;0271 CALL
              13ea 0036  ld   $36         ;0271 'PrintChar'
              13eb 0090  ld   $90         ;0273 BRA
              13ec 0067  ld   $67
              13ed 005e  ld   $5e         ;0275 ST
              13ee 0028  ld   $28
              13ef 0011  ld   $11         ;0277 LDWI
              13f0 000c  ld   $0c
              13f1 0059  ld   $59
              13f2 002b  ld   $2b         ;027a STW
              13f3 003a  ld   $3a         ;027a 'A'
              13f4 0011  ld   $11         ;027c LDWI
              13f5 000c  ld   $0c
              13f6 005b  ld   $5b
              13f7 002b  ld   $2b         ;027f STW
              13f8 003c  ld   $3c         ;027f 'B'
              13f9 0059  ld   $59         ;0281 LDI
              13fa 0067  ld   $67
              13fb fe00  bra  ac          ;+-----------------------------------+
              13fc fcfd  bra  $13fd       ;|                                   |
              13fd 1404  ld   $04,y       ;| Trampoline for page $1300 lookups |
              13fe e068  jmp  y,$68       ;|                                   |
              13ff c218  st   [$18]       ;+-----------------------------------+
              1400 005e  ld   $5e         ;0283 ST
              1401 0026  ld   $26
              1402 0011  ld   $11         ;0285 LDWI
              1403 0000  ld   $00
              1404 0013  ld   $13
              1405 002b  ld   $2b         ;0288 STW
              1406 003e  ld   $3e         ;0288 'NextByteIn_32'
              1407 0011  ld   $11         ;028a LDWI
              1408 0053  ld   $53
              1409 0013  ld   $13
              140a 002b  ld   $2b         ;028d STW
              140b 0040  ld   $40         ;028d 'PayloadCopy_34'
              140c 0011  ld   $11         ;028f LDWI
              140d 000c  ld   $0c
              140e 005a  ld   $5a
              140f 002b  ld   $2b         ;0292 STW
              1410 001a  ld   $1a         ;0292 '_vLR'
              1411 00ff  ld   $ff         ;0294 RET
              1412 005a  ld   $5a         ;| RAM segment address (high byte first)
              1413 000c  ld   $0c         ;|
              1414 0075  ld   $75         ;| Length (1..256)
              1415 0021  ld   $21         ;5a0c LDW
              1416 003c  ld   $3c         ;5a0c 'B'
              1417 002b  ld   $2b         ;5a0e STW
              1418 0024  ld   $24         ;5a0e '_sysArgs0'
              1419 0059  ld   $59         ;5a10 LDI
              141a 00cf  ld   $cf
              141b 005e  ld   $5e         ;5a12 ST
              141c 0027  ld   $27
              141d 0021  ld   $21         ;5a14 LDW
              141e 003e  ld   $3e         ;5a14 'NextByteIn_32'
              141f 002b  ld   $2b         ;5a16 STW
              1420 0022  ld   $22         ;5a16 '_sysFn'
              1421 00b4  ld   $b4         ;5a18 SYS
              1422 00fe  ld   $fe
              1423 0059  ld   $59         ;5a1a LDI
              1424 00db  ld   $db
              1425 005e  ld   $5e         ;5a1c ST
              1426 0027  ld   $27
              1427 00b4  ld   $b4         ;5a1e SYS
              1428 00fe  ld   $fe
              1429 0059  ld   $59         ;5a20 LDI
              142a 00eb  ld   $eb
              142b 005e  ld   $5e         ;5a22 ST
              142c 0027  ld   $27
              142d 00b4  ld   $b4         ;5a24 SYS
              142e 00fe  ld   $fe
              142f 0059  ld   $59         ;5a26 LDI
              1430 00fb  ld   $fb
              1431 005e  ld   $5e         ;5a28 ST
              1432 0027  ld   $27
              1433 00b4  ld   $b4         ;5a2a SYS
              1434 00fe  ld   $fe
              1435 0021  ld   $21         ;5a2c LDW
              1436 0040  ld   $40         ;5a2c 'PayloadCopy_34'
              1437 002b  ld   $2b         ;5a2e STW
              1438 0022  ld   $22         ;5a2e '_sysFn'
              1439 00b4  ld   $b4         ;5a30 SYS
              143a 00fd  ld   $fd
              143b 0059  ld   $59         ;5a32 LDI
              143c 0002  ld   $02
              143d 005e  ld   $5e         ;5a34 ST
              143e 0027  ld   $27
              143f 0021  ld   $21         ;5a36 LDW
              1440 003e  ld   $3e         ;5a36 'NextByteIn_32'
              1441 002b  ld   $2b         ;5a38 STW
              1442 0022  ld   $22         ;5a38 '_sysFn'
              1443 00b4  ld   $b4         ;5a3a SYS
              1444 00fe  ld   $fe
              1445 0059  ld   $59         ;5a3c LDI
              1446 0006  ld   $06
              1447 005e  ld   $5e         ;5a3e ST
              1448 0027  ld   $27
              1449 0021  ld   $21         ;5a40 LDW
              144a 0040  ld   $40         ;5a40 'PayloadCopy_34'
              144b 002b  ld   $2b         ;5a42 STW
              144c 0022  ld   $22         ;5a42 '_sysFn'
              144d 00b4  ld   $b4         ;5a44 SYS
              144e 00fd  ld   $fd
              144f 0021  ld   $21         ;5a46 LDW
              1450 003e  ld   $3e         ;5a46 'NextByteIn_32'
              1451 002b  ld   $2b         ;5a48 STW
              1452 0022  ld   $22         ;5a48 '_sysFn'
              1453 00b4  ld   $b4         ;5a4a SYS
              1454 00fe  ld   $fe
              1455 001a  ld   $1a         ;5a4c LD
              1456 0027  ld   $27
              1457 00e3  ld   $e3         ;5a4e ADDI
              1458 0004  ld   $04
              1459 005e  ld   $5e         ;5a50 ST
              145a 0027  ld   $27
              145b 008c  ld   $8c         ;5a52 XORI
              145c 00f2  ld   $f2
              145d 0035  ld   $35         ;5a54 BCC
              145e 0072  ld   $72         ;5a55 NE
              145f 003e  ld   $3e
              1460 0059  ld   $59         ;5a57 LDI
              1461 00b9  ld   $b9
              1462 005e  ld   $5e         ;5a59 ST
              1463 0027  ld   $27
              1464 00b4  ld   $b4         ;5a5b SYS
              1465 00fe  ld   $fe
              1466 001a  ld   $1a         ;5a5d LD
              1467 0026  ld   $26
              1468 0035  ld   $35         ;5a5f BCC
              1469 0072  ld   $72         ;5a60 NE
              146a 0064  ld   $64
              146b 0059  ld   $59         ;5a62 LDI
              146c 000c  ld   $0c
              146d 0090  ld   $90         ;5a64 BRA
              146e 0066  ld   $66
              146f 0059  ld   $59         ;5a66 LDI
              1470 0003  ld   $03
              1471 00f0  ld   $f0         ;5a68 POKE
              1472 003a  ld   $3a         ;5a68 'A'
              1473 001a  ld   $1a         ;5a6a LD
              1474 003a  ld   $3a         ;5a6a 'A'
              1475 00e6  ld   $e6         ;5a6c SUBI
              1476 000b  ld   $0b
              1477 0082  ld   $82         ;5a6e ANDI
              1478 007f  ld   $7f
              1479 00e3  ld   $e3         ;5a70 ADDI
              147a 000c  ld   $0c
              147b 005e  ld   $5e         ;5a72 ST
              147c 003a  ld   $3a         ;5a72 'A'
              147d 0059  ld   $59         ;5a74 LDI
              147e 003f  ld   $3f
              147f 00f0  ld   $f0         ;5a76 POKE
              1480 003a  ld   $3a         ;5a76 'A'
              1481 0011  ld   $11         ;5a78 LDWI
              1482 0015  ld   $15
              1483 0013  ld   $13
              1484 002b  ld   $2b         ;5a7b STW
              1485 0022  ld   $22         ;5a7b '_sysFn'
              1486 00b4  ld   $b4         ;5a7d SYS
              1487 00ee  ld   $ee
              1488 0090  ld   $90         ;5a7f BRA
              1489 000a  ld   $0a
              148a 0000  ld   $00         ;End of Apps/Loader/Loader_v4.gcl, size 278
                                          ;+-----------------------------------+
                                          ;| Apps/MainMenu/MainMenu_SDCARD_bmwtcu.gcl |
                                          ;+-----------------------------------+
              148b dc4c  st   $4c,[y,x++] ;'L'
              148c dc6f  st   $6f,[y,x++] ;'o'
              148d dc61  st   $61,[y,x++] ;'a'
              148e dc64  st   $64,[y,x++] ;'d'
              148f dc65  st   $65,[y,x++] ;'e'
              1490 dc72  st   $72,[y,x++] ;'r'
              1491 dc00  st   $00,[y,x++] ;'\x00'
              1492 dc00  st   $00,[y,x++] ;'\x00'
              1493 0075  ld   $75
              1494 c218  st   [$18]
              1495 0013  ld   $13
              1496 1423  ld   $23,y
              1497 e09b  jmp  y,$9b
              1498 c219  st   [$19]
Main:         1499 0002  ld   $02         ;| RAM segment address (high byte first)
              149a 0000  ld   $00         ;|
              149b 00ae  ld   $ae         ;| Length (1..256)
              149c 00cd  ld   $cd         ;0200 DEF
              149d 004e  ld   $4e
              149e 0021  ld   $21         ;0202 LDW
              149f 0030  ld   $30         ;0202 'Char'
              14a0 00e6  ld   $e6         ;0204 SUBI
              14a1 0052  ld   $52
              14a2 0035  ld   $35         ;0206 BCC
              14a3 0053  ld   $53         ;0207 GE
              14a4 0010  ld   $10
              14a5 00e3  ld   $e3         ;0209 ADDI
              14a6 0032  ld   $32
              14a7 002b  ld   $2b         ;020b STW
              14a8 0032  ld   $32         ;020b 'i'
              14a9 0011  ld   $11         ;020d LDWI
              14aa 0000  ld   $00
              14ab 0007  ld   $07
              14ac 0090  ld   $90         ;0210 BRA
              14ad 0015  ld   $15
              14ae 002b  ld   $2b         ;0212 STW
              14af 0032  ld   $32         ;0212 'i'
              14b0 0011  ld   $11         ;0214 LDWI
              14b1 0000  ld   $00
              14b2 0008  ld   $08
              14b3 002b  ld   $2b         ;0217 STW
              14b4 0034  ld   $34         ;0217 'fontData'
              14b5 0021  ld   $21         ;0219 LDW
              14b6 0032  ld   $32         ;0219 'i'
              14b7 00e9  ld   $e9         ;021b LSLW
              14b8 00e9  ld   $e9         ;021c LSLW
              14b9 0099  ld   $99         ;021d ADDW
              14ba 0032  ld   $32         ;021d 'i'
              14bb 0099  ld   $99         ;021f ADDW
              14bc 0034  ld   $34         ;021f 'fontData'
              14bd 002b  ld   $2b         ;0221 STW
              14be 0034  ld   $34         ;0221 'fontData'
              14bf 0059  ld   $59         ;0223 LDI
              14c0 0020  ld   $20
              14c1 005e  ld   $5e         ;0225 ST
              14c2 0024  ld   $24
              14c3 0021  ld   $21         ;0227 LDW
              14c4 0036  ld   $36         ;0227 'Color'
              14c5 005e  ld   $5e         ;0229 ST
              14c6 0025  ld   $25
              14c7 0021  ld   $21         ;022b LDW
              14c8 0038  ld   $38         ;022b 'Pos'
              14c9 002b  ld   $2b         ;022d STW
              14ca 0028  ld   $28
              14cb 00e3  ld   $e3         ;022f ADDI
              14cc 0006  ld   $06
              14cd 002b  ld   $2b         ;0231 STW
              14ce 0038  ld   $38         ;0231 'Pos'
              14cf 0011  ld   $11         ;0233 LDWI
              14d0 00e1  ld   $e1
              14d1 0004  ld   $04
              14d2 002b  ld   $2b         ;0236 STW
              14d3 0022  ld   $22
              14d4 0059  ld   $59         ;0238 LDI
              14d5 00fb  ld   $fb
              14d6 002b  ld   $2b         ;023a STW
              14d7 0032  ld   $32         ;023a 'i'
              14d8 0021  ld   $21         ;023c LDW
              14d9 0034  ld   $34         ;023c 'fontData'
              14da 007f  ld   $7f         ;023e LUP
              14db 0000  ld   $00
              14dc 0093  ld   $93         ;0240 INC
              14dd 0034  ld   $34         ;0240 'fontData'
              14de 005e  ld   $5e         ;0242 ST
              14df 0026  ld   $26
              14e0 00b4  ld   $b4         ;0244 SYS
              14e1 00cb  ld   $cb
              14e2 0093  ld   $93         ;0246 INC
              14e3 0028  ld   $28
              14e4 0093  ld   $93         ;0248 INC
              14e5 0032  ld   $32         ;0248 'i'
              14e6 0021  ld   $21         ;024a LDW
              14e7 0032  ld   $32         ;024a 'i'
              14e8 0035  ld   $35         ;024c BCC
              14e9 0072  ld   $72         ;024d NE
              14ea 003a  ld   $3a
              14eb 00ff  ld   $ff         ;024f RET
              14ec 002b  ld   $2b         ;0250 STW
              14ed 003a  ld   $3a         ;0250 'PrintChar'
              14ee 00cd  ld   $cd         ;0252 DEF
              14ef 007b  ld   $7b
              14f0 0075  ld   $75         ;0254 PUSH
              14f1 002b  ld   $2b         ;0255 STW
              14f2 003c  ld   $3c         ;0255 'Text'
              14f3 0021  ld   $21         ;0257 LDW
              14f4 003c  ld   $3c         ;0257 'Text'
              14f5 00ad  ld   $ad         ;0259 PEEK
              14f6 0035  ld   $35         ;025a BCC
              14f7 003f  ld   $3f         ;025b EQ
              14f8 0079  ld   $79
              14f9 002b  ld   $2b         ;025d STW
              14fa 0030  ld   $30         ;025d 'Char'
              14fb fe00  bra  ac          ;+-----------------------------------+
              14fc fcfd  bra  $14fd       ;|                                   |
              14fd 1404  ld   $04,y       ;| Trampoline for page $1400 lookups |
              14fe e068  jmp  y,$68       ;|                                   |
              14ff c218  st   [$18]       ;+-----------------------------------+
              1500 0093  ld   $93         ;025f INC
              1501 003c  ld   $3c         ;025f 'Text'
              1502 008c  ld   $8c         ;0261 XORI
              1503 0009  ld   $09
              1504 0035  ld   $35         ;0263 BCC
              1505 0072  ld   $72         ;0264 NE
              1506 006c  ld   $6c
              1507 0021  ld   $21         ;0266 LDW
              1508 0038  ld   $38         ;0266 'Pos'
              1509 00e3  ld   $e3         ;0268 ADDI
              150a 0012  ld   $12
              150b 002b  ld   $2b         ;026a STW
              150c 0038  ld   $38         ;026a 'Pos'
              150d 0090  ld   $90         ;026c BRA
              150e 0055  ld   $55
              150f 008c  ld   $8c         ;026e XORI
              1510 0003  ld   $03
              1511 0035  ld   $35         ;0270 BCC
              1512 0072  ld   $72         ;0271 NE
              1513 0075  ld   $75
              1514 00cf  ld   $cf         ;0273 CALL
              1515 003e  ld   $3e         ;0273 'Newline'
              1516 0090  ld   $90         ;0275 BRA
              1517 0055  ld   $55
              1518 00cf  ld   $cf         ;0277 CALL
              1519 003a  ld   $3a         ;0277 'PrintChar'
              151a 0090  ld   $90         ;0279 BRA
              151b 0055  ld   $55
              151c 0063  ld   $63         ;027b POP
              151d 00ff  ld   $ff         ;027c RET
              151e 002b  ld   $2b         ;027d STW
              151f 0040  ld   $40         ;027d 'PrintText'
              1520 00cd  ld   $cd         ;027f DEF
              1521 0095  ld   $95
              1522 0075  ld   $75         ;0281 PUSH
              1523 0059  ld   $59         ;0282 LDI
              1524 002d  ld   $2d
              1525 002b  ld   $2b         ;0284 STW
              1526 0030  ld   $30         ;0284 'Char'
              1527 0059  ld   $59         ;0286 LDI
              1528 001a  ld   $1a
              1529 002b  ld   $2b         ;0288 STW
              152a 0042  ld   $42         ;0288 'j'
              152b 00cf  ld   $cf         ;028a CALL
              152c 003a  ld   $3a         ;028a 'PrintChar'
              152d 0021  ld   $21         ;028c LDW
              152e 0042  ld   $42         ;028c 'j'
              152f 00e6  ld   $e6         ;028e SUBI
              1530 0001  ld   $01
              1531 0035  ld   $35         ;0290 BCC
              1532 004d  ld   $4d         ;0291 GT
              1533 0086  ld   $86
              1534 00cf  ld   $cf         ;0293 CALL
              1535 003e  ld   $3e         ;0293 'Newline'
              1536 0063  ld   $63         ;0295 POP
              1537 00ff  ld   $ff         ;0296 RET
              1538 002b  ld   $2b         ;0297 STW
              1539 0044  ld   $44         ;0297 'PrintDivider'
              153a 00cd  ld   $cd         ;0299 DEF
              153b 00a7  ld   $a7
              153c 0075  ld   $75         ;029b PUSH
              153d 0011  ld   $11         ;029c LDWI
              153e 000b  ld   $0b
              153f 0028  ld   $28
              1540 002b  ld   $2b         ;029f STW
              1541 0038  ld   $38         ;029f 'Pos'
              1542 0059  ld   $59         ;02a1 LDI
              1543 0082  ld   $82
              1544 002b  ld   $2b         ;02a3 STW
              1545 0030  ld   $30         ;02a3 'Char'
              1546 00cf  ld   $cf         ;02a5 CALL
              1547 003a  ld   $3a         ;02a5 'PrintChar'
              1548 0063  ld   $63         ;02a7 POP
              1549 00ff  ld   $ff         ;02a8 RET
              154a 002b  ld   $2b         ;02a9 STW
              154b 0046  ld   $46         ;02a9 'PrintArrow'
              154c 0093  ld   $93         ;02ab INC
              154d 001b  ld   $1b         ;02ab '_vLR'+1
              154e 00ff  ld   $ff         ;02ad RET
              154f 0003  ld   $03         ;| RAM segment address (high byte first)
              1550 0000  ld   $00         ;|
              1551 0028  ld   $28         ;| Length (1..256)
              1552 00cd  ld   $cd         ;0300 DEF
              1553 0021  ld   $21
              1554 0075  ld   $75         ;0302 PUSH
              1555 001a  ld   $1a         ;0303 LD
              1556 000e  ld   $0e
              1557 002b  ld   $2b         ;0305 STW
              1558 0036  ld   $36         ;0305 'Color'
              1559 00cf  ld   $cf         ;0307 CALL
              155a 0046  ld   $46         ;0307 'PrintArrow'
              155b 001a  ld   $1a         ;0309 LD
              155c 0011  ld   $11
              155d 0082  ld   $82         ;030b ANDI
              155e 0080  ld   $80
              155f 0035  ld   $35         ;030d BCC
              1560 0072  ld   $72         ;030e NE
              1561 0001  ld   $01
              1562 0059  ld   $59         ;0310 LDI
              1563 002a  ld   $2a
              1564 002b  ld   $2b         ;0312 STW
              1565 0036  ld   $36         ;0312 'Color'
              1566 00cf  ld   $cf         ;0314 CALL
              1567 0046  ld   $46         ;0314 'PrintArrow'
              1568 00cd  ld   $cd         ;0316 DEF
              1569 0018  ld   $18
              156a 00a6  ld   $a6
              156b 0016  ld   $16
              156c 0099  ld   $99         ;031a ADDW
              156d 0048  ld   $48         ;031a 'MenuItem'
              156e 0099  ld   $99         ;031c ADDW
              156f 0048  ld   $48         ;031c 'MenuItem'
              1570 00f6  ld   $f6         ;031e DEEK
              1571 002b  ld   $2b         ;031f STW
              1572 004a  ld   $4a         ;031f 'Program'
              1573 0063  ld   $63         ;0321 POP
              1574 00ff  ld   $ff         ;0322 RET
              1575 002b  ld   $2b         ;0323 STW
              1576 004c  ld   $4c         ;0323 'SelectMenu'
              1577 0093  ld   $93         ;0325 INC
              1578 001b  ld   $1b         ;0325 '_vLR'+1
              1579 00ff  ld   $ff         ;0327 RET
              157a 0004  ld   $04         ;| RAM segment address (high byte first)
              157b 0000  ld   $00         ;|
              157c 006d  ld   $6d         ;| Length (1..256)
              157d 00cd  ld   $cd         ;0400 DEF
              157e 000b  ld   $0b
              157f 001a  ld   $1a         ;0402 LD
              1580 0039  ld   $39         ;0402 'Pos'+1
              1581 00e3  ld   $e3         ;0404 ADDI
              1582 0008  ld   $08
              1583 005e  ld   $5e         ;0406 ST
              1584 0039  ld   $39         ;0406 'Pos'+1
              1585 0059  ld   $59         ;0408 LDI
              1586 0002  ld   $02
              1587 005e  ld   $5e         ;040a ST
              1588 0038  ld   $38         ;040a 'Pos'
              1589 00ff  ld   $ff         ;040c RET
              158a 002b  ld   $2b         ;040d STW
              158b 003e  ld   $3e         ;040d 'Newline'
              158c 00cd  ld   $cd         ;040f DEF
              158d 0018  ld   $18
              158e 0009  ld   $09         ;0411 9
              158f 0053  ld   $53         ;0412 'S'
              1590 0044  ld   $44         ;0413 'D'
              1591 0043  ld   $43         ;0414 'C'
              1592 0061  ld   $61         ;0415 'a'
              1593 0072  ld   $72         ;0416 'r'
              1594 0064  ld   $64         ;0417 'd'
              1595 000a  ld   $0a         ;0418 10
              1596 0000  ld   $00         ;0419 0
              1597 002b  ld   $2b         ;041a STW
              1598 004e  ld   $4e         ;041a 'MainMenu'
              1599 00cd  ld   $cd         ;041c DEF
              159a 0066  ld   $66
              159b 0055  ld   $55         ;041e 'U'
              159c 0073  ld   $73         ;041f 's'
              159d 0065  ld   $65         ;0420 'e'
              159e 0020  ld   $20         ;0421 ' '
              159f 005b  ld   $5b         ;0422 91
              15a0 0041  ld   $41         ;0423 'A'
              15a1 0072  ld   $72         ;0424 'r'
              15a2 0072  ld   $72         ;0425 'r'
              15a3 006f  ld   $6f         ;0426 'o'
              15a4 0077  ld   $77         ;0427 'w'
              15a5 0073  ld   $73         ;0428 's'
              15a6 005d  ld   $5d         ;0429 93
              15a7 0020  ld   $20         ;042a ' '
              15a8 0074  ld   $74         ;042b 't'
              15a9 006f  ld   $6f         ;042c 'o'
              15aa 0020  ld   $20         ;042d ' '
              15ab 0073  ld   $73         ;042e 's'
              15ac 0065  ld   $65         ;042f 'e'
              15ad 006c  ld   $6c         ;0430 'l'
              15ae 0065  ld   $65         ;0431 'e'
              15af 0063  ld   $63         ;0432 'c'
              15b0 0074  ld   $74         ;0433 't'
              15b1 000a  ld   $0a         ;0434 10
              15b2 0050  ld   $50         ;0435 'P'
              15b3 0072  ld   $72         ;0436 'r'
              15b4 0065  ld   $65         ;0437 'e'
              15b5 0073  ld   $73         ;0438 's'
              15b6 0073  ld   $73         ;0439 's'
              15b7 0020  ld   $20         ;043a ' '
              15b8 005b  ld   $5b         ;043b 91
              15b9 0041  ld   $41         ;043c 'A'
              15ba 005d  ld   $5d         ;043d 93
              15bb 0020  ld   $20         ;043e ' '
              15bc 0074  ld   $74         ;043f 't'
              15bd 006f  ld   $6f         ;0440 'o'
              15be 0020  ld   $20         ;0441 ' '
              15bf 0073  ld   $73         ;0442 's'
              15c0 0074  ld   $74         ;0443 't'
              15c1 0061  ld   $61         ;0444 'a'
              15c2 0072  ld   $72         ;0445 'r'
              15c3 0074  ld   $74         ;0446 't'
              15c4 0020  ld   $20         ;0447 ' '
              15c5 0070  ld   $70         ;0448 'p'
              15c6 0072  ld   $72         ;0449 'r'
              15c7 006f  ld   $6f         ;044a 'o'
              15c8 0067  ld   $67         ;044b 'g'
              15c9 0072  ld   $72         ;044c 'r'
              15ca 0061  ld   $61         ;044d 'a'
              15cb 006d  ld   $6d         ;044e 'm'
              15cc 000a  ld   $0a         ;044f 10
              15cd 000a  ld   $0a         ;0450 10
              15ce 0048  ld   $48         ;0451 'H'
              15cf 006f  ld   $6f         ;0452 'o'
              15d0 006c  ld   $6c         ;0453 'l'
              15d1 0064  ld   $64         ;0454 'd'
              15d2 0020  ld   $20         ;0455 ' '
              15d3 005b  ld   $5b         ;0456 91
              15d4 0053  ld   $53         ;0457 'S'
              15d5 0074  ld   $74         ;0458 't'
              15d6 0061  ld   $61         ;0459 'a'
              15d7 0072  ld   $72         ;045a 'r'
              15d8 0074  ld   $74         ;045b 't'
              15d9 005d  ld   $5d         ;045c 93
              15da 0020  ld   $20         ;045d ' '
              15db 0066  ld   $66         ;045e 'f'
              15dc 006f  ld   $6f         ;045f 'o'
              15dd 0072  ld   $72         ;0460 'r'
              15de 0020  ld   $20         ;0461 ' '
              15df 0072  ld   $72         ;0462 'r'
              15e0 0065  ld   $65         ;0463 'e'
              15e1 0073  ld   $73         ;0464 's'
              15e2 0065  ld   $65         ;0465 'e'
              15e3 0074  ld   $74         ;0466 't'
              15e4 0000  ld   $00         ;0467 0
              15e5 002b  ld   $2b         ;0468 STW
              15e6 0050  ld   $50         ;0468 'HelpText'
              15e7 0093  ld   $93         ;046a INC
              15e8 001b  ld   $1b         ;046a '_vLR'+1
              15e9 00ff  ld   $ff         ;046c RET
              15ea 0005  ld   $05         ;| RAM segment address (high byte first)
              15eb 0000  ld   $00         ;|
              15ec 00a5  ld   $a5         ;| Length (1..256)
              15ed 00cd  ld   $cd         ;0500 DEF
              15ee 0011  ld   $11
              15ef 0075  ld   $75         ;0502 PUSH
              15f0 0021  ld   $21         ;0503 LDW
              15f1 0038  ld   $38         ;0503 'Pos'
              15f2 00e6  ld   $e6         ;0505 SUBI
              15f3 000c  ld   $0c
              15f4 002b  ld   $2b         ;0507 STW
              15f5 0038  ld   $38         ;0507 'Pos'
              15f6 0059  ld   $59         ;0509 LDI
              15f7 0020  ld   $20
              15f8 002b  ld   $2b         ;050b STW
              15f9 0030  ld   $30         ;050b 'Char'
              15fa 00cf  ld   $cf         ;050d CALL
              15fb fe00  bra  ac          ;+-----------------------------------+
              15fc fcfd  bra  $15fd       ;|                                   |
              15fd 1404  ld   $04,y       ;| Trampoline for page $1500 lookups |
              15fe e068  jmp  y,$68       ;|                                   |
              15ff c218  st   [$18]       ;+-----------------------------------+
              1600 003a  ld   $3a         ;050d 'PrintChar'
              1601 00cf  ld   $cf         ;050f CALL
              1602 003a  ld   $3a         ;050f 'PrintChar'
              1603 0063  ld   $63         ;0511 POP
              1604 00ff  ld   $ff         ;0512 RET
              1605 002b  ld   $2b         ;0513 STW
              1606 0052  ld   $52         ;0513 'WipeOutArrow'
              1607 00cd  ld   $cd         ;0515 DEF
              1608 0030  ld   $30
              1609 0075  ld   $75         ;0517 PUSH
              160a 0059  ld   $59         ;0518 LDI
              160b 002a  ld   $2a
              160c 002b  ld   $2b         ;051a STW
              160d 0036  ld   $36         ;051a 'Color'
              160e 00cf  ld   $cf         ;051c CALL
              160f 0044  ld   $44         ;051c 'PrintDivider'
              1610 0059  ld   $59         ;051e LDI
              1611 000f  ld   $0f
              1612 002b  ld   $2b         ;0520 STW
              1613 0036  ld   $36         ;0520 'Color'
              1614 0021  ld   $21         ;0522 LDW
              1615 004e  ld   $4e         ;0522 'MainMenu'
              1616 00cf  ld   $cf         ;0524 CALL
              1617 0040  ld   $40         ;0524 'PrintText'
              1618 0059  ld   $59         ;0526 LDI
              1619 002a  ld   $2a
              161a 002b  ld   $2b         ;0528 STW
              161b 0036  ld   $36         ;0528 'Color'
              161c 00cf  ld   $cf         ;052a CALL
              161d 0044  ld   $44         ;052a 'PrintDivider'
              161e 0021  ld   $21         ;052c LDW
              161f 0050  ld   $50         ;052c 'HelpText'
              1620 00cf  ld   $cf         ;052e CALL
              1621 0040  ld   $40         ;052e 'PrintText'
              1622 0063  ld   $63         ;0530 POP
              1623 00ff  ld   $ff         ;0531 RET
              1624 002b  ld   $2b         ;0532 STW
              1625 0054  ld   $54         ;0532 'PrintMenu'
              1626 001a  ld   $1a         ;0534 LD
              1627 0021  ld   $21
              1628 0088  ld   $88         ;0536 ORI
              1629 0003  ld   $03
              162a 005e  ld   $5e         ;0538 ST
              162b 0021  ld   $21
              162c 0059  ld   $59         ;053a LDI
              162d 005a  ld   $5a
              162e 005e  ld   $5e         ;053c ST
              162f 002c  ld   $2c
              1630 0011  ld   $11         ;053e LDWI
              1631 0002  ld   $02
              1632 0020  ld   $20
              1633 002b  ld   $2b         ;0541 STW
              1634 0038  ld   $38         ;0541 'Pos'
              1635 00cf  ld   $cf         ;0543 CALL
              1636 0054  ld   $54         ;0543 'PrintMenu'
              1637 0059  ld   $59         ;0545 LDI
              1638 0000  ld   $00
              1639 002b  ld   $2b         ;0547 STW
              163a 0048  ld   $48         ;0547 'MenuItem'
              163b 00cf  ld   $cf         ;0549 CALL
              163c 004c  ld   $4c         ;0549 'SelectMenu'
              163d 0011  ld   $11         ;054b LDWI
              163e 0000  ld   $00
              163f 0008  ld   $08
              1640 002b  ld   $2b         ;054e STW
              1641 0028  ld   $28         ;054e '_sysArgs4'
              1642 0011  ld   $11         ;0550 LDWI
              1643 0001  ld   $01
              1644 0088  ld   $88
              1645 002b  ld   $2b         ;0553 STW
              1646 0032  ld   $32         ;0553 'i'
              1647 0011  ld   $11         ;0555 LDWI
              1648 0080  ld   $80
              1649 00ff  ld   $ff
              164a 002b  ld   $2b         ;0558 STW
              164b 0042  ld   $42         ;0558 'j'
              164c 0021  ld   $21         ;055a LDW
              164d 0038  ld   $38         ;055a 'Pos'
              164e 00e3  ld   $e3         ;055c ADDI
              164f 0030  ld   $30
              1650 00f8  ld   $f8         ;055e ANDW
              1651 0042  ld   $42         ;055e 'j'
              1652 002b  ld   $2b         ;0560 STW
              1653 0056  ld   $56         ;0560 'q'
              1654 0011  ld   $11         ;0562 LDWI
              1655 00e1  ld   $e1
              1656 0004  ld   $04
              1657 002b  ld   $2b         ;0565 STW
              1658 0022  ld   $22         ;0565 '_sysFn'
              1659 0059  ld   $59         ;0567 LDI
              165a 0020  ld   $20
              165b 005e  ld   $5e         ;0569 ST
              165c 0024  ld   $24
              165d 005e  ld   $5e         ;056b ST
              165e 0025  ld   $25
              165f 0021  ld   $21         ;056d LDW
              1660 0028  ld   $28         ;056d '_sysArgs4'
              1661 00e3  ld   $e3         ;056f ADDI
              1662 0030  ld   $30
              1663 00f8  ld   $f8         ;0571 ANDW
              1664 0042  ld   $42         ;0571 'j'
              1665 00fc  ld   $fc         ;0573 XORW
              1666 0056  ld   $56         ;0573 'q'
              1667 0035  ld   $35         ;0575 BCC
              1668 003f  ld   $3f         ;0576 EQ
              1669 007f  ld   $7f
              166a 001a  ld   $1a         ;0578 LD
              166b 0059  ld   $59         ;0578 'p'+1
              166c 008c  ld   $8c         ;057a XORI
              166d 0078  ld   $78
              166e 0035  ld   $35         ;057c BCC
              166f 003f  ld   $3f         ;057d EQ
              1670 007f  ld   $7f
              1671 00b4  ld   $b4         ;057f SYS
              1672 00cb  ld   $cb
              1673 0011  ld   $11         ;0581 LDWI
              1674 0000  ld   $00
              1675 0008  ld   $08
              1676 0099  ld   $99         ;0584 921
              1677 0028  ld   $28         ;0585 40
              1678 002b  ld   $2b         ;0586 STW
              1679 0028  ld   $28
              167a 0035  ld   $35         ;0588 BCC
              167b 004d  ld   $4d         ;0589 GT
              167c 006d  ld   $6d
              167d 0099  ld   $99         ;058b ADDW
              167e 0032  ld   $32         ;058b 'i'
              167f 002b  ld   $2b         ;058d STW
              1680 0028  ld   $28
              1681 0082  ld   $82         ;058f ANDI
              1682 00ff  ld   $ff
              1683 008c  ld   $8c         ;0591 XORI
              1684 00a0  ld   $a0
              1685 0035  ld   $35         ;0593 BCC
              1686 0072  ld   $72         ;0594 NE
              1687 006b  ld   $6b
              1688 0059  ld   $59         ;0596 LDI
              1689 00ad  ld   $ad
              168a 002b  ld   $2b         ;0598 STW
              168b 0022  ld   $22         ;0598 '_sysFn'
              168c 0021  ld   $21         ;059a LDW
              168d 004a  ld   $4a         ;059a 'Program'
              168e 002b  ld   $2b         ;059c STW
              168f 0024  ld   $24         ;059c '_sysArgs0'
              1690 0011  ld   $11         ;059e LDWI
              1691 0000  ld   $00
              1692 0002  ld   $02
              1693 002b  ld   $2b         ;05a1 STW
              1694 001a  ld   $1a         ;05a1 '_vLR'
              1695 00b4  ld   $b4         ;05a3 SYS
              1696 00e2  ld   $e2
              1697 0000  ld   $00         ;End of Apps/MainMenu/MainMenu_SDCARD_bmwtcu.gcl, size 511
                                          ;+-----------------------------------+
                                          ;| Browser_SDCard_ROMv5a_v1.gt1      |
                                          ;+-----------------------------------+
              1698 dc4d  st   $4d,[y,x++] ;'M'
              1699 dc61  st   $61,[y,x++] ;'a'
              169a dc69  st   $69,[y,x++] ;'i'
              169b dc6e  st   $6e,[y,x++] ;'n'
              169c dc00  st   $00,[y,x++] ;'\x00'
              169d dc00  st   $00,[y,x++] ;'\x00'
              169e dc00  st   $00,[y,x++] ;'\x00'
              169f dc00  st   $00,[y,x++] ;'\x00'
              16a0 0099  ld   $99
              16a1 c218  st   [$18]
              16a2 0014  ld   $14
              16a3 1423  ld   $23,y
              16a4 e09b  jmp  y,$9b
              16a5 c219  st   [$19]
SDCard:       16a6 0002  ld   $02
              16a7 0000  ld   $00
              16a8 00fa  ld   $fa
              16a9 0059  ld   $59
              16aa 0040  ld   $40
              16ab 002b  ld   $2b
              16ac 0082  ld   $82
              16ad 0011  ld   $11
              16ae 00e8  ld   $e8
              16af 0062  ld   $62
              16b0 00cf  ld   $cf
              16b1 0018  ld   $18
              16b2 0011  ld   $11
              16b3 0020  ld   $20
              16b4 000f  ld   $0f
              16b5 002b  ld   $2b
              16b6 00a2  ld   $a2
              16b7 0059  ld   $59
              16b8 0001  ld   $01
              16b9 002b  ld   $2b
              16ba 00aa  ld   $aa
              16bb 0059  ld   $59
              16bc 0000  ld   $00
              16bd 002b  ld   $2b
              16be 00a6  ld   $a6
              16bf 0085  ld   $85
              16c0 00a0  ld   $a0
              16c1 0062  ld   $62
              16c2 0011  ld   $11
              16c3 00fe  ld   $fe
              16c4 007c  ld   $7c
              16c5 002b  ld   $2b
              16c6 0084  ld   $84
              16c7 0011  ld   $11
              16c8 00a0  ld   $a0
              16c9 007d  ld   $7d
              16ca 0085  ld   $85
              16cb 00d2  ld   $d2
              16cc 0061  ld   $61
              16cd 0011  ld   $11
              16ce 00fe  ld   $fe
              16cf 007c  ld   $7c
              16d0 002b  ld   $2b
              16d1 0084  ld   $84
              16d2 0011  ld   $11
              16d3 00a0  ld   $a0
              16d4 007b  ld   $7b
              16d5 0085  ld   $85
              16d6 00d2  ld   $d2
              16d7 0061  ld   $61
              16d8 0011  ld   $11
              16d9 00fe  ld   $fe
              16da 007c  ld   $7c
              16db 002b  ld   $2b
              16dc 0084  ld   $84
              16dd 0011  ld   $11
              16de 00a0  ld   $a0
              16df 007a  ld   $7a
              16e0 0085  ld   $85
              16e1 00d2  ld   $d2
              16e2 0061  ld   $61
              16e3 0085  ld   $85
              16e4 0079  ld   $79
              16e5 0002  ld   $02
              16e6 0085  ld   $85
              16e7 00d9  ld   $d9
              16e8 000d  ld   $0d
              16e9 0085  ld   $85
              16ea 00e2  ld   $e2
              16eb 000c  ld   $0c
              16ec 0085  ld   $85
              16ed 00c3  ld   $c3
              16ee 000d  ld   $0d
              16ef 0085  ld   $85
              16f0 00dd  ld   $dd
              16f1 0005  ld   $05
              16f2 0085  ld   $85
              16f3 00f8  ld   $f8
              16f4 000c  ld   $0c
              16f5 0085  ld   $85
              16f6 003a  ld   $3a
              16f7 0003  ld   $03
              16f8 0085  ld   $85
              16f9 008c  ld   $8c
              16fa 0003  ld   $03
              16fb fe00  bra  ac          ;+-----------------------------------+
              16fc fcfd  bra  $16fd       ;|                                   |
              16fd 1404  ld   $04,y       ;| Trampoline for page $1600 lookups |
              16fe e068  jmp  y,$68       ;|                                   |
              16ff c218  st   [$18]       ;+-----------------------------------+
              1700 0021  ld   $21
              1701 0040  ld   $40
              1702 0035  ld   $35
              1703 003f  ld   $3f
              1704 0047  ld   $47
              1705 0085  ld   $85
              1706 00b0  ld   $b0
              1707 000d  ld   $0d
              1708 0085  ld   $85
              1709 00e0  ld   $e0
              170a 0003  ld   $03
              170b 0059  ld   $59
              170c 0000  ld   $00
              170d 002b  ld   $2b
              170e 004a  ld   $4a
              170f 0059  ld   $59
              1710 00ff  ld   $ff
              1711 002b  ld   $2b
              1712 004c  ld   $4c
              1713 0085  ld   $85
              1714 00b7  ld   $b7
              1715 0061  ld   $61
              1716 0085  ld   $85
              1717 00c2  ld   $c2
              1718 0009  ld   $09
              1719 0021  ld   $21
              171a 0046  ld   $46
              171b 0035  ld   $35
              171c 003f  ld   $3f
              171d 0070  ld   $70
              171e 0090  ld   $90
              171f 003b  ld   $3b
              1720 0093  ld   $93
              1721 004a  ld   $4a
              1722 0085  ld   $85
              1723 0065  ld   $65
              1724 0002  ld   $02
              1725 00b4  ld   $b4
              1726 0080  ld   $80
              1727 0075  ld   $75
              1728 001a  ld   $1a
              1729 0021  ld   $21
              172a 0082  ld   $82
              172b 00fc  ld   $fc
              172c 002b  ld   $2b
              172d 004e  ld   $4e
              172e 0021  ld   $21
              172f 004e  ld   $4e
              1730 008c  ld   $8c
              1731 0020  ld   $20
              1732 0035  ld   $35
              1733 0072  ld   $72
              1734 008d  ld   $8d
              1735 0011  ld   $11
              1736 003e  ld   $3e
              1737 00e2  ld   $e2
              1738 002b  ld   $2b
              1739 0030  ld   $30
              173a 0085  ld   $85
              173b 001d  ld   $1d
              173c 0003  ld   $03
              173d 0021  ld   $21
              173e 004e  ld   $4e
              173f 008c  ld   $8c
              1740 0028  ld   $28
              1741 0035  ld   $35
              1742 0072  ld   $72
              1743 009c  ld   $9c
              1744 0011  ld   $11
              1745 00a8  ld   $a8
              1746 00b4  ld   $b4
              1747 002b  ld   $2b
              1748 0030  ld   $30
              1749 0085  ld   $85
              174a 001d  ld   $1d
              174b 0003  ld   $03
              174c 0021  ld   $21
              174d 004e  ld   $4e
              174e 008c  ld   $8c
              174f 0038  ld   $38
              1750 0035  ld   $35
              1751 0072  ld   $72
              1752 00ab  ld   $ab
              1753 0011  ld   $11
              1754 005a  ld   $5a
              1755 00ad  ld   $ad
              1756 002b  ld   $2b
              1757 0030  ld   $30
              1758 0085  ld   $85
              1759 001d  ld   $1d
              175a 0003  ld   $03
              175b 0021  ld   $21
              175c 004e  ld   $4e
              175d 00e6  ld   $e6
              175e 0040  ld   $40
              175f 0035  ld   $35
              1760 0053  ld   $53
              1761 00b5  ld   $b5
              1762 0085  ld   $85
              1763 001d  ld   $1d
              1764 0003  ld   $03
              1765 0021  ld   $21
              1766 0030  ld   $30
              1767 002b  ld   $2b
              1768 0082  ld   $82
              1769 0085  ld   $85
              176a 00bf  ld   $bf
              176b 0061  ld   $61
              176c 002b  ld   $2b
              176d 0030  ld   $30
              176e 0021  ld   $21
              176f 0030  ld   $30
              1770 0035  ld   $35
              1771 0072  ld   $72
              1772 00c6  ld   $c6
              1773 0085  ld   $85
              1774 000a  ld   $0a
              1775 0003  ld   $03
              1776 0011  ld   $11
              1777 00a0  ld   $a0
              1778 007b  ld   $7b
              1779 002b  ld   $2b
              177a 0082  ld   $82
              177b 0059  ld   $59
              177c 0006  ld   $06
              177d 00f0  ld   $f0
              177e 0082  ld   $82
              177f 0059  ld   $59
              1780 0024  ld   $24
              1781 002b  ld   $2b
              1782 0050  ld   $50
              1783 0011  ld   $11
              1784 00a0  ld   $a0
              1785 007b  ld   $7b
              1786 0099  ld   $99
              1787 0050  ld   $50
              1788 00e6  ld   $e6
              1789 0023  ld   $23
              178a 002b  ld   $2b
              178b 00e8  ld   $e8
              178c 0021  ld   $21
              178d 0050  ld   $50
              178e 00ad  ld   $ad
              178f 00f0  ld   $f0
              1790 00e8  ld   $e8
              1791 0093  ld   $93
              1792 0050  ld   $50
              1793 001a  ld   $1a
              1794 0050  ld   $50
              1795 00e6  ld   $e6
              1796 002b  ld   $2b
              1797 0035  ld   $35
              1798 0056  ld   $56
              1799 00d3  ld   $d3
              179a 0011  ld   $11
              179b 00a0  ld   $a0
              179c 007b  ld   $7b
              179d 002b  ld   $2b
              179e 0084  ld   $84
              179f 0011  ld   $11
              17a0 00a6  ld   $a6
              17a1 007c  ld   $7c
              17a2 0085  ld   $85
              17a3 00c3  ld   $c3
              17a4 0066  ld   $66
              17a5 0085  ld   $85
              17a6 0000  ld   $00
              17a7 0003  ld   $03
              17a8 0003  ld   $03
              17a9 0000  ld   $00
              17aa 00fa  ld   $fa
              17ab 0082  ld   $82
              17ac 0001  ld   $01
              17ad 0035  ld   $35
              17ae 0072  ld   $72
              17af 0006  ld   $06
              17b0 0085  ld   $85
              17b1 000a  ld   $0a
              17b2 0003  ld   $03
              17b3 0063  ld   $63
              17b4 00ff  ld   $ff
              17b5 0021  ld   $21
              17b6 0030  ld   $30
              17b7 0035  ld   $35
              17b8 003f  ld   $3f
              17b9 0010  ld   $10
              17ba 0085  ld   $85
              17bb 00b7  ld   $b7
              17bc 0002  ld   $02
              17bd 0011  ld   $11
              17be 00b1  ld   $b1
              17bf 0069  ld   $69
              17c0 0085  ld   $85
              17c1 00d1  ld   $d1
              17c2 0062  ld   $62
              17c3 0085  ld   $85
              17c4 00aa  ld   $aa
              17c5 0067  ld   $67
              17c6 00b4  ld   $b4
              17c7 0080  ld   $80
              17c8 0063  ld   $63
              17c9 00ff  ld   $ff
              17ca 0075  ld   $75
              17cb 0011  ld   $11
              17cc 0006  ld   $06
              17cd 000b  ld   $0b
              17ce 002b  ld   $2b
              17cf 0022  ld   $22
              17d0 0021  ld   $21
              17d1 0032  ld   $32
              17d2 002b  ld   $2b
              17d3 0024  ld   $24
              17d4 0059  ld   $59
              17d5 0001  ld   $01
              17d6 002b  ld   $2b
              17d7 0026  ld   $26
              17d8 001a  ld   $1a
              17d9 0034  ld   $34
              17da 00e9  ld   $e9
              17db 00e9  ld   $e9
              17dc 00e9  ld   $e9
              17dd 002b  ld   $2b
              17de 0027  ld   $27
              17df 00b4  ld   $b4
              17e0 00e6  ld   $e6
              17e1 002b  ld   $2b
              17e2 0036  ld   $36
              17e3 0063  ld   $63
              17e4 00ff  ld   $ff
              17e5 0075  ld   $75
              17e6 0021  ld   $21
              17e7 0070  ld   $70
              17e8 002b  ld   $2b
              17e9 0022  ld   $22
              17ea 0011  ld   $11
              17eb 00ae  ld   $ae
              17ec 007c  ld   $7c
              17ed 002b  ld   $2b
              17ee 0024  ld   $24
              17ef 0059  ld   $59
              17f0 00cf  ld   $cf
              17f1 005e  ld   $5e
              17f2 0027  ld   $27
              17f3 00b4  ld   $b4
              17f4 00fe  ld   $fe
              17f5 0011  ld   $11
              17f6 00ae  ld   $ae
              17f7 007c  ld   $7c
              17f8 00ad  ld   $ad
              17f9 008c  ld   $8c
              17fa 00ff  ld   $ff
              17fb fe00  bra  ac          ;+-----------------------------------+
              17fc fcfd  bra  $17fd       ;|                                   |
              17fd 1404  ld   $04,y       ;| Trampoline for page $1700 lookups |
              17fe e068  jmp  y,$68       ;|                                   |
              17ff c218  st   [$18]       ;+-----------------------------------+
              1800 0035  ld   $35
              1801 003f  ld   $3f
              1802 003d  ld   $3d
              1803 0059  ld   $59
              1804 00db  ld   $db
              1805 005e  ld   $5e
              1806 0027  ld   $27
              1807 00b4  ld   $b4
              1808 00fe  ld   $fe
              1809 0059  ld   $59
              180a 00eb  ld   $eb
              180b 005e  ld   $5e
              180c 0027  ld   $27
              180d 00b4  ld   $b4
              180e 00fe  ld   $fe
              180f 0059  ld   $59
              1810 00fb  ld   $fb
              1811 005e  ld   $5e
              1812 0027  ld   $27
              1813 00b4  ld   $b4
              1814 00fe  ld   $fe
              1815 0059  ld   $59
              1816 0002  ld   $02
              1817 005e  ld   $5e
              1818 0027  ld   $27
              1819 00b4  ld   $b4
              181a 00fe  ld   $fe
              181b 001a  ld   $1a
              181c 0027  ld   $27
              181d 00e3  ld   $e3
              181e 0004  ld   $04
              181f 005e  ld   $5e
              1820 0027  ld   $27
              1821 008c  ld   $8c
              1822 00f2  ld   $f2
              1823 0035  ld   $35
              1824 0072  ld   $72
              1825 0067  ld   $67
              1826 0059  ld   $59
              1827 00b9  ld   $b9
              1828 005e  ld   $5e
              1829 0027  ld   $27
              182a 00b4  ld   $b4
              182b 00fe  ld   $fe
              182c 0011  ld   $11
              182d 00ae  ld   $ae
              182e 007c  ld   $7c
              182f 00ad  ld   $ad
              1830 002b  ld   $2b
              1831 0040  ld   $40
              1832 0011  ld   $11
              1833 00af  ld   $af
              1834 007c  ld   $7c
              1835 00ad  ld   $ad
              1836 0082  ld   $82
              1837 003f  ld   $3f
              1838 002b  ld   $2b
              1839 0042  ld   $42
              183a 0063  ld   $63
              183b 00ff  ld   $ff
              183c 0075  ld   $75
              183d 0059  ld   $59
              183e 0002  ld   $02
              183f 002b  ld   $2b
              1840 0052  ld   $52
              1841 0021  ld   $21
              1842 0042  ld   $42
              1843 0035  ld   $35
              1844 0072  ld   $72
              1845 0096  ld   $96
              1846 0063  ld   $63
              1847 00ff  ld   $ff
              1848 0021  ld   $21
              1849 0038  ld   $38
              184a 008c  ld   $8c
              184b 0064  ld   $64
              184c 0035  ld   $35
              184d 0072  ld   $72
              184e 009f  ld   $9f
              184f 0063  ld   $63
              1850 00ff  ld   $ff
              1851 0059  ld   $59
              1852 0000  ld   $00
              1853 002b  ld   $2b
              1854 0054  ld   $54
              1855 0011  ld   $11
              1856 00ae  ld   $ae
              1857 007c  ld   $7c
              1858 0099  ld   $99
              1859 0052  ld   $52
              185a 00ad  ld   $ad
              185b 002b  ld   $2b
              185c 0056  ld   $56
              185d 0021  ld   $21
              185e 0038  ld   $38
              185f 002b  ld   $2b
              1860 0096  ld   $96
              1861 0021  ld   $21
              1862 0054  ld   $54
              1863 002b  ld   $2b
              1864 0098  ld   $98
              1865 0011  ld   $11
              1866 0038  ld   $38
              1867 0006  ld   $06
              1868 0085  ld   $85
              1869 00a1  ld   $a1
              186a 0068  ld   $68
              186b 002b  ld   $2b
              186c 00ea  ld   $ea
              186d 0021  ld   $21
              186e 0056  ld   $56
              186f 00f0  ld   $f0
              1870 00ea  ld   $ea
              1871 0093  ld   $93
              1872 0052  ld   $52
              1873 0093  ld   $93
              1874 0054  ld   $54
              1875 0021  ld   $21
              1876 0056  ld   $56
              1877 0035  ld   $35
              1878 0072  ld   $72
              1879 00a3  ld   $a3
              187a 0093  ld   $93
              187b 0038  ld   $38
              187c 0021  ld   $21
              187d 0038  ld   $38
              187e 008c  ld   $8c
              187f 0064  ld   $64
              1880 0035  ld   $35
              1881 0072  ld   $72
              1882 00d3  ld   $d3
              1883 0063  ld   $63
              1884 00ff  ld   $ff
              1885 0021  ld   $21
              1886 0052  ld   $52
              1887 00e6  ld   $e6
              1888 0002  ld   $02
              1889 00fc  ld   $fc
              188a 0042  ld   $42
              188b 0035  ld   $35
              188c 0072  ld   $72
              188d 009f  ld   $9f
              188e 0063  ld   $63
              188f 00ff  ld   $ff
              1890 0075  ld   $75
              1891 0021  ld   $21
              1892 0038  ld   $38
              1893 00e6  ld   $e6
              1894 000f  ld   $0f
              1895 002b  ld   $2b
              1896 00e8  ld   $e8
              1897 0021  ld   $21
              1898 003a  ld   $3a
              1899 002b  ld   $2b
              189a 0082  ld   $82
              189b 0021  ld   $21
              189c 00e8  ld   $e8
              189d 0085  ld   $85
              189e 00ac  ld   $ac
              189f 0062  ld   $62
              18a0 002b  ld   $2b
              18a1 0082  ld   $82
              18a2 0059  ld   $59
              18a3 0000  ld   $00
              18a4 0085  ld   $85
              18a5 00f0  ld   $f0
              18a6 0061  ld   $61
              18a7 0085  ld   $85
              18a8 0000  ld   $00
              18a9 0004  ld   $04
              18aa 0004  ld   $04
              18ab 0000  ld   $00
              18ac 00fa  ld   $fa
              18ad 002b  ld   $2b
              18ae 0058  ld   $58
              18af 0021  ld   $21
              18b0 003a  ld   $3a
              18b1 00e3  ld   $e3
              18b2 000e  ld   $0e
              18b3 002b  ld   $2b
              18b4 00e8  ld   $e8
              18b5 0021  ld   $21
              18b6 0038  ld   $38
              18b7 00e6  ld   $e6
              18b8 0001  ld   $01
              18b9 002b  ld   $2b
              18ba 00ea  ld   $ea
              18bb 0021  ld   $21
              18bc 00e8  ld   $e8
              18bd 002b  ld   $2b
              18be 0082  ld   $82
              18bf 0021  ld   $21
              18c0 00ea  ld   $ea
              18c1 0085  ld   $85
              18c2 00ac  ld   $ac
              18c3 0062  ld   $62
              18c4 002b  ld   $2b
              18c5 005a  ld   $5a
              18c6 0021  ld   $21
              18c7 0058  ld   $58
              18c8 002b  ld   $2b
              18c9 005c  ld   $5c
              18ca 0021  ld   $21
              18cb 005a  ld   $5a
              18cc 002b  ld   $2b
              18cd 00b0  ld   $b0
              18ce 0059  ld   $59
              18cf 0001  ld   $01
              18d0 002b  ld   $2b
              18d1 00b2  ld   $b2
              18d2 0021  ld   $21
              18d3 005c  ld   $5c
              18d4 002b  ld   $2b
              18d5 0096  ld   $96
              18d6 0059  ld   $59
              18d7 0000  ld   $00
              18d8 002b  ld   $2b
              18d9 0098  ld   $98
              18da 0011  ld   $11
              18db 0038  ld   $38
              18dc 0006  ld   $06
              18dd 0085  ld   $85
              18de 00a1  ld   $a1
              18df 0068  ld   $68
              18e0 00e3  ld   $e3
              18e1 0001  ld   $01
              18e2 002b  ld   $2b
              18e3 005e  ld   $5e
              18e4 0021  ld   $21
              18e5 005e  ld   $5e
              18e6 00ad  ld   $ad
              18e7 002b  ld   $2b
              18e8 0060  ld   $60
              18e9 0021  ld   $21
              18ea 005e  ld   $5e
              18eb 00e6  ld   $e6
              18ec 0001  ld   $01
              18ed 00ad  ld   $ad
              18ee 002b  ld   $2b
              18ef 0062  ld   $62
              18f0 0021  ld   $21
              18f1 005c  ld   $5c
              18f2 00b8  ld   $b8
              18f3 003a  ld   $3a
              18f4 00fc  ld   $fc
              18f5 003c  ld   $3c
              18f6 0035  ld   $35
              18f7 0072  ld   $72
              18f8 0065  ld   $65
              18f9 0021  ld   $21
              18fa 0062  ld   $62
              18fb fe00  bra  ac          ;+-----------------------------------+
              18fc fcfd  bra  $18fd       ;|                                   |
              18fd 1404  ld   $04,y       ;| Trampoline for page $1800 lookups |
              18fe e068  jmp  y,$68       ;|                                   |
              18ff c218  st   [$18]       ;+-----------------------------------+
              1900 008c  ld   $8c
              1901 0001  ld   $01
              1902 0035  ld   $35
              1903 0072  ld   $72
              1904 0059  ld   $59
              1905 0011  ld   $11
              1906 003f  ld   $3f
              1907 0020  ld   $20
              1908 002b  ld   $2b
              1909 00a2  ld   $a2
              190a 0085  ld   $85
              190b 0060  ld   $60
              190c 0004  ld   $04
              190d 0011  ld   $11
              190e 002a  ld   $2a
              190f 0020  ld   $20
              1910 002b  ld   $2b
              1911 00a2  ld   $a2
              1912 0021  ld   $21
              1913 005e  ld   $5e
              1914 002b  ld   $2b
              1915 0044  ld   $44
              1916 0085  ld   $85
              1917 007b  ld   $7b
              1918 0004  ld   $04
              1919 0021  ld   $21
              191a 0062  ld   $62
              191b 008c  ld   $8c
              191c 0001  ld   $01
              191d 0035  ld   $35
              191e 0072  ld   $72
              191f 0074  ld   $74
              1920 0011  ld   $11
              1921 0020  ld   $20
              1922 003f  ld   $3f
              1923 002b  ld   $2b
              1924 00a2  ld   $a2
              1925 0085  ld   $85
              1926 007b  ld   $7b
              1927 0004  ld   $04
              1928 0011  ld   $11
              1929 0020  ld   $20
              192a 002a  ld   $2a
              192b 002b  ld   $2b
              192c 00a2  ld   $a2
              192d 0059  ld   $59
              192e 0002  ld   $02
              192f 005e  ld   $5e
              1930 00a4  ld   $a4
              1931 0021  ld   $21
              1932 005c  ld   $5c
              1933 00b8  ld   $b8
              1934 003a  ld   $3a
              1935 00e9  ld   $e9
              1936 00e9  ld   $e9
              1937 00e9  ld   $e9
              1938 005e  ld   $5e
              1939 00a5  ld   $a5
              193a 0085  ld   $85
              193b 00a8  ld   $a8
              193c 0064  ld   $64
              193d 0021  ld   $21
              193e 005e  ld   $5e
              193f 0085  ld   $85
              1940 00d1  ld   $d1
              1941 0062  ld   $62
              1942 0059  ld   $59
              1943 000c  ld   $0c
              1944 00b8  ld   $b8
              1945 0060  ld   $60
              1946 0085  ld   $85
              1947 00e4  ld   $e4
              1948 0063  ld   $63
              1949 0021  ld   $21
              194a 005c  ld   $5c
              194b 0099  ld   $99
              194c 00b2  ld   $b2
              194d 002b  ld   $2b
              194e 005c  ld   $5c
              194f 00b8  ld   $b8
              1950 00b0  ld   $b0
              1951 0035  ld   $35
              1952 0056  ld   $56
              1953 0023  ld   $23
              1954 0063  ld   $63
              1955 00ff  ld   $ff
              1956 0075  ld   $75
              1957 0021  ld   $21
              1958 0038  ld   $38
              1959 00e6  ld   $e6
              195a 000f  ld   $0f
              195b 002b  ld   $2b
              195c 00e8  ld   $e8
              195d 0021  ld   $21
              195e 003a  ld   $3a
              195f 002b  ld   $2b
              1960 0082  ld   $82
              1961 0021  ld   $21
              1962 00e8  ld   $e8
              1963 0085  ld   $85
              1964 00ac  ld   $ac
              1965 0062  ld   $62
              1966 002b  ld   $2b
              1967 0082  ld   $82
              1968 0059  ld   $59
              1969 0000  ld   $00
              196a 0085  ld   $85
              196b 00f0  ld   $f0
              196c 0061  ld   $61
              196d 002b  ld   $2b
              196e 0058  ld   $58
              196f 0021  ld   $21
              1970 0058  ld   $58
              1971 0099  ld   $99
              1972 003e  ld   $3e
              1973 002b  ld   $2b
              1974 0064  ld   $64
              1975 0021  ld   $21
              1976 0064  ld   $64
              1977 002b  ld   $2b
              1978 0096  ld   $96
              1979 0059  ld   $59
              197a 0000  ld   $00
              197b 002b  ld   $2b
              197c 0098  ld   $98
              197d 0011  ld   $11
              197e 0038  ld   $38
              197f 0006  ld   $06
              1980 0085  ld   $85
              1981 00a1  ld   $a1
              1982 0068  ld   $68
              1983 00e3  ld   $e3
              1984 0001  ld   $01
              1985 002b  ld   $2b
              1986 0066  ld   $66
              1987 0021  ld   $21
              1988 0066  ld   $66
              1989 00ad  ld   $ad
              198a 002b  ld   $2b
              198b 0068  ld   $68
              198c 0021  ld   $21
              198d 0066  ld   $66
              198e 00e6  ld   $e6
              198f 0001  ld   $01
              1990 00ad  ld   $ad
              1991 002b  ld   $2b
              1992 0062  ld   $62
              1993 0021  ld   $21
              1994 0062  ld   $62
              1995 008c  ld   $8c
              1996 0001  ld   $01
              1997 0035  ld   $35
              1998 0072  ld   $72
              1999 00ee  ld   $ee
              199a 0011  ld   $11
              199b 0020  ld   $20
              199c 003f  ld   $3f
              199d 002b  ld   $2b
              199e 00a2  ld   $a2
              199f 0085  ld   $85
              19a0 00f5  ld   $f5
              19a1 0004  ld   $04
              19a2 0011  ld   $11
              19a3 0020  ld   $20
              19a4 002a  ld   $2a
              19a5 002b  ld   $2b
              19a6 00a2  ld   $a2
              19a7 0059  ld   $59
              19a8 0002  ld   $02
              19a9 0085  ld   $85
              19aa 0000  ld   $00
              19ab 0005  ld   $05
              19ac 0005  ld   $05
              19ad 0000  ld   $00
              19ae 00fe  ld   $fe
              19af 005e  ld   $5e
              19b0 00a4  ld   $a4
              19b1 0021  ld   $21
              19b2 0064  ld   $64
              19b3 00b8  ld   $b8
              19b4 0058  ld   $58
              19b5 00e9  ld   $e9
              19b6 00e9  ld   $e9
              19b7 00e9  ld   $e9
              19b8 005e  ld   $5e
              19b9 00a5  ld   $a5
              19ba 0085  ld   $85
              19bb 00a8  ld   $a8
              19bc 0064  ld   $64
              19bd 0021  ld   $21
              19be 0066  ld   $66
              19bf 0085  ld   $85
              19c0 00d1  ld   $d1
              19c1 0062  ld   $62
              19c2 0059  ld   $59
              19c3 000c  ld   $0c
              19c4 00b8  ld   $b8
              19c5 0068  ld   $68
              19c6 0085  ld   $85
              19c7 00e4  ld   $e4
              19c8 0063  ld   $63
              19c9 0021  ld   $21
              19ca 003c  ld   $3c
              19cb 002b  ld   $2b
              19cc 003e  ld   $3e
              19cd 0021  ld   $21
              19ce 0058  ld   $58
              19cf 0099  ld   $99
              19d0 003c  ld   $3c
              19d1 002b  ld   $2b
              19d2 006a  ld   $6a
              19d3 0021  ld   $21
              19d4 006a  ld   $6a
              19d5 002b  ld   $2b
              19d6 0096  ld   $96
              19d7 0059  ld   $59
              19d8 0000  ld   $00
              19d9 002b  ld   $2b
              19da 0098  ld   $98
              19db 0011  ld   $11
              19dc 0038  ld   $38
              19dd 0006  ld   $06
              19de 0085  ld   $85
              19df 00a1  ld   $a1
              19e0 0068  ld   $68
              19e1 00e3  ld   $e3
              19e2 0001  ld   $01
              19e3 002b  ld   $2b
              19e4 006c  ld   $6c
              19e5 0021  ld   $21
              19e6 006c  ld   $6c
              19e7 00ad  ld   $ad
              19e8 002b  ld   $2b
              19e9 006e  ld   $6e
              19ea 0021  ld   $21
              19eb 006c  ld   $6c
              19ec 00e6  ld   $e6
              19ed 0001  ld   $01
              19ee 00ad  ld   $ad
              19ef 002b  ld   $2b
              19f0 0062  ld   $62
              19f1 0021  ld   $21
              19f2 0062  ld   $62
              19f3 008c  ld   $8c
              19f4 0001  ld   $01
              19f5 0035  ld   $35
              19f6 0072  ld   $72
              19f7 004f  ld   $4f
              19f8 0011  ld   $11
              19f9 003f  ld   $3f
              19fa 0020  ld   $20
              19fb fe00  bra  ac          ;+-----------------------------------+
              19fc fcfd  bra  $19fd       ;|                                   |
              19fd 1404  ld   $04,y       ;| Trampoline for page $1900 lookups |
              19fe e068  jmp  y,$68       ;|                                   |
              19ff c218  st   [$18]       ;+-----------------------------------+
              1a00 002b  ld   $2b
              1a01 00a2  ld   $a2
              1a02 0085  ld   $85
              1a03 0056  ld   $56
              1a04 0005  ld   $05
              1a05 0011  ld   $11
              1a06 002a  ld   $2a
              1a07 0020  ld   $20
              1a08 002b  ld   $2b
              1a09 00a2  ld   $a2
              1a0a 0059  ld   $59
              1a0b 0002  ld   $02
              1a0c 005e  ld   $5e
              1a0d 00a4  ld   $a4
              1a0e 0021  ld   $21
              1a0f 006a  ld   $6a
              1a10 00b8  ld   $b8
              1a11 0058  ld   $58
              1a12 00e9  ld   $e9
              1a13 00e9  ld   $e9
              1a14 00e9  ld   $e9
              1a15 005e  ld   $5e
              1a16 00a5  ld   $a5
              1a17 0085  ld   $85
              1a18 00a8  ld   $a8
              1a19 0064  ld   $64
              1a1a 0021  ld   $21
              1a1b 006c  ld   $6c
              1a1c 0085  ld   $85
              1a1d 00d1  ld   $d1
              1a1e 0062  ld   $62
              1a1f 0059  ld   $59
              1a20 000c  ld   $0c
              1a21 00b8  ld   $b8
              1a22 006e  ld   $6e
              1a23 0085  ld   $85
              1a24 00e4  ld   $e4
              1a25 0063  ld   $63
              1a26 0021  ld   $21
              1a27 006c  ld   $6c
              1a28 002b  ld   $2b
              1a29 0044  ld   $44
              1a2a 0063  ld   $63
              1a2b 00ff  ld   $ff
              1a2c 0075  ld   $75
              1a2d 0011  ld   $11
              1a2e 00e9  ld   $e9
              1a2f 0002  ld   $02
              1a30 002b  ld   $2b
              1a31 0070  ld   $70
              1a32 001a  ld   $1a
              1a33 0021  ld   $21
              1a34 0082  ld   $82
              1a35 00fc  ld   $fc
              1a36 002b  ld   $2b
              1a37 004e  ld   $4e
              1a38 0021  ld   $21
              1a39 004e  ld   $4e
              1a3a 008c  ld   $8c
              1a3b 0020  ld   $20
              1a3c 0035  ld   $35
              1a3d 0072  ld   $72
              1a3e 0091  ld   $91
              1a3f 0011  ld   $11
              1a40 00b1  ld   $b1
              1a41 000b  ld   $0b
              1a42 002b  ld   $2b
              1a43 0070  ld   $70
              1a44 0085  ld   $85
              1a45 00db  ld   $db
              1a46 0005  ld   $05
              1a47 0021  ld   $21
              1a48 004e  ld   $4e
              1a49 008c  ld   $8c
              1a4a 0028  ld   $28
              1a4b 0035  ld   $35
              1a4c 0072  ld   $72
              1a4d 00a0  ld   $a0
              1a4e 0011  ld   $11
              1a4f 00df  ld   $df
              1a50 000b  ld   $0b
              1a51 002b  ld   $2b
              1a52 0070  ld   $70
              1a53 0085  ld   $85
              1a54 00db  ld   $db
              1a55 0005  ld   $05
              1a56 0021  ld   $21
              1a57 004e  ld   $4e
              1a58 008c  ld   $8c
              1a59 0038  ld   $38
              1a5a 0035  ld   $35
              1a5b 0072  ld   $72
              1a5c 00af  ld   $af
              1a5d 0011  ld   $11
              1a5e 0031  ld   $31
              1a5f 008a  ld   $8a
              1a60 002b  ld   $2b
              1a61 0070  ld   $70
              1a62 0085  ld   $85
              1a63 00db  ld   $db
              1a64 0005  ld   $05
              1a65 0021  ld   $21
              1a66 004e  ld   $4e
              1a67 008c  ld   $8c
              1a68 0040  ld   $40
              1a69 0035  ld   $35
              1a6a 0072  ld   $72
              1a6b 00be  ld   $be
              1a6c 0011  ld   $11
              1a6d 0007  ld   $07
              1a6e 0059  ld   $59
              1a6f 002b  ld   $2b
              1a70 0070  ld   $70
              1a71 0085  ld   $85
              1a72 00db  ld   $db
              1a73 0005  ld   $05
              1a74 0021  ld   $21
              1a75 004e  ld   $4e
              1a76 008c  ld   $8c
              1a77 00f0  ld   $f0
              1a78 0035  ld   $35
              1a79 0072  ld   $72
              1a7a 00cd  ld   $cd
              1a7b 0011  ld   $11
              1a7c 0000  ld   $00
              1a7d 0013  ld   $13
              1a7e 002b  ld   $2b
              1a7f 0070  ld   $70
              1a80 0085  ld   $85
              1a81 00db  ld   $db
              1a82 0005  ld   $05
              1a83 0021  ld   $21
              1a84 004e  ld   $4e
              1a85 008c  ld   $8c
              1a86 00f8  ld   $f8
              1a87 0035  ld   $35
              1a88 0072  ld   $72
              1a89 00d9  ld   $d9
              1a8a 0011  ld   $11
              1a8b 0007  ld   $07
              1a8c 0059  ld   $59
              1a8d 002b  ld   $2b
              1a8e 0070  ld   $70
              1a8f 0063  ld   $63
              1a90 00ff  ld   $ff
              1a91 0075  ld   $75
              1a92 0011  ld   $11
              1a93 00ef  ld   $ef
              1a94 007c  ld   $7c
              1a95 002b  ld   $2b
              1a96 0082  ld   $82
              1a97 0059  ld   $59
              1a98 0003  ld   $03
              1a99 00f0  ld   $f0
              1a9a 0082  ld   $82
              1a9b 0011  ld   $11
              1a9c 00a0  ld   $a0
              1a9d 007a  ld   $7a
              1a9e 00ad  ld   $ad
              1a9f 002b  ld   $2b
              1aa0 0072  ld   $72
              1aa1 0021  ld   $21
              1aa2 0072  ld   $72
              1aa3 0035  ld   $35
              1aa4 004d  ld   $4d
              1aa5 00f3  ld   $f3
              1aa6 0085  ld   $85
              1aa7 0025  ld   $25
              1aa8 0006  ld   $06
              1aa9 0059  ld   $59
              1aaa 0001  ld   $01
              1aab 002b  ld   $2b
              1aac 005c  ld   $5c
              1aad 0021  ld   $21
              1aae 0072  ld   $72
              1aaf 0085  ld   $85
              1ab0 0000  ld   $00
              1ab1 0006  ld   $06
              1ab2 0006  ld   $06
              1ab3 0000  ld   $00
              1ab4 0037  ld   $37
              1ab5 00e3  ld   $e3
              1ab6 0001  ld   $01
              1ab7 002b  ld   $2b
              1ab8 00b0  ld   $b0
              1ab9 0059  ld   $59
              1aba 0001  ld   $01
              1abb 002b  ld   $2b
              1abc 00b2  ld   $b2
              1abd 0011  ld   $11
              1abe 00ef  ld   $ef
              1abf 007c  ld   $7c
              1ac0 0099  ld   $99
              1ac1 005c  ld   $5c
              1ac2 002b  ld   $2b
              1ac3 00e8  ld   $e8
              1ac4 0011  ld   $11
              1ac5 00a0  ld   $a0
              1ac6 007a  ld   $7a
              1ac7 0099  ld   $99
              1ac8 005c  ld   $5c
              1ac9 00ad  ld   $ad
              1aca 00f0  ld   $f0
              1acb 00e8  ld   $e8
              1acc 0021  ld   $21
              1acd 005c  ld   $5c
              1ace 0099  ld   $99
              1acf 00b2  ld   $b2
              1ad0 002b  ld   $2b
              1ad1 005c  ld   $5c
              1ad2 00b8  ld   $b8
              1ad3 00b0  ld   $b0
              1ad4 0035  ld   $35
              1ad5 0056  ld   $56
              1ad6 0006  ld   $06
              1ad7 0085  ld   $85
              1ad8 002e  ld   $2e
              1ad9 0006  ld   $06
              1ada 0011  ld   $11
              1adb 00f0  ld   $f0
              1adc 007c  ld   $7c
              1add 002b  ld   $2b
              1ade 0082  ld   $82
              1adf 0059  ld   $59
              1ae0 0000  ld   $00
              1ae1 00f0  ld   $f0
              1ae2 0082  ld   $82
              1ae3 0059  ld   $59
              1ae4 0001  ld   $01
              1ae5 0099  ld   $99
              1ae6 0072  ld   $72
              1ae7 00e3  ld   $e3
              1ae8 0001  ld   $01
              1ae9 0085  ld   $85
              1aea 00a0  ld   $a0
              1aeb 0008  ld   $08
              1aec 0006  ld   $06
              1aed 0038  ld   $38
              1aee 00c8  ld   $c8
              1aef 00f1  ld   $f1
              1af0 0079  ld   $79
              1af1 00e2  ld   $e2
              1af2 0079  ld   $79
              1af3 00d3  ld   $d3
              1af4 0079  ld   $79
              1af5 00c4  ld   $c4
              1af6 0079  ld   $79
              1af7 00b5  ld   $b5
              1af8 0079  ld   $79
              1af9 00a6  ld   $a6
              1afa 0079  ld   $79
              1afb fe00  bra  ac          ;+-----------------------------------+
              1afc fcfd  bra  $1afd       ;|                                   |
              1afd 1404  ld   $04,y       ;| Trampoline for page $1a00 lookups |
              1afe e068  jmp  y,$68       ;|                                   |
              1aff c218  st   [$18]       ;+-----------------------------------+
              1b00 00f1  ld   $f1
              1b01 0078  ld   $78
              1b02 00e2  ld   $e2
              1b03 0078  ld   $78
              1b04 00d3  ld   $d3
              1b05 0078  ld   $78
              1b06 00c4  ld   $c4
              1b07 0078  ld   $78
              1b08 00b5  ld   $b5
              1b09 0078  ld   $78
              1b0a 00a6  ld   $a6
              1b0b 0078  ld   $78
              1b0c 00f1  ld   $f1
              1b0d 0077  ld   $77
              1b0e 00e2  ld   $e2
              1b0f 0077  ld   $77
              1b10 00d3  ld   $d3
              1b11 0077  ld   $77
              1b12 00c4  ld   $c4
              1b13 0077  ld   $77
              1b14 00b5  ld   $b5
              1b15 0077  ld   $77
              1b16 00a6  ld   $a6
              1b17 0077  ld   $77
              1b18 00f1  ld   $f1
              1b19 0076  ld   $76
              1b1a 00e2  ld   $e2
              1b1b 0076  ld   $76
              1b1c 00d3  ld   $d3
              1b1d 0076  ld   $76
              1b1e 00c4  ld   $c4
              1b1f 0076  ld   $76
              1b20 00b5  ld   $b5
              1b21 0076  ld   $76
              1b22 00a6  ld   $a6
              1b23 0076  ld   $76
              1b24 00f1  ld   $f1
              1b25 0075  ld   $75
              1b26 00e2  ld   $e2
              1b27 0075  ld   $75
              1b28 00d3  ld   $d3
              1b29 0075  ld   $75
              1b2a 00c4  ld   $c4
              1b2b 0075  ld   $75
              1b2c 00b5  ld   $b5
              1b2d 0075  ld   $75
              1b2e 00a6  ld   $a6
              1b2f 0075  ld   $75
              1b30 00f1  ld   $f1
              1b31 0074  ld   $74
              1b32 00e2  ld   $e2
              1b33 0074  ld   $74
              1b34 00d3  ld   $d3
              1b35 0074  ld   $74
              1b36 00c4  ld   $c4
              1b37 0074  ld   $74
              1b38 00b5  ld   $b5
              1b39 0074  ld   $74
              1b3a 00a6  ld   $a6
              1b3b 0074  ld   $74
              1b3c 00f1  ld   $f1
              1b3d 0073  ld   $73
              1b3e 00e2  ld   $e2
              1b3f 0073  ld   $73
              1b40 00d3  ld   $d3
              1b41 0073  ld   $73
              1b42 00c4  ld   $c4
              1b43 0073  ld   $73
              1b44 00b5  ld   $b5
              1b45 0073  ld   $73
              1b46 00a6  ld   $a6
              1b47 0073  ld   $73
              1b48 00f1  ld   $f1
              1b49 0072  ld   $72
              1b4a 00e2  ld   $e2
              1b4b 0072  ld   $72
              1b4c 00d3  ld   $d3
              1b4d 0072  ld   $72
              1b4e 00c4  ld   $c4
              1b4f 0072  ld   $72
              1b50 00b5  ld   $b5
              1b51 0072  ld   $72
              1b52 00a6  ld   $a6
              1b53 0072  ld   $72
              1b54 00f1  ld   $f1
              1b55 0071  ld   $71
              1b56 00e2  ld   $e2
              1b57 0071  ld   $71
              1b58 00d3  ld   $d3
              1b59 0071  ld   $71
              1b5a 00c4  ld   $c4
              1b5b 0071  ld   $71
              1b5c 00b5  ld   $b5
              1b5d 0071  ld   $71
              1b5e 00a6  ld   $a6
              1b5f 0071  ld   $71
              1b60 00f1  ld   $f1
              1b61 0070  ld   $70
              1b62 00e2  ld   $e2
              1b63 0070  ld   $70
              1b64 00d3  ld   $d3
              1b65 0070  ld   $70
              1b66 00c4  ld   $c4
              1b67 0070  ld   $70
              1b68 00b5  ld   $b5
              1b69 0070  ld   $70
              1b6a 00a6  ld   $a6
              1b6b 0070  ld   $70
              1b6c 00f1  ld   $f1
              1b6d 006f  ld   $6f
              1b6e 00e2  ld   $e2
              1b6f 006f  ld   $6f
              1b70 00d3  ld   $d3
              1b71 006f  ld   $6f
              1b72 00c4  ld   $c4
              1b73 006f  ld   $6f
              1b74 00b5  ld   $b5
              1b75 006f  ld   $6f
              1b76 00a6  ld   $a6
              1b77 006f  ld   $6f
              1b78 00f1  ld   $f1
              1b79 006e  ld   $6e
              1b7a 00e2  ld   $e2
              1b7b 006e  ld   $6e
              1b7c 00d3  ld   $d3
              1b7d 006e  ld   $6e
              1b7e 00c4  ld   $c4
              1b7f 006e  ld   $6e
              1b80 00b5  ld   $b5
              1b81 006e  ld   $6e
              1b82 00a6  ld   $a6
              1b83 006e  ld   $6e
              1b84 00f1  ld   $f1
              1b85 006d  ld   $6d
              1b86 00e2  ld   $e2
              1b87 006d  ld   $6d
              1b88 00d3  ld   $d3
              1b89 006d  ld   $6d
              1b8a 00c4  ld   $c4
              1b8b 006d  ld   $6d
              1b8c 00b5  ld   $b5
              1b8d 006d  ld   $6d
              1b8e 00a6  ld   $a6
              1b8f 006d  ld   $6d
              1b90 00f1  ld   $f1
              1b91 006c  ld   $6c
              1b92 00e2  ld   $e2
              1b93 006c  ld   $6c
              1b94 00d3  ld   $d3
              1b95 006c  ld   $6c
              1b96 00c4  ld   $c4
              1b97 006c  ld   $6c
              1b98 00b5  ld   $b5
              1b99 006c  ld   $6c
              1b9a 00a6  ld   $a6
              1b9b 006c  ld   $6c
              1b9c 00f1  ld   $f1
              1b9d 006b  ld   $6b
              1b9e 00e2  ld   $e2
              1b9f 006b  ld   $6b
              1ba0 00d3  ld   $d3
              1ba1 006b  ld   $6b
              1ba2 00c4  ld   $c4
              1ba3 006b  ld   $6b
              1ba4 00b5  ld   $b5
              1ba5 006b  ld   $6b
              1ba6 00a6  ld   $a6
              1ba7 006b  ld   $6b
              1ba8 00f1  ld   $f1
              1ba9 006a  ld   $6a
              1baa 00e2  ld   $e2
              1bab 006a  ld   $6a
              1bac 00d3  ld   $d3
              1bad 006a  ld   $6a
              1bae 00c4  ld   $c4
              1baf 006a  ld   $6a
              1bb0 00b5  ld   $b5
              1bb1 006a  ld   $6a
              1bb2 00a6  ld   $a6
              1bb3 006a  ld   $6a
              1bb4 00f1  ld   $f1
              1bb5 0069  ld   $69
              1bb6 00e2  ld   $e2
              1bb7 0069  ld   $69
              1bb8 00d3  ld   $d3
              1bb9 0069  ld   $69
              1bba 00c4  ld   $c4
              1bbb 0069  ld   $69
              1bbc 0008  ld   $08
              1bbd 00a0  ld   $a0
              1bbe 005d  ld   $5d
              1bbf 002b  ld   $2b
              1bc0 0034  ld   $34
              1bc1 0085  ld   $85
              1bc2 001f  ld   $1f
              1bc3 0003  ld   $03
              1bc4 0085  ld   $85
              1bc5 00c5  ld   $c5
              1bc6 000c  ld   $0c
              1bc7 0011  ld   $11
              1bc8 00fe  ld   $fe
              1bc9 007c  ld   $7c
              1bca 002b  ld   $2b
              1bcb 0084  ld   $84
              1bcc 0011  ld   $11
              1bcd 00a0  ld   $a0
              1bce 007a  ld   $7a
              1bcf 0085  ld   $85
              1bd0 00d2  ld   $d2
              1bd1 0061  ld   $61
              1bd2 0063  ld   $63
              1bd3 00ff  ld   $ff
              1bd4 0075  ld   $75
              1bd5 0085  ld   $85
              1bd6 00e2  ld   $e2
              1bd7 000c  ld   $0c
              1bd8 0011  ld   $11
              1bd9 00ef  ld   $ef
              1bda 007c  ld   $7c
              1bdb 002b  ld   $2b
              1bdc 0082  ld   $82
              1bdd 0059  ld   $59
              1bde 0002  ld   $02
              1bdf 00f0  ld   $f0
              1be0 0082  ld   $82
              1be1 0021  ld   $21
              1be2 0044  ld   $44
              1be3 002b  ld   $2b
              1be4 0084  ld   $84
              1be5 0011  ld   $11
              1be6 00a0  ld   $a0
              1be7 007d  ld   $7d
              1be8 0085  ld   $85
              1be9 00d2  ld   $d2
              1bea 0061  ld   $61
              1beb 0011  ld   $11
              1bec 00a0  ld   $a0
              1bed 007d  ld   $7d
              1bee 00ad  ld   $ad
              1bef 002b  ld   $2b
              1bf0 0072  ld   $72
              1bf1 0059  ld   $59
              1bf2 0001  ld   $01
              1bf3 002b  ld   $2b
              1bf4 005c  ld   $5c
              1bf5 0021  ld   $21
              1bf6 0072  ld   $72
              1bf7 00e3  ld   $e3
              1bf8 0001  ld   $01
              1bf9 002b  ld   $2b
              1bfa 00b0  ld   $b0
              1bfb fe00  bra  ac          ;+-----------------------------------+
              1bfc fcfd  bra  $1bfd       ;|                                   |
              1bfd 1404  ld   $04,y       ;| Trampoline for page $1b00 lookups |
              1bfe e068  jmp  y,$68       ;|                                   |
              1bff c218  st   [$18]       ;+-----------------------------------+
              1c00 0059  ld   $59
              1c01 0001  ld   $01
              1c02 002b  ld   $2b
              1c03 00b2  ld   $b2
              1c04 0011  ld   $11
              1c05 00ef  ld   $ef
              1c06 007c  ld   $7c
              1c07 0099  ld   $99
              1c08 005c  ld   $5c
              1c09 002b  ld   $2b
              1c0a 00e8  ld   $e8
              1c0b 0011  ld   $11
              1c0c 00a0  ld   $a0
              1c0d 007d  ld   $7d
              1c0e 0099  ld   $99
              1c0f 005c  ld   $5c
              1c10 00ad  ld   $ad
              1c11 00f0  ld   $f0
              1c12 00e8  ld   $e8
              1c13 0021  ld   $21
              1c14 005c  ld   $5c
              1c15 0099  ld   $99
              1c16 00b2  ld   $b2
              1c17 002b  ld   $2b
              1c18 005c  ld   $5c
              1c19 00b8  ld   $b8
              1c1a 00b0  ld   $b0
              1c1b 0035  ld   $35
              1c1c 0056  ld   $56
              1c1d 00de  ld   $de
              1c1e 0085  ld   $85
              1c1f 00a0  ld   $a0
              1c20 0009  ld   $09
              1c21 0009  ld   $09
              1c22 00a0  ld   $a0
              1c23 005f  ld   $5f
              1c24 0011  ld   $11
              1c25 0020  ld   $20
              1c26 000f  ld   $0f
              1c27 002b  ld   $2b
              1c28 00a2  ld   $a2
              1c29 0085  ld   $85
              1c2a 00a3  ld   $a3
              1c2b 0066  ld   $66
              1c2c 0085  ld   $85
              1c2d 00cd  ld   $cd
              1c2e 0064  ld   $64
              1c2f 0059  ld   $59
              1c30 0001  ld   $01
              1c31 0099  ld   $99
              1c32 0072  ld   $72
              1c33 00e3  ld   $e3
              1c34 0001  ld   $01
              1c35 002b  ld   $2b
              1c36 0034  ld   $34
              1c37 0085  ld   $85
              1c38 001f  ld   $1f
              1c39 0003  ld   $03
              1c3a 0021  ld   $21
              1c3b 0030  ld   $30
              1c3c 002b  ld   $2b
              1c3d 0024  ld   $24
              1c3e 0011  ld   $11
              1c3f 0000  ld   $00
              1c40 0002  ld   $02
              1c41 0085  ld   $85
              1c42 00a0  ld   $a0
              1c43 0064  ld   $64
              1c44 0063  ld   $63
              1c45 00ff  ld   $ff
              1c46 0075  ld   $75
              1c47 001a  ld   $1a
              1c48 000f  ld   $0f
              1c49 002b  ld   $2b
              1c4a 0074  ld   $74
              1c4b 0021  ld   $21
              1c4c 0074  ld   $74
              1c4d 00fc  ld   $fc
              1c4e 004c  ld   $4c
              1c4f 0035  ld   $35
              1c50 003f  ld   $3f
              1c51 00df  ld   $df
              1c52 0059  ld   $59
              1c53 0000  ld   $00
              1c54 002b  ld   $2b
              1c55 004a  ld   $4a
              1c56 0021  ld   $21
              1c57 0074  ld   $74
              1c58 002b  ld   $2b
              1c59 004c  ld   $4c
              1c5a 0021  ld   $21
              1c5b 0074  ld   $74
              1c5c 002b  ld   $2b
              1c5d 0082  ld   $82
              1c5e 0059  ld   $59
              1c5f 0000  ld   $00
              1c60 002b  ld   $2b
              1c61 0084  ld   $84
              1c62 0085  ld   $85
              1c63 00cd  ld   $cd
              1c64 0065  ld   $65
              1c65 0021  ld   $21
              1c66 004a  ld   $4a
              1c67 00e6  ld   $e6
              1c68 0014  ld   $14
              1c69 0035  ld   $35
              1c6a 004d  ld   $4d
              1c6b 00e9  ld   $e9
              1c6c 0085  ld   $85
              1c6d 00a9  ld   $a9
              1c6e 000a  ld   $0a
              1c6f 0021  ld   $21
              1c70 004a  ld   $4a
              1c71 002b  ld   $2b
              1c72 00a0  ld   $a0
              1c73 0085  ld   $85
              1c74 00a0  ld   $a0
              1c75 0067  ld   $67
              1c76 0082  ld   $82
              1c77 0001  ld   $01
              1c78 0035  ld   $35
              1c79 0072  ld   $72
              1c7a 00f8  ld   $f8
              1c7b 0085  ld   $85
              1c7c 00a9  ld   $a9
              1c7d 000a  ld   $0a
              1c7e 0021  ld   $21
              1c7f 0074  ld   $74
              1c80 0085  ld   $85
              1c81 00a0  ld   $a0
              1c82 000a  ld   $0a
              1c83 000a  ld   $0a
              1c84 00a0  ld   $a0
              1c85 005e  ld   $5e
              1c86 002b  ld   $2b
              1c87 0082  ld   $82
              1c88 0059  ld   $59
              1c89 0000  ld   $00
              1c8a 002b  ld   $2b
              1c8b 0084  ld   $84
              1c8c 0085  ld   $85
              1c8d 00cd  ld   $cd
              1c8e 0065  ld   $65
              1c8f 0063  ld   $63
              1c90 00ff  ld   $ff
              1c91 0075  ld   $75
              1c92 0085  ld   $85
              1c93 00d5  ld   $d5
              1c94 000b  ld   $0b
              1c95 0063  ld   $63
              1c96 00ff  ld   $ff
              1c97 0075  ld   $75
              1c98 0085  ld   $85
              1c99 00d5  ld   $d5
              1c9a 000b  ld   $0b
              1c9b 0063  ld   $63
              1c9c 00ff  ld   $ff
              1c9d 0075  ld   $75
              1c9e 0021  ld   $21
              1c9f 003a  ld   $3a
              1ca0 00e3  ld   $e3
              1ca1 000f  ld   $0f
              1ca2 002b  ld   $2b
              1ca3 003a  ld   $3a
              1ca4 0021  ld   $21
              1ca5 0038  ld   $38
              1ca6 00e6  ld   $e6
              1ca7 000f  ld   $0f
              1ca8 002b  ld   $2b
              1ca9 00e8  ld   $e8
              1caa 0021  ld   $21
              1cab 003a  ld   $3a
              1cac 002b  ld   $2b
              1cad 0082  ld   $82
              1cae 0021  ld   $21
              1caf 00e8  ld   $e8
              1cb0 0085  ld   $85
              1cb1 00ac  ld   $ac
              1cb2 0062  ld   $62
              1cb3 002b  ld   $2b
              1cb4 0082  ld   $82
              1cb5 0059  ld   $59
              1cb6 0000  ld   $00
              1cb7 0085  ld   $85
              1cb8 00f0  ld   $f0
              1cb9 0061  ld   $61
              1cba 002b  ld   $2b
              1cbb 003a  ld   $3a
              1cbc 0085  ld   $85
              1cbd 00e0  ld   $e0
              1cbe 0003  ld   $03
              1cbf 0063  ld   $63
              1cc0 00ff  ld   $ff
              1cc1 0075  ld   $75
              1cc2 0021  ld   $21
              1cc3 003a  ld   $3a
              1cc4 00e6  ld   $e6
              1cc5 000f  ld   $0f
              1cc6 002b  ld   $2b
              1cc7 003a  ld   $3a
              1cc8 0021  ld   $21
              1cc9 003a  ld   $3a
              1cca 002b  ld   $2b
              1ccb 0082  ld   $82
              1ccc 0059  ld   $59
              1ccd 0000  ld   $00
              1cce 0085  ld   $85
              1ccf 00f0  ld   $f0
              1cd0 0061  ld   $61
              1cd1 002b  ld   $2b
              1cd2 003a  ld   $3a
              1cd3 0085  ld   $85
              1cd4 00e0  ld   $e0
              1cd5 0003  ld   $03
              1cd6 0063  ld   $63
              1cd7 00ff  ld   $ff
              1cd8 0075  ld   $75
              1cd9 0093  ld   $93
              1cda 003c  ld   $3c
              1cdb 0021  ld   $21
              1cdc 0038  ld   $38
              1cdd 00e6  ld   $e6
              1cde 0001  ld   $01
              1cdf 002b  ld   $2b
              1ce0 0082  ld   $82
              1ce1 0085  ld   $85
              1ce2 00a0  ld   $a0
              1ce3 000b  ld   $0b
              1ce4 000b  ld   $0b
              1ce5 00a0  ld   $a0
              1ce6 005f  ld   $5f
              1ce7 0059  ld   $59
              1ce8 000e  ld   $0e
              1ce9 0085  ld   $85
              1cea 00ac  ld   $ac
              1ceb 0062  ld   $62
              1cec 002b  ld   $2b
              1ced 00ea  ld   $ea
              1cee 0021  ld   $21
              1cef 003c  ld   $3c
              1cf0 00b8  ld   $b8
              1cf1 00ea  ld   $ea
              1cf2 0035  ld   $35
              1cf3 0056  ld   $56
              1cf4 00b0  ld   $b0
              1cf5 0059  ld   $59
              1cf6 0000  ld   $00
              1cf7 002b  ld   $2b
              1cf8 003c  ld   $3c
              1cf9 0085  ld   $85
              1cfa 00a4  ld   $a4
              1cfb fe00  bra  ac          ;+-----------------------------------+
              1cfc fcfd  bra  $1cfd       ;|                                   |
              1cfd 1404  ld   $04,y       ;| Trampoline for page $1c00 lookups |
              1cfe e068  jmp  y,$68       ;|                                   |
              1cff c218  st   [$18]       ;+-----------------------------------+
              1d00 0004  ld   $04
              1d01 0063  ld   $63
              1d02 00ff  ld   $ff
              1d03 0075  ld   $75
              1d04 0021  ld   $21
              1d05 003c  ld   $3c
              1d06 00e6  ld   $e6
              1d07 0001  ld   $01
              1d08 002b  ld   $2b
              1d09 003c  ld   $3c
              1d0a 0021  ld   $21
              1d0b 003c  ld   $3c
              1d0c 0035  ld   $35
              1d0d 0053  ld   $53
              1d0e 00ce  ld   $ce
              1d0f 0021  ld   $21
              1d10 0038  ld   $38
              1d11 00e6  ld   $e6
              1d12 0001  ld   $01
              1d13 002b  ld   $2b
              1d14 0082  ld   $82
              1d15 0059  ld   $59
              1d16 000e  ld   $0e
              1d17 0085  ld   $85
              1d18 00ac  ld   $ac
              1d19 0062  ld   $62
              1d1a 002b  ld   $2b
              1d1b 003c  ld   $3c
              1d1c 0085  ld   $85
              1d1d 00a4  ld   $a4
              1d1e 0004  ld   $04
              1d1f 0063  ld   $63
              1d20 00ff  ld   $ff
              1d21 0075  ld   $75
              1d22 0021  ld   $21
              1d23 0044  ld   $44
              1d24 00e6  ld   $e6
              1d25 0001  ld   $01
              1d26 00ad  ld   $ad
              1d27 002b  ld   $2b
              1d28 0076  ld   $76
              1d29 0021  ld   $21
              1d2a 0076  ld   $76
              1d2b 008c  ld   $8c
              1d2c 0001  ld   $01
              1d2d 0035  ld   $35
              1d2e 0072  ld   $72
              1d2f 00ec  ld   $ec
              1d30 0059  ld   $59
              1d31 0000  ld   $00
              1d32 002b  ld   $2b
              1d33 0046  ld   $46
              1d34 0085  ld   $85
              1d35 00b5  ld   $b5
              1d36 0008  ld   $08
              1d37 0085  ld   $85
              1d38 00c3  ld   $c3
              1d39 000c  ld   $0c
              1d3a 0021  ld   $21
              1d3b 0076  ld   $76
              1d3c 008c  ld   $8c
              1d3d 0002  ld   $02
              1d3e 0035  ld   $35
              1d3f 003f  ld   $3f
              1d40 00f6  ld   $f6
              1d41 0085  ld   $85
              1d42 00ad  ld   $ad
              1d43 000c  ld   $0c
              1d44 0059  ld   $59
              1d45 0001  ld   $01
              1d46 002b  ld   $2b
              1d47 0046  ld   $46
              1d48 0085  ld   $85
              1d49 00a0  ld   $a0
              1d4a 000c  ld   $0c
              1d4b 000c  ld   $0c
              1d4c 00a0  ld   $a0
              1d4d 005e  ld   $5e
              1d4e 0021  ld   $21
              1d4f 0044  ld   $44
              1d50 002b  ld   $2b
              1d51 0084  ld   $84
              1d52 0011  ld   $11
              1d53 00a0  ld   $a0
              1d54 007a  ld   $7a
              1d55 0085  ld   $85
              1d56 00d2  ld   $d2
              1d57 0061  ld   $61
              1d58 0085  ld   $85
              1d59 00c3  ld   $c3
              1d5a 000c  ld   $0c
              1d5b 0021  ld   $21
              1d5c 0076  ld   $76
              1d5d 008c  ld   $8c
              1d5e 0003  ld   $03
              1d5f 0035  ld   $35
              1d60 0072  ld   $72
              1d61 00c1  ld   $c1
              1d62 0059  ld   $59
              1d63 0002  ld   $02
              1d64 002b  ld   $2b
              1d65 0046  ld   $46
              1d66 0011  ld   $11
              1d67 00fe  ld   $fe
              1d68 007c  ld   $7c
              1d69 002b  ld   $2b
              1d6a 0084  ld   $84
              1d6b 0011  ld   $11
              1d6c 00a0  ld   $a0
              1d6d 007a  ld   $7a
              1d6e 0085  ld   $85
              1d6f 00d2  ld   $d2
              1d70 0061  ld   $61
              1d71 0063  ld   $63
              1d72 00ff  ld   $ff
              1d73 0075  ld   $75
              1d74 0021  ld   $21
              1d75 0070  ld   $70
              1d76 002b  ld   $2b
              1d77 0022  ld   $22
              1d78 0059  ld   $59
              1d79 0048  ld   $48
              1d7a 002b  ld   $2b
              1d7b 0024  ld   $24
              1d7c 0059  ld   $59
              1d7d 00cf  ld   $cf
              1d7e 005e  ld   $5e
              1d7f 0027  ld   $27
              1d80 00b4  ld   $b4
              1d81 00fe  ld   $fe
              1d82 001a  ld   $1a
              1d83 0048  ld   $48
              1d84 0035  ld   $35
              1d85 0072  ld   $72
              1d86 00c8  ld   $c8
              1d87 0059  ld   $59
              1d88 0002  ld   $02
              1d89 002b  ld   $2b
              1d8a 0082  ld   $82
              1d8b 0085  ld   $85
              1d8c 00cc  ld   $cc
              1d8d 0063  ld   $63
              1d8e 0063  ld   $63
              1d8f 00ff  ld   $ff
              1d90 0075  ld   $75
              1d91 0059  ld   $59
              1d92 0001  ld   $01
              1d93 002b  ld   $2b
              1d94 0034  ld   $34
              1d95 0011  ld   $11
              1d96 00ef  ld   $ef
              1d97 007c  ld   $7c
              1d98 002b  ld   $2b
              1d99 0082  ld   $82
              1d9a 0059  ld   $59
              1d9b 0006  ld   $06
              1d9c 00f0  ld   $f0
              1d9d 0082  ld   $82
              1d9e 0085  ld   $85
              1d9f 001f  ld   $1f
              1da0 0003  ld   $03
              1da1 0085  ld   $85
              1da2 00b7  ld   $b7
              1da3 0061  ld   $61
              1da4 0063  ld   $63
              1da5 00ff  ld   $ff
              1da6 0075  ld   $75
              1da7 0059  ld   $59
              1da8 0001  ld   $01
              1da9 0085  ld   $85
              1daa 00a0  ld   $a0
              1dab 000d  ld   $0d
              1dac 000d  ld   $0d
              1dad 00a0  ld   $a0
              1dae 005e  ld   $5e
              1daf 002b  ld   $2b
              1db0 0034  ld   $34
              1db1 0011  ld   $11
              1db2 00ef  ld   $ef
              1db3 007c  ld   $7c
              1db4 002b  ld   $2b
              1db5 0082  ld   $82
              1db6 0059  ld   $59
              1db7 0001  ld   $01
              1db8 00f0  ld   $f0
              1db9 0082  ld   $82
              1dba 0085  ld   $85
              1dbb 001f  ld   $1f
              1dbc 0003  ld   $03
              1dbd 0063  ld   $63
              1dbe 00ff  ld   $ff
              1dbf 0075  ld   $75
              1dc0 0059  ld   $59
              1dc1 0001  ld   $01
              1dc2 002b  ld   $2b
              1dc3 0034  ld   $34
              1dc4 0011  ld   $11
              1dc5 00ef  ld   $ef
              1dc6 007c  ld   $7c
              1dc7 002b  ld   $2b
              1dc8 0082  ld   $82
              1dc9 0059  ld   $59
              1dca 0004  ld   $04
              1dcb 00f0  ld   $f0
              1dcc 0082  ld   $82
              1dcd 0085  ld   $85
              1dce 001f  ld   $1f
              1dcf 0003  ld   $03
              1dd0 0063  ld   $63
              1dd1 00ff  ld   $ff
              1dd2 0075  ld   $75
              1dd3 0059  ld   $59
              1dd4 0001  ld   $01
              1dd5 002b  ld   $2b
              1dd6 0034  ld   $34
              1dd7 0011  ld   $11
              1dd8 00ef  ld   $ef
              1dd9 007c  ld   $7c
              1dda 002b  ld   $2b
              1ddb 0082  ld   $82
              1ddc 0059  ld   $59
              1ddd 0005  ld   $05
              1dde 00f0  ld   $f0
              1ddf 0082  ld   $82
              1de0 0085  ld   $85
              1de1 001f  ld   $1f
              1de2 0003  ld   $03
              1de3 0085  ld   $85
              1de4 00c5  ld   $c5
              1de5 000c  ld   $0c
              1de6 0063  ld   $63
              1de7 00ff  ld   $ff
              1de8 0075  ld   $75
              1de9 0059  ld   $59
              1dea 0034  ld   $34
              1deb 002b  ld   $2b
              1dec 009c  ld   $9c
              1ded 0085  ld   $85
              1dee 00a4  ld   $a4
              1def 0063  ld   $63
              1df0 0085  ld   $85
              1df1 0078  ld   $78
              1df2 0005  ld   $05
              1df3 0011  ld   $11
              1df4 00ef  ld   $ef
              1df5 007c  ld   $7c
              1df6 002b  ld   $2b
              1df7 0032  ld   $32
              1df8 0059  ld   $59
              1df9 0002  ld   $02
              1dfa 002b  ld   $2b
              1dfb fe00  bra  ac          ;+-----------------------------------+
              1dfc fcfd  bra  $1dfd       ;|                                   |
              1dfd 1404  ld   $04,y       ;| Trampoline for page $1d00 lookups |
              1dfe e068  jmp  y,$68       ;|                                   |
              1dff c218  st   [$18]       ;+-----------------------------------+
              1e00 0082  ld   $82
              1e01 0085  ld   $85
              1e02 00c8  ld   $c8
              1e03 0061  ld   $61
              1e04 0011  ld   $11
              1e05 0020  ld   $20
              1e06 003f  ld   $3f
              1e07 002b  ld   $2b
              1e08 00a2  ld   $a2
              1e09 0085  ld   $85
              1e0a 00a3  ld   $a3
              1e0b 0066  ld   $66
              1e0c 0085  ld   $85
              1e0d 00cd  ld   $cd
              1e0e 0064  ld   $64
              1e0f 0085  ld   $85
              1e10 00a0  ld   $a0
              1e11 000e  ld   $0e
              1e12 000e  ld   $0e
              1e13 00a0  ld   $a0
              1e14 0004  ld   $04
              1e15 0063  ld   $63
              1e16 00ff  ld   $ff
              1e17 00b4  ld   $b4
              1e18 0080  ld   $80
              1e19 0061  ld   $61
              1e1a 00b7  ld   $b7
              1e1b 0048  ld   $48
              1e1c 001a  ld   $1a
              1e1d 0009  ld   $09
              1e1e 008c  ld   $8c
              1e1f 00ee  ld   $ee
              1e20 0035  ld   $35
              1e21 0072  ld   $72
              1e22 00b5  ld   $b5
              1e23 00ff  ld   $ff
              1e24 0059  ld   $59
              1e25 00ef  ld   $ef
              1e26 002b  ld   $2b
              1e27 0022  ld   $22
              1e28 0021  ld   $21
              1e29 0082  ld   $82
              1e2a 00b4  ld   $b4
              1e2b 00e6  ld   $e6
              1e2c 00ff  ld   $ff
              1e2d 0011  ld   $11
              1e2e 0000  ld   $00
              1e2f 000b  ld   $0b
              1e30 002b  ld   $2b
              1e31 0022  ld   $22
              1e32 0021  ld   $21
              1e33 0082  ld   $82
              1e34 00b4  ld   $b4
              1e35 00e6  ld   $e6
              1e36 00ff  ld   $ff
              1e37 002b  ld   $2b
              1e38 0086  ld   $86
              1e39 0021  ld   $21
              1e3a 0084  ld   $84
              1e3b 00ad  ld   $ad
              1e3c 00f0  ld   $f0
              1e3d 0086  ld   $86
              1e3e 0093  ld   $93
              1e3f 0084  ld   $84
              1e40 0093  ld   $93
              1e41 0086  ld   $86
              1e42 0035  ld   $35
              1e43 0072  ld   $72
              1e44 00d2  ld   $d2
              1e45 00ff  ld   $ff
              1e46 0075  ld   $75
              1e47 0085  ld   $85
              1e48 00a0  ld   $a0
              1e49 0062  ld   $62
              1e4a 0011  ld   $11
              1e4b 0003  ld   $03
              1e4c 000b  ld   $0b
              1e4d 002b  ld   $2b
              1e4e 0022  ld   $22
              1e4f 001a  ld   $1a
              1e50 00a2  ld   $a2
              1e51 005e  ld   $5e
              1e52 0025  ld   $25
              1e53 0063  ld   $63
              1e54 00ff  ld   $ff
              1e55 002b  ld   $2b
              1e56 0084  ld   $84
              1e57 0021  ld   $21
              1e58 0082  ld   $82
              1e59 00b8  ld   $b8
              1e5a 0084  ld   $84
              1e5b 0035  ld   $35
              1e5c 0053  ld   $53
              1e5d 00fa  ld   $fa
              1e5e 0021  ld   $21
              1e5f 0084  ld   $84
              1e60 00ff  ld   $ff
              1e61 0021  ld   $21
              1e62 0082  ld   $82
              1e63 00ff  ld   $ff
              1e64 0062  ld   $62
              1e65 00a0  ld   $a0
              1e66 005f  ld   $5f
              1e67 0059  ld   $59
              1e68 0002  ld   $02
              1e69 002b  ld   $2b
              1e6a 00a4  ld   $a4
              1e6b 0011  ld   $11
              1e6c 00fd  ld   $fd
              1e6d 00ff  ld   $ff
              1e6e 00f8  ld   $f8
              1e6f 00aa  ld   $aa
              1e70 002b  ld   $2b
              1e71 00aa  ld   $aa
              1e72 00ff  ld   $ff
              1e73 002b  ld   $2b
              1e74 0084  ld   $84
              1e75 0021  ld   $21
              1e76 0082  ld   $82
              1e77 00b8  ld   $b8
              1e78 0084  ld   $84
              1e79 0035  ld   $35
              1e7a 0056  ld   $56
              1e7b 00b6  ld   $b6
              1e7c 0021  ld   $21
              1e7d 0084  ld   $84
              1e7e 00ff  ld   $ff
              1e7f 0021  ld   $21
              1e80 0082  ld   $82
              1e81 00ff  ld   $ff
              1e82 0011  ld   $11
              1e83 00e1  ld   $e1
              1e84 0004  ld   $04
              1e85 002b  ld   $2b
              1e86 0022  ld   $22
              1e87 0021  ld   $21
              1e88 00a2  ld   $a2
              1e89 002b  ld   $2b
              1e8a 0024  ld   $24
              1e8b 001a  ld   $1a
              1e8c 00a5  ld   $a5
              1e8d 00e9  ld   $e9
              1e8e 0093  ld   $93
              1e8f 0019  ld   $19
              1e90 00ad  ld   $ad
              1e91 005e  ld   $5e
              1e92 0029  ld   $29
              1e93 001a  ld   $1a
              1e94 00a4  ld   $a4
              1e95 005e  ld   $5e
              1e96 0028  ld   $28
              1e97 00ff  ld   $ff
              1e98 0075  ld   $75
              1e99 002b  ld   $2b
              1e9a 0082  ld   $82
              1e9b 0085  ld   $85
              1e9c 00bb  ld   $bb
              1e9d 0062  ld   $62
              1e9e 0093  ld   $93
              1e9f 0082  ld   $82
              1ea0 0021  ld   $21
              1ea1 0082  ld   $82
              1ea2 00ad  ld   $ad
              1ea3 0035  ld   $35
              1ea4 003f  ld   $3f
              1ea5 00e4  ld   $e4
              1ea6 005e  ld   $5e
              1ea7 0092  ld   $92
              1ea8 0085  ld   $85
              1ea9 00ab  ld   $ab
              1eaa 0068  ld   $68
              1eab 0090  ld   $90
              1eac 00d5  ld   $d5
              1ead 0063  ld   $63
              1eae 00ff  ld   $ff
              1eaf 001a  ld   $1a
              1eb0 0021  ld   $21
              1eb1 0082  ld   $82
              1eb2 00fc  ld   $fc
              1eb3 00b8  ld   $b8
              1eb4 0082  ld   $82
              1eb5 0035  ld   $35
              1eb6 0053  ld   $53
              1eb7 00fc  ld   $fc
              1eb8 0011  ld   $11
              1eb9 0050  ld   $50
              1eba 0044  ld   $44
              1ebb 002b  ld   $2b
              1ebc 0084  ld   $84
              1ebd 001a  ld   $1a
              1ebe 0086  ld   $86
              1ebf 00f0  ld   $f0
              1ec0 0084  ld   $84
              1ec1 0093  ld   $93
              1ec2 0086  ld   $86
              1ec3 0090  ld   $90
              1ec4 00f4  ld   $f4
              1ec5 00ff  ld   $ff
              1ec6 0063  ld   $63
              1ec7 00a4  ld   $a4
              1ec8 005b  ld   $5b
              1ec9 0059  ld   $59
              1eca 0000  ld   $00
              1ecb 00f3  ld   $f3
              1ecc 009c  ld   $9c
              1ecd 0093  ld   $93
              1ece 009c  ld   $9c
              1ecf 0093  ld   $93
              1ed0 009c  ld   $9c
              1ed1 001a  ld   $1a
              1ed2 009c  ld   $9c
              1ed3 008c  ld   $8c
              1ed4 0080  ld   $80
              1ed5 0035  ld   $35
              1ed6 0072  ld   $72
              1ed7 00a2  ld   $a2
              1ed8 00ff  ld   $ff
              1ed9 001a  ld   $1a
              1eda 00a4  ld   $a4
              1edb 00e3  ld   $e3
              1edc 0006  ld   $06
              1edd 005e  ld   $5e
              1ede 00a4  ld   $a4
              1edf 00e6  ld   $e6
              1ee0 009a  ld   $9a
              1ee1 0035  ld   $35
              1ee2 0056  ld   $56
              1ee3 00c9  ld   $c9
              1ee4 0059  ld   $59
              1ee5 0004  ld   $04
              1ee6 00f8  ld   $f8
              1ee7 00aa  ld   $aa
              1ee8 0035  ld   $35
              1ee9 0072  ld   $72
              1eea 00c9  ld   $c9
              1eeb 0075  ld   $75
              1eec 0085  ld   $85
              1eed 00aa  ld   $aa
              1eee 0067  ld   $67
              1eef 0063  ld   $63
              1ef0 00ff  ld   $ff
              1ef1 0075  ld   $75
              1ef2 0021  ld   $21
              1ef3 0082  ld   $82
              1ef4 00e6  ld   $e6
              1ef5 0001  ld   $01
              1ef6 002b  ld   $2b
              1ef7 0082  ld   $82
              1ef8 0035  ld   $35
              1ef9 0053  ld   $53
              1efa 00d6  ld   $d6
              1efb fe00  bra  ac          ;+-----------------------------------+
              1efc fcfd  bra  $1efd       ;|                                   |
              1efd 1404  ld   $04,y       ;| Trampoline for page $1e00 lookups |
              1efe e068  jmp  y,$68       ;|                                   |
              1eff c218  st   [$18]       ;+-----------------------------------+
              1f00 0063  ld   $63
              1f01 00ff  ld   $ff
              1f02 0085  ld   $85
              1f03 00b7  ld   $b7
              1f04 0061  ld   $61
              1f05 001a  ld   $1a
              1f06 0009  ld   $09
              1f07 008c  ld   $8c
              1f08 00ee  ld   $ee
              1f09 0035  ld   $35
              1f0a 003f  ld   $3f
              1f0b 00d9  ld   $d9
              1f0c 0090  ld   $90
              1f0d 00cb  ld   $cb
              1f0e 0075  ld   $75
              1f0f 0035  ld   $35
              1f10 003f  ld   $3f
              1f11 00fb  ld   $fb
              1f12 005e  ld   $5e
              1f13 0084  ld   $84
              1f14 0085  ld   $85
              1f15 00bb  ld   $bb
              1f16 0062  ld   $62
              1f17 0059  ld   $59
              1f18 0020  ld   $20
              1f19 002b  ld   $2b
              1f1a 0092  ld   $92
              1f1b 0085  ld   $85
              1f1c 00ab  ld   $ab
              1f1d 0068  ld   $68
              1f1e 001a  ld   $1a
              1f1f 0084  ld   $84
              1f20 00e6  ld   $e6
              1f21 0001  ld   $01
              1f22 005e  ld   $5e
              1f23 0084  ld   $84
              1f24 0035  ld   $35
              1f25 0072  ld   $72
              1f26 00eb  ld   $eb
              1f27 0063  ld   $63
              1f28 00ff  ld   $ff
              1f29 0064  ld   $64
              1f2a 00a0  ld   $a0
              1f2b 005f  ld   $5f
              1f2c 002b  ld   $2b
              1f2d 001a  ld   $1a
              1f2e 0059  ld   $59
              1f2f 00ad  ld   $ad
              1f30 002b  ld   $2b
              1f31 0022  ld   $22
              1f32 00b4  ld   $b4
              1f33 00e2  ld   $e2
              1f34 001a  ld   $1a
              1f35 00a4  ld   $a4
              1f36 00e6  ld   $e6
              1f37 009a  ld   $9a
              1f38 0035  ld   $35
              1f39 0056  ld   $56
              1f3a 00b1  ld   $b1
              1f3b 0059  ld   $59
              1f3c 0000  ld   $00
              1f3d 005e  ld   $5e
              1f3e 00a4  ld   $a4
              1f3f 001a  ld   $1a
              1f40 00a5  ld   $a5
              1f41 00e6  ld   $e6
              1f42 0070  ld   $70
              1f43 0035  ld   $35
              1f44 0050  ld   $50
              1f45 00c3  ld   $c3
              1f46 0059  ld   $59
              1f47 0070  ld   $70
              1f48 005e  ld   $5e
              1f49 00a5  ld   $a5
              1f4a 0059  ld   $59
              1f4b 0002  ld   $02
              1f4c 00fa  ld   $fa
              1f4d 00aa  ld   $aa
              1f4e 002b  ld   $2b
              1f4f 00aa  ld   $aa
              1f50 00ff  ld   $ff
              1f51 0011  ld   $11
              1f52 00fd  ld   $fd
              1f53 00ff  ld   $ff
              1f54 00f8  ld   $f8
              1f55 00aa  ld   $aa
              1f56 002b  ld   $2b
              1f57 00aa  ld   $aa
              1f58 00ff  ld   $ff
              1f59 0075  ld   $75
              1f5a 0085  ld   $85
              1f5b 00e1  ld   $e1
              1f5c 0061  ld   $61
              1f5d 0059  ld   $59
              1f5e 0008  ld   $08
              1f5f 002b  ld   $2b
              1f60 0094  ld   $94
              1f61 0059  ld   $59
              1f62 00a0  ld   $a0
              1f63 005e  ld   $5e
              1f64 0024  ld   $24
              1f65 0059  ld   $59
              1f66 0000  ld   $00
              1f67 005e  ld   $5e
              1f68 0026  ld   $26
              1f69 001a  ld   $1a
              1f6a 0094  ld   $94
              1f6b 005e  ld   $5e
              1f6c 0027  ld   $27
              1f6d 00b4  ld   $b4
              1f6e 00f3  ld   $f3
              1f6f 0059  ld   $59
              1f70 00a0  ld   $a0
              1f71 005e  ld   $5e
              1f72 0024  ld   $24
              1f73 0059  ld   $59
              1f74 0000  ld   $00
              1f75 005e  ld   $5e
              1f76 0026  ld   $26
              1f77 0011  ld   $11
              1f78 0087  ld   $87
              1f79 0000  ld   $00
              1f7a 00b8  ld   $b8
              1f7b 0094  ld   $94
              1f7c 005e  ld   $5e
              1f7d 0027  ld   $27
              1f7e 00b4  ld   $b4
              1f7f 00f3  ld   $f3
              1f80 0093  ld   $93
              1f81 0094  ld   $94
              1f82 001a  ld   $1a
              1f83 0094  ld   $94
              1f84 00e6  ld   $e6
              1f85 0044  ld   $44
              1f86 0035  ld   $35
              1f87 0050  ld   $50
              1f88 00d3  ld   $d3
              1f89 0063  ld   $63
              1f8a 00ff  ld   $ff
              1f8b 0065  ld   $65
              1f8c 00a1  ld   $a1
              1f8d 005e  ld   $5e
              1f8e 0075  ld   $75
              1f8f 0011  ld   $11
              1f90 0003  ld   $03
              1f91 000b  ld   $0b
              1f92 002b  ld   $2b
              1f93 0022  ld   $22
              1f94 001a  ld   $1a
              1f95 00a2  ld   $a2
              1f96 005e  ld   $5e
              1f97 0025  ld   $25
              1f98 0011  ld   $11
              1f99 0000  ld   $00
              1f9a 0001  ld   $01
              1f9b 00ad  ld   $ad
              1f9c 005e  ld   $5e
              1f9d 0027  ld   $27
              1f9e 0059  ld   $59
              1f9f 0008  ld   $08
              1fa0 005e  ld   $5e
              1fa1 009e  ld   $9e
              1fa2 0059  ld   $59
              1fa3 00a0  ld   $a0
              1fa4 005e  ld   $5e
              1fa5 0024  ld   $24
              1fa6 0059  ld   $59
              1fa7 0000  ld   $00
              1fa8 005e  ld   $5e
              1fa9 0026  ld   $26
              1faa 00b4  ld   $b4
              1fab 00f3  ld   $f3
              1fac 0093  ld   $93
              1fad 0027  ld   $27
              1fae 001a  ld   $1a
              1faf 009e  ld   $9e
              1fb0 00e6  ld   $e6
              1fb1 0001  ld   $01
              1fb2 0035  ld   $35
              1fb3 0072  ld   $72
              1fb4 00b1  ld   $b1
              1fb5 0085  ld   $85
              1fb6 00bb  ld   $bb
              1fb7 0062  ld   $62
              1fb8 0063  ld   $63
              1fb9 00ff  ld   $ff
              1fba 0075  ld   $75
              1fbb 0011  ld   $11
              1fbc 00a3  ld   $a3
              1fbd 0069  ld   $69
              1fbe 002b  ld   $2b
              1fbf 0086  ld   $86
              1fc0 002b  ld   $2b
              1fc1 0092  ld   $92
              1fc2 0011  ld   $11
              1fc3 00f4  ld   $f4
              1fc4 0068  ld   $68
              1fc5 002b  ld   $2b
              1fc6 0088  ld   $88
              1fc7 0021  ld   $21
              1fc8 0092  ld   $92
              1fc9 00f6  ld   $f6
              1fca 0035  ld   $35
              1fcb 0072  ld   $72
              1fcc 00e7  ld   $e7
              1fcd 0021  ld   $21
              1fce 0084  ld   $84
              1fcf 0035  ld   $35
              1fd0 003f  ld   $3f
              1fd1 00e5  ld   $e5
              1fd2 00cf  ld   $cf
              1fd3 0084  ld   $84
              1fd4 0063  ld   $63
              1fd5 00ff  ld   $ff
              1fd6 00b8  ld   $b8
              1fd7 0082  ld   $82
              1fd8 0035  ld   $35
              1fd9 003f  ld   $3f
              1fda 00f2  ld   $f2
              1fdb 0093  ld   $93
              1fdc 0092  ld   $92
              1fdd 0093  ld   $93
              1fde 0092  ld   $92
              1fdf 0090  ld   $90
              1fe0 00d8  ld   $d8
              1fe1 0021  ld   $21
              1fe2 0092  ld   $92
              1fe3 00b8  ld   $b8
              1fe4 0086  ld   $86
              1fe5 0099  ld   $99
              1fe6 0088  ld   $88
              1fe7 00f6  ld   $f6
              1fe8 00cf  ld   $cf
              1fe9 0018  ld   $18
              1fea 0063  ld   $63
              1feb 00ff  ld   $ff
              1fec 0066  ld   $66
              1fed 00a3  ld   $a3
              1fee 005c  ld   $5c
              1fef 0075  ld   $75
              1ff0 0059  ld   $59
              1ff1 0008  ld   $08
              1ff2 002b  ld   $2b
              1ff3 0098  ld   $98
              1ff4 0011  ld   $11
              1ff5 0000  ld   $00
              1ff6 0001  ld   $01
              1ff7 002b  ld   $2b
              1ff8 009a  ld   $9a
              1ff9 0021  ld   $21
              1ffa 0098  ld   $98
              1ffb fe00  bra  ac          ;+-----------------------------------+
              1ffc fcfd  bra  $1ffd       ;|                                   |
              1ffd 1404  ld   $04,y       ;| Trampoline for page $1f00 lookups |
              1ffe e068  jmp  y,$68       ;|                                   |
              1fff c218  st   [$18]       ;+-----------------------------------+
              2000 00f3  ld   $f3
              2001 009a  ld   $9a
              2002 0093  ld   $93
              2003 009a  ld   $9a
              2004 0093  ld   $93
              2005 009a  ld   $9a
              2006 0093  ld   $93
              2007 0098  ld   $98
              2008 001a  ld   $1a
              2009 0098  ld   $98
              200a 00e6  ld   $e6
              200b 0080  ld   $80
              200c 0035  ld   $35
              200d 0050  ld   $50
              200e 00ab  ld   $ab
              200f 0085  ld   $85
              2010 00a0  ld   $a0
              2011 0062  ld   $62
              2012 0063  ld   $63
              2013 00ff  ld   $ff
              2014 002b  ld   $2b
              2015 0094  ld   $94
              2016 0021  ld   $21
              2017 0084  ld   $84
              2018 00ad  ld   $ad
              2019 002b  ld   $2b
              201a 0088  ld   $88
              201b 0021  ld   $21
              201c 0094  ld   $94
              201d 00ad  ld   $ad
              201e 002b  ld   $2b
              201f 009c  ld   $9c
              2020 0093  ld   $93
              2021 0084  ld   $84
              2022 0093  ld   $93
              2023 0094  ld   $94
              2024 0021  ld   $21
              2025 0084  ld   $84
              2026 00ad  ld   $ad
              2027 0035  ld   $35
              2028 003f  ld   $3f
              2029 00ed  ld   $ed
              202a 002b  ld   $2b
              202b 0082  ld   $82
              202c 0021  ld   $21
              202d 0094  ld   $94
              202e 00ad  ld   $ad
              202f 00b8  ld   $b8
              2030 0082  ld   $82
              2031 0035  ld   $35
              2032 0050  ld   $50
              2033 00fa  ld   $fa
              2034 0035  ld   $35
              2035 004d  ld   $4d
              2036 00ea  ld   $ea
              2037 0093  ld   $93
              2038 0084  ld   $84
              2039 0093  ld   $93
              203a 0094  ld   $94
              203b 0090  ld   $90
              203c 00d1  ld   $d1
              203d 0059  ld   $59
              203e 0000  ld   $00
              203f 00ff  ld   $ff
              2040 0021  ld   $21
              2041 0088  ld   $88
              2042 00b8  ld   $b8
              2043 009c  ld   $9c
              2044 0035  ld   $35
              2045 0050  ld   $50
              2046 00ea  ld   $ea
              2047 0035  ld   $35
              2048 004d  ld   $4d
              2049 00fa  ld   $fa
              204a 0059  ld   $59
              204b 0001  ld   $01
              204c 00ff  ld   $ff
              204d 0059  ld   $59
              204e 0002  ld   $02
              204f 00ff  ld   $ff
              2050 0067  ld   $67
              2051 00a0  ld   $a0
              2052 005f  ld   $5f
              2053 0011  ld   $11
              2054 0000  ld   $00
              2055 0006  ld   $06
              2056 002b  ld   $2b
              2057 0022  ld   $22
              2058 0021  ld   $21
              2059 00a0  ld   $a0
              205a 00b4  ld   $b4
              205b 00f6  ld   $f6
              205c 00ff  ld   $ff
              205d 0059  ld   $59
              205e 0002  ld   $02
              205f 005e  ld   $5e
              2060 00a4  ld   $a4
              2061 005e  ld   $5e
              2062 0028  ld   $28
              2063 0059  ld   $59
              2064 0001  ld   $01
              2065 00f8  ld   $f8
              2066 00aa  ld   $aa
              2067 0035  ld   $35
              2068 0072  ld   $72
              2069 00b6  ld   $b6
              206a 00ff  ld   $ff
              206b 0075  ld   $75
              206c 0059  ld   $59
              206d 0002  ld   $02
              206e 00f8  ld   $f8
              206f 00aa  ld   $aa
              2070 0035  ld   $35
              2071 0072  ld   $72
              2072 00cd  ld   $cd
              2073 001a  ld   $1a
              2074 00a5  ld   $a5
              2075 00e3  ld   $e3
              2076 0008  ld   $08
              2077 005e  ld   $5e
              2078 00a5  ld   $a5
              2079 00e6  ld   $e6
              207a 0078  ld   $78
              207b 0035  ld   $35
              207c 0050  ld   $50
              207d 00f8  ld   $f8
              207e 0059  ld   $59
              207f 0070  ld   $70
              2080 005e  ld   $5e
              2081 00a5  ld   $a5
              2082 0085  ld   $85
              2083 00a1  ld   $a1
              2084 0065  ld   $65
              2085 0011  ld   $11
              2086 0000  ld   $00
              2087 0001  ld   $01
              2088 002b  ld   $2b
              2089 0098  ld   $98
              208a 0021  ld   $21
              208b 0098  ld   $98
              208c 00ad  ld   $ad
              208d 00e3  ld   $e3
              208e 0008  ld   $08
              208f 0082  ld   $82
              2090 007f  ld   $7f
              2091 00e6  ld   $e6
              2092 0008  ld   $08
              2093 0035  ld   $35
              2094 0053  ld   $53
              2095 00e3  ld   $e3
              2096 00e3  ld   $e3
              2097 0008  ld   $08
              2098 00e3  ld   $e3
              2099 0008  ld   $08
              209a 00f0  ld   $f0
              209b 0098  ld   $98
              209c 0093  ld   $93
              209d 0098  ld   $98
              209e 0093  ld   $93
              209f 0098  ld   $98
              20a0 001a  ld   $1a
              20a1 0098  ld   $98
              20a2 00e6  ld   $e6
              20a3 00f0  ld   $f0
              20a4 0035  ld   $35
              20a5 0050  ld   $50
              20a6 00d5  ld   $d5
              20a7 0059  ld   $59
              20a8 0002  ld   $02
              20a9 00fa  ld   $fa
              20aa 00aa  ld   $aa
              20ab 002b  ld   $2b
              20ac 00aa  ld   $aa
              20ad 0085  ld   $85
              20ae 00bb  ld   $bb
              20af 0062  ld   $62
              20b0 0063  ld   $63
              20b1 00ff  ld   $ff
              20b2 0068  ld   $68
              20b3 00a1  ld   $a1
              20b4 005f  ld   $5f
              20b5 0099  ld   $99
              20b6 0096  ld   $96
              20b7 0099  ld   $99
              20b8 0096  ld   $96
              20b9 00f6  ld   $f6
              20ba 0099  ld   $99
              20bb 0098  ld   $98
              20bc 002b  ld   $2b
              20bd 009e  ld   $9e
              20be 00ff  ld   $ff
              20bf 001a  ld   $1a
              20c0 0092  ld   $92
              20c1 0082  ld   $82
              20c2 007f  ld   $7f
              20c3 00e6  ld   $e6
              20c4 0052  ld   $52
              20c5 0035  ld   $35
              20c6 0053  ld   $53
              20c7 00be  ld   $be
              20c8 00e3  ld   $e3
              20c9 0032  ld   $32
              20ca 0035  ld   $35
              20cb 0050  ld   $50
              20cc 00f1  ld   $f1
              20cd 002b  ld   $2b
              20ce 0092  ld   $92
              20cf 0011  ld   $11
              20d0 0000  ld   $00
              20d1 0007  ld   $07
              20d2 0090  ld   $90
              20d3 00c3  ld   $c3
              20d4 002b  ld   $2b
              20d5 0092  ld   $92
              20d6 0011  ld   $11
              20d7 0000  ld   $00
              20d8 0008  ld   $08
              20d9 002b  ld   $2b
              20da 0094  ld   $94
              20db 001a  ld   $1a
              20dc 0092  ld   $92
              20dd 00e9  ld   $e9
              20de 00e9  ld   $e9
              20df 0099  ld   $99
              20e0 0092  ld   $92
              20e1 0099  ld   $99
              20e2 0094  ld   $94
              20e3 002b  ld   $2b
              20e4 0094  ld   $94
              20e5 0059  ld   $59
              20e6 0005  ld   $05
              20e7 005e  ld   $5e
              20e8 0096  ld   $96
              20e9 0021  ld   $21
              20ea 0094  ld   $94
              20eb 007f  ld   $7f
              20ec 0000  ld   $00
              20ed 005e  ld   $5e
              20ee 0026  ld   $26
              20ef 00b4  ld   $b4
              20f0 00cb  ld   $cb
              20f1 0093  ld   $93
              20f2 0094  ld   $94
              20f3 0093  ld   $93
              20f4 0028  ld   $28
              20f5 001a  ld   $1a
              20f6 0096  ld   $96
              20f7 00e6  ld   $e6
              20f8 0001  ld   $01
              20f9 0035  ld   $35
              20fa 0072  ld   $72
              20fb fe00  bra  ac          ;+-----------------------------------+
              20fc fcfd  bra  $20fd       ;|                                   |
              20fd 1404  ld   $04,y       ;| Trampoline for page $2000 lookups |
              20fe e068  jmp  y,$68       ;|                                   |
              20ff c218  st   [$18]       ;+-----------------------------------+
              2100 00d1  ld   $d1
              2101 005e  ld   $5e
              2102 0026  ld   $26
              2103 00b4  ld   $b4
              2104 00cb  ld   $cb
              2105 0093  ld   $93
              2106 0028  ld   $28
              2107 0075  ld   $75
              2108 0085  ld   $85
              2109 00b4  ld   $b4
              210a 0063  ld   $63
              210b 0063  ld   $63
              210c 00ff  ld   $ff
              210d 00ab  ld   $ab
              210e 000a  ld   $0a
              210f 00b1  ld   $b1
              2110 000a  ld   $0a
              2111 00b7  ld   $b7
              2112 000a  ld   $0a
              2113 00db  ld   $db
              2114 000a  ld   $0a
              2115 00f2  ld   $f2
              2116 000a  ld   $0a
              2117 00b7  ld   $b7
              2118 000b  ld   $0b
              2119 0069  ld   $69
              211a 00a3  ld   $a3
              211b 0021  ld   $21
              211c 007f  ld   $7f
              211d 0000  ld   $00
              211e 000a  ld   $0a
              211f 0000  ld   $00
              2120 00fe  ld   $fe
              2121 0000  ld   $00
              2122 00fd  ld   $fd
              2123 0000  ld   $00
              2124 00fb  ld   $fb
              2125 0000  ld   $00
              2126 00f7  ld   $f7
              2127 0000  ld   $00
              2128 0000  ld   $00
              2129 0000  ld   $00
              212a 0011  ld   $11
              212b 004c  ld   $4c
              212c 006f  ld   $6f
              212d 0061  ld   $61
              212e 0064  ld   $64
              212f 0065  ld   $65
              2130 0072  ld   $72
              2131 0020  ld   $20
              2132 006e  ld   $6e
              2133 006f  ld   $6f
              2134 0074  ld   $74
              2135 0020  ld   $20
              2136 0066  ld   $66
              2137 006f  ld   $6f
              2138 0075  ld   $75
              2139 006e  ld   $6e
              213a 0064  ld   $64
              213b 0021  ld   $21
              213c 0000  ld   $00
              213d 007a  ld   $7a
              213e 00a0  ld   $a0
              213f 0002  ld   $02
              2140 0000  ld   $00
              2141 0000  ld   $00
              2142 007b  ld   $7b
              2143 00a0  ld   $a0
              2144 0002  ld   $02
              2145 0000  ld   $00
              2146 0000  ld   $00
              2147 007c  ld   $7c
              2148 00a6  ld   $a6
              2149 005a  ld   $5a
              214a 0006  ld   $06
              214b 004c  ld   $4c
              214c 006f  ld   $6f
              214d 0061  ld   $61
              214e 0064  ld   $64
              214f 0065  ld   $65
              2150 0072  ld   $72
              2151 0000  ld   $00
              2152 0000  ld   $00
              2153 0000  ld   $00
              * 83 times
              21a4 007d  ld   $7d
              21a5 00a0  ld   $a0
              21a6 0002  ld   $02
              21a7 0000  ld   $00
              21a8 0000  ld   $00
              21a9 0000  ld   $00
              21aa 0000  ld   $00         ;End of Browser_SDCard_ROMv5a_v1.gt1, size 2821
                                          ;+-----------------------------------+
                                          ;| Core/Reset_SDCARD_bmwtcu.gcl      |
                                          ;+-----------------------------------+
              21ab dc53  st   $53,[y,x++] ;'S'
              21ac dc44  st   $44,[y,x++] ;'D'
              21ad dc43  st   $43,[y,x++] ;'C'
              21ae dc61  st   $61,[y,x++] ;'a'
              21af dc72  st   $72,[y,x++] ;'r'
              21b0 dc64  st   $64,[y,x++] ;'d'
              21b1 dc00  st   $00,[y,x++] ;'\x00'
              21b2 dc00  st   $00,[y,x++] ;'\x00'
              21b3 00a6  ld   $a6
              21b4 c218  st   [$18]
              21b5 0016  ld   $16
              21b6 1423  ld   $23,y
              21b7 e09b  jmp  y,$9b
              21b8 c219  st   [$19]
Reset:        21b9 0002  ld   $02         ;| RAM segment address (high byte first)
              21ba 0000  ld   $00         ;|
              21bb 00aa  ld   $aa         ;| Length (1..256)
              21bc 00cd  ld   $cd         ;0200 DEF
              21bd 002c  ld   $2c
              21be 0075  ld   $75         ;0202 PUSH
              21bf 001a  ld   $1a         ;0203 LD
              21c0 0001  ld   $01
              21c1 00e6  ld   $e6         ;0205 SUBI
              21c2 0001  ld   $01
              21c3 0082  ld   $82         ;0207 ANDI
              21c4 00ff  ld   $ff
              21c5 00e3  ld   $e3         ;0209 ADDI
              21c6 0001  ld   $01
              21c7 002b  ld   $2b         ;020b STW
              21c8 0030  ld   $30         ;020b 'i'
              21c9 0011  ld   $11         ;020d LDWI
              21ca 002f  ld   $2f
              21cb 002f  ld   $2f
              21cc 002b  ld   $2b         ;0210 STW
              21cd 0032  ld   $32         ;0210 'Char'
              21ce 0021  ld   $21         ;0212 LDW
              21cf 0030  ld   $30         ;0212 'i'
              21d0 0093  ld   $93         ;0214 INC
              21d1 0032  ld   $32         ;0214 'Char'
              21d2 00e6  ld   $e6         ;0216 SUBI
              21d3 0028  ld   $28
              21d4 0035  ld   $35         ;0218 BCC
              21d5 0053  ld   $53         ;0219 GE
              21d6 0012  ld   $12
              21d7 00e3  ld   $e3         ;021b ADDI
              21d8 0028  ld   $28
              21d9 0093  ld   $93         ;021d INC
              21da 0033  ld   $33         ;021d 'Char'+1
              21db 00e6  ld   $e6         ;021f SUBI
              21dc 0004  ld   $04
              21dd 0035  ld   $35         ;0221 BCC
              21de 0053  ld   $53         ;0222 GE
              21df 001b  ld   $1b
              21e0 00cf  ld   $cf         ;0224 CALL
              21e1 0034  ld   $34         ;0224 'PrintChar'
              21e2 001a  ld   $1a         ;0226 LD
              21e3 0033  ld   $33         ;0226 'Char'+1
              21e4 002b  ld   $2b         ;0228 STW
              21e5 0032  ld   $32         ;0228 'Char'
              21e6 00cf  ld   $cf         ;022a CALL
              21e7 0034  ld   $34         ;022a 'PrintChar'
              21e8 0063  ld   $63         ;022c POP
              21e9 00ff  ld   $ff         ;022d RET
              21ea 002b  ld   $2b         ;022e STW
              21eb 0036  ld   $36         ;022e 'CheckMemory'
              21ec 00cd  ld   $cd         ;0230 DEF
              21ed 0054  ld   $54
              21ee 0075  ld   $75         ;0232 PUSH
              21ef 002b  ld   $2b         ;0233 STW
              21f0 0038  ld   $38         ;0233 'Text'
              21f1 0021  ld   $21         ;0235 LDW
              21f2 0038  ld   $38         ;0235 'Text'
              21f3 00ad  ld   $ad         ;0237 PEEK
              21f4 0035  ld   $35         ;0238 BCC
              21f5 003f  ld   $3f         ;0239 EQ
              21f6 0052  ld   $52
              21f7 002b  ld   $2b         ;023b STW
              21f8 0032  ld   $32         ;023b 'Char'
              21f9 008c  ld   $8c         ;023d XORI
              21fa 000a  ld   $0a
              21fb fe00  bra  ac          ;+-----------------------------------+
              21fc fcfd  bra  $21fd       ;|                                   |
              21fd 1404  ld   $04,y       ;| Trampoline for page $2100 lookups |
              21fe e068  jmp  y,$68       ;|                                   |
              21ff c218  st   [$18]       ;+-----------------------------------+
              2200 0035  ld   $35         ;023f BCC
              2201 003f  ld   $3f         ;0240 EQ
              2202 0044  ld   $44
              2203 00cf  ld   $cf         ;0242 CALL
              2204 0034  ld   $34         ;0242 'PrintChar'
              2205 0090  ld   $90         ;0244 BRA
              2206 004e  ld   $4e
              2207 0059  ld   $59         ;0246 LDI
              2208 0002  ld   $02
              2209 005e  ld   $5e         ;0248 ST
              220a 003a  ld   $3a         ;0248 'Pos'
              220b 001a  ld   $1a         ;024a LD
              220c 003b  ld   $3b         ;024a 'Pos'+1
              220d 00e3  ld   $e3         ;024c ADDI
              220e 0008  ld   $08
              220f 005e  ld   $5e         ;024e ST
              2210 003b  ld   $3b         ;024e 'Pos'+1
              2211 0093  ld   $93         ;0250 INC
              2212 0038  ld   $38         ;0250 'Text'
              2213 0090  ld   $90         ;0252 BRA
              2214 0033  ld   $33
              2215 0063  ld   $63         ;0254 POP
              2216 00ff  ld   $ff         ;0255 RET
              2217 002b  ld   $2b         ;0256 STW
              2218 003c  ld   $3c         ;0256 'PrintS'
              2219 00cd  ld   $cd         ;0258 DEF
              221a 00a3  ld   $a3
              221b 001a  ld   $1a         ;025a LD
              221c 0032  ld   $32         ;025a 'Char'
              221d 00e6  ld   $e6         ;025c SUBI
              221e 0052  ld   $52
              221f 0035  ld   $35         ;025e BCC
              2220 0053  ld   $53         ;025f GE
              2221 0068  ld   $68
              2222 00e3  ld   $e3         ;0261 ADDI
              2223 0032  ld   $32
              2224 002b  ld   $2b         ;0263 STW
              2225 0030  ld   $30         ;0263 'i'
              2226 0011  ld   $11         ;0265 LDWI
              2227 0000  ld   $00
              2228 0007  ld   $07
              2229 0090  ld   $90         ;0268 BRA
              222a 006d  ld   $6d
              222b 002b  ld   $2b         ;026a STW
              222c 0030  ld   $30         ;026a 'i'
              222d 0011  ld   $11         ;026c LDWI
              222e 0000  ld   $00
              222f 0008  ld   $08
              2230 002b  ld   $2b         ;026f STW
              2231 003e  ld   $3e         ;026f 'j'
              2232 0021  ld   $21         ;0271 LDW
              2233 0030  ld   $30         ;0271 'i'
              2234 00e9  ld   $e9         ;0273 LSLW
              2235 00e9  ld   $e9         ;0274 LSLW
              2236 0099  ld   $99         ;0275 ADDW
              2237 0030  ld   $30         ;0275 'i'
              2238 0099  ld   $99         ;0277 ADDW
              2239 003e  ld   $3e         ;0277 'j'
              223a 002b  ld   $2b         ;0279 STW
              223b 003e  ld   $3e         ;0279 'j'
              223c 0011  ld   $11         ;027b LDWI
              223d 00e1  ld   $e1
              223e 0004  ld   $04
              223f 002b  ld   $2b         ;027e STW
              2240 0022  ld   $22         ;027e '_sysFn'
              2241 0011  ld   $11         ;0280 LDWI
              2242 0020  ld   $20
              2243 003f  ld   $3f
              2244 002b  ld   $2b         ;0283 STW
              2245 0024  ld   $24
              2246 0021  ld   $21         ;0285 LDW
              2247 003a  ld   $3a         ;0285 'Pos'
              2248 002b  ld   $2b         ;0287 STW
              2249 0028  ld   $28
              224a 00e3  ld   $e3         ;0289 ADDI
              224b 0006  ld   $06
              224c 002b  ld   $2b         ;028b STW
              224d 003a  ld   $3a         ;028b 'Pos'
              224e 0059  ld   $59         ;028d LDI
              224f 0005  ld   $05
              2250 002b  ld   $2b         ;028f STW
              2251 0030  ld   $30         ;028f 'i'
              2252 0021  ld   $21         ;0291 LDW
              2253 003e  ld   $3e         ;0291 'j'
              2254 007f  ld   $7f         ;0293 LUP
              2255 0000  ld   $00
              2256 005e  ld   $5e         ;0295 ST
              2257 0026  ld   $26
              2258 00b4  ld   $b4         ;0297 SYS
              2259 00cb  ld   $cb
              225a 0093  ld   $93         ;0299 INC
              225b 003e  ld   $3e         ;0299 'j'
              225c 0093  ld   $93         ;029b INC
              225d 0028  ld   $28
              225e 0021  ld   $21         ;029d LDW
              225f 0030  ld   $30         ;029d 'i'
              2260 00e6  ld   $e6         ;029f SUBI
              2261 0001  ld   $01
              2262 0035  ld   $35         ;02a1 BCC
              2263 004d  ld   $4d         ;02a2 GT
              2264 008d  ld   $8d
              2265 00ff  ld   $ff         ;02a4 RET
              2266 002b  ld   $2b         ;02a5 STW
              2267 0034  ld   $34         ;02a5 'PrintChar'
              2268 0093  ld   $93         ;02a7 INC
              2269 001b  ld   $1b
              226a 00ff  ld   $ff         ;02a9 RET
              226b 0003  ld   $03         ;| RAM segment address (high byte first)
              226c 0000  ld   $00         ;|
              226d 003e  ld   $3e         ;| Length (1..256)
              226e 00cd  ld   $cd         ;0300 DEF
              226f 0037  ld   $37
              2270 002b  ld   $2b         ;0302 STW
              2271 0030  ld   $30         ;0302 'i'
              2272 0088  ld   $88         ;0304 ORI
              2273 00ff  ld   $ff
              2274 008c  ld   $8c         ;0306 XORI
              2275 00ff  ld   $ff
              2276 0088  ld   $88         ;0308 ORI
              2277 00fa  ld   $fa
              2278 002b  ld   $2b         ;030a STW
              2279 0040  ld   $40         ;030a 'p'
              227a 001a  ld   $1a         ;030c LD
              227b 0030  ld   $30         ;030c 'i'
              227c 002b  ld   $2b         ;030e STW
              227d 0030  ld   $30         ;030e 'i'
              227e 0059  ld   $59         ;0310 LDI
              227f 0000  ld   $00
              2280 00f0  ld   $f0         ;0312 POKE
              2281 0040  ld   $40         ;0312 'p'
              2282 0093  ld   $93         ;0314 INC
              2283 0040  ld   $40         ;0314 'p'
              2284 0059  ld   $59         ;0316 LDI
              2285 0003  ld   $03
              2286 00f0  ld   $f0         ;0318 POKE
              2287 0040  ld   $40         ;0318 'p'
              2288 0093  ld   $93         ;031a INC
              2289 0040  ld   $40         ;031a 'p'
              228a 0011  ld   $11         ;031c LDWI
              228b 0000  ld   $00
              228c 0009  ld   $09
              228d 0099  ld   $99         ;031f ADDW
              228e 0030  ld   $30         ;031f 'i'
              228f 007f  ld   $7f         ;0321 LUP
              2290 0000  ld   $00
              2291 00f0  ld   $f0         ;0323 POKE
              2292 0040  ld   $40         ;0323 'p'
              2293 0093  ld   $93         ;0325 INC
              2294 0040  ld   $40         ;0325 'p'
              2295 0011  ld   $11         ;0327 LDWI
              2296 0000  ld   $00
              2297 0009  ld   $09
              2298 0099  ld   $99         ;032a ADDW
              2299 0030  ld   $30         ;032a 'i'
              229a 007f  ld   $7f         ;032c LUP
              229b 0001  ld   $01
              229c 00f0  ld   $f0         ;032e POKE
              229d 0040  ld   $40         ;032e 'p'
              229e 0093  ld   $93         ;0330 INC
              229f 0040  ld   $40         ;0330 'p'
              22a0 00f0  ld   $f0         ;0332 POKE
              22a1 0040  ld   $40         ;0332 'p'
              22a2 0093  ld   $93         ;0334 INC
              22a3 0040  ld   $40         ;0334 'p'
              22a4 00f0  ld   $f0         ;0336 POKE
              22a5 0040  ld   $40         ;0336 'p'
              22a6 00ff  ld   $ff         ;0338 RET
              22a7 002b  ld   $2b         ;0339 STW
              22a8 0042  ld   $42         ;0339 'SetupChannel'
              22a9 0093  ld   $93         ;033b INC
              22aa 001b  ld   $1b
              22ab 00ff  ld   $ff         ;033d RET
              22ac 0004  ld   $04         ;| RAM segment address (high byte first)
              22ad 0000  ld   $00         ;|
              22ae 00cd  ld   $cd         ;| Length (1..256)
              22af 0011  ld   $11         ;0400 LDWI
              22b0 000f  ld   $0f
              22b1 000b  ld   $0b
              22b2 002b  ld   $2b         ;0403 STW
              22b3 0022  ld   $22
              22b4 0059  ld   $59         ;0405 LDI
              22b5 0000  ld   $00
              22b6 00b4  ld   $b4         ;0407 SYS
              22b7 00f5  ld   $f5
              22b8 0011  ld   $11         ;0409 LDWI
              22b9 0012  ld   $12
              22ba 000b  ld   $0b
              22bb 002b  ld   $2b         ;040c STW
              22bc 0022  ld   $22
              22bd 0059  ld   $59         ;040e LDI
              22be 0000  ld   $00
              22bf 00b4  ld   $b4         ;0410 SYS
              22c0 00f7  ld   $f7
              22c1 00b4  ld   $b4         ;0412 SYS
              22c2 00f7  ld   $f7
              22c3 00b4  ld   $b4         ;0414 SYS
              22c4 00f7  ld   $f7
              22c5 00b4  ld   $b4         ;0416 SYS
              22c6 00f7  ld   $f7
              22c7 0011  ld   $11         ;0418 LDWI
              22c8 0058  ld   $58
              22c9 0001  ld   $01
              22ca 00cf  ld   $cf         ;041b CALL
              22cb 0042  ld   $42         ;041b 'SetupChannel'
              22cc 0011  ld   $11         ;041d LDWI
              22cd 0070  ld   $70
              22ce 0002  ld   $02
              22cf 00cf  ld   $cf         ;0420 CALL
              22d0 0042  ld   $42         ;0420 'SetupChannel'
              22d1 0011  ld   $11         ;0422 LDWI
              22d2 0078  ld   $78
              22d3 0003  ld   $03
              22d4 00cf  ld   $cf         ;0425 CALL
              22d5 0042  ld   $42         ;0425 'SetupChannel'
              22d6 0011  ld   $11         ;0427 LDWI
              22d7 007e  ld   $7e
              22d8 0004  ld   $04
              22d9 00cf  ld   $cf         ;042a CALL
              22da 0042  ld   $42         ;042a 'SetupChannel'
              22db 0011  ld   $11         ;042c LDWI
              22dc 0000  ld   $00
              22dd 0001  ld   $01
              22de 002b  ld   $2b         ;042f STW
              22df 0040  ld   $40         ;042f 'p'
              22e0 0011  ld   $11         ;0431 LDWI
              22e1 0000  ld   $00
              22e2 0008  ld   $08
              22e3 002b  ld   $2b         ;0434 STW
              22e4 0044  ld   $44         ;0434 'q'
              22e5 001a  ld   $1a         ;0436 LD
              22e6 0045  ld   $45         ;0436 'q'+1
              22e7 00f0  ld   $f0         ;0438 POKE
              22e8 0040  ld   $40         ;0438 'p'
              22e9 0093  ld   $93         ;043a INC
              22ea 0040  ld   $40         ;043a 'p'
              22eb 0059  ld   $59         ;043c LDI
              22ec 0000  ld   $00
              22ed 00f0  ld   $f0         ;043e POKE
              22ee 0040  ld   $40         ;043e 'p'
              22ef 0093  ld   $93         ;0440 INC
              22f0 0040  ld   $40         ;0440 'p'
              22f1 0093  ld   $93         ;0442 INC
              22f2 0045  ld   $45         ;0442 'q'+1
              22f3 0021  ld   $21         ;0444 LDW
              22f4 0044  ld   $44         ;0444 'q'
              22f5 0035  ld   $35         ;0446 BCC
              22f6 004d  ld   $4d         ;0447 GT
              22f7 0034  ld   $34
              22f8 0011  ld   $11         ;0449 LDWI
              22f9 0003  ld   $03
              22fa 000b  ld   $0b
              22fb fe00  bra  ac          ;+-----------------------------------+
              22fc fcfd  bra  $22fd       ;|                                   |
              22fd 1404  ld   $04,y       ;| Trampoline for page $2200 lookups |
              22fe e068  jmp  y,$68       ;|                                   |
              22ff c218  st   [$18]       ;+-----------------------------------+
              2300 002b  ld   $2b         ;044c STW
              2301 0022  ld   $22         ;044c '_sysFn'
              2302 0059  ld   $59         ;044e LDI
              2303 0020  ld   $20
              2304 005e  ld   $5e         ;0450 ST
              2305 0025  ld   $25
              2306 0011  ld   $11         ;0452 LDWI
              2307 0000  ld   $00
              2308 0008  ld   $08
              2309 002b  ld   $2b         ;0455 STW
              230a 0040  ld   $40         ;0455 'p'
              230b 002b  ld   $2b         ;0457 STW
              230c 0026  ld   $26         ;0457 '_sysArgs2'
              230d 0059  ld   $59         ;0459 LDI
              230e 00a0  ld   $a0
              230f 005e  ld   $5e         ;045b ST
              2310 0024  ld   $24
              2311 00b4  ld   $b4         ;045d SYS
              2312 00f3  ld   $f3
              2313 0011  ld   $11         ;045f LDWI
              2314 0000  ld   $00
              2315 0001  ld   $01
              2316 0099  ld   $99         ;0462 ADDW
              2317 0040  ld   $40         ;0462 'p'
              2318 0035  ld   $35         ;0464 BCC
              2319 004d  ld   $4d         ;0465 GT
              231a 0053  ld   $53
              231b 001a  ld   $1a         ;0467 LD
              231c 002e  ld   $2e
              231d 0082  ld   $82         ;0469 ANDI
              231e 0080  ld   $80
              231f 0035  ld   $35         ;046b BCC
              2320 0072  ld   $72         ;046c NE
              2321 0070  ld   $70
              2322 005e  ld   $5e         ;046e ST
              2323 002e  ld   $2e
              2324 005e  ld   $5e         ;0470 ST
              2325 002d  ld   $2d
              2326 0059  ld   $59         ;0472 LDI
              2327 0009  ld   $09
              2328 005e  ld   $5e         ;0474 ST
              2329 002f  ld   $2f
              232a 0011  ld   $11         ;0476 LDWI
              232b 0014  ld   $14
              232c 0008  ld   $08
              232d 002b  ld   $2b         ;0479 STW
              232e 003a  ld   $3a         ;0479 'Pos'
              232f 00cd  ld   $cd         ;047b DEF
              2330 0089  ld   $89
              2331 002a  ld   $2a         ;047d '*'
              2332 002a  ld   $2a         ;047e '*'
              2333 002a  ld   $2a         ;047f '*'
              2334 0020  ld   $20         ;0480 ' '
              2335 0047  ld   $47         ;0481 'G'
              2336 0069  ld   $69         ;0482 'i'
              2337 0067  ld   $67         ;0483 'g'
              2338 0061  ld   $61         ;0484 'a'
              2339 0074  ld   $74         ;0485 't'
              233a 0072  ld   $72         ;0486 'r'
              233b 006f  ld   $6f         ;0487 'o'
              233c 006e  ld   $6e         ;0488 'n'
              233d 0020  ld   $20         ;0489 ' '
              233e 0000  ld   $00         ;048a 0
              233f 00cf  ld   $cf         ;048b CALL
              2340 003c  ld   $3c         ;048b 'PrintS'
              2341 00cf  ld   $cf         ;048d CALL
              2342 0036  ld   $36         ;048d 'CheckMemory'
              2343 00cd  ld   $cd         ;048f DEF
              2344 00b0  ld   $b0
              2345 004b  ld   $4b         ;0491 'K'
              2346 0020  ld   $20         ;0492 ' '
              2347 002a  ld   $2a         ;0493 '*'
              2348 002a  ld   $2a         ;0494 '*'
              2349 002a  ld   $2a         ;0495 '*'
              234a 0020  ld   $20         ;0496 ' '
              234b 000a  ld   $0a         ;0497 10
              234c 0020  ld   $20         ;0498 ' '
              234d 0054  ld   $54         ;0499 'T'
              234e 0054  ld   $54         ;049a 'T'
              234f 004c  ld   $4c         ;049b 'L'
              2350 0020  ld   $20         ;049c ' '
              2351 006d  ld   $6d         ;049d 'm'
              2352 0069  ld   $69         ;049e 'i'
              2353 0063  ld   $63         ;049f 'c'
              2354 0072  ld   $72         ;04a0 'r'
              2355 006f  ld   $6f         ;04a1 'o'
              2356 0063  ld   $63         ;04a2 'c'
              2357 006f  ld   $6f         ;04a3 'o'
              2358 006d  ld   $6d         ;04a4 'm'
              2359 0070  ld   $70         ;04a5 'p'
              235a 0075  ld   $75         ;04a6 'u'
              235b 0074  ld   $74         ;04a7 't'
              235c 0065  ld   $65         ;04a8 'e'
              235d 0072  ld   $72         ;04a9 'r'
              235e 0020  ld   $20         ;04aa ' '
              235f 0053  ld   $53         ;04ab 'S'
              2360 0044  ld   $44         ;04ac 'D'
              2361 0043  ld   $43         ;04ad 'C'
              2362 0061  ld   $61         ;04ae 'a'
              2363 0072  ld   $72         ;04af 'r'
              2364 0064  ld   $64         ;04b0 'd'
              2365 0000  ld   $00         ;04b1 0
              2366 00cf  ld   $cf         ;04b2 CALL
              2367 003c  ld   $3c         ;04b2 'PrintS'
              2368 0011  ld   $11         ;04b4 LDWI
              2369 0000  ld   $00
              236a 000b  ld   $0b
              236b 002b  ld   $2b         ;04b7 STW
              236c 0022  ld   $22         ;04b7 '_sysFn'
              236d 0059  ld   $59         ;04b9 LDI
              236e 0001  ld   $01
              236f 00b4  ld   $b4         ;04bb SYS
              2370 00e6  ld   $e6
              2371 0011  ld   $11         ;04bd LDWI
              2372 0099  ld   $99
              2373 0014  ld   $14
              2374 002b  ld   $2b         ;04c0 STW
              2375 0024  ld   $24         ;04c0 '_sysArgs0'
              2376 0011  ld   $11         ;04c2 LDWI
              2377 0000  ld   $00
              2378 0002  ld   $02
              2379 002b  ld   $2b         ;04c5 STW
              237a 001a  ld   $1a         ;04c5 '_vLR'
              237b 0059  ld   $59         ;04c7 LDI
              237c 00ad  ld   $ad
              237d 002b  ld   $2b         ;04c9 STW
              237e 0022  ld   $22         ;04c9 '_sysFn'
              237f 00b4  ld   $b4         ;04cb SYS
              2380 00e2  ld   $e2
              2381 0000  ld   $00         ;End of Core/Reset_SDCARD_bmwtcu.gcl, size 457
sys_ReadRomDir:
              2382 f088  beq  .sysDir#20
              2383 1024  ld   $24,x
              2384 1600  ld   ac,y
              2385 0118  ld   [$18]
              2386 a00e  suba $0e
              2387 e200  jmp  y,ac
.sysDir#20:   2388 1400  ld   $00,y
              2389 008d  ld   $8d
              238a 1423  ld   $23,y
              238b e200  jmp  y,ac
              238c 1400  ld   $00,y
.sysDir#25:   238d dc52  st   $52,[y,x++] ;'R'
              238e dc65  st   $65,[y,x++] ;'e'
              238f dc73  st   $73,[y,x++] ;'s'
              2390 dc65  st   $65,[y,x++] ;'e'
              2391 dc74  st   $74,[y,x++] ;'t'
              2392 dc00  st   $00,[y,x++] ;'\x00'
              2393 dc00  st   $00,[y,x++] ;'\x00'
              2394 dc00  st   $00,[y,x++] ;'\x00'
              2395 00b9  ld   $b9
              2396 c218  st   [$18]
              2397 0021  ld   $21
              2398 1423  ld   $23,y
              2399 e09b  jmp  y,$9b
              239a c219  st   [$19]
.sysDir#39:   239b 1403  ld   $03,y
              239c e0cb  jmp  y,$cb
              239d 00ea  ld   $ea
              239e 0200  nop              ;93 fillers
              239f 0200  nop
              23a0 0200  nop
              * 93 times
              23fb fe00  bra  ac          ;+-----------------------------------+
              23fc fcfd  bra  $23fd       ;|                                   |
              23fd 1404  ld   $04,y       ;| Trampoline for page $2300 lookups |
              23fe e068  jmp  y,$68       ;|                                   |
              23ff c218  st   [$18]       ;+-----------------------------------+
              2400
